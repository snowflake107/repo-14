Search.setIndex({"alltitles": {"1. Open": [[561, "open"]], "1. Python code + YAML": [[500, "python-code-yaml"]], "2. Python code only": [[500, "python-code-only"]], "2. Search": [[561, "search"]], "2018 - 2020 (4)": [[581, "id4"]], "2021 (15)": [[581, "id3"]], "2022 (35)": [[581, "id2"]], "2023 (25)": [[581, "id1"]], "3. Setting": [[561, "setting"]], "4. Icon": [[561, "icon"]], "5. optimization (quantization)": [[561, "optimization-quantization"]], "5.1 Enable": [[561, "enable"]], "5.2 Auto": [[561, "auto"]], "API Document Example": [[509, "api-document-example"]], "API List that Need to Implement": [[504, "api-list-that-need-to-implement"]], "APIs": [[510, "apis"]], "AWS Amazon SageMaker Support": [[545, "aws-amazon-sagemaker-support"]], "Accuracy Criteria": [[592, "accuracy-criteria"]], "Accuracy-driven mixed precision": [[542, "accuracy-driven-mixed-precision"]], "Activations summary": [[564, "activations-summary"]], "Adaptor": [[503, "adaptor"], [506, "adaptor"]], "Adaptor Support Matrix": [[503, "adaptor-support-matrix"]], "Add node": [[569, "add-node"]], "Add quantize API according to tune_cfg": [[504, "add-quantize-api-according-to-tune-cfg"]], "Add query_fw_capability to Adaptor": [[504, "add-query-fw-capability-to-adaptor"]], "Additional Content": [[502, "additional-content"]], "Advanced Configuration": [[567, "advanced-configuration"]], "Advanced Topics": [[593, "advanced-topics"]], "Advanced Usage (Custom NAS)": [[500, "advanced-usage-custom-nas"]], "Algorithm: Auto-tuning of $\\alpha$.": [[589, "algorithm-auto-tuning-of-alpha"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[575, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[576, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "An end-to-end example: quantize a custom model with Neural Solution": [[574, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Analyzing the Bundle Size": [[567, "analyzing-the-bundle-size"]], "Analyzing the result of quantization": [[564, "analyzing-the-result-of-quantization"], [566, "analyzing-the-result-of-quantization"]], "Analyzing weight histograms": [[566, "analyzing-weight-histograms"]], "Appendix": [[531, "appendix"]], "Architecture": [[525, "architecture"], [536, "architecture"]], "Attributes": [[205, "attributes"], [247, "attributes"], [378, "attributes"]], "Attribution": [[497, "attribution"]], "Auto": [[592, "auto"]], "Auto-enable a feature": [[555, "auto-enable-a-feature"]], "Auto-tune the alpha for each layer/block": [[589, "auto-tune-the-alpha-for-each-layer-block"]], "Auto-tune the alpha for the entire model": [[589, "auto-tune-the-alpha-for-the-entire-model"]], "Automated releases with the Jupyter Releaser": [[556, "automated-releases-with-the-jupyter-releaser"], [559, "automated-releases-with-the-jupyter-releaser"]], "Available Scripts": [[567, "available-scripts"]], "Background": [[503, "background"], [522, "background"]], "Background Introduction": [[561, "background-introduction"]], "Base URL": [[570, "base-url"]], "Basic": [[592, "basic"]], "Basic NAS": [[500, "basic-nas"]], "Basic Usage": [[500, "basic-usage"]], "Bayesian": [[592, "bayesian"]], "Bench": [[548, "bench"]], "Benchmark": [[511, "benchmark"], [541, "benchmark"], [582, "benchmark"]], "Benchmark Support Matrix": [[520, "benchmark-support-matrix"]], "Benchmark diagnosis": [[526, "benchmark-diagnosis"]], "Benchmarking": [[520, "benchmarking"]], "Benefit of SigOpt Strategy": [[588, "benefit-of-sigopt-strategy"]], "BigDL Nano Support": [[546, "bigdl-nano-support"]], "Build Custom Dataloader with Python API": [[523, "build-custom-dataloader-with-python-api"]], "Build Custom Metric with Python API": [[540, "build-custom-metric-with-python-api"]], "Built-in transform/dataset/metric APIs": [[535, "built-in-transform-dataset-metric-apis"]], "Calculate the data range and generate quantized model": [[504, "calculate-the-data-range-and-generate-quantized-model"]], "Calibration Algorithms": [[521, "calibration-algorithms"]], "Calibration Algorithms in Quantization": [[521, "calibration-algorithms-in-quantization"]], "Capability": [[503, "capability"]], "Change Log": [[560, "change-log"]], "Changelog": [[553, "changelog"], [557, "changelog"]], "Citation": [[538, "citation"]], "Class definition diagram": [[571, "class-definition-diagram"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [99, "classes"], [101, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [136, "classes"], [137, "classes"], [141, "classes"], [144, "classes"], [145, "classes"], [148, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [158, "classes"], [162, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [188, "classes"], [189, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [215, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [237, "classes"], [238, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [257, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [266, "classes"], [268, "classes"], [271, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [281, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [298, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [324, "classes"], [328, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [440, "classes"], [442, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [470, "classes"], [471, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [493, "classes"], [494, "classes"]], "Client": [[577, "client"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[541, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Code Splitting": [[567, "code-splitting"]], "Comments": [[522, "comments"]], "Common Build Issues": [[532, "common-build-issues"]], "Common Problem": [[499, "common-problem"]], "Communication": [[502, "communication"]], "Compression": [[512, "compression"]], "Config": [[513, "config"]], "Config Multiple Objectives": [[578, "config-multiple-objectives"]], "Config Single Objective": [[578, "config-single-objective"]], "Config dataloader in a yaml file": [[524, "config-dataloader-in-a-yaml-file"]], "Conservative Tuning": [[592, "conservative-tuning"]], "Contact": [[544, "contact"], [568, "contact"]], "Contents": [[571, "contents"]], "Contributing": [[554, "contributing"], [558, "contributing"]], "Contribution Guidelines": [[498, "contribution-guidelines"]], "Contributor Covenant Code of Conduct": [[497, "contributor-covenant-code-of-conduct"], [498, "contributor-covenant-code-of-conduct"]], "Create Pull Request": [[498, "create-pull-request"]], "Customize a New Tuning Strategy": [[592, "customize-a-new-tuning-strategy"]], "DataLoader": [[523, "dataloader"]], "Dataset": [[524, "dataset"]], "Define the Quantization Ability of the Specific Operator": [[505, "define-the-quantization-ability-of-the-specific-operator"]], "Deployment": [[567, "deployment"]], "Description": [[570, "description"], [570, "id1"], [570, "id4"], [570, "id8"], [570, "id12"], [570, "id15"], [570, "id18"], [570, "id21"], [570, "id24"]], "Design": [[525, "design"], [592, "design"], [592, "id1"], [592, "id3"], [592, "id5"], [592, "id7"], [592, "id9"], [592, "id11"], [592, "id13"], [592, "id15"], [592, "id17"], [592, "id19"], [592, "id21"]], "Design Doc for Optimization as a Service [WIP]": [[571, "design-doc-for-optimization-as-a-service-wip"]], "Design the framework YAML": [[504, "design-the-framework-yaml"]], "Details": [[499, "details"]], "Determining the alpha through auto-tuning": [[589, "determining-the-alpha-through-auto-tuning"]], "Development install": [[554, "development-install"], [558, "development-install"]], "Development uninstall": [[554, "development-uninstall"], [558, "development-uninstall"]], "Diagnosis": [[526, "diagnosis"]], "Diagnosis Introduction": [[526, "diagnosis-introduction"]], "Diagnosis suggestions": [[526, "diagnosis-suggestions"]], "Distillation": [[527, "distillation"], [541, "distillation"], [582, "distillation"]], "Distillation Support Matrix": [[527, "distillation-support-matrix"]], "Distillation for Quantization": [[528, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[528, "distillation-for-quantization-support-matrix"]], "Distributed Training and Inference (Evaluation)": [[529, "distributed-training-and-inference-evaluation"]], "Distributed Tuning": [[592, "distributed-tuning"]], "Documentation": [[502, "documentation"]], "Download optimized model": [[574, "download-optimized-model"], [575, "download-optimized-model"]], "During quantization mixed precision": [[542, "during-quantization-mixed-precision"]], "Dynamic NAS": [[500, "dynamic-nas"]], "Dynamic Quantization": [[499, "dynamic-quantization"]], "Enable": [[548, "enable"]], "End-to-end examples": [[568, "end-to-end-examples"]], "Endpoints": [[570, "endpoints"]], "Enforcement": [[497, "enforcement"]], "Engineering": [[589, "engineering"]], "Environment Variables": [[547, "environment-variables"]], "Example": [[526, "example"], [540, "example"], [546, "example"], [550, "example"], [578, "example"]], "Example List": [[530, "example-list"]], "Example of Adding a New Backend Support": [[503, "example-of-adding-a-new-backend-support"]], "Examples": [[499, "examples"], [500, "examples"], [520, "examples"], [523, "examples"], [524, "examples"], [527, "examples"], [528, "examples"], [529, "examples"], [530, "examples"], [531, "examples"], [541, "examples"], [542, "examples"], [543, "examples"], [579, "examples"], [580, "examples"], [583, "examples"], [584, "examples"], [586, "examples"], [590, "examples"]], "Examples List": [[573, "examples-list"]], "Exceptions": [[140, "exceptions"], [478, "exceptions"]], "Exhaustive": [[592, "exhaustive"]], "Exit Policy": [[592, "exit-policy"]], "Explore the API": [[562, "explore-the-api"]], "Export": [[531, "export"]], "Export Compressed Model": [[586, "export-compressed-model"]], "Extensibility": [[571, "extensibility"]], "FP32 Model Export": [[531, "fp32-model-export"], [531, "id1"]], "FX": [[499, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[499, "fx-mode-support-matrix-in-neural-compressor"]], "Fallback setting example": [[526, "fallback-setting-example"]], "Features Supported": [[550, "features-supported"]], "Folder structure": [[522, "folder-structure"]], "For SageMaker Notebook instance": [[545, "for-sagemaker-notebook-instance"]], "For SageMaker Studio": [[545, "for-sagemaker-studio"]], "Framework YAML Configuration Files": [[533, "framework-yaml-configuration-files"]], "Frequency Governers": [[547, "frequency-governers"]], "Frequently Asked Questions": [[532, "frequently-asked-questions"]], "Full Publications/Events (79)": [[581, "full-publications-events-79"]], "Functions": [[2, "functions"], [4, "functions"], [22, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [53, "functions"], [54, "functions"], [56, "functions"], [90, "functions"], [91, "functions"], [102, "functions"], [104, "functions"], [134, "functions"], [136, "functions"], [137, "functions"], [142, "functions"], [143, "functions"], [146, "functions"], [147, "functions"], [148, "functions"], [153, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [173, "functions"], [176, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [187, "functions"], [195, "functions"], [196, "functions"], [203, "functions"], [205, "functions"], [212, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [221, "functions"], [225, "functions"], [226, "functions"], [228, "functions"], [237, "functions"], [245, "functions"], [247, "functions"], [254, "functions"], [259, "functions"], [260, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [268, "functions"], [269, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [275, "functions"], [282, "functions"], [289, "functions"], [293, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [302, "functions"], [307, "functions"], [313, "functions"], [317, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [328, "functions"], [329, "functions"], [333, "functions"], [337, "functions"], [339, "functions"], [354, "functions"], [358, "functions"], [359, "functions"], [363, "functions"], [371, "functions"], [375, "functions"], [377, "functions"], [378, "functions"], [401, "functions"], [402, "functions"], [404, "functions"], [443, "functions"], [445, "functions"], [472, "functions"], [474, "functions"], [477, "functions"], [479, "functions"], [482, "functions"], [485, "functions"], [488, "functions"], [489, "functions"], [490, "functions"], [492, "functions"], [493, "functions"]], "GET /": [[570, "get"]], "GET /cluster": [[570, "get-cluster"]], "GET /description": [[570, "get-description"]], "GET /download/{task_id}": [[570, "get-download-task-id"]], "GET /ping": [[570, "get-ping"]], "GET /task/log/{task_id}": [[570, "get-task-log-task-id"]], "GET /task/status/{task_id}": [[570, "get-task-status-task-id"]], "Get Started": [[499, "get-started"], [526, "get-started"], [568, "get-started"], [583, "get-started"]], "Get Started with Adaptor API": [[503, "get-started-with-adaptor-api"]], "Get Started with Benchmark API": [[520, "get-started-with-benchmark-api"]], "Get Started with DataLoader": [[523, "get-started-with-dataloader"]], "Get Started with Distillation API": [[527, "get-started-with-distillation-api"]], "Get Started with Distillation for Quantization API": [[528, "get-started-with-distillation-for-quantization-api"]], "Get Started with Distributed Training and Inference API": [[529, "get-started-with-distributed-training-and-inference-api"]], "Get Started with Metric": [[540, "get-started-with-metric"]], "Get Started with Mixed Precision API": [[542, "get-started-with-mixed-precision-api"]], "Get Started with NAS API": [[500, "get-started-with-nas-api"]], "Get Started with Objective API": [[578, "get-started-with-objective-api"]], "Get Started with Orchestration API": [[579, "get-started-with-orchestration-api"]], "Get Started with Pruning API": [[580, "get-started-with-pruning-api"]], "Get Started with Pythonic API for Configurations": [[582, "get-started-with-pythonic-api-for-configurations"]], "Get Started with TensorBoard": [[590, "get-started-with-tensorboard"]], "Get start with Dataset API": [[524, "get-start-with-dataset-api"]], "Get started": [[569, "get-started"]], "Get started with Framework YAML Files": [[533, "get-started-with-framework-yaml-files"]], "Get started with User YAML Files": [[594, "get-started-with-user-yaml-files"]], "Get up and running straight away": [[562, "get-up-and-running-straight-away"]], "Getting Started": [[502, "getting-started"], [534, "getting-started"], [563, "getting-started"]], "Getting Started with Create React App": [[567, "getting-started-with-create-react-app"]], "Getting Started!": [[544, "getting-started"], [555, "getting-started"]], "Go further": [[562, "go-further"]], "HAWQ_V2": [[592, "hawq-v2"]], "Hardware and Software requests for BF16": [[542, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[542, "hardware-and-software-requests-for-fp16"]], "Highlights": [[552, "highlights"]], "Horovodrun Execution": [[529, "horovodrun-execution"]], "How does Neural Solution Work?": [[568, "how-does-neural-solution-work"]], "How to Add An Adaptor": [[504, "how-to-add-an-adaptor"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[505, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "How to do diagnosis": [[526, "how-to-do-diagnosis"]], "INC Coding Conventions": [[522, "inc-coding-conventions"]], "INT8 Model Export": [[531, "int8-model-export"], [531, "id2"]], "IPEX key models": [[539, "ipex-key-models"]], "Implement ONNXRTAdaptor Class": [[503, "implement-onnxrtadaptor-class"]], "Imports": [[522, "imports"]], "Incompatible Changes": [[587, "incompatible-changes"]], "Incompatible changes between v1.2 and v1.1": [[535, "incompatible-changes-between-v1-2-and-v1-1"]], "Infrastructure of Intel\u00ae Neural Compressor": [[536, "infrastructure-of-intel-neural-compressor"]], "Innovations for Productivity": [[593, "innovations-for-productivity"]], "Inspect logs": [[569, "inspect-logs"]], "Install": [[554, "install"]], "Install Intel\u00ae Neural Compressor": [[526, "install-intel-neural-compressor"]], "Install MKL, OpenMP and JEMALLOC": [[547, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[547, "install-numa-controller"]], "Install Neural Solution": [[569, "install-neural-solution"]], "Install from AI Kit": [[537, "install-from-ai-kit"]], "Install from Binary": [[537, "install-from-binary"]], "Install from Source": [[537, "install-from-source"], [563, "install-from-source"]], "Install from pypi": [[502, "install-from-pypi"], [563, "install-from-pypi"]], "Installation": [[502, "installation"], [537, "installation"], [537, "id1"], [555, "installation"], [563, "installation"], [568, "installation"]], "Installation Guide": [[545, "installation-guide"]], "Intel CPU Platforms: Best Performance Setting": [[547, "intel-cpu-platforms-best-performance-setting"]], "Intel\u00ae Neural Compressor": [[502, "intel-neural-compressor"], [561, "intel-neural-compressor"]], "Intel\u00ae Neural Compressor Documentation": [[496, "intel-neural-compressor-documentation"], [596, "intel-neural-compressor-documentation"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[555, "intel-neural-compressor-as-jupyterlab-extension"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[537, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[537, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[537, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intermediate Layer Knowledge Distillation": [[527, "intermediate-layer-knowledge-distillation"]], "Introduction": [[499, "introduction"], [500, "introduction"], [503, "introduction"], [504, "introduction"], [505, "introduction"], [520, "introduction"], [521, "introduction"], [523, "introduction"], [524, "introduction"], [527, "introduction"], [528, "introduction"], [529, "introduction"], [531, "introduction"], [533, "introduction"], [536, "introduction"], [540, "introduction"], [542, "introduction"], [543, "introduction"], [564, "introduction"], [565, "introduction"], [566, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [582, "introduction"], [584, "introduction"], [586, "introduction"], [588, "introduction"], [589, "introduction"], [590, "introduction"], [591, "introduction"], [592, "introduction"], [594, "introduction"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[505, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Issue 1:": [[532, "issue-1"]], "Issue 2:": [[532, "issue-2"]], "Issue 3:": [[532, "issue-3"]], "Issue 4:": [[532, "issue-4"]], "Jupyter Lab Extension": [[544, "jupyter-lab-extension"]], "Knowledge Distillation": [[527, "knowledge-distillation"]], "Known Issues": [[587, "known-issues"]], "LLMs Quantization Recipes": [[539, "llms-quantization-recipes"]], "Large Language Model Pruning": [[580, "large-language-model-pruning"]], "Launcher Arguments (Optional)": [[549, "launcher-arguments-optional"]], "Layer Wise Quantization (LWQ)": [[584, "layer-wise-quantization-lwq"]], "Learn More": [[567, "learn-more"], [568, "learn-more"]], "Legal Information": [[538, "legal-information"]], "License": [[538, "license"]], "Logger": [[522, "logger"]], "MSE": [[592, "mse"]], "MSE_V2": [[592, "mse-v2"]], "MXNet": [[524, "mxnet"], [540, "mxnet"], [591, "mxnet"]], "Make changes": [[562, "make-changes"]], "Making a Progressive Web App": [[567, "making-a-progressive-web-app"]], "Making a new release of neural_compressor_ext_lab": [[556, "making-a-new-release-of-neural-compressor-ext-lab"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[559, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Manage resource": [[569, "manage-resource"], [574, "manage-resource"], [575, "manage-resource"]], "Manual release": [[556, "manual-release"], [559, "manual-release"]], "Matmul quantization example": [[589, "matmul-quantization-example"]], "Method 1. Using pip": [[569, "method-1-using-pip"]], "Method 1. Using pip:": [[568, "method-1-using-pip"]], "Method 2. Building from source": [[569, "method-2-building-from-source"]], "Method 2. Building from source:": [[568, "method-2-building-from-source"]], "Metrics": [[540, "metrics"]], "Mix Precision": [[514, "mix-precision"], [541, "mix-precision"]], "Mixed Precision": [[542, "mixed-precision"]], "Mixed Precision Support Matrix": [[542, "mixed-precision-support-matrix"]], "Model": [[515, "model"], [543, "model"], [564, "model"], [566, "model"]], "Model Quantization": [[541, "model-quantization"]], "Models Supported": [[550, "models-supported"]], "Modify script": [[526, "modify-script"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [162, "module-contents"], [164, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"]], "Multiple Objectives": [[578, "multiple-objectives"]], "NAS": [[582, "nas"]], "NAS Support Matrix": [[500, "nas-support-matrix"]], "NPM package": [[556, "npm-package"], [559, "npm-package"]], "Neural Architecture Search": [[500, "neural-architecture-search"]], "Neural Coder": [[544, "neural-coder"], [561, "neural-coder"], [561, "id1"]], "Neural Coder (Zero-code Optimization)": [[593, "neural-coder-zero-code-optimization"]], "Neural Coder Extension Usage": [[561, "neural-coder-extension-usage"]], "Neural Coder Extension in VSCode": [[561, "neural-coder-extension-in-vscode"]], "Neural Coder as Python API": [[548, "neural-coder-as-python-api"]], "Neural Coder for Quantization": [[550, "neural-coder-for-quantization"]], "Neural Compressor Configuration": [[588, "neural-compressor-configuration"]], "Neural Insights": [[563, "neural-insights"]], "Neural Network Pruning": [[580, "neural-network-pruning"]], "Neural Solution API": [[570, "neural-solution-api"]], "Node States": [[569, "node-states"]], "Note": [[499, "note"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[595, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[595, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Runtime": [[507, "onnx-runtime"]], "ONNX Runtime framework example": [[584, "onnx-runtime-framework-example"]], "ONNXRT": [[524, "onnxrt"], [540, "onnxrt"], [591, "onnxrt"]], "Objective": [[516, "objective"], [574, "objective"], [575, "objective"], [576, "objective"], [578, "objective"]], "Objective Support Matrix": [[578, "objective-support-matrix"]], "One-shot": [[579, "one-shot"]], "Open Neural Insights": [[566, "open-neural-insights"]], "Optimization Orchestration": [[579, "optimization-orchestration"]], "Option 1: Pure Yaml Configuration": [[529, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[529, "option-2-user-defined-training-function"]], "Or let us help you auto-select the best feature": [[555, "or-let-us-help-you-auto-select-the-best-feature"]], "Orchestration": [[541, "orchestration"]], "Orchestration Support Matrix": [[579, "orchestration-support-matrix"]], "Others": [[552, "others"]], "Our Pledge": [[497, "our-pledge"]], "Our Responsibilities": [[497, "our-responsibilities"]], "Our Standards": [[497, "our-standards"]], "Our enhancement:": [[589, "our-enhancement"]], "Overview": [[571, "overview"], [593, "overview"]], "POST /task/submit": [[570, "post-task-submit"]], "Package Contents": [[163, "package-contents"], [169, "package-contents"], [176, "package-contents"]], "Packaging the extension": [[554, "packaging-the-extension"], [558, "packaging-the-extension"]], "Parameter description": [[526, "parameter-description"]], "Parameters": [[570, "parameters"], [570, "id5"], [570, "id10"], [570, "id13"]], "Per-channel example": [[589, "per-channel-example"]], "Per-channel limitation": [[589, "per-channel-limitation"]], "Per-tensor & Per-channel": [[589, "per-tensor-per-channel"]], "Per-tensor example": [[589, "per-tensor-example"]], "Performance": [[588, "performance"]], "Performance Comparison of Different Strategies": [[588, "performance-comparison-of-different-strategies"]], "Post Training Dynamic Quantization": [[499, "post-training-dynamic-quantization"], [583, "post-training-dynamic-quantization"]], "Post Training Quantization": [[583, "post-training-quantization"]], "Post Training Static Quantization": [[499, "post-training-static-quantization"], [583, "post-training-static-quantization"]], "Post-training Quantization": [[541, "post-training-quantization"]], "Pre-requisites": [[555, "pre-requisites"]], "Preparation": [[564, "preparation"], [565, "preparation"], [566, "preparation"], [588, "preparation"]], "Prepare calibration model from fp32 graph": [[504, "prepare-calibration-model-from-fp32-graph"]], "Prepare dataset": [[526, "prepare-dataset"]], "Prepare the dataset": [[566, "prepare-the-dataset"]], "Prerequisites": [[537, "prerequisites"], [568, "prerequisites"], [569, "prerequisites"]], "Pruning": [[541, "pruning"], [580, "pruning"], [582, "pruning"]], "Pruning Criteria": [[580, "pruning-criteria"]], "Pruning Patterns": [[580, "pruning-patterns"]], "Pruning Schedules": [[580, "pruning-schedules"]], "Pruning Scope": [[580, "pruning-scope"]], "Pruning Support Matrix": [[580, "pruning-support-matrix"]], "Pruning Types": [[580, "pruning-types"]], "Pruning with Hyperparameter Optimization": [[580, "pruning-with-hyperparameter-optimization"]], "Public and Internal Interfaces": [[522, "public-and-internal-interfaces"]], "Publishing to conda-forge": [[556, "publishing-to-conda-forge"], [559, "publishing-to-conda-forge"]], "Pull Request Acceptance Criteria": [[498, "pull-request-acceptance-criteria"]], "Pull Request Checklist": [[498, "pull-request-checklist"]], "Pull Request Status Checks Overview": [[498, "pull-request-status-checks-overview"]], "Pull Request Template": [[498, "pull-request-template"]], "PyPI distribution:": [[550, "pypi-distribution"]], "PyTorch": [[524, "pytorch"], [540, "pytorch"], [585, "pytorch"]], "PyTorch Examples": [[590, "pytorch-examples"]], "PyTorch Examples:": [[529, "pytorch-examples"]], "PyTorch Model": [[531, "pytorch-model"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[595, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[595, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[595, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[595, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "PyTorch TensorBoard": [[590, "pytorch-tensorboard"]], "PyTorch framework example": [[584, "pytorch-framework-example"]], "Python API": [[544, "python-api"]], "Python Launcher": [[544, "python-launcher"], [549, "python-launcher"]], "Python package": [[556, "python-package"], [559, "python-package"]], "Python-based APIs": [[593, "python-based-apis"]], "Pythonic API for Framework Configurations": [[582, "pythonic-api-for-framework-configurations"], [582, "id2"]], "Pythonic API for User Configurations": [[582, "pythonic-api-for-user-configurations"], [582, "id1"]], "Pythonic Style Access for Configurations": [[582, "pythonic-style-access-for-configurations"]], "Pytorch": [[591, "pytorch"]], "Quantization": [[517, "quantization"], [582, "quantization"], [583, "quantization"]], "Quantization Approaches": [[583, "quantization-approaches"]], "Quantization Aware Training": [[541, "quantization-aware-training"], [583, "quantization-aware-training"], [583, "id1"]], "Quantization Capability": [[586, "quantization-capability"]], "Quantization Fundamentals": [[583, "quantization-fundamentals"], [589, "quantization-fundamentals"]], "Quantization Introduction": [[583, "quantization-introduction"]], "Quantization Scheme in IPEX": [[583, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[583, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[583, "quantization-scheme-in-onnx-runtime"]], "Quantization Scheme in PyTorch": [[583, "quantization-scheme-in-pytorch"]], "Quantization Scheme in TensorFlow": [[583, "quantization-scheme-in-tensorflow"]], "Quantization Support Matrix": [[583, "quantization-support-matrix"]], "Quantization diagnosis": [[526, "quantization-diagnosis"]], "Quantization with Python API": [[534, "quantization-with-python-api"], [563, "quantization-with-python-api"]], "Quantization-Aware Training": [[499, "quantization-aware-training"]], "Query API": [[503, "query-api"]], "Query API Introduction": [[503, "query-api-introduction"]], "Query cluster": [[569, "query-cluster"]], "Query optimization result": [[574, "query-optimization-result"], [575, "query-optimization-result"], [576, "query-optimization-result"]], "Query task status": [[569, "query-task-status"]], "Quick Samples": [[534, "quick-samples"]], "Quick-Start": [[549, "quick-start"]], "Random": [[592, "random"]], "Recommend VS Code settings.json": [[522, "recommend-vs-code-settings-json"]], "Reference": [[521, "reference"], [522, "reference"], [580, "reference"], [583, "reference"], [586, "reference"], [589, "reference"]], "Regularization": [[580, "regularization"]], "Release": [[587, "release"]], "Release Data": [[530, "release-data"]], "Release Notes": [[587, "release-notes"]], "Remove node": [[569, "remove-node"]], "Report a Vulnerability": [[501, "report-a-vulnerability"]], "Requirements": [[554, "requirements"], [558, "requirements"], [564, "requirements"], [565, "requirements"], [566, "requirements"], [574, "requirements"]], "Research Collaborations": [[563, "research-collaborations"]], "Responses": [[570, "responses"], [570, "id3"], [570, "id7"], [570, "id11"], [570, "id14"], [570, "id17"], [570, "id20"], [570, "id23"], [570, "id26"]], "Retrain-free Pruning API": [[580, "retrain-free-pruning-api"]], "Rules": [[522, "rules"]], "Run benchmark script": [[526, "run-benchmark-script"]], "Run quantization script": [[526, "run-quantization-script"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[504, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Run tests": [[562, "run-tests"]], "Running the quantization": [[564, "running-the-quantization"], [565, "running-the-quantization"], [566, "running-the-quantization"]], "Scope": [[497, "scope"]], "Sections": [[496, "sections"], [596, "sections"]], "Security": [[529, "security"]], "Security Policy": [[501, "security-policy"]], "See profiling data": [[526, "see-profiling-data"]], "See quantization data": [[526, "see-quantization-data"]], "Selected Publications/Events": [[502, "selected-publications-events"]], "Self Distillation": [[527, "self-distillation"]], "Setup": [[562, "setup"]], "SigOpt": [[592, "sigopt"]], "SigOpt Platform": [[588, "sigopt-platform"]], "SigOpt Strategy": [[588, "sigopt-strategy"]], "Single Objective": [[578, "single-objective"]], "Smooth Quant": [[589, "smooth-quant"]], "SmoothQuant": [[589, "smoothquant"]], "SmoothQuant and Our Enhancement": [[589, "smoothquant-and-our-enhancement"]], "Source": [[565, "source"], [566, "source"]], "Sparse Model Deployment": [[580, "sparse-model-deployment"]], "Sparsity Decay Types": [[580, "sparsity-decay-types"]], "Specify Quantization Backend and Device": [[583, "specify-quantization-backend-and-device"]], "Specify Quantization Recipes": [[583, "specify-quantization-recipes"]], "Specify Quantization Rules": [[583, "specify-quantization-rules"]], "Start Jupyter Lab 3": [[545, "start-jupyter-lab-3"]], "Start service": [[569, "start-service"]], "Start the Neural Insights": [[563, "start-the-neural-insights"]], "Start the Neural Solution Service": [[574, "start-the-neural-solution-service"], [575, "start-the-neural-solution-service"], [576, "start-the-neural-solution-service"]], "Static Quantization & Quantization Aware Training": [[499, "static-quantization-quantization-aware-training"]], "Static Quantization (Non-LLMs)": [[502, "static-quantization-non-llms"]], "Step by Step Diagnosis Example": [[563, "step-by-step-diagnosis-example"]], "Step by step example how to debug accuracy with Neural Insights": [[564, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [566, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[565, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Step-by-Step guidelines": [[498, "step-by-step-guidelines"]], "Stop service": [[569, "stop-service"]], "Stop the service": [[574, "stop-the-service"], [575, "stop-the-service"], [576, "stop-the-service"]], "Strategy": [[518, "strategy"]], "Strategy Design": [[592, "strategy-design"]], "Strings": [[522, "strings"]], "Submit optimization task": [[574, "submit-optimization-task"], [575, "submit-optimization-task"], [576, "submit-optimization-task"]], "Submit task": [[569, "submit-task"]], "Submodules": [[1, "submodules"], [5, "submodules"], [17, "submodules"], [38, "submodules"], [62, "submodules"], [73, "submodules"], [81, "submodules"], [87, "submodules"], [92, "submodules"], [97, "submodules"], [98, "submodules"], [100, "submodules"], [103, "submodules"], [116, "submodules"], [131, "submodules"], [138, "submodules"], [139, "submodules"], [150, "submodules"], [157, "submodules"], [160, "submodules"], [163, "submodules"], [165, "submodules"], [169, "submodules"], [176, "submodules"], [186, "submodules"], [191, "submodules"], [209, "submodules"], [213, "submodules"], [216, "submodules"], [223, "submodules"], [232, "submodules"], [239, "submodules"], [251, "submodules"], [255, "submodules"], [258, "submodules"], [262, "submodules"], [267, "submodules"], [274, "submodules"], [280, "submodules"], [286, "submodules"], [292, "submodules"], [296, "submodules"], [309, "submodules"], [315, "submodules"], [320, "submodules"], [327, "submodules"], [331, "submodules"], [367, "submodules"], [373, "submodules"], [386, "submodules"], [410, "submodules"], [428, "submodules"], [434, "submodules"], [439, "submodules"], [441, "submodules"], [444, "submodules"], [457, "submodules"], [469, "submodules"], [476, "submodules"], [486, "submodules"]], "Subpackages": [[5, "subpackages"], [73, "subpackages"], [97, "subpackages"], [98, "subpackages"], [100, "subpackages"], [138, "subpackages"], [163, "subpackages"], [190, "subpackages"], [214, "subpackages"], [231, "subpackages"], [256, "subpackages"], [267, "subpackages"], [291, "subpackages"], [309, "subpackages"], [320, "subpackages"], [367, "subpackages"], [439, "subpackages"], [441, "subpackages"]], "Summary": [[505, "summary"]], "SuperBench": [[548, "superbench"]], "Support": [[498, "support"]], "Support Matrix": [[521, "support-matrix"], [546, "support-matrix"]], "Supported Built-in Metric Matrix": [[540, "supported-built-in-metric-matrix"]], "Supported Feature Matrix": [[526, "supported-feature-matrix"], [529, "supported-feature-matrix"], [533, "supported-feature-matrix"], [536, "supported-feature-matrix"], [582, "supported-feature-matrix"], [583, "supported-feature-matrix"], [590, "supported-feature-matrix"], [594, "supported-feature-matrix"]], "Supported Framework Dataloader Matrix": [[523, "supported-framework-dataloader-matrix"]], "Supported Framework Dataset Matrix": [[524, "supported-framework-dataset-matrix"]], "Supported Framework Matrix": [[589, "supported-framework-matrix"]], "Supported Framework Model Matrix": [[531, "supported-framework-model-matrix"], [543, "supported-framework-model-matrix"], [584, "supported-framework-model-matrix"], [586, "supported-framework-model-matrix"]], "Supported Optimization Features": [[551, "supported-optimization-features"]], "Supported quantized ops": [[531, "supported-quantized-ops"]], "System Requirements": [[537, "system-requirements"]], "TODO Comments": [[522, "todo-comments"]], "TPE": [[592, "tpe"]], "Task request description": [[572, "task-request-description"]], "Tensor dump examples": [[563, "tensor-dump-examples"]], "TensorBoard": [[590, "tensorboard"]], "TensorFlow": [[524, "tensorflow"], [540, "tensorflow"], [591, "tensorflow"]], "TensorFlow Examples": [[590, "tensorflow-examples"]], "TensorFlow Examples:": [[529, "tensorflow-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[595, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "TensorFlow Tensorboard": [[590, "tensorflow-tensorboard"]], "Tensorflow": [[585, "tensorflow"]], "Tensorflow Model": [[531, "tensorflow-model"]], "Torch Utils": [[508, "torch-utils"]], "Trademarks": [[538, "trademarks"]], "Training": [[519, "training"]], "Training-aware pruning API": [[580, "training-aware-pruning-api"]], "Transform": [[591, "transform"]], "Transform Support List": [[591, "transform-support-list"]], "Tuning Algorithms": [[592, "tuning-algorithms"]], "Tuning Process": [[592, "tuning-process"]], "Tuning Space": [[592, "tuning-space"]], "Tuning Strategies": [[592, "tuning-strategies"]], "Turn OFF Auto Mixed Precision during Quantization": [[585, "turn-off-auto-mixed-precision-during-quantization"]], "Type Annotations": [[522, "type-annotations"]], "Uninstall": [[554, "uninstall"]], "Usage": [[550, "usage"], [570, "usage"], [570, "id2"], [570, "id6"], [570, "id9"], [570, "id16"], [570, "id19"], [570, "id22"], [570, "id25"], [589, "usage"], [590, "usage"], [590, "id1"], [592, "usage"], [592, "id2"], [592, "id4"], [592, "id6"], [592, "id8"], [592, "id10"], [592, "id12"], [592, "id14"], [592, "id16"], [592, "id18"], [592, "id20"], [592, "id22"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[523, "use-intel-neural-compressor-dataloader-api"]], "Use Intel\u00ae Neural Compressor Metric API": [[540, "use-intel-neural-compressor-metric-api"]], "Use the New Data Type": [[505, "use-the-new-data-type"]], "User Code Example": [[586, "user-code-example"]], "User Guide": [[593, "user-guide"]], "User YAML Configuration Files": [[594, "user-yaml-configuration-files"]], "User code example": [[586, "id1"]], "User-facing APIs": [[535, "user-facing-apis"]], "User-specific dataset": [[524, "user-specific-dataset"]], "Using a fixed alpha": [[589, "using-a-fixed-alpha"]], "Validated Hardware Environment": [[537, "validated-hardware-environment"]], "Validated Knowledge Distillation Examples": [[595, "validated-knowledge-distillation-examples"]], "Validated Models": [[534, "validated-models"], [589, "validated-models"], [595, "validated-models"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[595, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]], "Validated Pruning Examples": [[595, "validated-pruning-examples"]], "Validated Quantization Examples": [[595, "validated-quantization-examples"]], "Validated Software Environment": [[537, "validated-software-environment"]], "WOQ Algorithms Tuning": [[586, "woq-algorithms-tuning"]], "WebSocket /task/screen/{task_id}": [[570, "websocket-task-screen-task-id"]], "Weight Only Quantization (WOQ)": [[586, "weight-only-quantization-woq"]], "Weight-Only Quantization (LLMs)": [[502, "weight-only-quantization-llms"]], "Weights summary": [[564, "weights-summary"]], "Welcome to your VS Code Extension": [[562, "welcome-to-your-vs-code-extension"]], "What do we offer?": [[544, "what-do-we-offer"]], "What\u2019s Neural Solution?": [[568, "what-s-neural-solution"]], "What\u2019s New": [[502, "what-s-new"]], "What\u2019s in the folder": [[562, "what-s-in-the-folder"]], "Why Neural Solution?": [[568, "why-neural-solution"]], "With or Without Accuracy Aware Tuning": [[583, "with-or-without-accuracy-aware-tuning"]], "Workflow": [[525, "workflow"]], "Workflow of OaaS": [[571, "workflow-of-oaas"]], "Working Flow": [[503, "working-flow"], [583, "working-flow"]], "[Unreleased]": [[560, "unreleased"]], "block_mask": [[0, "module-block_mask"]], "neural_compressor": [[320, "module-neural_compressor"]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils": [[138, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[135, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[143, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[144, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[145, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark"]], "neural_compressor.common.utils.logger": [[154, "module-neural_compressor.common.utils.logger"]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation.optimizers": [[158, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[159, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[160, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[161, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.pruner": [[163, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.criteria": [[162, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.model_slim": [[165, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[164, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.base": [[168, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns.mha": [[170, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[171, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[172, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners": [[176, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.base": [[173, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[174, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[175, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners.mha": [[177, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[178, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[179, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[180, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruning": [[181, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[182, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[183, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[184, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[185, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[186, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[187, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.conf.pythonic_config": [[188, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[189, "module-neural_compressor.config"]], "neural_compressor.contrib": [[190, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[191, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[192, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[193, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data": [[214, "module-neural_compressor.data"]], "neural_compressor.data.dataloaders.base_dataloader": [[194, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[195, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[196, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[197, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[198, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[199, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[200, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[201, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[202, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets": [[209, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.bert_dataset": [[203, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[204, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[205, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[206, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[207, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[208, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[210, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters": [[213, "module-neural_compressor.data.filters"]], "neural_compressor.data.filters.coco_filter": [[211, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[212, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.transforms": [[216, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.imagenet_transform": [[215, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms.postprocess": [[217, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[218, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[219, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental": [[267, "module-neural_compressor.experimental"]], "neural_compressor.experimental.benchmark": [[220, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common": [[223, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.criterion": [[221, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[222, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common.metric": [[224, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[225, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[226, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[227, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[228, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[229, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[230, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[231, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[232, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[233, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[234, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data": [[256, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.dataloaders": [[239, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[238, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[242, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[243, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets": [[251, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[245, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[246, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[247, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[249, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[250, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[252, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters": [[255, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data.filters.coco_filter": [[253, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[254, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.transforms": [[258, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[257, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms.tokenization": [[259, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[260, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[261, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[262, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[263, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[264, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[265, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[266, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental.metric": [[274, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.bleu": [[268, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[269, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[270, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[271, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[272, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[273, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric.metric": [[275, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[276, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[277, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas": [[280, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.basic_nas": [[278, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[279, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.nas": [[281, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[282, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[283, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy": [[286, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[284, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[285, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[287, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[288, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[289, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[290, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[291, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[294, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[295, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[297, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[298, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[299, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[301, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[302, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[303, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[304, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy": [[309, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[305, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[306, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[307, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[308, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy.mse": [[310, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[311, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[312, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[313, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils": [[315, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.constant": [[314, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[318, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[319, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor.metric": [[327, "module-neural_compressor.metric"]], "neural_compressor.metric.bleu": [[321, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[322, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[323, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[324, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[325, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[326, "module-neural_compressor.metric.f1"]], "neural_compressor.metric.metric": [[328, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[329, "module-neural_compressor.mix_precision"]], "neural_compressor.model": [[331, "module-neural_compressor.model"]], "neural_compressor.model.base_model": [[330, "module-neural_compressor.model.base_model"]], "neural_compressor.model.keras_model": [[332, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[333, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[334, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[335, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[336, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[337, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[338, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[339, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[341, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.utils.onnx_model": [[342, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.profiling": [[343, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[344, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[345, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[346, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[347, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[348, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[350, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[351, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[359, "module-neural_compressor.quantization"]], "neural_compressor.strategy": [[367, "module-neural_compressor.strategy"]], "neural_compressor.strategy.auto": [[360, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[361, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[362, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[363, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[364, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[365, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[366, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy.mse": [[368, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[369, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[370, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[371, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[373, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.constant": [[372, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils.tuning_sampler": [[374, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[375, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[376, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[377, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[378, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[380, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[381, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[437, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[438, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[466, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[471, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[472, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.data": [[473, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils.model_wrappers": [[474, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[475, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.torch.algorithms.layer_wise": [[476, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[477, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[478, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[479, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[480, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.training": [[482, "module-neural_compressor.training"]], "neural_compressor.utils": [[486, "module-neural_compressor.utils"]], "neural_compressor.utils.collect_layer_histogram": [[483, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[484, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[485, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.kl_divergence": [[487, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[488, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[489, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[490, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[491, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[492, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[493, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[494, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[495, "module-neural_compressor.version"]], "neural_compressor_ext_lab": [[554, "neural-compressor-ext-lab"]], "neural_compressor_ext_lab_alibaba": [[558, "neural-compressor-ext-lab-alibaba"]], "npm run build": [[567, "npm-run-build"]], "npm run build fails to minify": [[567, "npm-run-build-fails-to-minify"]], "npm run eject": [[567, "npm-run-eject"]], "npm start": [[567, "npm-start"]], "npm test": [[567, "npm-test"]], "v0.4": [[552, "v0-4"]], "}": [[147, "id3"]]}, "docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "indexentries": {"_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran", false]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[261, "neural_compressor.experimental.distillation.Distillation._epoch_ran", false]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.objective)": [[339, "neural_compressor.objective.Accuracy", false]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.AccuracyCriterion", false]], "accuracycriterion (class in neural_compressor.config)": [[189, "neural_compressor.config.AccuracyCriterion", false]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[307, "neural_compressor.experimental.strategy.bayesian.acq_max", false]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.acq_max", false]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator", false]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name", false]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.Algorithm", false]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.algorithm_registry", false]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.ALGORITHMS", false]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler", false]], "alias_param() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.alias_param", false]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.AlignImageChannelTransform", false]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform", false]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[182, "neural_compressor.compression.pruner.regs.GroupLasso.alpha", false]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.amp_convert", false]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.append_attr", false]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip", false]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale", false]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.apply_inlining", false]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining", false]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal", false]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator", false]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error", false]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator", false]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr1", false]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr2", false]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr5", false]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.attribute1", false]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg", false]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.auto_copy", false]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[305, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[361, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[360, "neural_compressor.strategy.auto.AutoTuneStrategy", false]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize", false]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks", false]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[194, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[473, "neural_compressor.tensorflow.utils.data.BaseDataLoader", false]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.BaseMetric", false]], "basemetric (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.BaseMetric", false]], "basemodel (class in neural_compressor.model.base_model)": [[330, "neural_compressor.model.base_model.BaseModel", false]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel", false]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern", false]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner", false]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[181, "neural_compressor.compression.pruner.pruning.BasePruning", false]], "basereg (class in neural_compressor.compression.pruner.regs)": [[182, "neural_compressor.compression.pruner.regs.BaseReg", false]], "basetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.BaseTransform", false]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.BaseTransform", false]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[287, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner", false]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[278, "neural_compressor.experimental.nas.basic_nas.BasicNAS", false]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[181, "neural_compressor.compression.pruner.pruning.BasicPruning", false]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.BasicTokenizer", false]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer", false]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[306, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy", false]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[362, "neural_compressor.strategy.basic.BasicTuneStrategy", false]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator", false]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[201, "neural_compressor.data.dataloaders.sampler.BatchSampler", false]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[243, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler", false]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[307, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher", false]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[307, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy", false]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.BayesianTuneStrategy", false]], "benchmark (class in neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.Benchmark", false]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.benchmark_with_raw_cmd", false]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.BenchmarkConfig", false]], "benchmarkconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.BenchmarkConfig", false]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model", false]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[261, "neural_compressor.experimental.distillation.Distillation.best_model", false]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score", false]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[261, "neural_compressor.experimental.distillation.Distillation.best_score", false]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace", false]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[36, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[384, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper", false]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection", false]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[467, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection", false]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator", false]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator", false]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[268, "neural_compressor.experimental.metric.bleu.BLEU", false]], "bleu (class in neural_compressor.metric.bleu)": [[321, "neural_compressor.metric.bleu.BLEU", false]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[268, "neural_compressor.experimental.metric.bleu.bleu_tokenize", false]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[321, "neural_compressor.metric.bleu.bleu_tokenize", false]], "block_mask": [[0, "module-block_mask", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[172, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[172, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size", false]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size", false]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler", false]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion", false]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.build_slave_faker_model", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.calculate_md5", false]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.calculate_md5", false]], "calculate_mse() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.calculate_mse", false]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max", false]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp", false]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.calib_model", false]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry", false]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector", false]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibData", false]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.calibration", false]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[340, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator", false]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase", false]], "call_one() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.call_one", false]], "callbacks (class in neural_compressor.training)": [[482, "neural_compressor.training.CallBacks", false]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.CaptureOutputToFile", false]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.cast_tensor", false]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CastONNXTransform", false]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform", false]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CastPyTorchTransform", false]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform", false]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CastTFTransform", false]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CastTFTransform", false]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CenterCropTFTransform", false]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform", false]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CenterCropTransform", false]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform", false]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig", false]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.check_config", false]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config", false]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[195, "neural_compressor.data.dataloaders.dataloader.check_dataloader", false]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.check_integrity", false]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.check_integrity", false]], "check_key_exist() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.check_key_exist", false]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.check_key_validity", false]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[263, "neural_compressor.experimental.export.qlinear2qdq.check_model", false]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version", false]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.checkpoint_session", false]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session", false]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.CIFAR10", false]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.CIFAR10", false]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.CIFAR100", false]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.CIFAR100", false]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher", false]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF", false]], "classregister (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.ClassRegister", false]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[271, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper", false]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[324, "neural_compressor.metric.coco_tools.COCOEvalWrapper", false]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.COCOmAPv2", false]], "cocomapv2 (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.COCOmAPv2", false]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[204, "neural_compressor.data.datasets.coco_dataset.COCONpy", false]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[246, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy", false]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[204, "neural_compressor.data.datasets.coco_dataset.COCORaw", false]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[246, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw", false]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[204, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset", false]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[246, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset", false]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[271, "neural_compressor.experimental.metric.coco_tools.COCOWrapper", false]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[324, "neural_compressor.metric.coco_tools.COCOWrapper", false]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.collate_preds", false]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds", false]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds", false]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds", false]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.collect_layer_inputs", false]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.collect_weight_info", false]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase", false]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CollectTransform", false]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CollectTransform", false]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities", false]], "combine_histogram() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.combine_histogram", false]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[275, "neural_compressor.experimental.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[275, "neural_compressor.experimental.metric.metric.MSE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[328, "neural_compressor.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[328, "neural_compressor.metric.metric.MSE.compare_label", false]], "compare_objects() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.compare_objects", false]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights", false]], "component (class in neural_compressor.experimental.component)": [[229, "neural_compressor.experimental.component.Component", false]], "composetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ComposeTransform", false]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ComposeTransform", false]], "compressionmanager (class in neural_compressor.training)": [[482, "neural_compressor.training.CompressionManager", false]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[269, "neural_compressor.experimental.metric.bleu_util.compute_bleu", false]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[322, "neural_compressor.metric.bleu_util.compute_bleu", false]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf", false]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.compute_sparsity", false]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator", false]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pruning.Pruning.conf", false]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[295, "neural_compressor.experimental.pruning_v2.Pruning.conf", false]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config", false]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config", false]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[183, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config", false]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config", false]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path", false]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path", false]], "config_instance() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.config_instance", false]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers", false]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[445, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers", false]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[364, "neural_compressor.strategy.conservative.ConservativeTuneStrategy", false]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def", false]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def", false]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[136, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert", false]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.convert_by_vocab", false]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab", false]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features", false]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx", false]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.convert_to_unicode", false]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[39, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[387, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[388, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[41, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[389, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[390, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[391, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator", false]], "cpuinfo (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.CpuInfo", false]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.create_data_example", false]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_dataloader", false]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_dataset", false]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_eval_func", false]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[354, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config", false]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool", false]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config", false]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_train_func", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[180, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion", false]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.criterion_registry", false]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.criterion_registry", false]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.Criterions", false]], "criterions (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.Criterions", false]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CropResizeTransform", false]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform", false]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.CropToBoundingBox", false]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox", false]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio", false]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader", false]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[195, "neural_compressor.data.dataloaders.dataloader.DataLoader", false]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[222, "neural_compressor.experimental.common.dataloader.DataLoader", false]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap", false]], "dataset (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.Dataset", false]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.Dataset", false]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[271, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset", false]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[324, "neural_compressor.metric.coco_tools.COCOWrapper.dataset", false]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.dataset_registry", false]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.dataset_registry", false]], "datasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.Datasets", false]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.Datasets", false]], "debug() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.debug", false]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[196, "neural_compressor.data.dataloaders.default_dataloader.default_collate", false]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate", false]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[196, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign", false]], "dequantize() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.Dequantize", false]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data", false]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero", false]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dequantize_weight", false]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[37, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[385, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[271, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type", false]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[324, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device", false]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[392, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator", false]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.disable_random", false]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.disable_random", false]], "distillation (class in neural_compressor.experimental.distillation)": [[261, "neural_compressor.experimental.distillation.Distillation", false]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks", false]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.DistillationConfig", false]], "distillationconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.DistillationConfig", false]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors", false]], "dotdict (class in neural_compressor.config)": [[189, "neural_compressor.config.DotDict", false]], "dotdict (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.DotDict", false]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model", false]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model", false]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.download_url", false]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.download_url", false]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dtype_to_name", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[206, "neural_compressor.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[207, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[249, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[473, "neural_compressor.tensorflow.utils.data.DummyDataset", false]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[473, "neural_compressor.tensorflow.utils.data.DummyDatasetV2", false]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_class_attrs", false]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_data_to_local", false]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_elapsed_time", false]], "dump_table() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_table", false]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_table_to_csv", false]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export", false]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[279, "neural_compressor.experimental.nas.dynas.DyNAS", false]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator", false]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step", false]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step", false]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ensure_list", false]], "equal_dicts() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.equal_dicts", false]], "error() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.error", false]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.estimator_session", false]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session", false]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency", false]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[261, "neural_compressor.experimental.distillation.Distillation.eval_frequency", false]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[272, "neural_compressor.experimental.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[273, "neural_compressor.experimental.metric.f1.evaluate", false]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[325, "neural_compressor.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.metric.f1)": [[326, "neural_compressor.metric.f1.evaluate", false]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[272, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score", false]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[325, "neural_compressor.metric.evaluate_squad.exact_match_score", false]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.ExampleClass", false]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[308, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[365, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[394, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.export_compressed_model", false]], "exportconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.ExportConfig", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[271, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[324, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[271, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[324, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[271, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[324, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[319, "neural_compressor.experimental.strategy.utils.utility.extract_data_type", false]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.extract_data_type", false]], "f1 (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.F1", false]], "f1 (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.F1", false]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[272, "neural_compressor.experimental.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[273, "neural_compressor.experimental.metric.f1.f1_score", false]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[325, "neural_compressor.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.metric.f1)": [[326, "neural_compressor.metric.f1.f1_score", false]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[144, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction", false]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction", false]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize", false]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[440, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize", false]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase", false]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[440, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase", false]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.FashionMNIST", false]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST", false]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[149, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection", false]], "fatal() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.fatal", false]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.fault_tolerant_file", false]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.fetch_module", false]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[197, "neural_compressor.data.dataloaders.fetcher.Fetcher", false]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[238, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[395, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "filter (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.Filter", false]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.Filter", false]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.filter_registry", false]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.filter_registry", false]], "filters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.FILTERS", false]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.FILTERS", false]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.find_by_name", false]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[187, "neural_compressor.compression.pruner.wanda.utils.find_layers", false]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset", false]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.find_pareto_front", false]], "fit() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.fit", false]], "fit() (in module neural_compressor.mix_precision)": [[329, "neural_compressor.mix_precision.fit", false]], "fit() (in module neural_compressor.quantization)": [[359, "neural_compressor.quantization.fit", false]], "fit() (in module neural_compressor.training)": [[482, "neural_compressor.training.fit", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph", false]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator", false]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator", false]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16", false]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_float16", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[396, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "footprint (class in neural_compressor.objective)": [[339, "neural_compressor.objective.Footprint", false]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.forward_wrapper", false]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.framework_datasets", false]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.framework_datasets", false]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[421, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[422, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer", false]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[423, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer", false]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.frozen_pb_session", false]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session", false]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.FullTokenizer", false]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer", false]], "function1() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function1", false]], "function2() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function2", false]], "function3() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function3", false]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.fuse", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[398, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[425, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator", false]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[427, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[427, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[427, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[427, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[451, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[461, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[452, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[462, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[453, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[450, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[460, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[454, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[455, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[464, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[456, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[465, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[405, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[406, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[407, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator", false]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator", false]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.gen_bar_updater", false]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater", false]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.GeneralTopK", false]], "generaltopk (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.GeneralTopK", false]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer", false]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict", false]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict", false]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config", false]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config", false]], "generate_prefix() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.generate_prefix", false]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.generate_pruner_config", false]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[435, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generator1() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.generator1", false]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers", false]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[159, "neural_compressor.compression.distillation.utility.get_activation", false]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[228, "neural_compressor.experimental.common.torch_utils.get_activation", false]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[319, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name", false]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.get_adaptor_name", false]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_algorithm", false]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_all_fp32_data", false]], "get_architecture() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_architecture", false]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_architecture", false]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes", false]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size", false]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_block_prefix", false]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_bounded_threads", false]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_bounded_threads", false]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children", false]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.get_children", false]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_core_ids() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_core_ids", false]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_core_ids", false]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.get_criterion", false]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_depth", false]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth", false]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth", false]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous", false]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph", false]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_example_input", false]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_fallback_order", false]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.get_final_text", false]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.get_final_text", false]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name", false]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_func_from_config", false]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_graph_def", false]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def", false]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_hidden_states", false]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape", false]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names", false]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names", false]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.get_layers", false]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version", false]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_metrics", false]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[333, "neural_compressor.model.model.get_model_fwk_name", false]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape", false]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape", false]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.get_model_path", false]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.get_model_type", false]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type", false]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module", false]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.get_module", false]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_module_input_output", false]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32", false]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8", false]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children", false]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children", false]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.get_node_mapping", false]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.get_node_original_name", false]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_number_of_sockets", false]], "get_op_list() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_op_list", false]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name", false]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.get_pattern", false]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern", false]], "get_physical_ids() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_physical_ids", false]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_physical_ids", false]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_postprocess", false]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_preprocess", false]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.get_pruner", false]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner", false]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output", false]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops", false]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs", false]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[182, "neural_compressor.compression.pruner.regs.get_reg", false]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[182, "neural_compressor.compression.pruner.regs.get_reg_type", false]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[183, "neural_compressor.compression.pruner.schedulers.get_scheduler", false]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler", false]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema", false]], "get_size() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_size", false]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.get_sparsity_ratio", false]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf", false]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx", false]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name", false]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name", false]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name", false]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name", false]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tensor_histogram", false]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node", false]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node", false]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr", false]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr", false]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data", false]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape", false]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tensors_info", false]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[184, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion", false]], "get_threads() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_threads", false]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_threads", false]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_threads_per_core", false]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.get_threads_per_core", false]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_torch_version", false]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.get_torchvision_map", false]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map", false]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tuning_history", false]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor", false]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor", false]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale", false]], "get_weights_details() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_weights_details", false]], "global_state (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.GLOBAL_STATE", false]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step", false]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step", false]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator", false]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq", false]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize", false]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.GradientCriterion", false]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[284, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner", false]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.graph_def_session", false]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session", false]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[266, "neural_compressor.experimental.graph_optimization.Graph_Optimization", false]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.graph_session", false]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.graph_session", false]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer", false]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[438, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer", false]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[34, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter", false]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[382, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter", false]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[35, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib", false]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[383, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib", false]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[408, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[397, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[420, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper", false]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[438, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper", false]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[468, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[409, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.GridSearcher", false]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[182, "neural_compressor.compression.pruner.regs.GroupLasso", false]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[285, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner", false]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top", false]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[366, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy", false]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks", false]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace", false]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector", false]], "hpoconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.HPOConfig", false]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.ImageFolder", false]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.ImageFolder", false]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw", false]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw", false]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[197, "neural_compressor.data.dataloaders.fetcher.IndexFetcher", false]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[238, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher", false]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype", false]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.infer_shapes", false]], "info() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.info", false]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config", false]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[443, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter", false]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[393, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.input2tuple", false]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.InputFeatures", false]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging", false]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[470, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging", false]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[411, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse", false]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers", false]], "ipexmodel (class in neural_compressor.model.torch_model)": [[338, "neural_compressor.model.torch_model.IPEXModel", false]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.is_B_transposed", false]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format", false]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format", false]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.is_fused_module", false]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global", false]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global", false]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.is_int8_model", false]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple", false]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized", false]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain", false]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format", false]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format", false]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.isiterable", false]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.IterableDataset", false]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.IterableDataset", false]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[197, "neural_compressor.data.dataloaders.fetcher.IterableFetcher", false]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[238, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher", false]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[201, "neural_compressor.data.dataloaders.sampler.IterableSampler", false]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[243, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler", false]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[183, "neural_compressor.compression.pruner.schedulers.IterativeScheduler", false]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler", false]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run", false]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run", false]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher", false]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[275, "neural_compressor.experimental.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[275, "neural_compressor.experimental.metric.metric.TensorflowTopK.k", false]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[328, "neural_compressor.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[328, "neural_compressor.metric.metric.TensorflowTopK.k", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers", false]], "keras (class in neural_compressor.config)": [[189, "neural_compressor.config.Keras", false]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.keras_session", false]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.keras_session", false]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern", false]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner", false]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[174, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner", false]], "kerasmodel (class in neural_compressor.model.keras_model)": [[332, "neural_compressor.model.keras_model.KerasModel", false]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel", false]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[172, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM", false]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[487, "neural_compressor.utils.kl_divergence.KL_Divergence", false]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator", false]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework", false]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework", false]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss", false]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss", false]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig", false]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.KnowledgeDistillationLossConfig", false]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[275, "neural_compressor.experimental.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[275, "neural_compressor.experimental.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[275, "neural_compressor.experimental.metric.metric.MSE.label_list", false]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[328, "neural_compressor.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.metric.metric.mae attribute)": [[328, "neural_compressor.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.metric.metric.mse attribute)": [[328, "neural_compressor.metric.metric.MSE.label_list", false]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[211, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[253, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[211, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[253, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[268, "neural_compressor.experimental.metric.bleu.BLEU.labels", false]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[321, "neural_compressor.metric.bleu.BLEU.labels", false]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.LabelShift", false]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift", false]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1", false]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2", false]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[483, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector", false]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant", false]], "lazyimport (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.LazyImport", false]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher", false]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers", false]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns", false]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression", false]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator", false]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load", false]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[477, "neural_compressor.torch.algorithms.layer_wise.load.load", false]], "load() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.load", false]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.load_data_from_pkl", false]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model", false]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model", false]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.load_saved_model", false]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model", false]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor", false]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor", false]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard", false]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard", false]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.load_vocab", false]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.load_vocab", false]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.load_weight_only", false]], "log() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.log", false]], "logger (class in neural_compressor.common.utils.logger)": [[154, "neural_compressor.common.utils.logger.Logger", false]], "logger (class in neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.Logger", false]], "loss (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.Loss", false]], "loss (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.Loss", false]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler", false]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[18, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator", false]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[170, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M", false]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[171, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M", false]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M", false]], "mae (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.MAE", false]], "mae (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.MAE", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[184, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion", false]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner", false]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_dquant_node", false]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node", false]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_module", false]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model", false]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs", false]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape", false]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_quant_node", false]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph", false]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block", false]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype", false]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type", false]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype", false]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks", false]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks", false]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern", false]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator", false]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op", false]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[436, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[429, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metric (class in neural_compressor.experimental.common.metric)": [[224, "neural_compressor.experimental.common.metric.Metric", false]], "metric (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.Metric", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[272, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[273, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[325, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[326, "neural_compressor.metric.f1.metric_max_over_ground_truths", false]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.metric_registry", false]], "metric_registry() (in module neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.metric_registry", false]], "metrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.METRICS", false]], "metrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.METRICS", false]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[275, "neural_compressor.experimental.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[275, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[275, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[275, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[275, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[275, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[328, "neural_compressor.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[328, "neural_compressor.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[328, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[328, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[328, "neural_compressor.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[328, "neural_compressor.metric.metric.TensorflowMetrics.metrics", false]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions", false]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op", false]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator", false]], "miou (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.mIOU", false]], "miou (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.mIOU", false]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[276, "neural_compressor.experimental.mixed_precision.MixedPrecision", false]], "mixedprecisionconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.MixedPrecisionConfig", false]], "mnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MNIST", false]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MNIST", false]], "mode (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.MODE", false]], "model (class in neural_compressor.experimental.common.model)": [[225, "neural_compressor.experimental.common.model.Model", false]], "model (class in neural_compressor.model.model)": [[333, "neural_compressor.model.model.Model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model", false]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasePruning.model", false]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasicPruning.model", false]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model", false]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model", false]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim", false]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2", false]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha", false]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[277, "neural_compressor.experimental.model_conversion.ModelConversion", false]], "modelsize (class in neural_compressor.objective)": [[339, "neural_compressor.objective.ModelSize", false]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "module": [[0, "module-block_mask", false], [1, "module-neural_compressor.adaptor.mxnet_utils", false], [2, "module-neural_compressor.adaptor.mxnet_utils.util", false], [3, "module-neural_compressor.adaptor.ox_utils.calibration", false], [4, "module-neural_compressor.adaptor.ox_utils.calibrator", false], [5, "module-neural_compressor.adaptor.ox_utils", false], [6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false], [7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false], [8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false], [9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false], [10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false], [11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false], [12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false], [13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false], [14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false], [15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false], [16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false], [17, "module-neural_compressor.adaptor.ox_utils.operators", false], [18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false], [19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false], [20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false], [21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false], [22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false], [23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false], [24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false], [25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false], [26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false], [27, "module-neural_compressor.adaptor.ox_utils.operators.split", false], [28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false], [29, "module-neural_compressor.adaptor.ox_utils.quantizer", false], [30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false], [31, "module-neural_compressor.adaptor.ox_utils.util", false], [32, "module-neural_compressor.adaptor.ox_utils.weight_only", false], [33, "module-neural_compressor.adaptor.tensorflow", false], [34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false], [35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false], [36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false], [37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false], [39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [96, "module-neural_compressor.adaptor.tf_utils.graph_util", false], [97, "module-neural_compressor.adaptor.tf_utils", false], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false], [126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false], [127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false], [128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false], [134, "module-neural_compressor.adaptor.tf_utils.util", false], [135, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper", false], [136, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false], [137, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false], [138, "module-neural_compressor.adaptor.torch_utils", false], [139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false], [140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false], [141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false], [142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false], [143, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false], [144, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false], [145, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false], [146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false], [147, "module-neural_compressor.adaptor.torch_utils.util", false], [148, "module-neural_compressor.algorithm.algorithm", false], [149, "module-neural_compressor.algorithm.fast_bias_correction", false], [150, "module-neural_compressor.algorithm", false], [151, "module-neural_compressor.algorithm.smooth_quant", false], [152, "module-neural_compressor.algorithm.weight_correction", false], [153, "module-neural_compressor.benchmark", false], [154, "module-neural_compressor.common.utils.logger", false], [155, "module-neural_compressor.compression.callbacks", false], [156, "module-neural_compressor.compression.distillation.criterions", false], [157, "module-neural_compressor.compression.distillation", false], [158, "module-neural_compressor.compression.distillation.optimizers", false], [159, "module-neural_compressor.compression.distillation.utility", false], [160, "module-neural_compressor.compression.hpo", false], [161, "module-neural_compressor.compression.hpo.sa_optimizer", false], [162, "module-neural_compressor.compression.pruner.criteria", false], [163, "module-neural_compressor.compression.pruner", false], [164, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false], [165, "module-neural_compressor.compression.pruner.model_slim", false], [166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false], [167, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false], [168, "module-neural_compressor.compression.pruner.patterns.base", false], [169, "module-neural_compressor.compression.pruner.patterns", false], [170, "module-neural_compressor.compression.pruner.patterns.mha", false], [171, "module-neural_compressor.compression.pruner.patterns.ninm", false], [172, "module-neural_compressor.compression.pruner.patterns.nxm", false], [173, "module-neural_compressor.compression.pruner.pruners.base", false], [174, "module-neural_compressor.compression.pruner.pruners.basic", false], [175, "module-neural_compressor.compression.pruner.pruners.block_mask", false], [176, "module-neural_compressor.compression.pruner.pruners", false], [177, "module-neural_compressor.compression.pruner.pruners.mha", false], [178, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false], [179, "module-neural_compressor.compression.pruner.pruners.progressive", false], [180, "module-neural_compressor.compression.pruner.pruners.retrain_free", false], [181, "module-neural_compressor.compression.pruner.pruning", false], [182, "module-neural_compressor.compression.pruner.regs", false], [183, "module-neural_compressor.compression.pruner.schedulers", false], [184, "module-neural_compressor.compression.pruner.tf_criteria", false], [185, "module-neural_compressor.compression.pruner.utils", false], [186, "module-neural_compressor.compression.pruner.wanda", false], [187, "module-neural_compressor.compression.pruner.wanda.utils", false], [188, "module-neural_compressor.conf.pythonic_config", false], [189, "module-neural_compressor.config", false], [190, "module-neural_compressor.contrib", false], [191, "module-neural_compressor.contrib.strategy", false], [192, "module-neural_compressor.contrib.strategy.sigopt", false], [193, "module-neural_compressor.contrib.strategy.tpe", false], [194, "module-neural_compressor.data.dataloaders.base_dataloader", false], [195, "module-neural_compressor.data.dataloaders.dataloader", false], [196, "module-neural_compressor.data.dataloaders.default_dataloader", false], [197, "module-neural_compressor.data.dataloaders.fetcher", false], [198, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false], [199, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false], [200, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false], [201, "module-neural_compressor.data.dataloaders.sampler", false], [202, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false], [203, "module-neural_compressor.data.datasets.bert_dataset", false], [204, "module-neural_compressor.data.datasets.coco_dataset", false], [205, "module-neural_compressor.data.datasets.dataset", false], [206, "module-neural_compressor.data.datasets.dummy_dataset", false], [207, "module-neural_compressor.data.datasets.dummy_dataset_v2", false], [208, "module-neural_compressor.data.datasets.imagenet_dataset", false], [209, "module-neural_compressor.data.datasets", false], [210, "module-neural_compressor.data.datasets.style_transfer_dataset", false], [211, "module-neural_compressor.data.filters.coco_filter", false], [212, "module-neural_compressor.data.filters.filter", false], [213, "module-neural_compressor.data.filters", false], [214, "module-neural_compressor.data", false], [215, "module-neural_compressor.data.transforms.imagenet_transform", false], [216, "module-neural_compressor.data.transforms", false], [217, "module-neural_compressor.data.transforms.postprocess", false], [218, "module-neural_compressor.data.transforms.tokenization", false], [219, "module-neural_compressor.data.transforms.transform", false], [220, "module-neural_compressor.experimental.benchmark", false], [221, "module-neural_compressor.experimental.common.criterion", false], [222, "module-neural_compressor.experimental.common.dataloader", false], [223, "module-neural_compressor.experimental.common", false], [224, "module-neural_compressor.experimental.common.metric", false], [225, "module-neural_compressor.experimental.common.model", false], [226, "module-neural_compressor.experimental.common.optimizer", false], [227, "module-neural_compressor.experimental.common.postprocess", false], [228, "module-neural_compressor.experimental.common.torch_utils", false], [229, "module-neural_compressor.experimental.component", false], [230, "module-neural_compressor.experimental.compression", false], [231, "module-neural_compressor.experimental.contrib", false], [232, "module-neural_compressor.experimental.contrib.strategy", false], [233, "module-neural_compressor.experimental.contrib.strategy.sigopt", false], [234, "module-neural_compressor.experimental.contrib.strategy.tpe", false], [235, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false], [236, "module-neural_compressor.experimental.data.dataloaders.dataloader", false], [237, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false], [238, "module-neural_compressor.experimental.data.dataloaders.fetcher", false], [239, "module-neural_compressor.experimental.data.dataloaders", false], [240, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false], [241, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false], [242, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false], [243, "module-neural_compressor.experimental.data.dataloaders.sampler", false], [244, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false], [245, "module-neural_compressor.experimental.data.datasets.bert_dataset", false], [246, "module-neural_compressor.experimental.data.datasets.coco_dataset", false], [247, "module-neural_compressor.experimental.data.datasets.dataset", false], [248, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false], [249, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false], [250, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false], [251, "module-neural_compressor.experimental.data.datasets", false], [252, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false], [253, "module-neural_compressor.experimental.data.filters.coco_filter", false], [254, "module-neural_compressor.experimental.data.filters.filter", false], [255, "module-neural_compressor.experimental.data.filters", false], [256, "module-neural_compressor.experimental.data", false], [257, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false], [258, "module-neural_compressor.experimental.data.transforms", false], [259, "module-neural_compressor.experimental.data.transforms.tokenization", false], [260, "module-neural_compressor.experimental.data.transforms.transform", false], [261, "module-neural_compressor.experimental.distillation", false], [262, "module-neural_compressor.experimental.export", false], [263, "module-neural_compressor.experimental.export.qlinear2qdq", false], [264, "module-neural_compressor.experimental.export.tf2onnx", false], [265, "module-neural_compressor.experimental.export.torch2onnx", false], [266, "module-neural_compressor.experimental.graph_optimization", false], [267, "module-neural_compressor.experimental", false], [268, "module-neural_compressor.experimental.metric.bleu", false], [269, "module-neural_compressor.experimental.metric.bleu_util", false], [270, "module-neural_compressor.experimental.metric.coco_label_map", false], [271, "module-neural_compressor.experimental.metric.coco_tools", false], [272, "module-neural_compressor.experimental.metric.evaluate_squad", false], [273, "module-neural_compressor.experimental.metric.f1", false], [274, "module-neural_compressor.experimental.metric", false], [275, "module-neural_compressor.experimental.metric.metric", false], [276, "module-neural_compressor.experimental.mixed_precision", false], [277, "module-neural_compressor.experimental.model_conversion", false], [278, "module-neural_compressor.experimental.nas.basic_nas", false], [279, "module-neural_compressor.experimental.nas.dynas", false], [280, "module-neural_compressor.experimental.nas", false], [281, "module-neural_compressor.experimental.nas.nas", false], [282, "module-neural_compressor.experimental.nas.nas_utils", false], [283, "module-neural_compressor.experimental.nas.search_algorithms", false], [284, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false], [285, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false], [286, "module-neural_compressor.experimental.pruner_legacy", false], [287, "module-neural_compressor.experimental.pruner_legacy.magnitude", false], [288, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false], [289, "module-neural_compressor.experimental.pruner_legacy.pruner", false], [290, "module-neural_compressor.experimental.pruning", false], [291, "module-neural_compressor.experimental.pruning_recipes", false], [292, "module-neural_compressor.experimental.pruning_recipes.patterns", false], [293, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false], [294, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false], [295, "module-neural_compressor.experimental.pruning_v2", false], [296, "module-neural_compressor.experimental.pytorch_pruner", false], [297, "module-neural_compressor.experimental.pytorch_pruner.logger", false], [298, "module-neural_compressor.experimental.pytorch_pruner.patterns", false], [299, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false], [300, "module-neural_compressor.experimental.pytorch_pruner.pruner", false], [301, "module-neural_compressor.experimental.pytorch_pruner.pruning", false], [302, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false], [303, "module-neural_compressor.experimental.quantization", false], [304, "module-neural_compressor.experimental.scheduler", false], [305, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false], [306, "module-neural_compressor.experimental.strategy.basic", false], [307, "module-neural_compressor.experimental.strategy.bayesian", false], [308, "module-neural_compressor.experimental.strategy.exhaustive", false], [309, "module-neural_compressor.experimental.strategy", false], [310, "module-neural_compressor.experimental.strategy.mse", false], [311, "module-neural_compressor.experimental.strategy.mse_v2", false], [312, "module-neural_compressor.experimental.strategy.random", false], [313, "module-neural_compressor.experimental.strategy.strategy", false], [314, "module-neural_compressor.experimental.strategy.utils.constant", false], [315, "module-neural_compressor.experimental.strategy.utils", false], [316, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false], [317, "module-neural_compressor.experimental.strategy.utils.tuning_space", false], [318, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false], [319, "module-neural_compressor.experimental.strategy.utils.utility", false], [320, "module-neural_compressor", false], [321, "module-neural_compressor.metric.bleu", false], [322, "module-neural_compressor.metric.bleu_util", false], [323, "module-neural_compressor.metric.coco_label_map", false], [324, "module-neural_compressor.metric.coco_tools", false], [325, "module-neural_compressor.metric.evaluate_squad", false], [326, "module-neural_compressor.metric.f1", false], [327, "module-neural_compressor.metric", false], [328, "module-neural_compressor.metric.metric", false], [329, "module-neural_compressor.mix_precision", false], [330, "module-neural_compressor.model.base_model", false], [331, "module-neural_compressor.model", false], [332, "module-neural_compressor.model.keras_model", false], [333, "module-neural_compressor.model.model", false], [334, "module-neural_compressor.model.mxnet_model", false], [335, "module-neural_compressor.model.nets_factory", false], [336, "module-neural_compressor.model.onnx_model", false], [337, "module-neural_compressor.model.tensorflow_model", false], [338, "module-neural_compressor.model.torch_model", false], [339, "module-neural_compressor.objective", false], [340, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator", false], [341, "module-neural_compressor.onnxrt.algorithms.smoother.core", false], [342, "module-neural_compressor.onnxrt.utils.onnx_model", false], [343, "module-neural_compressor.profiling", false], [344, "module-neural_compressor.profiling.parser.factory", false], [345, "module-neural_compressor.profiling.parser.onnx_parser.factory", false], [346, "module-neural_compressor.profiling.parser.onnx_parser.parser", false], [347, "module-neural_compressor.profiling.parser.parser", false], [348, "module-neural_compressor.profiling.parser.result", false], [349, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false], [350, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false], [351, "module-neural_compressor.profiling.profiler.factory", false], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false], [354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false], [355, "module-neural_compressor.profiling.profiler.profiler", false], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false], [358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false], [359, "module-neural_compressor.quantization", false], [360, "module-neural_compressor.strategy.auto", false], [361, "module-neural_compressor.strategy.auto_mixed_precision", false], [362, "module-neural_compressor.strategy.basic", false], [363, "module-neural_compressor.strategy.bayesian", false], [364, "module-neural_compressor.strategy.conservative", false], [365, "module-neural_compressor.strategy.exhaustive", false], [366, "module-neural_compressor.strategy.hawq_v2", false], [367, "module-neural_compressor.strategy", false], [368, "module-neural_compressor.strategy.mse", false], [369, "module-neural_compressor.strategy.mse_v2", false], [370, "module-neural_compressor.strategy.random", false], [371, "module-neural_compressor.strategy.strategy", false], [372, "module-neural_compressor.strategy.utils.constant", false], [373, "module-neural_compressor.strategy.utils", false], [374, "module-neural_compressor.strategy.utils.tuning_sampler", false], [375, "module-neural_compressor.strategy.utils.tuning_space", false], [376, "module-neural_compressor.strategy.utils.tuning_structs", false], [377, "module-neural_compressor.strategy.utils.utility", false], [378, "module-neural_compressor.template.api_doc_example", false], [379, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false], [380, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false], [381, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false], [382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false], [383, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib", false], [384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false], [385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false], [387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false], [388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false], [389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false], [390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false], [391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false], [392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false], [393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false], [394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false], [395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false], [397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false], [398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false], [399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false], [400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false], [401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false], [402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false], [403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false], [404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false], [405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false], [406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false], [408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false], [409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false], [410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false], [411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false], [412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false], [413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false], [414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false], [415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false], [416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false], [417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false], [418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false], [419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false], [420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false], [421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false], [422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false], [423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib", false], [424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false], [426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false], [428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false], [429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false], [430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false], [431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false], [432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert", false], [433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false], [434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false], [435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false], [436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [437, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [438, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false], [439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false], [440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize", false], [441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat", false], [442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config", false], [443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper", false], [444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers", false], [445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer", false], [446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false], [447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false], [448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false], [449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper", false], [450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false], [451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false], [453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false], [454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false], [455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false], [456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false], [457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false], [458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false], [459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false], [460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false], [461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false], [462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false], [463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false], [464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false], [465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false], [466, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false], [467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false], [468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false], [469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false], [470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false], [471, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false], [472, "module-neural_compressor.tensorflow.quantization.utils.utility", false], [473, "module-neural_compressor.tensorflow.utils.data", false], [474, "module-neural_compressor.tensorflow.utils.model_wrappers", false], [475, "module-neural_compressor.tensorflow.utils.nets_factory", false], [476, "module-neural_compressor.torch.algorithms.layer_wise", false], [477, "module-neural_compressor.torch.algorithms.layer_wise.load", false], [478, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false], [479, "module-neural_compressor.torch.algorithms.layer_wise.utils", false], [480, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api", false], [481, "module-neural_compressor.torch.algorithms.weight_only.modules", false], [482, "module-neural_compressor.training", false], [483, "module-neural_compressor.utils.collect_layer_histogram", false], [484, "module-neural_compressor.utils.constant", false], [485, "module-neural_compressor.utils.create_obj_from_config", false], [486, "module-neural_compressor.utils", false], [487, "module-neural_compressor.utils.kl_divergence", false], [488, "module-neural_compressor.utils.load_huggingface", false], [489, "module-neural_compressor.utils.logger", false], [490, "module-neural_compressor.utils.neural_insights_utils", false], [491, "module-neural_compressor.utils.options", false], [492, "module-neural_compressor.utils.pytorch", false], [493, "module-neural_compressor.utils.utility", false], [494, "module-neural_compressor.utils.weights_details", false], [495, "module-neural_compressor.version", false]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.module_debug_level1", false]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules", false]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules", false]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.move_input_device", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[412, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "mse (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.MSE", false]], "mse (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.MSE", false]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[275, "neural_compressor.experimental.metric.metric.RMSE.mse", false]], "mse (neural_compressor.metric.metric.rmse attribute)": [[328, "neural_compressor.metric.metric.RMSE.mse", false]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.mse_metric_gap", false]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[311, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy", false]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[369, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy", false]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[310, "neural_compressor.experimental.strategy.mse.MSETuneStrategy", false]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[368, "neural_compressor.strategy.mse.MSETuneStrategy", false]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[144, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear", false]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear", false]], "multiobjective (class in neural_compressor.objective)": [[339, "neural_compressor.objective.MultiObjective", false]], "mxnet (class in neural_compressor.config)": [[189, "neural_compressor.config.MXNet", false]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[198, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetDatasets", false]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets", false]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.MXNetFilters", false]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.MXNetFilters", false]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.MXNetMetrics", false]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.MXNetMetrics", false]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.MXNetMNIST", false]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST", false]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[334, "neural_compressor.model.mxnet_model.MXNetModel", false]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.MXNetTransforms", false]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms", false]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.MXNetTranspose", false]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose", false]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[170, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N", false]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[171, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N", false]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N", false]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.NameCollector", false]], "nas (class in neural_compressor.experimental.nas.nas)": [[281, "neural_compressor.experimental.nas.nas.NAS", false]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.nas_registry", false]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[281, "neural_compressor.experimental.nas.nas.NASBase", false]], "nasconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.NASConfig", false]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device", false]], "neural_compressor": [[320, "module-neural_compressor", false]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils", false]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util", false]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils", false]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration", false]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator", false]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators", false]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split", false]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer", false]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util", false]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only", false]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow", false]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils", false]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util", false]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util", false]], "neural_compressor.adaptor.torch_utils": [[138, "module-neural_compressor.adaptor.torch_utils", false]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[135, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper", false]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[143, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[144, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[145, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util", false]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm", false]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm", false]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction", false]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant", false]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction", false]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark", false]], "neural_compressor.common.utils.logger": [[154, "module-neural_compressor.common.utils.logger", false]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks", false]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation", false]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions", false]], "neural_compressor.compression.distillation.optimizers": [[158, "module-neural_compressor.compression.distillation.optimizers", false]], "neural_compressor.compression.distillation.utility": [[159, "module-neural_compressor.compression.distillation.utility", false]], "neural_compressor.compression.hpo": [[160, "module-neural_compressor.compression.hpo", false]], "neural_compressor.compression.hpo.sa_optimizer": [[161, "module-neural_compressor.compression.hpo.sa_optimizer", false]], "neural_compressor.compression.pruner": [[163, "module-neural_compressor.compression.pruner", false]], "neural_compressor.compression.pruner.criteria": [[162, "module-neural_compressor.compression.pruner.criteria", false]], "neural_compressor.compression.pruner.model_slim": [[165, "module-neural_compressor.compression.pruner.model_slim", false]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[164, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns", false]], "neural_compressor.compression.pruner.patterns.base": [[168, "module-neural_compressor.compression.pruner.patterns.base", false]], "neural_compressor.compression.pruner.patterns.mha": [[170, "module-neural_compressor.compression.pruner.patterns.mha", false]], "neural_compressor.compression.pruner.patterns.ninm": [[171, "module-neural_compressor.compression.pruner.patterns.ninm", false]], "neural_compressor.compression.pruner.patterns.nxm": [[172, "module-neural_compressor.compression.pruner.patterns.nxm", false]], "neural_compressor.compression.pruner.pruners": [[176, "module-neural_compressor.compression.pruner.pruners", false]], "neural_compressor.compression.pruner.pruners.base": [[173, "module-neural_compressor.compression.pruner.pruners.base", false]], "neural_compressor.compression.pruner.pruners.basic": [[174, "module-neural_compressor.compression.pruner.pruners.basic", false]], "neural_compressor.compression.pruner.pruners.block_mask": [[175, "module-neural_compressor.compression.pruner.pruners.block_mask", false]], "neural_compressor.compression.pruner.pruners.mha": [[177, "module-neural_compressor.compression.pruner.pruners.mha", false]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[178, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false]], "neural_compressor.compression.pruner.pruners.progressive": [[179, "module-neural_compressor.compression.pruner.pruners.progressive", false]], "neural_compressor.compression.pruner.pruners.retrain_free": [[180, "module-neural_compressor.compression.pruner.pruners.retrain_free", false]], "neural_compressor.compression.pruner.pruning": [[181, "module-neural_compressor.compression.pruner.pruning", false]], "neural_compressor.compression.pruner.regs": [[182, "module-neural_compressor.compression.pruner.regs", false]], "neural_compressor.compression.pruner.schedulers": [[183, "module-neural_compressor.compression.pruner.schedulers", false]], "neural_compressor.compression.pruner.tf_criteria": [[184, "module-neural_compressor.compression.pruner.tf_criteria", false]], "neural_compressor.compression.pruner.utils": [[185, "module-neural_compressor.compression.pruner.utils", false]], "neural_compressor.compression.pruner.wanda": [[186, "module-neural_compressor.compression.pruner.wanda", false]], "neural_compressor.compression.pruner.wanda.utils": [[187, "module-neural_compressor.compression.pruner.wanda.utils", false]], "neural_compressor.conf.pythonic_config": [[188, "module-neural_compressor.conf.pythonic_config", false]], "neural_compressor.config": [[189, "module-neural_compressor.config", false]], "neural_compressor.contrib": [[190, "module-neural_compressor.contrib", false]], "neural_compressor.contrib.strategy": [[191, "module-neural_compressor.contrib.strategy", false]], "neural_compressor.contrib.strategy.sigopt": [[192, "module-neural_compressor.contrib.strategy.sigopt", false]], "neural_compressor.contrib.strategy.tpe": [[193, "module-neural_compressor.contrib.strategy.tpe", false]], "neural_compressor.data": [[214, "module-neural_compressor.data", false]], "neural_compressor.data.dataloaders.base_dataloader": [[194, "module-neural_compressor.data.dataloaders.base_dataloader", false]], "neural_compressor.data.dataloaders.dataloader": [[195, "module-neural_compressor.data.dataloaders.dataloader", false]], "neural_compressor.data.dataloaders.default_dataloader": [[196, "module-neural_compressor.data.dataloaders.default_dataloader", false]], "neural_compressor.data.dataloaders.fetcher": [[197, "module-neural_compressor.data.dataloaders.fetcher", false]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[198, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[199, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[200, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.data.dataloaders.sampler": [[201, "module-neural_compressor.data.dataloaders.sampler", false]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[202, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.data.datasets": [[209, "module-neural_compressor.data.datasets", false]], "neural_compressor.data.datasets.bert_dataset": [[203, "module-neural_compressor.data.datasets.bert_dataset", false]], "neural_compressor.data.datasets.coco_dataset": [[204, "module-neural_compressor.data.datasets.coco_dataset", false]], "neural_compressor.data.datasets.dataset": [[205, "module-neural_compressor.data.datasets.dataset", false]], "neural_compressor.data.datasets.dummy_dataset": [[206, "module-neural_compressor.data.datasets.dummy_dataset", false]], "neural_compressor.data.datasets.dummy_dataset_v2": [[207, "module-neural_compressor.data.datasets.dummy_dataset_v2", false]], "neural_compressor.data.datasets.imagenet_dataset": [[208, "module-neural_compressor.data.datasets.imagenet_dataset", false]], "neural_compressor.data.datasets.style_transfer_dataset": [[210, "module-neural_compressor.data.datasets.style_transfer_dataset", false]], "neural_compressor.data.filters": [[213, "module-neural_compressor.data.filters", false]], "neural_compressor.data.filters.coco_filter": [[211, "module-neural_compressor.data.filters.coco_filter", false]], "neural_compressor.data.filters.filter": [[212, "module-neural_compressor.data.filters.filter", false]], "neural_compressor.data.transforms": [[216, "module-neural_compressor.data.transforms", false]], "neural_compressor.data.transforms.imagenet_transform": [[215, "module-neural_compressor.data.transforms.imagenet_transform", false]], "neural_compressor.data.transforms.postprocess": [[217, "module-neural_compressor.data.transforms.postprocess", false]], "neural_compressor.data.transforms.tokenization": [[218, "module-neural_compressor.data.transforms.tokenization", false]], "neural_compressor.data.transforms.transform": [[219, "module-neural_compressor.data.transforms.transform", false]], "neural_compressor.experimental": [[267, "module-neural_compressor.experimental", false]], "neural_compressor.experimental.benchmark": [[220, "module-neural_compressor.experimental.benchmark", false]], "neural_compressor.experimental.common": [[223, "module-neural_compressor.experimental.common", false]], "neural_compressor.experimental.common.criterion": [[221, "module-neural_compressor.experimental.common.criterion", false]], "neural_compressor.experimental.common.dataloader": [[222, "module-neural_compressor.experimental.common.dataloader", false]], "neural_compressor.experimental.common.metric": [[224, "module-neural_compressor.experimental.common.metric", false]], "neural_compressor.experimental.common.model": [[225, "module-neural_compressor.experimental.common.model", false]], "neural_compressor.experimental.common.optimizer": [[226, "module-neural_compressor.experimental.common.optimizer", false]], "neural_compressor.experimental.common.postprocess": [[227, "module-neural_compressor.experimental.common.postprocess", false]], "neural_compressor.experimental.common.torch_utils": [[228, "module-neural_compressor.experimental.common.torch_utils", false]], "neural_compressor.experimental.component": [[229, "module-neural_compressor.experimental.component", false]], "neural_compressor.experimental.compression": [[230, "module-neural_compressor.experimental.compression", false]], "neural_compressor.experimental.contrib": [[231, "module-neural_compressor.experimental.contrib", false]], "neural_compressor.experimental.contrib.strategy": [[232, "module-neural_compressor.experimental.contrib.strategy", false]], "neural_compressor.experimental.contrib.strategy.sigopt": [[233, "module-neural_compressor.experimental.contrib.strategy.sigopt", false]], "neural_compressor.experimental.contrib.strategy.tpe": [[234, "module-neural_compressor.experimental.contrib.strategy.tpe", false]], "neural_compressor.experimental.data": [[256, "module-neural_compressor.experimental.data", false]], "neural_compressor.experimental.data.dataloaders": [[239, "module-neural_compressor.experimental.data.dataloaders", false]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false]], "neural_compressor.experimental.data.dataloaders.dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.dataloader", false]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false]], "neural_compressor.experimental.data.dataloaders.fetcher": [[238, "module-neural_compressor.experimental.data.dataloaders.fetcher", false]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[242, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.experimental.data.dataloaders.sampler": [[243, "module-neural_compressor.experimental.data.dataloaders.sampler", false]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.experimental.data.datasets": [[251, "module-neural_compressor.experimental.data.datasets", false]], "neural_compressor.experimental.data.datasets.bert_dataset": [[245, "module-neural_compressor.experimental.data.datasets.bert_dataset", false]], "neural_compressor.experimental.data.datasets.coco_dataset": [[246, "module-neural_compressor.experimental.data.datasets.coco_dataset", false]], "neural_compressor.experimental.data.datasets.dataset": [[247, "module-neural_compressor.experimental.data.datasets.dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[249, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[250, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[252, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false]], "neural_compressor.experimental.data.filters": [[255, "module-neural_compressor.experimental.data.filters", false]], "neural_compressor.experimental.data.filters.coco_filter": [[253, "module-neural_compressor.experimental.data.filters.coco_filter", false]], "neural_compressor.experimental.data.filters.filter": [[254, "module-neural_compressor.experimental.data.filters.filter", false]], "neural_compressor.experimental.data.transforms": [[258, "module-neural_compressor.experimental.data.transforms", false]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[257, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false]], "neural_compressor.experimental.data.transforms.tokenization": [[259, "module-neural_compressor.experimental.data.transforms.tokenization", false]], "neural_compressor.experimental.data.transforms.transform": [[260, "module-neural_compressor.experimental.data.transforms.transform", false]], "neural_compressor.experimental.distillation": [[261, "module-neural_compressor.experimental.distillation", false]], "neural_compressor.experimental.export": [[262, "module-neural_compressor.experimental.export", false]], "neural_compressor.experimental.export.qlinear2qdq": [[263, "module-neural_compressor.experimental.export.qlinear2qdq", false]], "neural_compressor.experimental.export.tf2onnx": [[264, "module-neural_compressor.experimental.export.tf2onnx", false]], "neural_compressor.experimental.export.torch2onnx": [[265, "module-neural_compressor.experimental.export.torch2onnx", false]], "neural_compressor.experimental.graph_optimization": [[266, "module-neural_compressor.experimental.graph_optimization", false]], "neural_compressor.experimental.metric": [[274, "module-neural_compressor.experimental.metric", false]], "neural_compressor.experimental.metric.bleu": [[268, "module-neural_compressor.experimental.metric.bleu", false]], "neural_compressor.experimental.metric.bleu_util": [[269, "module-neural_compressor.experimental.metric.bleu_util", false]], "neural_compressor.experimental.metric.coco_label_map": [[270, "module-neural_compressor.experimental.metric.coco_label_map", false]], "neural_compressor.experimental.metric.coco_tools": [[271, "module-neural_compressor.experimental.metric.coco_tools", false]], "neural_compressor.experimental.metric.evaluate_squad": [[272, "module-neural_compressor.experimental.metric.evaluate_squad", false]], "neural_compressor.experimental.metric.f1": [[273, "module-neural_compressor.experimental.metric.f1", false]], "neural_compressor.experimental.metric.metric": [[275, "module-neural_compressor.experimental.metric.metric", false]], "neural_compressor.experimental.mixed_precision": [[276, "module-neural_compressor.experimental.mixed_precision", false]], "neural_compressor.experimental.model_conversion": [[277, "module-neural_compressor.experimental.model_conversion", false]], "neural_compressor.experimental.nas": [[280, "module-neural_compressor.experimental.nas", false]], "neural_compressor.experimental.nas.basic_nas": [[278, "module-neural_compressor.experimental.nas.basic_nas", false]], "neural_compressor.experimental.nas.dynas": [[279, "module-neural_compressor.experimental.nas.dynas", false]], "neural_compressor.experimental.nas.nas": [[281, "module-neural_compressor.experimental.nas.nas", false]], "neural_compressor.experimental.nas.nas_utils": [[282, "module-neural_compressor.experimental.nas.nas_utils", false]], "neural_compressor.experimental.nas.search_algorithms": [[283, "module-neural_compressor.experimental.nas.search_algorithms", false]], "neural_compressor.experimental.pruner_legacy": [[286, "module-neural_compressor.experimental.pruner_legacy", false]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[284, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[285, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false]], "neural_compressor.experimental.pruner_legacy.magnitude": [[287, "module-neural_compressor.experimental.pruner_legacy.magnitude", false]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[288, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false]], "neural_compressor.experimental.pruner_legacy.pruner": [[289, "module-neural_compressor.experimental.pruner_legacy.pruner", false]], "neural_compressor.experimental.pruning": [[290, "module-neural_compressor.experimental.pruning", false]], "neural_compressor.experimental.pruning_recipes": [[291, "module-neural_compressor.experimental.pruning_recipes", false]], "neural_compressor.experimental.pruning_recipes.patterns": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns", false]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[294, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false]], "neural_compressor.experimental.pruning_v2": [[295, "module-neural_compressor.experimental.pruning_v2", false]], "neural_compressor.experimental.pytorch_pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner", false]], "neural_compressor.experimental.pytorch_pruner.logger": [[297, "module-neural_compressor.experimental.pytorch_pruner.logger", false]], "neural_compressor.experimental.pytorch_pruner.patterns": [[298, "module-neural_compressor.experimental.pytorch_pruner.patterns", false]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[299, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false]], "neural_compressor.experimental.pytorch_pruner.pruner": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruner", false]], "neural_compressor.experimental.pytorch_pruner.pruning": [[301, "module-neural_compressor.experimental.pytorch_pruner.pruning", false]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[302, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false]], "neural_compressor.experimental.quantization": [[303, "module-neural_compressor.experimental.quantization", false]], "neural_compressor.experimental.scheduler": [[304, "module-neural_compressor.experimental.scheduler", false]], "neural_compressor.experimental.strategy": [[309, "module-neural_compressor.experimental.strategy", false]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[305, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false]], "neural_compressor.experimental.strategy.basic": [[306, "module-neural_compressor.experimental.strategy.basic", false]], "neural_compressor.experimental.strategy.bayesian": [[307, "module-neural_compressor.experimental.strategy.bayesian", false]], "neural_compressor.experimental.strategy.exhaustive": [[308, "module-neural_compressor.experimental.strategy.exhaustive", false]], "neural_compressor.experimental.strategy.mse": [[310, "module-neural_compressor.experimental.strategy.mse", false]], "neural_compressor.experimental.strategy.mse_v2": [[311, "module-neural_compressor.experimental.strategy.mse_v2", false]], "neural_compressor.experimental.strategy.random": [[312, "module-neural_compressor.experimental.strategy.random", false]], "neural_compressor.experimental.strategy.strategy": [[313, "module-neural_compressor.experimental.strategy.strategy", false]], "neural_compressor.experimental.strategy.utils": [[315, "module-neural_compressor.experimental.strategy.utils", false]], "neural_compressor.experimental.strategy.utils.constant": [[314, "module-neural_compressor.experimental.strategy.utils.constant", false]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false]], "neural_compressor.experimental.strategy.utils.tuning_space": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_space", false]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[318, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false]], "neural_compressor.experimental.strategy.utils.utility": [[319, "module-neural_compressor.experimental.strategy.utils.utility", false]], "neural_compressor.metric": [[327, "module-neural_compressor.metric", false]], "neural_compressor.metric.bleu": [[321, "module-neural_compressor.metric.bleu", false]], "neural_compressor.metric.bleu_util": [[322, "module-neural_compressor.metric.bleu_util", false]], "neural_compressor.metric.coco_label_map": [[323, "module-neural_compressor.metric.coco_label_map", false]], "neural_compressor.metric.coco_tools": [[324, "module-neural_compressor.metric.coco_tools", false]], "neural_compressor.metric.evaluate_squad": [[325, "module-neural_compressor.metric.evaluate_squad", false]], "neural_compressor.metric.f1": [[326, "module-neural_compressor.metric.f1", false]], "neural_compressor.metric.metric": [[328, "module-neural_compressor.metric.metric", false]], "neural_compressor.mix_precision": [[329, "module-neural_compressor.mix_precision", false]], "neural_compressor.model": [[331, "module-neural_compressor.model", false]], "neural_compressor.model.base_model": [[330, "module-neural_compressor.model.base_model", false]], "neural_compressor.model.keras_model": [[332, "module-neural_compressor.model.keras_model", false]], "neural_compressor.model.model": [[333, "module-neural_compressor.model.model", false]], "neural_compressor.model.mxnet_model": [[334, "module-neural_compressor.model.mxnet_model", false]], "neural_compressor.model.nets_factory": [[335, "module-neural_compressor.model.nets_factory", false]], "neural_compressor.model.onnx_model": [[336, "module-neural_compressor.model.onnx_model", false]], "neural_compressor.model.tensorflow_model": [[337, "module-neural_compressor.model.tensorflow_model", false]], "neural_compressor.model.torch_model": [[338, "module-neural_compressor.model.torch_model", false]], "neural_compressor.objective": [[339, "module-neural_compressor.objective", false]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator", false]], "neural_compressor.onnxrt.algorithms.smoother.core": [[341, "module-neural_compressor.onnxrt.algorithms.smoother.core", false]], "neural_compressor.onnxrt.utils.onnx_model": [[342, "module-neural_compressor.onnxrt.utils.onnx_model", false]], "neural_compressor.profiling": [[343, "module-neural_compressor.profiling", false]], "neural_compressor.profiling.parser.factory": [[344, "module-neural_compressor.profiling.parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.factory": [[345, "module-neural_compressor.profiling.parser.onnx_parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.parser": [[346, "module-neural_compressor.profiling.parser.onnx_parser.parser", false]], "neural_compressor.profiling.parser.parser": [[347, "module-neural_compressor.profiling.parser.parser", false]], "neural_compressor.profiling.parser.result": [[348, "module-neural_compressor.profiling.parser.result", false]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[350, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false]], "neural_compressor.profiling.profiler.factory": [[351, "module-neural_compressor.profiling.profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false]], "neural_compressor.profiling.profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false]], "neural_compressor.quantization": [[359, "module-neural_compressor.quantization", false]], "neural_compressor.strategy": [[367, "module-neural_compressor.strategy", false]], "neural_compressor.strategy.auto": [[360, "module-neural_compressor.strategy.auto", false]], "neural_compressor.strategy.auto_mixed_precision": [[361, "module-neural_compressor.strategy.auto_mixed_precision", false]], "neural_compressor.strategy.basic": [[362, "module-neural_compressor.strategy.basic", false]], "neural_compressor.strategy.bayesian": [[363, "module-neural_compressor.strategy.bayesian", false]], "neural_compressor.strategy.conservative": [[364, "module-neural_compressor.strategy.conservative", false]], "neural_compressor.strategy.exhaustive": [[365, "module-neural_compressor.strategy.exhaustive", false]], "neural_compressor.strategy.hawq_v2": [[366, "module-neural_compressor.strategy.hawq_v2", false]], "neural_compressor.strategy.mse": [[368, "module-neural_compressor.strategy.mse", false]], "neural_compressor.strategy.mse_v2": [[369, "module-neural_compressor.strategy.mse_v2", false]], "neural_compressor.strategy.random": [[370, "module-neural_compressor.strategy.random", false]], "neural_compressor.strategy.strategy": [[371, "module-neural_compressor.strategy.strategy", false]], "neural_compressor.strategy.utils": [[373, "module-neural_compressor.strategy.utils", false]], "neural_compressor.strategy.utils.constant": [[372, "module-neural_compressor.strategy.utils.constant", false]], "neural_compressor.strategy.utils.tuning_sampler": [[374, "module-neural_compressor.strategy.utils.tuning_sampler", false]], "neural_compressor.strategy.utils.tuning_space": [[375, "module-neural_compressor.strategy.utils.tuning_space", false]], "neural_compressor.strategy.utils.tuning_structs": [[376, "module-neural_compressor.strategy.utils.tuning_structs", false]], "neural_compressor.strategy.utils.utility": [[377, "module-neural_compressor.strategy.utils.utility", false]], "neural_compressor.template.api_doc_example": [[378, "module-neural_compressor.template.api_doc_example", false]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[380, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[381, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[437, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[438, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[466, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[471, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.tensorflow.quantization.utils.utility": [[472, "module-neural_compressor.tensorflow.quantization.utils.utility", false]], "neural_compressor.tensorflow.utils.data": [[473, "module-neural_compressor.tensorflow.utils.data", false]], "neural_compressor.tensorflow.utils.model_wrappers": [[474, "module-neural_compressor.tensorflow.utils.model_wrappers", false]], "neural_compressor.tensorflow.utils.nets_factory": [[475, "module-neural_compressor.tensorflow.utils.nets_factory", false]], "neural_compressor.torch.algorithms.layer_wise": [[476, "module-neural_compressor.torch.algorithms.layer_wise", false]], "neural_compressor.torch.algorithms.layer_wise.load": [[477, "module-neural_compressor.torch.algorithms.layer_wise.load", false]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[478, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false]], "neural_compressor.torch.algorithms.layer_wise.utils": [[479, "module-neural_compressor.torch.algorithms.layer_wise.utils", false]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[480, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api", false]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, "module-neural_compressor.torch.algorithms.weight_only.modules", false]], "neural_compressor.training": [[482, "module-neural_compressor.training", false]], "neural_compressor.utils": [[486, "module-neural_compressor.utils", false]], "neural_compressor.utils.collect_layer_histogram": [[483, "module-neural_compressor.utils.collect_layer_histogram", false]], "neural_compressor.utils.constant": [[484, "module-neural_compressor.utils.constant", false]], "neural_compressor.utils.create_obj_from_config": [[485, "module-neural_compressor.utils.create_obj_from_config", false]], "neural_compressor.utils.kl_divergence": [[487, "module-neural_compressor.utils.kl_divergence", false]], "neural_compressor.utils.load_huggingface": [[488, "module-neural_compressor.utils.load_huggingface", false]], "neural_compressor.utils.logger": [[489, "module-neural_compressor.utils.logger", false]], "neural_compressor.utils.neural_insights_utils": [[490, "module-neural_compressor.utils.neural_insights_utils", false]], "neural_compressor.utils.options": [[491, "module-neural_compressor.utils.options", false]], "neural_compressor.utils.pytorch": [[492, "module-neural_compressor.utils.pytorch", false]], "neural_compressor.utils.utility": [[493, "module-neural_compressor.utils.utility", false]], "neural_compressor.utils.weights_details": [[494, "module-neural_compressor.utils.weights_details", false]], "neural_compressor.version": [[495, "module-neural_compressor.version", false]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[137, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[268, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[321, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator", false]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[273, "neural_compressor.experimental.metric.f1.normalize_answer", false]], "normalize_answer() (in module neural_compressor.metric.f1)": [[326, "neural_compressor.metric.f1.normalize_answer", false]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.NormalizeTFTransform", false]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform", false]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.NormalizeTransform", false]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform", false]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[275, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[275, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[328, "neural_compressor.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[328, "neural_compressor.metric.metric.TensorflowTopK.num_correct", false]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[275, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[275, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[328, "neural_compressor.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[328, "neural_compressor.metric.metric.TensorflowTopK.num_sample", false]], "objective (class in neural_compressor.objective)": [[339, "neural_compressor.objective.Objective", false]], "objective_custom_registry() (in module neural_compressor.objective)": [[339, "neural_compressor.objective.objective_custom_registry", false]], "objective_registry() (in module neural_compressor.objective)": [[339, "neural_compressor.objective.objective_registry", false]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[183, "neural_compressor.compression.pruner.schedulers.OneshotScheduler", false]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler", false]], "onnx (class in neural_compressor.config)": [[189, "neural_compressor.config.ONNX", false]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[263, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq", false]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph", false]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[336, "neural_compressor.model.onnx_model.ONNXModel", false]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[342, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel", false]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode", false]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema", false]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[346, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser", false]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.ONNXQlinear2QDQConfig", false]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxrt (class in neural_compressor.utils.options)": [[491, "neural_compressor.utils.options.onnxrt", false]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[3, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment", false]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[199, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[199, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.ONNXRTGLUE", false]], "onnxrtglue (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.ONNXRTGLUE", false]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics", false]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.ONNXRTITMetrics", false]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[345, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory", false]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms", false]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms", false]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry", false]], "opentry (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.OpEntry", false]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.Operator", false]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.OptimizedModel", false]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[458, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.optimizer_registry", false]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.optimizer_registry", false]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.Optimizers", false]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.Optimizers", false]], "options (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.Options", false]], "options (class in neural_compressor.config)": [[189, "neural_compressor.config.Options", false]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[318, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig", false]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[376, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig", false]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.OpType", false]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[319, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict", false]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.OrderedDefaultDict", false]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant", false]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor", false]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform", false]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform", false]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator", false]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[164, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config", false]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.parse_last_linear", false]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.parse_last_linear_tf", false]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune", false]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.parse_saved_model", false]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model", false]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.parse_to_prune", false]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune", false]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.parse_to_prune_tf", false]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config", false]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types", false]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[204, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[246, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform", false]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform", false]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[344, "neural_compressor.profiling.parser.factory.ParserFactory", false]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.paser_cfgs", false]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[180, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern", false]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry", false]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path", false]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.pattern_to_path", false]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase", false]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[288, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner", false]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner", false]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[170, "neural_compressor.compression.pruner.patterns.mha.PatternMHA", false]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM", false]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM", false]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS", false]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns", false]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator", false]], "performance (class in neural_compressor.objective)": [[339, "neural_compressor.objective.Performance", false]], "pickleerror": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError", false], [478, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError", false]], "picklingerror": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError", false], [478, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError", false]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator", false]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils", false]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[431, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[430, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[217, "neural_compressor.data.transforms.postprocess.Postprocess", false]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[227, "neural_compressor.experimental.common.postprocess.Postprocess", false]], "posttrainingquantconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.PostTrainingQuantConfig", false]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[275, "neural_compressor.experimental.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[275, "neural_compressor.experimental.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[275, "neural_compressor.experimental.metric.metric.MSE.pred_list", false]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[328, "neural_compressor.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[328, "neural_compressor.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[328, "neural_compressor.metric.metric.MSE.pred_list", false]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[268, "neural_compressor.experimental.metric.bleu.BLEU.predictions", false]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[321, "neural_compressor.metric.bleu.BLEU.predictions", false]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[413, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "prepare_compression() (in module neural_compressor.training)": [[482, "neural_compressor.training.prepare_compression", false]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader", false]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs", false]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model", false]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data", false]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[163, "neural_compressor.compression.pruner.prepare_pruning", false]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.preprocess_user_cfg", false]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables", false]], "print_op_list() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.print_op_list", false]], "print_table() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.print_table", false]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.process_and_check_config", false]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config", false]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.process_config", false]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config", false]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.process_weight_config", false]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.process_yaml_config", false]], "profile() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.profile", false]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[353, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[355, "neural_compressor.profiling.profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler", false]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[351, "neural_compressor.profiling.profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory", false]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[347, "neural_compressor.profiling.parser.parser.ProfilingParser", false]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[348, "neural_compressor.profiling.parser.result.ProfilingResult", false]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[289, "neural_compressor.experimental.pruner_legacy.pruner.Pruner", false]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info", false]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info", false]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[289, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry", false]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasePruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[181, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners", false]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pruning.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[295, "neural_compressor.experimental.pruning_v2.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners", false]], "pruning (class in neural_compressor.experimental.pruning)": [[290, "neural_compressor.experimental.pruning.Pruning", false]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[295, "neural_compressor.experimental.pruning_v2.Pruning", false]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[301, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency", false]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.PruningCallbacks", false]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.PruningCriterion", false]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[184, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion", false]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[183, "neural_compressor.compression.pruner.schedulers.PruningScheduler", false]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[268, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[321, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[177, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner", false]], "pytorch (class in neural_compressor.config)": [[189, "neural_compressor.config.PyTorch", false]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[338, "neural_compressor.model.torch_model.PyTorchBaseModel", false]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern", false]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner", false]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[174, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner", false]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[175, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner", false]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchCriterions", false]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.PyTorchCriterions", false]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss", false]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[200, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[242, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PyTorchDatasets", false]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets", false]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.PyTorchFilters", false]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.PyTorchFilters", false]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[338, "neural_compressor.model.torch_model.PyTorchFXModel", false]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.PyTorchLoss", false]], "pytorchloss (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.PyTorchLoss", false]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.PyTorchMetrics", false]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.PyTorchMetrics", false]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchMNIST", false]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST", false]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[338, "neural_compressor.model.torch_model.PyTorchModel", false]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers", false]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers", false]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[178, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner", false]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[171, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM", false]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[172, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM", false]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[179, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner", false]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[180, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner", false]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss", false]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper", false]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.PyTorchSGD", false]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.PyTorchSGD", false]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PyTorchTransforms", false]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms", false]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.PyTorchTranspose", false]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose", false]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator", false]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator", false]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function", false]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[443, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function", false]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator", false]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator", false]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator", false]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator", false]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator", false]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor", false]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator", false]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator", false]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator", false]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator", false]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator", false]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator", false]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry", false]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator", false]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator", false]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator", false]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator", false]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator", false]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data", false]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor", false]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantFormat", false]], "quantization (class in neural_compressor.experimental.quantization)": [[303, "neural_compressor.experimental.quantization.Quantization", false]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks", false]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.QuantizationAwareTrainingConfig", false]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.QuantizationConfig", false]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizationMode", false]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data", false]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel", false]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero", false]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_nparray", false]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model", false]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig", false]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[442, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig", false]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer", false]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter", false]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[432, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter", false]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValue", false]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType", false]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[459, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[463, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[466, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd", false]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[446, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd", false]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase", false]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[447, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase", false]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization", false]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[448, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization", false]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[459, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[29, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer", false]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper", false]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[449, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper", false]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase", false]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[449, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase", false]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.QuantOptions", false]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantType", false]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.QuantType", false]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes", false]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomCropTransform", false]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform", false]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomHorizontalFlip", false]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip", false]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomResizedCropTransform", false]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform", false]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher", false]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[312, "neural_compressor.experimental.strategy.random.RandomTuneStrategy", false]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[370, "neural_compressor.strategy.random.RandomTuneStrategy", false]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RandomVerticalFlip", false]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip", false]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.read_graph", false]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.read_graph", false]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.read_squad_examples", false]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.read_squad_examples", false]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs", false]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe", false]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher", false]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model", false]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model", false]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[159, "neural_compressor.compression.distillation.utility.record_output", false]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[228, "neural_compressor.experimental.common.torch_utils.record_output", false]], "recover() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.recover", false]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.recover_model_from_json", false]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator", false]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator", false]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[180, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg", false]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[182, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms", false]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.register_criterion", false]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[184, "neural_compressor.compression.pruner.tf_criteria.register_criterion", false]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.register_customer_metric", false]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload", false]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[168, "neural_compressor.compression.pruner.patterns.base.register_pattern", false]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[298, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern", false]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[173, "neural_compressor.compression.pruner.pruners.base.register_pruner", false]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners", false]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[181, "neural_compressor.compression.pruner.pruning.register_pruning", false]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[182, "neural_compressor.compression.pruner.regs.register_reg", false]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[183, "neural_compressor.compression.pruner.schedulers.register_scheduler", false]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler", false]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator", false]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input", false]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[414, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[415, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[471, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RescaleTFTransform", false]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform", false]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.RescaleTransform", false]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.RescaleTransform", false]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[299, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default", false]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.reset_none_to_default", false]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ResizeMXNetTransform", false]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform", false]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator", false]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ResizePytorchTransform", false]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform", false]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ResizeTFTransform", false]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform", false]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ResizeTransform", false]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ResizeTransform", false]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ResizeWithRatio", false]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio", false]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion", false]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[181, "neural_compressor.compression.pruner.pruning.RetrainFreePruning", false]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[319, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type", false]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.reverted_data_type", false]], "rmse (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.RMSE", false]], "rmse (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.RMSE", false]], "roc (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.ROC", false]], "roc (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.ROC", false]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize", false]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.run_forward", false]], "run_instance() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.run_instance", false]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[275, "neural_compressor.experimental.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[275, "neural_compressor.experimental.metric.metric.Loss.sample", false]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[328, "neural_compressor.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.metric.metric.loss attribute)": [[328, "neural_compressor.metric.metric.Loss.sample", false]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[201, "neural_compressor.data.dataloaders.sampler.Sampler", false]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[243, "neural_compressor.experimental.data.dataloaders.sampler.Sampler", false]], "save() (in module neural_compressor.compression.pruner)": [[163, "neural_compressor.compression.pruner.save", false]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream", false]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf", false]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.saved_model_session", false]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session", false]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[433, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[302, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler", false]], "scheduler (class in neural_compressor.experimental.scheduler)": [[304, "neural_compressor.experimental.scheduler.Scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[180, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler", false]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler", false]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[184, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[184, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores", false]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores", false]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.Searcher", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results", false]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.SelfKnowledgeDistillationLossConfig", false]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher", false]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType", false]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[201, "neural_compressor.data.dataloaders.sampler.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[243, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler", false]], "set_all_env_var() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.set_all_env_var", false]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.set_all_env_var", false]], "set_backend() (in module neural_compressor.experimental.common.model)": [[225, "neural_compressor.experimental.common.model.set_backend", false]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution", false]], "set_env_var() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.set_env_var", false]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[220, "neural_compressor.experimental.benchmark.set_env_var", false]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.set_module", false]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name", false]], "set_random_seed() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_random_seed", false]], "set_resume_from() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_resume_from", false]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_tensorboard", false]], "set_workspace() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_workspace", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[437, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "show_memory_info() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.show_memory_info", false]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[192, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[233, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.simple_inference", false]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar", false]], "singleton() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.singleton", false]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.slim_session", false]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.slim_session", false]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution", false]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[341, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother", false]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[151, "neural_compressor.algorithm.smooth_quant.SmoothQuant", false]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration", false]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[379, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration", false]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM", false]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[379, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM", false]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler", false]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[380, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler", false]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM", false]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[380, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM", false]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.SnipCriterion", false]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion", false]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner", false]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner", false]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[207, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[249, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[181, "neural_compressor.compression.pruner.pruning.SparseGPTPruning", false]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.split_shared_bias", false]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator", false]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[416, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "squadexample (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.SquadExample", false]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.SquadExample", false]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.SquadF1", false]], "squadf1 (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.SquadF1", false]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step", false]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph", false]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.static_quant_export", false]], "statistics (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.Statistics", false]], "str2array() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.str2array", false]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[313, "neural_compressor.experimental.strategy.strategy.strategy_registry", false]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.strategy_registry", false]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes", false]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes", false]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes", false]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes", false]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[417, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[418, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[210, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[252, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[275, "neural_compressor.experimental.metric.metric.Loss.sum", false]], "sum (neural_compressor.metric.metric.loss attribute)": [[328, "neural_compressor.metric.metric.Loss.sum", false]], "summary_benchmark() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.summary_benchmark", false]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[419, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[268, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re", false]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[321, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re", false]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers", false]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio", false]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets", false]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[307, "neural_compressor.experimental.strategy.bayesian.TargetSpace", false]], "targetspace (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.TargetSpace", false]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector", false]], "tensorflow (class in neural_compressor.config)": [[189, "neural_compressor.config.TensorFlow", false]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.Tensorflow", false]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[381, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam", false]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW", false]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW", false]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor", false]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[381, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor", false]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowBaseModel", false]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel", false]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[202, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel", false]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel", false]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP", false]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.TensorflowCOCOMAP", false]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[381, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig", false]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[381, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter", false]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowCriterions", false]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.TensorflowCriterions", false]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss", false]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[202, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[212, "neural_compressor.data.filters.filter.TensorflowFilters", false]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[254, "neural_compressor.experimental.data.filters.filter.TensorflowFilters", false]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder", false]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[208, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[250, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[221, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper", false]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowLLMModel", false]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel", false]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.TensorflowMAP", false]], "tensorflowmap (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.TensorflowMAP", false]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.TensorflowMetrics", false]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.TensorflowMetrics", false]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowModel", false]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[202, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[203, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[245, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers", false]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers", false]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[349, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory", false]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[350, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser", false]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowQATModel", false]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel", false]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[128, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter", false]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorflowQuery", false]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[381, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[257, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel", false]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel", false]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[158, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD", false]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[226, "neural_compressor.experimental.common.optimizer.TensorFlowSGD", false]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale", false]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy", false]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.TensorflowTopK", false]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.TensorflowTopK", false]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[215, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel", false]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[205, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[247, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TensorflowWrapFunction", false]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction", false]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[144, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant", false]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant", false]], "tf2onnxconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.TF2ONNXConfig", false]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper", false]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper", false]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[264, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx", false]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[264, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx", false]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[202, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[244, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform", false]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[290, "neural_compressor.experimental.pruning.TfPruningCallback", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[295, "neural_compressor.experimental.pruning_v2.TfPruningCallback", false]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[335, "neural_compressor.model.nets_factory.TFSlimNetsFactory", false]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[475, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform", false]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1", false]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16", false]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2", false]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2", false]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1", false]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[294, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase", false]], "time_limit() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.time_limit", false]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.to_numpy", false]], "toarray (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ToArray", false]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ToArray", false]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.ToNDArrayTransform", false]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform", false]], "torch2onnxconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.Torch2ONNXConfig", false]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx", false]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[265, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx", false]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[193, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy", false]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[234, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy", false]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph", false]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.transform_registry", false]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.transform_registry", false]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[145, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector", false]], "transforms (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.TRANSFORMS", false], [219, "neural_compressor.data.transforms.transform.Transforms", false]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS", false], [260, "neural_compressor.experimental.data.transforms.transform.Transforms", false]], "transpose (class in neural_compressor.data.transforms.transform)": [[219, "neural_compressor.data.transforms.transform.Transpose", false]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[260, "neural_compressor.experimental.data.transforms.transform.Transpose", false]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.trt_env_setup", false]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.try_loading_keras", false]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[313, "neural_compressor.experimental.strategy.strategy.TuneStrategy", false]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.TuneStrategy", false]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.TuneStrategyMeta", false]], "tuningcriterion (class in neural_compressor.config)": [[189, "neural_compressor.config.TuningCriterion", false]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem", false]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.TuningItem", false]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[154, "neural_compressor.common.utils.logger.TuningLogger", false]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[316, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry", false]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[317, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace", false]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.TuningSpace", false]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator", false]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator", false]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[268, "neural_compressor.experimental.metric.bleu.UnicodeRegex", false]], "unicoderegex (class in neural_compressor.metric.bleu)": [[321, "neural_compressor.metric.bleu.UnicodeRegex", false]], "unpicklingerror": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError", false], [478, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError", false]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step", false]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[143, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module", false]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[479, "neural_compressor.torch.algorithms.layer_wise.utils.update_module", false]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload", false]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data", false]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[185, "neural_compressor.compression.pruner.utils.update_params", false]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.update_sq_scale", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output", false]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output", false]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[337, "neural_compressor.model.tensorflow_model.validate_graph_node", false]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[474, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node", false]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.ValueInfo", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2", false]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_eq_version2", false]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2", false]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_gt_version2", false]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2", false]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_gte_version2", false]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2", false]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_lt_version2", false]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2", false]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_lte_version2", false]], "warn() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.warn", false]], "warning() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.warning", false]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[152, "neural_compressor.algorithm.weight_correction.WeightCorrection", false]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler", false]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[188, "neural_compressor.conf.pythonic_config.WeightPruningConfig", false]], "weightpruningconfig (class in neural_compressor.config)": [[189, "neural_compressor.config.WeightPruningConfig", false]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[494, "neural_compressor.utils.weights_details.WeightsDetails", false]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[494, "neural_compressor.utils.weights_details.WeightsStatistics", false]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.whitespace_tokenize", false]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize", false]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[218, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer", false]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[259, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer", false]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.WrapMXNetMetric", false]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.WrapMXNetMetric", false]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric", false]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.WrapONNXRTMetric", false]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[275, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric", false]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[328, "neural_compressor.metric.metric.WrapPyTorchMetric", false]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.write_graph", false]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[472, "neural_compressor.tensorflow.quantization.utils.utility.write_graph", false]]}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [320, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[150, 0, 0, "-", "algorithm"], [153, 0, 0, "-", "benchmark"], [189, 0, 0, "-", "config"], [190, 0, 0, "-", "contrib"], [214, 0, 0, "-", "data"], [267, 0, 0, "-", "experimental"], [327, 0, 0, "-", "metric"], [329, 0, 0, "-", "mix_precision"], [331, 0, 0, "-", "model"], [339, 0, 0, "-", "objective"], [343, 0, 0, "-", "profiling"], [359, 0, 0, "-", "quantization"], [367, 0, 0, "-", "strategy"], [482, 0, 0, "-", "training"], [486, 0, 0, "-", "utils"], [495, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "mxnet_utils"], [5, 0, 0, "-", "ox_utils"], [33, 0, 0, "-", "tensorflow"], [97, 0, 0, "-", "tf_utils"], [138, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.mxnet_utils": [[2, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, 1, 1, "", "CalibCollector"], [2, 1, 1, "", "CalibData"], [2, 1, 1, "", "CollectorBase"], [2, 1, 1, "", "DataIterLoader"], [2, 1, 1, "", "DataLoaderWrap"], [2, 1, 1, "", "NameCollector"], [2, 1, 1, "", "OpType"], [2, 1, 1, "", "TensorCollector"], [2, 2, 1, "", "amp_convert"], [2, 2, 1, "", "calib_model"], [2, 2, 1, "", "check_mx_version"], [2, 2, 1, "", "combine_capabilities"], [2, 2, 1, "", "create_data_example"], [2, 2, 1, "", "distribute_calib_tensors"], [2, 2, 1, "", "ensure_list"], [2, 2, 1, "", "fuse"], [2, 2, 1, "", "get_framework_name"], [2, 2, 1, "", "is_model_quantized"], [2, 2, 1, "", "isiterable"], [2, 2, 1, "", "make_module"], [2, 2, 1, "", "make_nc_model"], [2, 2, 1, "", "make_symbol_block"], [2, 2, 1, "", "ndarray_to_device"], [2, 2, 1, "", "parse_tune_config"], [2, 2, 1, "", "prepare_dataloader"], [2, 2, 1, "", "prepare_model"], [2, 2, 1, "", "prepare_model_data"], [2, 2, 1, "", "quantize_sym_model"], [2, 2, 1, "", "query_quantizable_nodes"], [2, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.ox_utils": [[3, 0, 0, "-", "calibration"], [4, 0, 0, "-", "calibrator"], [17, 0, 0, "-", "operators"], [29, 0, 0, "-", "quantizer"], [30, 0, 0, "-", "smooth_quant"], [31, 0, 0, "-", "util"], [32, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, 1, 1, "", "CalibratorBase"], [4, 1, 1, "", "HistogramCollector"], [4, 1, 1, "", "KLCalibrator"], [4, 1, 1, "", "MinMaxCalibrator"], [4, 1, 1, "", "PercentileCalibrator"], [4, 2, 1, "", "calib_registry"], [4, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[6, 0, 0, "-", "activation"], [7, 0, 0, "-", "argmax"], [8, 0, 0, "-", "attention"], [9, 0, 0, "-", "binary_op"], [10, 0, 0, "-", "concat"], [11, 0, 0, "-", "conv"], [12, 0, 0, "-", "direct_q8"], [13, 0, 0, "-", "embed_layernorm"], [14, 0, 0, "-", "gather"], [15, 0, 0, "-", "gavgpool"], [16, 0, 0, "-", "gemm"], [18, 0, 0, "-", "lstm"], [19, 0, 0, "-", "matmul"], [20, 0, 0, "-", "maxpool"], [21, 0, 0, "-", "norm"], [22, 0, 0, "-", "ops"], [23, 0, 0, "-", "pad"], [24, 0, 0, "-", "pooling"], [25, 0, 0, "-", "reduce"], [26, 0, 0, "-", "resize"], [27, 0, 0, "-", "split"], [28, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, 1, 1, "", "ActivationOperator"], [6, 1, 1, "", "Float16ActivationOperator"], [6, 1, 1, "", "QActivationOperator"], [6, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, 1, 1, "", "ArgMaxOperator"], [7, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, 1, 1, "", "AttentionOperator"], [8, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, 1, 1, "", "BinaryDirect8BitOperator"], [9, 1, 1, "", "BinaryOperator"], [9, 1, 1, "", "Float16BinaryOperator"], [9, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, 1, 1, "", "ConcatOperator"], [10, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, 1, 1, "", "ConvOperator"], [11, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, 1, 1, "", "Direct8BitOperator"], [12, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, 1, 1, "", "EmbedLayerNormalizationOperator"], [13, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, 1, 1, "", "GatherOperator"], [14, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, 1, 1, "", "GlobalAveragePoolOperator"], [15, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, 1, 1, "", "GemmOperator"], [16, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, 1, 1, "", "FusedMatMulOperator"], [19, 1, 1, "", "MatMulOperator"], [19, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, 1, 1, "", "MaxPoolOperator"], [20, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, 1, 1, "", "BatchNormalizationOperator"], [21, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, 1, 1, "", "Operator"], [22, 1, 1, "", "QOperator"], [22, 2, 1, "", "op_registry"], [22, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, 1, 1, "", "PadOperator"], [23, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, 1, 1, "", "PoolOperator"], [24, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, 1, 1, "", "ReduceMinMaxOperator"], [25, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, 1, 1, "", "QResizeOperator"], [26, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, 1, 1, "", "QSplitOperator"], [27, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, 1, 1, "", "UnaryDirect8BitOperator"], [28, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, 1, 1, "", "ORTSmoothQuant"], [30, 2, 1, "", "get_quant_dequant_output"], [30, 2, 1, "", "make_sub_graph"], [30, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[31, 1, 1, "", "QuantFormat"], [31, 1, 1, "", "QuantType"], [31, 1, 1, "", "QuantizationMode"], [31, 1, 1, "", "QuantizedInitializer"], [31, 1, 1, "", "QuantizedValue"], [31, 1, 1, "", "QuantizedValueType"], [31, 1, 1, "", "ValueInfo"], [31, 2, 1, "", "attribute_to_kwarg"], [31, 2, 1, "", "calculate_scale_zp"], [31, 2, 1, "", "cast_tensor"], [31, 2, 1, "", "collate_preds"], [31, 2, 1, "", "dequantize_data"], [31, 2, 1, "", "dequantize_data_with_scale_zero"], [31, 2, 1, "", "dtype_to_name"], [31, 2, 1, "", "find_by_name"], [31, 2, 1, "", "float_to_bfloat16"], [31, 2, 1, "", "float_to_float16"], [31, 2, 1, "", "get_node_original_name"], [31, 2, 1, "", "infer_shapes"], [31, 2, 1, "", "is_B_transposed"], [31, 2, 1, "", "make_dquant_node"], [31, 2, 1, "", "make_quant_node"], [31, 2, 1, "", "quantize_data"], [31, 2, 1, "", "quantize_data_per_channel"], [31, 2, 1, "", "quantize_data_with_scale_zero"], [31, 2, 1, "", "quantize_nparray"], [31, 2, 1, "", "remove_init_from_model_input"], [31, 2, 1, "", "simple_progress_bar"], [31, 2, 1, "", "split_shared_bias"], [31, 2, 1, "", "to_numpy"], [31, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, 2, 1, "", "apply_awq_clip"], [32, 2, 1, "", "apply_awq_scale"], [32, 2, 1, "", "awq_quantize"], [32, 2, 1, "", "get_blob_size"], [32, 2, 1, "", "get_weight_scale"], [32, 2, 1, "", "gptq"], [32, 2, 1, "", "gptq_quantize"], [32, 2, 1, "", "make_matmul_weight_only_node"], [32, 2, 1, "", "pad_tensor"], [32, 2, 1, "", "prepare_inputs"], [32, 2, 1, "", "qdq_tensor"], [32, 2, 1, "", "quant_tensor"], [32, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.tensorflow": [[33, 1, 1, "", "TensorFlowAdaptor"], [33, 1, 1, "", "TensorflowQuery"], [33, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[34, 0, 0, "-", "graph_converter"], [35, 0, 0, "-", "graph_converter_without_calib"], [73, 0, 0, "-", "graph_rewriter"], [96, 0, 0, "-", "graph_util"], [98, 0, 0, "-", "quantize_graph"], [125, 0, 0, "-", "quantize_graph_common"], [126, 0, 0, "-", "smooth_quant_calibration"], [127, 0, 0, "-", "smooth_quant_scaler"], [128, 0, 0, "-", "tf2onnx_converter"], [131, 0, 0, "-", "transform_graph"], [134, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[38, 0, 0, "-", "bf16"], [62, 0, 0, "-", "generic"], [72, 0, 0, "-", "graph_base"], [81, 0, 0, "-", "int8"], [87, 0, 0, "-", "onnx"], [92, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[36, 0, 0, "-", "bf16_convert"], [37, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[39, 0, 0, "-", "convert_add_to_biasadd"], [40, 0, 0, "-", "convert_layout"], [41, 0, 0, "-", "convert_leakyrelu"], [42, 0, 0, "-", "convert_nan_to_random"], [43, 0, 0, "-", "convert_placeholder_to_const"], [44, 0, 0, "-", "dilated_contraction"], [45, 0, 0, "-", "dummy_biasadd"], [46, 0, 0, "-", "expanddims_optimizer"], [47, 0, 0, "-", "fetch_weight_from_reshape"], [48, 0, 0, "-", "fold_batch_norm"], [49, 0, 0, "-", "fold_constant"], [50, 0, 0, "-", "fuse_biasadd_add"], [51, 0, 0, "-", "fuse_column_wise_mul"], [52, 0, 0, "-", "fuse_conv_with_math"], [53, 0, 0, "-", "fuse_decomposed_bn"], [54, 0, 0, "-", "fuse_decomposed_in"], [55, 0, 0, "-", "fuse_gelu"], [56, 0, 0, "-", "fuse_layer_norm"], [57, 0, 0, "-", "fuse_pad_with_conv"], [58, 0, 0, "-", "fuse_pad_with_fp32_conv"], [59, 0, 0, "-", "fuse_reshape_transpose"], [60, 0, 0, "-", "graph_cse_optimizer"], [61, 0, 0, "-", "grappler_pass"], [63, 0, 0, "-", "insert_print_node"], [64, 0, 0, "-", "move_squeeze_after_relu"], [65, 0, 0, "-", "pre_optimize"], [66, 0, 0, "-", "remove_training_nodes"], [67, 0, 0, "-", "rename_batch_norm"], [68, 0, 0, "-", "split_shared_input"], [69, 0, 0, "-", "strip_equivalent_nodes"], [70, 0, 0, "-", "strip_unused_nodes"], [71, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, 1, 1, "", "FuseDecomposedBNOptimizer"], [53, 2, 1, "", "bypass_reshape"], [53, 2, 1, "", "get_const_dim_count"], [53, 2, 1, "", "node_from_map"], [53, 2, 1, "", "node_name_from_input"], [53, 2, 1, "", "valid_reshape_inputs"], [53, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, 1, 1, "", "FuseDecomposedINOptimizer"], [54, 2, 1, "", "bypass_reshape"], [54, 2, 1, "", "get_const_dim_count"], [54, 2, 1, "", "node_from_map"], [54, 2, 1, "", "node_name_from_input"], [54, 2, 1, "", "valid_reshape_inputs"], [54, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, 1, 1, "", "FuseLayerNormOptimizer"], [56, 2, 1, "", "node_from_map"], [56, 2, 1, "", "node_name_from_input"], [56, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[74, 0, 0, "-", "freeze_fake_quant"], [75, 0, 0, "-", "freeze_value"], [76, 0, 0, "-", "freeze_value_without_calib"], [77, 0, 0, "-", "fuse_conv_redundant_dequantize"], [78, 0, 0, "-", "fuse_conv_requantize"], [79, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [80, 0, 0, "-", "fuse_matmul_requantize"], [82, 0, 0, "-", "meta_op_optimizer"], [83, 0, 0, "-", "post_hostconst_converter"], [84, 0, 0, "-", "post_quantized_op_cse"], [85, 0, 0, "-", "rnn_convert"], [86, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [80, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[88, 0, 0, "-", "onnx_graph"], [89, 0, 0, "-", "onnx_node"], [90, 0, 0, "-", "onnx_schema"], [91, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, 1, 1, "", "OnnxOpSchema"], [90, 2, 1, "", "get_max_supported_opset_version"], [90, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, 1, 1, "", "SeqType"], [91, 2, 1, "", "add_port_to_name"], [91, 2, 1, "", "are_shapes_equal"], [91, 2, 1, "", "assert_error"], [91, 2, 1, "", "compute_const_folding_using_tf"], [91, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [91, 2, 1, "", "find_opset"], [91, 2, 1, "", "get_index_from_strided_slice_of_shape"], [91, 2, 1, "", "get_subgraphs_from_onnx"], [91, 2, 1, "", "get_tensorflow_node_attr"], [91, 2, 1, "", "get_tensorflow_node_shape_attr"], [91, 2, 1, "", "get_tensorflow_tensor_data"], [91, 2, 1, "", "get_tensorflow_tensor_shape"], [91, 2, 1, "", "infer_onnx_shape_dtype"], [91, 2, 1, "", "initialize_name_counter"], [91, 2, 1, "", "is_list_or_tuple"], [91, 2, 1, "", "is_onnx_domain"], [91, 2, 1, "", "make_onnx_inputs_outputs"], [91, 2, 1, "", "make_onnx_shape"], [91, 2, 1, "", "map_numpy_to_onnx_dtype"], [91, 2, 1, "", "map_onnx_to_numpy_type"], [91, 2, 1, "", "map_tensorflow_dtype"], [91, 2, 1, "", "read_tensorflow_node_attrs"], [91, 2, 1, "", "save_protobuf"], [91, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[93, 0, 0, "-", "insert_qdq_pattern"], [94, 0, 0, "-", "merge_duplicated_qdq"], [95, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, 1, 1, "", "GraphAnalyzer"], [96, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[100, 0, 0, "-", "qat"], [116, 0, 0, "-", "qdq"], [118, 0, 0, "-", "quantize_graph_base"], [119, 0, 0, "-", "quantize_graph_bn"], [120, 0, 0, "-", "quantize_graph_concatv2"], [121, 0, 0, "-", "quantize_graph_conv"], [122, 0, 0, "-", "quantize_graph_for_intel_cpu"], [123, 0, 0, "-", "quantize_graph_matmul"], [124, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, 0, 0, "-", "fake_quantize"], [101, 0, 0, "-", "quantize_config"], [102, 0, 0, "-", "quantize_helper"], [103, 0, 0, "-", "quantize_layers"], [108, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, 1, 1, "", "FakeQuantize"], [99, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, 2, 1, "", "init_quantize_config"], [102, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[104, 0, 0, "-", "optimize_layer"], [105, 0, 0, "-", "quantize_layer_add"], [106, 0, 0, "-", "quantize_layer_base"], [107, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, 1, 1, "", "QuantizeWrapper"], [108, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[109, 0, 0, "-", "fuse_qdq_bn"], [110, 0, 0, "-", "fuse_qdq_concatv2"], [111, 0, 0, "-", "fuse_qdq_conv"], [112, 0, 0, "-", "fuse_qdq_deconv"], [113, 0, 0, "-", "fuse_qdq_in"], [114, 0, 0, "-", "fuse_qdq_matmul"], [115, 0, 0, "-", "fuse_qdq_pooling"], [117, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, 1, 1, "", "QuantizeGraphBase"], [118, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, 1, 1, "", "SmoothQuantCalibration"], [126, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, 1, 1, "", "SmoothQuantScaler"], [127, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[129, 0, 0, "-", "bias_correction"], [130, 0, 0, "-", "graph_transform_base"], [132, 0, 0, "-", "insert_logging"], [133, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[134, 2, 1, "", "apply_inlining"], [134, 2, 1, "", "collate_tf_preds"], [134, 2, 1, "", "construct_function_from_graph_def"], [134, 2, 1, "", "disable_random"], [134, 2, 1, "", "fix_ref_type_of_graph_def"], [134, 2, 1, "", "generate_feed_dict"], [134, 2, 1, "", "get_estimator_graph"], [134, 2, 1, "", "get_graph_def"], [134, 2, 1, "", "get_input_output_node_names"], [134, 2, 1, "", "get_model_input_shape"], [134, 2, 1, "", "get_tensor_by_name"], [134, 2, 1, "", "get_tensor_val_from_graph_node"], [134, 2, 1, "", "get_weight_from_input_tensor"], [134, 2, 1, "", "int8_node_name_reverse"], [134, 2, 1, "", "is_ckpt_format"], [134, 2, 1, "", "is_saved_model_format"], [134, 2, 1, "", "iterator_sess_run"], [134, 2, 1, "", "parse_saved_model"], [134, 2, 1, "", "read_graph"], [134, 2, 1, "", "reconstruct_saved_model"], [134, 2, 1, "", "strip_equivalent_nodes"], [134, 2, 1, "", "strip_unused_nodes"], [134, 2, 1, "", "tf_diagnosis_helper"], [134, 2, 1, "", "version1_eq_version2"], [134, 2, 1, "", "version1_gt_version2"], [134, 2, 1, "", "version1_gte_version2"], [134, 2, 1, "", "version1_lt_version2"], [134, 2, 1, "", "version1_lte_version2"], [134, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[136, 0, 0, "-", "bf16_convert"], [137, 0, 0, "-", "hawq_metric"], [139, 0, 0, "-", "layer_wise_quant"], [144, 0, 0, "-", "model_wrapper"], [145, 0, 0, "-", "pattern_detector"], [146, 0, 0, "-", "symbolic_trace"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.autoround": [[135, 0, 0, "-", "model_wrapper"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[136, 1, 1, "", "BF16ModuleWrapper"], [136, 2, 1, "", "Convert"], [136, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[137, 1, 1, "", "HessianTrace"], [137, 1, 1, "", "Node_collector"], [137, 2, 1, "", "compare_weights"], [137, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[140, 0, 0, "-", "modified_pickle"], [141, 0, 0, "-", "quantize"], [142, 0, 0, "-", "torch_load"], [143, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[140, 3, 1, "", "PickleError"], [140, 3, 1, "", "PicklingError"], [140, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[141, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[142, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[143, 2, 1, "", "dowload_hf_model"], [143, 2, 1, "", "get_children"], [143, 2, 1, "", "get_module"], [143, 2, 1, "", "get_named_children"], [143, 2, 1, "", "get_super_module_by_name"], [143, 2, 1, "", "load_empty_model"], [143, 2, 1, "", "load_layer_wise_quantized_model"], [143, 2, 1, "", "load_tensor"], [143, 2, 1, "", "load_tensor_from_shard"], [143, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[144, 1, 1, "", "FakeAffineTensorQuantFunction"], [144, 1, 1, "", "MulLinear"], [144, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[145, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, 2, 1, "", "symbolic_trace"], [146, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[147, 2, 1, "", "append_attr"], [147, 2, 1, "", "auto_copy"], [147, 2, 1, "", "calculate_quant_min_max"], [147, 2, 1, "", "calibration"], [147, 2, 1, "", "check_cfg_and_qconfig"], [147, 2, 1, "", "collate_torch_preds"], [147, 2, 1, "", "collect_weight_info"], [147, 2, 1, "", "fetch_module"], [147, 2, 1, "", "forward_wrapper"], [147, 2, 1, "", "generate_activation_observer"], [147, 2, 1, "", "get_absorb_layers"], [147, 2, 1, "", "get_block_prefix"], [147, 2, 1, "", "get_depth"], [147, 2, 1, "", "get_dict_at_depth"], [147, 2, 1, "", "get_element_under_depth"], [147, 2, 1, "", "get_embedding_contiguous"], [147, 2, 1, "", "get_example_input"], [147, 2, 1, "", "get_fallback_order"], [147, 2, 1, "", "get_hidden_states"], [147, 2, 1, "", "get_module_input_output"], [147, 2, 1, "", "get_mse_order_per_fp32"], [147, 2, 1, "", "get_mse_order_per_int8"], [147, 2, 1, "", "get_op_type_by_name"], [147, 2, 1, "", "get_quantizable_ops_from_cfgs"], [147, 2, 1, "", "get_torch_version"], [147, 2, 1, "", "input2tuple"], [147, 2, 1, "", "is_fused_module"], [147, 2, 1, "", "match_datatype_pattern"], [147, 2, 1, "", "move_input_device"], [147, 2, 1, "", "paser_cfgs"], [147, 2, 1, "", "set_module"], [147, 2, 1, "", "simple_inference"], [147, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[148, 0, 0, "-", "algorithm"], [149, 0, 0, "-", "fast_bias_correction"], [151, 0, 0, "-", "smooth_quant"], [152, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[148, 1, 1, "", "ALGORITHMS"], [148, 1, 1, "", "Algorithm"], [148, 1, 1, "", "AlgorithmScheduler"], [148, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[149, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[151, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[152, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[153, 2, 1, "", "benchmark_with_raw_cmd"], [153, 2, 1, "", "call_one"], [153, 2, 1, "", "config_instance"], [153, 2, 1, "", "fit"], [153, 2, 1, "", "generate_prefix"], [153, 2, 1, "", "get_architecture"], [153, 2, 1, "", "get_bounded_threads"], [153, 2, 1, "", "get_core_ids"], [153, 2, 1, "", "get_physical_ids"], [153, 2, 1, "", "get_threads"], [153, 2, 1, "", "get_threads_per_core"], [153, 2, 1, "", "profile"], [153, 2, 1, "", "run_instance"], [153, 2, 1, "", "set_all_env_var"], [153, 2, 1, "", "set_env_var"], [153, 2, 1, "", "summary_benchmark"]], "neural_compressor.common.utils": [[154, 0, 0, "-", "logger"]], "neural_compressor.common.utils.logger": [[154, 1, 1, "", "Logger"], [154, 1, 1, "", "TuningLogger"]], "neural_compressor.compression": [[155, 0, 0, "-", "callbacks"], [157, 0, 0, "-", "distillation"], [160, 0, 0, "-", "hpo"], [163, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[155, 1, 1, "", "BaseCallbacks"], [155, 1, 1, "", "DistillationCallbacks"], [155, 1, 1, "", "PruningCallbacks"], [155, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[155, 4, 1, "", "_epoch_ran"], [155, 4, 1, "", "best_model"], [155, 4, 1, "", "best_score"], [155, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[156, 0, 0, "-", "criterions"], [158, 0, 0, "-", "optimizers"], [159, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[156, 1, 1, "", "Criterions"], [156, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [156, 1, 1, "", "KnowledgeDistillationFramework"], [156, 1, 1, "", "KnowledgeDistillationLoss"], [156, 1, 1, "", "PyTorchCriterions"], [156, 1, 1, "", "PyTorchCrossEntropyLoss"], [156, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [156, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [156, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [156, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [156, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [156, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [156, 1, 1, "", "SelfKnowledgeDistillationLoss"], [156, 1, 1, "", "TensorFlowCrossEntropyLoss"], [156, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [156, 1, 1, "", "TensorflowCriterions"], [156, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [156, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [156, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[158, 1, 1, "", "Optimizers"], [158, 1, 1, "", "PyTorchOptimizers"], [158, 1, 1, "", "PyTorchSGD"], [158, 1, 1, "", "TensorFlowAdam"], [158, 1, 1, "", "TensorFlowAdamW"], [158, 1, 1, "", "TensorFlowSGD"], [158, 1, 1, "", "TensorflowOptimizers"], [158, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[159, 2, 1, "", "get_activation"], [159, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[161, 0, 0, "-", "sa_optimizer"]], "neural_compressor.compression.pruner": [[162, 0, 0, "-", "criteria"], [165, 0, 0, "-", "model_slim"], [169, 0, 0, "-", "patterns"], [163, 2, 1, "", "prepare_pruning"], [176, 0, 0, "-", "pruners"], [181, 0, 0, "-", "pruning"], [182, 0, 0, "-", "regs"], [163, 2, 1, "", "save"], [183, 0, 0, "-", "schedulers"], [184, 0, 0, "-", "tf_criteria"], [185, 0, 0, "-", "utils"], [186, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[162, 1, 1, "", "BlockMaskCriterion"], [162, 1, 1, "", "GradientCriterion"], [162, 1, 1, "", "MagnitudeCriterion"], [162, 1, 1, "", "PruningCriterion"], [162, 1, 1, "", "RetrainFreeCriterion"], [162, 1, 1, "", "SnipCriterion"], [162, 1, 1, "", "SnipMomentumCriterion"], [162, 2, 1, "", "get_criterion"], [162, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[162, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[164, 0, 0, "-", "auto_slim"], [166, 0, 0, "-", "pattern_analyzer"], [167, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[164, 2, 1, "", "generate_ffn2_pruning_config"], [164, 2, 1, "", "generate_mha_pruning_config"], [164, 2, 1, "", "model_slim"], [164, 2, 1, "", "model_slim_ffn2"], [164, 2, 1, "", "model_slim_mha"], [164, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, 1, 1, "", "ClassifierHeadSearcher"], [166, 1, 1, "", "ClassifierHeadSearcherTF"], [166, 1, 1, "", "JitBasicSearcher"], [166, 1, 1, "", "Linear2LinearSearcher"], [166, 1, 1, "", "RecipeSearcher"], [166, 1, 1, "", "SelfMHASearcher"], [166, 2, 1, "", "get_attributes"], [166, 2, 1, "", "get_common_module"], [166, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[166, 4, 1, "", "device"], [166, 4, 1, "", "flatten_static_graph"], [166, 4, 1, "", "model"], [166, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[166, 4, 1, "", "device"], [166, 4, 1, "", "flatten_static_graph"], [166, 4, 1, "", "model"], [166, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[166, 4, 1, "", "device"], [166, 4, 1, "", "flatten_static_graph"], [166, 4, 1, "", "model"], [166, 4, 1, "", "searching_results"], [166, 4, 1, "", "static_graph"], [166, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[166, 4, 1, "", "current_pattern"], [166, 4, 1, "", "device"], [166, 4, 1, "", "flatten_static_graph"], [166, 4, 1, "", "model"], [166, 4, 1, "", "searching_results"], [166, 4, 1, "", "static_graph"], [166, 4, 1, "", "target_layers"], [166, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[166, 4, 1, "", "model"], [166, 4, 1, "", "recipe"], [166, 4, 1, "", "searching_results"], [166, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[166, 4, 1, "", "device"], [166, 4, 1, "", "flatten_static_graph"], [166, 4, 1, "", "model"], [166, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, 1, 1, "", "LinearCompression"], [167, 1, 1, "", "LinearCompressionIterator"], [167, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[167, 4, 1, "", "device"], [167, 4, 1, "", "layer_1"], [167, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[167, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[168, 0, 0, "-", "base"], [169, 2, 1, "", "get_pattern"], [170, 0, 0, "-", "mha"], [171, 0, 0, "-", "ninm"], [172, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[168, 1, 1, "", "BasePattern"], [168, 1, 1, "", "KerasBasePattern"], [168, 1, 1, "", "PytorchBasePattern"], [168, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[168, 4, 1, "", "config"], [168, 4, 1, "", "invalid_layers"], [168, 4, 1, "", "is_global"], [168, 4, 1, "", "keep_mask_layers"], [168, 4, 1, "", "max_sparsity_ratio_per_op"], [168, 4, 1, "", "min_sparsity_ratio_per_op"], [168, 4, 1, "", "modules"], [168, 4, 1, "", "pattern"], [168, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[168, 4, 1, "", "config"], [168, 4, 1, "", "invalid_layers"], [168, 4, 1, "", "is_global"], [168, 4, 1, "", "keep_mask_layers"], [168, 4, 1, "", "max_sparsity_ratio_per_op"], [168, 4, 1, "", "min_sparsity_ratio_per_op"], [168, 4, 1, "", "modules"], [168, 4, 1, "", "pattern"], [168, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[168, 4, 1, "", "config"], [168, 4, 1, "", "invalid_layers"], [168, 4, 1, "", "is_global"], [168, 4, 1, "", "keep_mask_layers"], [168, 4, 1, "", "max_sparsity_ratio_per_op"], [168, 4, 1, "", "min_sparsity_ratio_per_op"], [168, 4, 1, "", "modules"], [168, 4, 1, "", "pattern"], [168, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[170, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[170, 4, 1, "", "M"], [170, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[171, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[171, 4, 1, "", "M"], [171, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[172, 1, 1, "", "KerasPatternNxM"], [172, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[172, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[172, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[173, 0, 0, "-", "base"], [174, 0, 0, "-", "basic"], [175, 0, 0, "-", "block_mask"], [176, 2, 1, "", "get_pruner"], [177, 0, 0, "-", "mha"], [176, 2, 1, "", "parse_valid_pruner_types"], [178, 0, 0, "-", "pattern_lock"], [179, 0, 0, "-", "progressive"], [180, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[173, 1, 1, "", "BasePruner"], [173, 1, 1, "", "KerasBasePruner"], [173, 1, 1, "", "PytorchBasePruner"], [173, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[173, 4, 1, "", "config"], [173, 4, 1, "", "current_sparsity_ratio"], [173, 4, 1, "", "end_step"], [173, 4, 1, "", "global_step"], [173, 4, 1, "", "masks"], [173, 4, 1, "", "max_sparsity_ratio_per_op"], [173, 4, 1, "", "modules"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "pruning_frequency"], [173, 4, 1, "", "scheduler"], [173, 4, 1, "", "scores"], [173, 4, 1, "", "start_step"], [173, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[173, 4, 1, "", "config"], [173, 4, 1, "", "current_sparsity_ratio"], [173, 4, 1, "", "end_step"], [173, 4, 1, "", "global_step"], [173, 4, 1, "", "masks"], [173, 4, 1, "", "max_sparsity_ratio_per_op"], [173, 4, 1, "", "modules"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "pruning_frequency"], [173, 4, 1, "", "scheduler"], [173, 4, 1, "", "scores"], [173, 4, 1, "", "start_step"], [173, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[173, 4, 1, "", "config"], [173, 4, 1, "", "current_sparsity_ratio"], [173, 4, 1, "", "end_step"], [173, 4, 1, "", "global_step"], [173, 4, 1, "", "masks"], [173, 4, 1, "", "max_sparsity_ratio_per_op"], [173, 4, 1, "", "modules"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "pruning_frequency"], [173, 4, 1, "", "scheduler"], [173, 4, 1, "", "scores"], [173, 4, 1, "", "start_step"], [173, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[174, 1, 1, "", "KerasBasicPruner"], [174, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[174, 4, 1, "", "criterion"], [174, 4, 1, "", "pattern"], [174, 4, 1, "", "reg"], [174, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[174, 4, 1, "", "criterion"], [174, 4, 1, "", "pattern"], [174, 4, 1, "", "reg"], [174, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[175, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[175, 4, 1, "", "criterion"], [175, 4, 1, "", "pattern"], [175, 4, 1, "", "reg"], [175, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[177, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[177, 4, 1, "", "head_masks"], [177, 4, 1, "", "linear_layers"], [177, 4, 1, "", "mha_compressions"], [177, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[178, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[179, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[180, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[180, 4, 1, "", "criterion"], [180, 4, 1, "", "pattern"], [180, 4, 1, "", "reg"], [180, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[181, 1, 1, "", "BasePruning"], [181, 1, 1, "", "BasicPruning"], [181, 1, 1, "", "RetrainFreePruning"], [181, 1, 1, "", "SparseGPTPruning"], [181, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[181, 4, 1, "", "config_file_path"], [181, 4, 1, "", "model"], [181, 4, 1, "", "pruner_info"], [181, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[181, 4, 1, "", "config_file_path"], [181, 4, 1, "", "model"], [181, 4, 1, "", "pruner_info"], [181, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[181, 4, 1, "", "config_file_path"], [181, 4, 1, "", "model"], [181, 4, 1, "", "pruner_info"], [181, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[182, 1, 1, "", "BaseReg"], [182, 1, 1, "", "GroupLasso"], [182, 2, 1, "", "get_reg"], [182, 2, 1, "", "get_reg_type"], [182, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[182, 4, 1, "", "alpha"], [182, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[183, 1, 1, "", "IterativeScheduler"], [183, 1, 1, "", "OneshotScheduler"], [183, 1, 1, "", "PruningScheduler"], [183, 2, 1, "", "get_scheduler"], [183, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[183, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[184, 1, 1, "", "MagnitudeCriterion"], [184, 1, 1, "", "PruningCriterion"], [184, 2, 1, "", "get_tf_criterion"], [184, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[184, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[184, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[185, 2, 1, "", "check_config"], [185, 2, 1, "", "check_key_validity"], [185, 2, 1, "", "collect_layer_inputs"], [185, 2, 1, "", "generate_pruner_config"], [185, 2, 1, "", "get_layers"], [185, 2, 1, "", "get_sparsity_ratio"], [185, 2, 1, "", "get_sparsity_ratio_tf"], [185, 2, 1, "", "parse_last_linear"], [185, 2, 1, "", "parse_last_linear_tf"], [185, 2, 1, "", "parse_to_prune"], [185, 2, 1, "", "parse_to_prune_tf"], [185, 2, 1, "", "process_and_check_config"], [185, 2, 1, "", "process_config"], [185, 2, 1, "", "process_weight_config"], [185, 2, 1, "", "process_yaml_config"], [185, 2, 1, "", "reset_none_to_default"], [185, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[187, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.wanda.utils": [[187, 2, 1, "", "find_layers"]], "neural_compressor.conf": [[188, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.pythonic_config": [[188, 1, 1, "", "AccuracyCriterion"], [188, 1, 1, "", "BenchmarkConfig"], [188, 1, 1, "", "DistillationConfig"], [188, 1, 1, "", "KnowledgeDistillationLossConfig"], [188, 1, 1, "", "Options"], [188, 1, 1, "", "QuantizationConfig"], [188, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[189, 1, 1, "", "AccuracyCriterion"], [189, 1, 1, "", "BenchmarkConfig"], [189, 1, 1, "", "DistillationConfig"], [189, 1, 1, "", "DotDict"], [189, 1, 1, "", "ExportConfig"], [189, 1, 1, "", "HPOConfig"], [189, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [189, 1, 1, "", "Keras"], [189, 1, 1, "", "KnowledgeDistillationLossConfig"], [189, 1, 1, "", "MXNet"], [189, 1, 1, "", "MixedPrecisionConfig"], [189, 1, 1, "", "NASConfig"], [189, 1, 1, "", "ONNX"], [189, 1, 1, "", "ONNXQlinear2QDQConfig"], [189, 1, 1, "", "Options"], [189, 1, 1, "", "PostTrainingQuantConfig"], [189, 1, 1, "", "PyTorch"], [189, 1, 1, "", "QuantizationAwareTrainingConfig"], [189, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [189, 1, 1, "", "TF2ONNXConfig"], [189, 1, 1, "", "TensorFlow"], [189, 1, 1, "", "Torch2ONNXConfig"], [189, 1, 1, "", "TuningCriterion"], [189, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[191, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[192, 0, 0, "-", "sigopt"], [193, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[192, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[193, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[209, 0, 0, "-", "datasets"], [213, 0, 0, "-", "filters"], [216, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[194, 0, 0, "-", "base_dataloader"], [195, 0, 0, "-", "dataloader"], [196, 0, 0, "-", "default_dataloader"], [197, 0, 0, "-", "fetcher"], [198, 0, 0, "-", "mxnet_dataloader"], [199, 0, 0, "-", "onnxrt_dataloader"], [200, 0, 0, "-", "pytorch_dataloader"], [201, 0, 0, "-", "sampler"], [202, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[194, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[195, 1, 1, "", "DataLoader"], [195, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[196, 1, 1, "", "DefaultDataLoader"], [196, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[197, 1, 1, "", "Fetcher"], [197, 1, 1, "", "IndexFetcher"], [197, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[198, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[199, 1, 1, "", "ONNXRTBertDataLoader"], [199, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[200, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[201, 1, 1, "", "BatchSampler"], [201, 1, 1, "", "IterableSampler"], [201, 1, 1, "", "Sampler"], [201, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[202, 1, 1, "", "TFDataDataLoader"], [202, 1, 1, "", "TensorflowBertDataLoader"], [202, 1, 1, "", "TensorflowDataLoader"], [202, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[203, 0, 0, "-", "bert_dataset"], [204, 0, 0, "-", "coco_dataset"], [205, 0, 0, "-", "dataset"], [206, 0, 0, "-", "dummy_dataset"], [207, 0, 0, "-", "dummy_dataset_v2"], [208, 0, 0, "-", "imagenet_dataset"], [210, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[203, 1, 1, "", "InputFeatures"], [203, 1, 1, "", "ONNXRTBertDataset"], [203, 1, 1, "", "ParseDecodeBert"], [203, 1, 1, "", "PytorchBertDataset"], [203, 1, 1, "", "TensorflowBertDataset"], [203, 1, 1, "", "TensorflowModelZooBertDataset"], [203, 2, 1, "", "convert_examples_to_features"], [203, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[204, 1, 1, "", "COCONpy"], [204, 1, 1, "", "COCORaw"], [204, 1, 1, "", "COCORecordDataset"], [204, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[205, 1, 1, "", "CIFAR10"], [205, 1, 1, "", "CIFAR100"], [205, 1, 1, "", "Dataset"], [205, 1, 1, "", "Datasets"], [205, 1, 1, "", "FashionMNIST"], [205, 1, 1, "", "ImageFolder"], [205, 1, 1, "", "IterableDataset"], [205, 1, 1, "", "MNIST"], [205, 1, 1, "", "MXNetCIFAR10"], [205, 1, 1, "", "MXNetCIFAR100"], [205, 1, 1, "", "MXNetDatasets"], [205, 1, 1, "", "MXNetFashionMNIST"], [205, 1, 1, "", "MXNetImageFolder"], [205, 1, 1, "", "MXNetMNIST"], [205, 1, 1, "", "ONNXRTITDatasets"], [205, 1, 1, "", "ONNXRTQLDatasets"], [205, 1, 1, "", "PyTorchDatasets"], [205, 1, 1, "", "PytorchCIFAR10"], [205, 1, 1, "", "PytorchCIFAR100"], [205, 1, 1, "", "PytorchFashionMNIST"], [205, 1, 1, "", "PytorchMNIST"], [205, 1, 1, "", "PytorchMxnetWrapDataset"], [205, 1, 1, "", "PytorchMxnetWrapFunction"], [205, 1, 1, "", "Tensorflow"], [205, 1, 1, "", "TensorflowCIFAR10"], [205, 1, 1, "", "TensorflowCIFAR100"], [205, 1, 1, "", "TensorflowDatasets"], [205, 1, 1, "", "TensorflowFashionMNIST"], [205, 1, 1, "", "TensorflowImageRecord"], [205, 1, 1, "", "TensorflowMNIST"], [205, 1, 1, "", "TensorflowTFRecordDataset"], [205, 1, 1, "", "TensorflowVOCRecord"], [205, 2, 1, "", "calculate_md5"], [205, 2, 1, "", "check_integrity"], [205, 2, 1, "", "dataset_registry"], [205, 2, 1, "", "download_url"], [205, 5, 1, "", "framework_datasets"], [205, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[206, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[207, 1, 1, "", "DummyDataset"], [207, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[208, 1, 1, "", "ImagenetRaw"], [208, 1, 1, "", "MXNetImagenetRaw"], [208, 1, 1, "", "ONNXRTImagenetDataset"], [208, 1, 1, "", "PytorchImagenetRaw"], [208, 1, 1, "", "TensorflowImagenetDataset"], [208, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[210, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[211, 0, 0, "-", "coco_filter"], [212, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[211, 1, 1, "", "LabelBalanceCOCORawFilter"], [211, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[212, 1, 1, "", "FILTERS"], [212, 1, 1, "", "Filter"], [212, 1, 1, "", "MXNetFilters"], [212, 1, 1, "", "ONNXRTITFilters"], [212, 1, 1, "", "ONNXRTQLFilters"], [212, 1, 1, "", "PyTorchFilters"], [212, 1, 1, "", "TensorflowFilters"], [212, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[215, 0, 0, "-", "imagenet_transform"], [217, 0, 0, "-", "postprocess"], [218, 0, 0, "-", "tokenization"], [219, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[215, 1, 1, "", "BilinearImagenetTransform"], [215, 1, 1, "", "LabelShift"], [215, 1, 1, "", "ONNXResizeCropImagenetTransform"], [215, 1, 1, "", "OnnxBilinearImagenetTransform"], [215, 1, 1, "", "ParseDecodeImagenet"], [215, 1, 1, "", "ParseDecodeImagenetTransform"], [215, 1, 1, "", "QuantizedInput"], [215, 1, 1, "", "ResizeWithAspectRatio"], [215, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [215, 1, 1, "", "TensorflowShiftRescale"], [215, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[217, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[218, 1, 1, "", "BasicTokenizer"], [218, 1, 1, "", "FullTokenizer"], [218, 1, 1, "", "WordpieceTokenizer"], [218, 2, 1, "", "convert_by_vocab"], [218, 2, 1, "", "convert_to_unicode"], [218, 2, 1, "", "load_vocab"], [218, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[219, 1, 1, "", "AlignImageChannelTransform"], [219, 1, 1, "", "BaseTransform"], [219, 1, 1, "", "CastONNXTransform"], [219, 1, 1, "", "CastPyTorchTransform"], [219, 1, 1, "", "CastTFTransform"], [219, 1, 1, "", "CenterCropTFTransform"], [219, 1, 1, "", "CenterCropTransform"], [219, 1, 1, "", "CollectTransform"], [219, 1, 1, "", "ComposeTransform"], [219, 1, 1, "", "CropResizeTFTransform"], [219, 1, 1, "", "CropResizeTransform"], [219, 1, 1, "", "CropToBoundingBox"], [219, 1, 1, "", "InputFeatures"], [219, 1, 1, "", "MXNetCropResizeTransform"], [219, 1, 1, "", "MXNetCropToBoundingBox"], [219, 1, 1, "", "MXNetNormalizeTransform"], [219, 1, 1, "", "MXNetTransforms"], [219, 1, 1, "", "MXNetTranspose"], [219, 1, 1, "", "NormalizeTFTransform"], [219, 1, 1, "", "NormalizeTransform"], [219, 1, 1, "", "ONNXRTCropToBoundingBox"], [219, 1, 1, "", "ONNXRTITTransforms"], [219, 1, 1, "", "ONNXRTQLTransforms"], [219, 1, 1, "", "PaddedCenterCropTransform"], [219, 1, 1, "", "ParseDecodeVocTransform"], [219, 1, 1, "", "PyTorchAlignImageChannel"], [219, 1, 1, "", "PyTorchCropResizeTransform"], [219, 1, 1, "", "PyTorchNormalizeTransform"], [219, 1, 1, "", "PyTorchTransforms"], [219, 1, 1, "", "PyTorchTranspose"], [219, 1, 1, "", "PytorchMxnetTransform"], [219, 1, 1, "", "PytorchMxnetWrapFunction"], [219, 1, 1, "", "RandomCropTFTransform"], [219, 1, 1, "", "RandomCropTransform"], [219, 1, 1, "", "RandomHorizontalFlip"], [219, 1, 1, "", "RandomResizedCropMXNetTransform"], [219, 1, 1, "", "RandomResizedCropPytorchTransform"], [219, 1, 1, "", "RandomResizedCropTFTransform"], [219, 1, 1, "", "RandomResizedCropTransform"], [219, 1, 1, "", "RandomVerticalFlip"], [219, 1, 1, "", "RescaleKerasPretrainTransform"], [219, 1, 1, "", "RescaleTFTransform"], [219, 1, 1, "", "RescaleTransform"], [219, 1, 1, "", "ResizeMXNetTransform"], [219, 1, 1, "", "ResizePytorchTransform"], [219, 1, 1, "", "ResizeTFTransform"], [219, 1, 1, "", "ResizeTransform"], [219, 1, 1, "", "ResizeWithRatio"], [219, 1, 1, "", "SquadExample"], [219, 1, 1, "", "TFModelZooCollectTransform"], [219, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [219, 1, 1, "", "TFSquadV1PostTransform"], [219, 1, 1, "", "TRANSFORMS"], [219, 1, 1, "", "TensorflowCropToBoundingBox"], [219, 1, 1, "", "TensorflowRandomHorizontalFlip"], [219, 1, 1, "", "TensorflowRandomVerticalFlip"], [219, 1, 1, "", "TensorflowResizeWithRatio"], [219, 1, 1, "", "TensorflowTransform"], [219, 1, 1, "", "TensorflowTransforms"], [219, 1, 1, "", "TensorflowTranspose"], [219, 1, 1, "", "TensorflowWrapFunction"], [219, 1, 1, "", "ToArray"], [219, 1, 1, "", "ToNDArrayTransform"], [219, 1, 1, "", "Transforms"], [219, 1, 1, "", "Transpose"], [219, 2, 1, "", "convert_examples_to_features"], [219, 2, 1, "", "get_final_text"], [219, 2, 1, "", "get_torchvision_map"], [219, 2, 1, "", "read_squad_examples"], [219, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[220, 0, 0, "-", "benchmark"], [223, 0, 0, "-", "common"], [229, 0, 0, "-", "component"], [230, 0, 0, "-", "compression"], [231, 0, 0, "-", "contrib"], [256, 0, 0, "-", "data"], [261, 0, 0, "-", "distillation"], [262, 0, 0, "-", "export"], [266, 0, 0, "-", "graph_optimization"], [274, 0, 0, "-", "metric"], [276, 0, 0, "-", "mixed_precision"], [277, 0, 0, "-", "model_conversion"], [280, 0, 0, "-", "nas"], [286, 0, 0, "-", "pruner_legacy"], [290, 0, 0, "-", "pruning"], [291, 0, 0, "-", "pruning_recipes"], [295, 0, 0, "-", "pruning_v2"], [296, 0, 0, "-", "pytorch_pruner"], [303, 0, 0, "-", "quantization"], [304, 0, 0, "-", "scheduler"], [309, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[220, 1, 1, "", "Benchmark"], [220, 2, 1, "", "get_architecture"], [220, 2, 1, "", "get_bounded_threads"], [220, 2, 1, "", "get_core_ids"], [220, 2, 1, "", "get_physical_ids"], [220, 2, 1, "", "get_threads"], [220, 2, 1, "", "get_threads_per_core"], [220, 2, 1, "", "set_all_env_var"], [220, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[221, 0, 0, "-", "criterion"], [222, 0, 0, "-", "dataloader"], [224, 0, 0, "-", "metric"], [225, 0, 0, "-", "model"], [226, 0, 0, "-", "optimizer"], [227, 0, 0, "-", "postprocess"], [228, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[221, 1, 1, "", "Criterions"], [221, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [221, 1, 1, "", "KnowledgeDistillationFramework"], [221, 1, 1, "", "KnowledgeDistillationLoss"], [221, 1, 1, "", "PyTorchCriterions"], [221, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [221, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [221, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [221, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [221, 1, 1, "", "SelfKnowledgeDistillationLoss"], [221, 1, 1, "", "TensorflowCriterions"], [221, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [221, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[222, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[224, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[225, 1, 1, "", "Model"], [225, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[226, 1, 1, "", "Optimizers"], [226, 1, 1, "", "PyTorchOptimizers"], [226, 1, 1, "", "PyTorchSGD"], [226, 1, 1, "", "TensorFlowAdamW"], [226, 1, 1, "", "TensorFlowSGD"], [226, 1, 1, "", "TensorflowOptimizers"], [226, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[227, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[228, 2, 1, "", "get_activation"], [228, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[229, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[232, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[233, 0, 0, "-", "sigopt"], [234, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[233, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[234, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[239, 0, 0, "-", "dataloaders"], [251, 0, 0, "-", "datasets"], [255, 0, 0, "-", "filters"], [258, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[235, 0, 0, "-", "base_dataloader"], [236, 0, 0, "-", "dataloader"], [237, 0, 0, "-", "default_dataloader"], [238, 0, 0, "-", "fetcher"], [240, 0, 0, "-", "mxnet_dataloader"], [241, 0, 0, "-", "onnxrt_dataloader"], [242, 0, 0, "-", "pytorch_dataloader"], [243, 0, 0, "-", "sampler"], [244, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[235, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[237, 1, 1, "", "DefaultDataLoader"], [237, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[238, 1, 1, "", "Fetcher"], [238, 1, 1, "", "IndexFetcher"], [238, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[240, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[241, 1, 1, "", "ONNXRTBertDataLoader"], [241, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[242, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[243, 1, 1, "", "BatchSampler"], [243, 1, 1, "", "IterableSampler"], [243, 1, 1, "", "Sampler"], [243, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[244, 1, 1, "", "TFDataDataLoader"], [244, 1, 1, "", "TensorflowBertDataLoader"], [244, 1, 1, "", "TensorflowDataLoader"], [244, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[245, 0, 0, "-", "bert_dataset"], [246, 0, 0, "-", "coco_dataset"], [247, 0, 0, "-", "dataset"], [248, 0, 0, "-", "dummy_dataset"], [249, 0, 0, "-", "dummy_dataset_v2"], [250, 0, 0, "-", "imagenet_dataset"], [252, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[245, 1, 1, "", "InputFeatures"], [245, 1, 1, "", "ONNXRTBertDataset"], [245, 1, 1, "", "ParseDecodeBert"], [245, 1, 1, "", "PytorchBertDataset"], [245, 1, 1, "", "TensorflowBertDataset"], [245, 1, 1, "", "TensorflowModelZooBertDataset"], [245, 2, 1, "", "convert_examples_to_features"], [245, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[246, 1, 1, "", "COCONpy"], [246, 1, 1, "", "COCORaw"], [246, 1, 1, "", "COCORecordDataset"], [246, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[247, 1, 1, "", "CIFAR10"], [247, 1, 1, "", "CIFAR100"], [247, 1, 1, "", "Dataset"], [247, 1, 1, "", "Datasets"], [247, 1, 1, "", "FashionMNIST"], [247, 1, 1, "", "ImageFolder"], [247, 1, 1, "", "IterableDataset"], [247, 1, 1, "", "MNIST"], [247, 1, 1, "", "MXNetCIFAR10"], [247, 1, 1, "", "MXNetCIFAR100"], [247, 1, 1, "", "MXNetDatasets"], [247, 1, 1, "", "MXNetFashionMNIST"], [247, 1, 1, "", "MXNetImageFolder"], [247, 1, 1, "", "MXNetMNIST"], [247, 1, 1, "", "ONNXRTITDatasets"], [247, 1, 1, "", "ONNXRTQLDatasets"], [247, 1, 1, "", "PyTorchDatasets"], [247, 1, 1, "", "PytorchCIFAR10"], [247, 1, 1, "", "PytorchCIFAR100"], [247, 1, 1, "", "PytorchFashionMNIST"], [247, 1, 1, "", "PytorchMNIST"], [247, 1, 1, "", "PytorchMxnetWrapDataset"], [247, 1, 1, "", "PytorchMxnetWrapFunction"], [247, 1, 1, "", "TensorflowCIFAR10"], [247, 1, 1, "", "TensorflowCIFAR100"], [247, 1, 1, "", "TensorflowDatasets"], [247, 1, 1, "", "TensorflowFashionMNIST"], [247, 1, 1, "", "TensorflowImageFolder"], [247, 1, 1, "", "TensorflowImageRecord"], [247, 1, 1, "", "TensorflowMNIST"], [247, 1, 1, "", "TensorflowTFRecordDataset"], [247, 1, 1, "", "TensorflowVOCRecord"], [247, 2, 1, "", "calculate_md5"], [247, 2, 1, "", "check_integrity"], [247, 2, 1, "", "dataset_registry"], [247, 2, 1, "", "download_url"], [247, 5, 1, "", "framework_datasets"], [247, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[248, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[249, 1, 1, "", "DummyDataset"], [249, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[250, 1, 1, "", "ImagenetRaw"], [250, 1, 1, "", "MXNetImagenetRaw"], [250, 1, 1, "", "ONNXRTImagenetDataset"], [250, 1, 1, "", "PytorchImagenetRaw"], [250, 1, 1, "", "TensorflowImagenetDataset"], [250, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[252, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[253, 0, 0, "-", "coco_filter"], [254, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[253, 1, 1, "", "LabelBalanceCOCORawFilter"], [253, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[254, 1, 1, "", "FILTERS"], [254, 1, 1, "", "Filter"], [254, 1, 1, "", "MXNetFilters"], [254, 1, 1, "", "ONNXRTITFilters"], [254, 1, 1, "", "ONNXRTQLFilters"], [254, 1, 1, "", "PyTorchFilters"], [254, 1, 1, "", "TensorflowFilters"], [254, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[257, 0, 0, "-", "imagenet_transform"], [259, 0, 0, "-", "tokenization"], [260, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[257, 1, 1, "", "BilinearImagenetTransform"], [257, 1, 1, "", "LabelShift"], [257, 1, 1, "", "ONNXResizeCropImagenetTransform"], [257, 1, 1, "", "OnnxBilinearImagenetTransform"], [257, 1, 1, "", "ParseDecodeImagenet"], [257, 1, 1, "", "ParseDecodeImagenetTransform"], [257, 1, 1, "", "QuantizedInput"], [257, 1, 1, "", "ResizeWithAspectRatio"], [257, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[259, 1, 1, "", "BasicTokenizer"], [259, 1, 1, "", "FullTokenizer"], [259, 1, 1, "", "WordpieceTokenizer"], [259, 2, 1, "", "convert_by_vocab"], [259, 2, 1, "", "convert_to_unicode"], [259, 2, 1, "", "load_vocab"], [259, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[260, 1, 1, "", "AlignImageChannelTransform"], [260, 1, 1, "", "BaseTransform"], [260, 1, 1, "", "CastONNXTransform"], [260, 1, 1, "", "CastPyTorchTransform"], [260, 1, 1, "", "CastTFTransform"], [260, 1, 1, "", "CenterCropTFTransform"], [260, 1, 1, "", "CenterCropTransform"], [260, 1, 1, "", "CollectTransform"], [260, 1, 1, "", "ComposeTransform"], [260, 1, 1, "", "CropResizeTFTransform"], [260, 1, 1, "", "CropResizeTransform"], [260, 1, 1, "", "CropToBoundingBox"], [260, 1, 1, "", "InputFeatures"], [260, 1, 1, "", "MXNetCropResizeTransform"], [260, 1, 1, "", "MXNetCropToBoundingBox"], [260, 1, 1, "", "MXNetNormalizeTransform"], [260, 1, 1, "", "MXNetTransforms"], [260, 1, 1, "", "MXNetTranspose"], [260, 1, 1, "", "NormalizeTFTransform"], [260, 1, 1, "", "NormalizeTransform"], [260, 1, 1, "", "ONNXRTCropToBoundingBox"], [260, 1, 1, "", "ONNXRTITTransforms"], [260, 1, 1, "", "ONNXRTQLTransforms"], [260, 1, 1, "", "PaddedCenterCropTransform"], [260, 1, 1, "", "ParseDecodeVocTransform"], [260, 1, 1, "", "PyTorchAlignImageChannel"], [260, 1, 1, "", "PyTorchCropResizeTransform"], [260, 1, 1, "", "PyTorchNormalizeTransform"], [260, 1, 1, "", "PyTorchTransforms"], [260, 1, 1, "", "PyTorchTranspose"], [260, 1, 1, "", "PytorchMxnetTransform"], [260, 1, 1, "", "PytorchMxnetWrapFunction"], [260, 1, 1, "", "RandomCropTFTransform"], [260, 1, 1, "", "RandomCropTransform"], [260, 1, 1, "", "RandomHorizontalFlip"], [260, 1, 1, "", "RandomResizedCropMXNetTransform"], [260, 1, 1, "", "RandomResizedCropPytorchTransform"], [260, 1, 1, "", "RandomResizedCropTFTransform"], [260, 1, 1, "", "RandomResizedCropTransform"], [260, 1, 1, "", "RandomVerticalFlip"], [260, 1, 1, "", "RescaleKerasPretrainTransform"], [260, 1, 1, "", "RescaleTFTransform"], [260, 1, 1, "", "RescaleTransform"], [260, 1, 1, "", "ResizeMXNetTransform"], [260, 1, 1, "", "ResizePytorchTransform"], [260, 1, 1, "", "ResizeTFTransform"], [260, 1, 1, "", "ResizeTransform"], [260, 1, 1, "", "ResizeWithRatio"], [260, 1, 1, "", "SquadExample"], [260, 1, 1, "", "TFModelZooCollectTransform"], [260, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [260, 1, 1, "", "TFSquadV1PostTransform"], [260, 1, 1, "", "TRANSFORMS"], [260, 1, 1, "", "TensorflowCropToBoundingBox"], [260, 1, 1, "", "TensorflowRandomHorizontalFlip"], [260, 1, 1, "", "TensorflowRandomVerticalFlip"], [260, 1, 1, "", "TensorflowResizeWithRatio"], [260, 1, 1, "", "TensorflowTransform"], [260, 1, 1, "", "TensorflowTransforms"], [260, 1, 1, "", "TensorflowTranspose"], [260, 1, 1, "", "TensorflowWrapFunction"], [260, 1, 1, "", "ToArray"], [260, 1, 1, "", "ToNDArrayTransform"], [260, 1, 1, "", "Transforms"], [260, 1, 1, "", "Transpose"], [260, 2, 1, "", "convert_examples_to_features"], [260, 2, 1, "", "get_final_text"], [260, 2, 1, "", "get_torchvision_map"], [260, 2, 1, "", "read_squad_examples"], [260, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[261, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[261, 4, 1, "", "_epoch_ran"], [261, 4, 1, "", "best_model"], [261, 4, 1, "", "best_score"], [261, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[263, 0, 0, "-", "qlinear2qdq"], [264, 0, 0, "-", "tf2onnx"], [265, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[263, 2, 1, "", "check_model"], [263, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[264, 2, 1, "", "tf_to_fp32_onnx"], [264, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[265, 2, 1, "", "dynamic_quant_export"], [265, 2, 1, "", "get_node_mapping"], [265, 2, 1, "", "get_quantizable_onnx_ops"], [265, 2, 1, "", "static_quant_export"], [265, 2, 1, "", "torch_to_fp32_onnx"], [265, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[266, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[268, 0, 0, "-", "bleu"], [269, 0, 0, "-", "bleu_util"], [270, 0, 0, "-", "coco_label_map"], [271, 0, 0, "-", "coco_tools"], [272, 0, 0, "-", "evaluate_squad"], [273, 0, 0, "-", "f1"], [275, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[268, 1, 1, "", "BLEU"], [268, 1, 1, "", "UnicodeRegex"], [268, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[268, 4, 1, "", "labels"], [268, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[268, 4, 1, "", "nondigit_punct_re"], [268, 4, 1, "", "punct_nondigit_re"], [268, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[269, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[271, 1, 1, "", "COCOEvalWrapper"], [271, 1, 1, "", "COCOWrapper"], [271, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [271, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [271, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[271, 4, 1, "", "dataset"], [271, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[272, 2, 1, "", "evaluate"], [272, 2, 1, "", "exact_match_score"], [272, 2, 1, "", "f1_score"], [272, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[273, 2, 1, "", "evaluate"], [273, 2, 1, "", "f1_score"], [273, 2, 1, "", "metric_max_over_ground_truths"], [273, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[275, 1, 1, "", "Accuracy"], [275, 1, 1, "", "BaseMetric"], [275, 1, 1, "", "COCOmAPv2"], [275, 1, 1, "", "F1"], [275, 1, 1, "", "GeneralTopK"], [275, 1, 1, "", "Loss"], [275, 1, 1, "", "MAE"], [275, 1, 1, "", "METRICS"], [275, 1, 1, "", "MSE"], [275, 1, 1, "", "MXNetMetrics"], [275, 1, 1, "", "ONNXRTGLUE"], [275, 1, 1, "", "ONNXRTITMetrics"], [275, 1, 1, "", "ONNXRTQLMetrics"], [275, 1, 1, "", "PyTorchLoss"], [275, 1, 1, "", "PyTorchMetrics"], [275, 1, 1, "", "RMSE"], [275, 1, 1, "", "ROC"], [275, 1, 1, "", "SquadF1"], [275, 1, 1, "", "TensorflowCOCOMAP"], [275, 1, 1, "", "TensorflowMAP"], [275, 1, 1, "", "TensorflowMetrics"], [275, 1, 1, "", "TensorflowTopK"], [275, 1, 1, "", "TensorflowVOCMAP"], [275, 1, 1, "", "WrapMXNetMetric"], [275, 1, 1, "", "WrapONNXRTMetric"], [275, 1, 1, "", "WrapPyTorchMetric"], [275, 1, 1, "", "mIOU"], [275, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[275, 4, 1, "", "label_list"], [275, 4, 1, "", "pred_list"], [275, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[275, 4, 1, "", "k"], [275, 4, 1, "", "num_correct"], [275, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[275, 4, 1, "", "sample"], [275, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[275, 4, 1, "", "compare_label"], [275, 4, 1, "", "label_list"], [275, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[275, 4, 1, "", "compare_label"], [275, 4, 1, "", "label_list"], [275, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[275, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[275, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[275, 4, 1, "", "k"], [275, 4, 1, "", "num_correct"], [275, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[276, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[277, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[278, 0, 0, "-", "basic_nas"], [279, 0, 0, "-", "dynas"], [281, 0, 0, "-", "nas"], [282, 0, 0, "-", "nas_utils"], [283, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[278, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[279, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[281, 1, 1, "", "NAS"], [281, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[282, 2, 1, "", "create_search_space_pool"], [282, 2, 1, "", "find_pareto_front"], [282, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[283, 1, 1, "", "BayesianOptimizationSearcher"], [283, 1, 1, "", "GridSearcher"], [283, 1, 1, "", "RandomSearcher"], [283, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[284, 0, 0, "-", "gradient_sensitivity"], [285, 0, 0, "-", "group_lasso"], [287, 0, 0, "-", "magnitude"], [288, 0, 0, "-", "pattern_lock"], [289, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[284, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[285, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[287, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[288, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[289, 1, 1, "", "Pruner"], [289, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[290, 1, 1, "", "Pruning"], [290, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[290, 4, 1, "", "conf"], [290, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[292, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[293, 0, 0, "-", "pattern"], [294, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[293, 1, 1, "", "PATTERNS"], [293, 1, 1, "", "PatternBase"], [293, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[293, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[294, 1, 1, "", "TilePatternBase"], [294, 1, 1, "", "TilePattern_1x1"], [294, 1, 1, "", "TilePattern_1x16"], [294, 1, 1, "", "TilePattern_1x2"], [294, 1, 1, "", "TilePattern_2x2"], [294, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[295, 1, 1, "", "Pruning"], [295, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[295, 4, 1, "", "conf"], [295, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[297, 0, 0, "-", "logger"], [298, 0, 0, "-", "patterns"], [299, 0, 0, "-", "prune_utils"], [300, 0, 0, "-", "pruner"], [301, 0, 0, "-", "pruning"], [302, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[298, 1, 1, "", "Pattern"], [298, 1, 1, "", "PatternNInM"], [298, 1, 1, "", "PatternNxM"], [298, 2, 1, "", "get_pattern"], [298, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[298, 4, 1, "", "is_global"], [298, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[298, 4, 1, "", "M"], [298, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[298, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[299, 2, 1, "", "check_config"], [299, 2, 1, "", "parse_not_to_prune"], [299, 2, 1, "", "parse_to_prune"], [299, 2, 1, "", "process_and_check_config"], [299, 2, 1, "", "process_config"], [299, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[300, 1, 1, "", "MagnitudePruner"], [300, 1, 1, "", "PatternLockPruner"], [300, 1, 1, "", "Pruner"], [300, 1, 1, "", "SnipMomentumPruner"], [300, 1, 1, "", "SnipPruner"], [300, 2, 1, "", "get_pruner"], [300, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[300, 4, 1, "", "config"], [300, 4, 1, "", "current_sparsity_ratio"], [300, 4, 1, "", "end_step"], [300, 4, 1, "", "global_step"], [300, 4, 1, "", "masks"], [300, 4, 1, "", "max_sparsity_ratio_per_layer"], [300, 4, 1, "", "modules"], [300, 4, 1, "", "pattern"], [300, 4, 1, "", "scheduler"], [300, 4, 1, "", "scores"], [300, 4, 1, "", "start_step"], [300, 4, 1, "", "target_sparsity_ratio"], [300, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[301, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[301, 4, 1, "", "config_file_path"], [301, 4, 1, "", "model"], [301, 4, 1, "", "pruner_info"], [301, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[302, 1, 1, "", "IterativeScheduler"], [302, 1, 1, "", "OneshotScheduler"], [302, 1, 1, "", "Scheduler"], [302, 2, 1, "", "get_scheduler"], [302, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[302, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[303, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[304, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[305, 0, 0, "-", "auto_mixed_precision"], [306, 0, 0, "-", "basic"], [307, 0, 0, "-", "bayesian"], [308, 0, 0, "-", "exhaustive"], [310, 0, 0, "-", "mse"], [311, 0, 0, "-", "mse_v2"], [312, 0, 0, "-", "random"], [313, 0, 0, "-", "strategy"], [315, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[305, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[306, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[307, 1, 1, "", "BayesianOptimization"], [307, 1, 1, "", "BayesianTuneStrategy"], [307, 1, 1, "", "TargetSpace"], [307, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[308, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[310, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[311, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[312, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[313, 1, 1, "", "TuneStrategy"], [313, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[314, 0, 0, "-", "constant"], [316, 0, 0, "-", "tuning_sampler"], [317, 0, 0, "-", "tuning_space"], [318, 0, 0, "-", "tuning_structs"], [319, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[316, 1, 1, "", "FallbackTuningSampler"], [316, 1, 1, "", "ModelWiseTuningSampler"], [316, 1, 1, "", "OpTypeWiseTuningSampler"], [316, 1, 1, "", "OpWiseTuningSampler"], [316, 1, 1, "", "SmoothQuantSampler"], [316, 1, 1, "", "TuningOrder"], [316, 1, 1, "", "TuningSampler"], [316, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[317, 1, 1, "", "TuningItem"], [317, 1, 1, "", "TuningSpace"], [317, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [317, 2, 1, "", "pattern_to_internal"], [317, 2, 1, "", "pattern_to_path"], [317, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[318, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[319, 1, 1, "", "OrderedDefaultDict"], [319, 2, 1, "", "extract_data_type"], [319, 2, 1, "", "get_adaptor_name"], [319, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[321, 0, 0, "-", "bleu"], [322, 0, 0, "-", "bleu_util"], [323, 0, 0, "-", "coco_label_map"], [324, 0, 0, "-", "coco_tools"], [325, 0, 0, "-", "evaluate_squad"], [326, 0, 0, "-", "f1"], [328, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[321, 1, 1, "", "BLEU"], [321, 1, 1, "", "UnicodeRegex"], [321, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[321, 4, 1, "", "labels"], [321, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[321, 4, 1, "", "nondigit_punct_re"], [321, 4, 1, "", "punct_nondigit_re"], [321, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[322, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[324, 1, 1, "", "COCOEvalWrapper"], [324, 1, 1, "", "COCOWrapper"], [324, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [324, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [324, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[324, 4, 1, "", "dataset"], [324, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[325, 2, 1, "", "evaluate"], [325, 2, 1, "", "exact_match_score"], [325, 2, 1, "", "f1_score"], [325, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[326, 2, 1, "", "evaluate"], [326, 2, 1, "", "f1_score"], [326, 2, 1, "", "metric_max_over_ground_truths"], [326, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[328, 1, 1, "", "Accuracy"], [328, 1, 1, "", "BaseMetric"], [328, 1, 1, "", "COCOmAPv2"], [328, 1, 1, "", "F1"], [328, 1, 1, "", "GeneralTopK"], [328, 1, 1, "", "Loss"], [328, 1, 1, "", "MAE"], [328, 1, 1, "", "METRICS"], [328, 1, 1, "", "MSE"], [328, 1, 1, "", "MXNetMetrics"], [328, 1, 1, "", "Metric"], [328, 1, 1, "", "ONNXRTGLUE"], [328, 1, 1, "", "ONNXRTITMetrics"], [328, 1, 1, "", "ONNXRTQLMetrics"], [328, 1, 1, "", "PyTorchLoss"], [328, 1, 1, "", "PyTorchMetrics"], [328, 1, 1, "", "RMSE"], [328, 1, 1, "", "ROC"], [328, 1, 1, "", "SquadF1"], [328, 1, 1, "", "TensorflowCOCOMAP"], [328, 1, 1, "", "TensorflowMAP"], [328, 1, 1, "", "TensorflowMetrics"], [328, 1, 1, "", "TensorflowTopK"], [328, 1, 1, "", "TensorflowVOCMAP"], [328, 1, 1, "", "WrapMXNetMetric"], [328, 1, 1, "", "WrapONNXRTMetric"], [328, 1, 1, "", "WrapPyTorchMetric"], [328, 1, 1, "", "mIOU"], [328, 2, 1, "", "metric_registry"], [328, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[328, 4, 1, "", "label_list"], [328, 4, 1, "", "pred_list"], [328, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[328, 4, 1, "", "k"], [328, 4, 1, "", "num_correct"], [328, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[328, 4, 1, "", "sample"], [328, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[328, 4, 1, "", "compare_label"], [328, 4, 1, "", "label_list"], [328, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[328, 4, 1, "", "compare_label"], [328, 4, 1, "", "label_list"], [328, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[328, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[328, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[328, 4, 1, "", "k"], [328, 4, 1, "", "num_correct"], [328, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[329, 2, 1, "", "fit"]], "neural_compressor.model": [[330, 0, 0, "-", "base_model"], [332, 0, 0, "-", "keras_model"], [333, 0, 0, "-", "model"], [334, 0, 0, "-", "mxnet_model"], [335, 0, 0, "-", "nets_factory"], [336, 0, 0, "-", "onnx_model"], [337, 0, 0, "-", "tensorflow_model"], [338, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[330, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[332, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[333, 1, 1, "", "Model"], [333, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[334, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[335, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[336, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[337, 1, 1, "", "TensorflowBaseModel"], [337, 1, 1, "", "TensorflowCheckpointModel"], [337, 1, 1, "", "TensorflowLLMModel"], [337, 1, 1, "", "TensorflowModel"], [337, 1, 1, "", "TensorflowQATModel"], [337, 1, 1, "", "TensorflowSavedModelModel"], [337, 2, 1, "", "checkpoint_session"], [337, 2, 1, "", "estimator_session"], [337, 2, 1, "", "frozen_pb_session"], [337, 2, 1, "", "get_model_type"], [337, 2, 1, "", "graph_def_session"], [337, 2, 1, "", "graph_session"], [337, 2, 1, "", "keras_session"], [337, 2, 1, "", "load_saved_model"], [337, 2, 1, "", "saved_model_session"], [337, 2, 1, "", "slim_session"], [337, 2, 1, "", "try_loading_keras"], [337, 2, 1, "", "validate_and_inference_input_output"], [337, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[338, 1, 1, "", "IPEXModel"], [338, 1, 1, "", "PyTorchBaseModel"], [338, 1, 1, "", "PyTorchFXModel"], [338, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[339, 1, 1, "", "Accuracy"], [339, 1, 1, "", "Footprint"], [339, 1, 1, "", "ModelSize"], [339, 1, 1, "", "MultiObjective"], [339, 1, 1, "", "Objective"], [339, 1, 1, "", "Performance"], [339, 2, 1, "", "objective_custom_registry"], [339, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt.algorithms.smoother": [[340, 0, 0, "-", "calibrator"], [341, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[340, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[341, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.utils": [[342, 0, 0, "-", "onnx_model"]], "neural_compressor.onnxrt.utils.onnx_model": [[342, 1, 1, "", "ONNXModel"]], "neural_compressor.profiling.parser": [[344, 0, 0, "-", "factory"], [347, 0, 0, "-", "parser"], [348, 0, 0, "-", "result"]], "neural_compressor.profiling.parser.factory": [[344, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[345, 0, 0, "-", "factory"], [346, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[345, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[346, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[347, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[348, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[349, 0, 0, "-", "factory"], [350, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[349, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[350, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[351, 0, 0, "-", "factory"], [355, 0, 0, "-", "profiler"]], "neural_compressor.profiling.profiler.factory": [[351, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[352, 0, 0, "-", "factory"], [353, 0, 0, "-", "profiler"], [354, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[355, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[356, 0, 0, "-", "factory"], [357, 0, 0, "-", "profiler"], [358, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, 2, 1, "", "create_tf_config"], [358, 2, 1, "", "delete_assign"], [358, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[359, 2, 1, "", "fit"]], "neural_compressor.strategy": [[360, 0, 0, "-", "auto"], [361, 0, 0, "-", "auto_mixed_precision"], [362, 0, 0, "-", "basic"], [363, 0, 0, "-", "bayesian"], [364, 0, 0, "-", "conservative"], [365, 0, 0, "-", "exhaustive"], [366, 0, 0, "-", "hawq_v2"], [368, 0, 0, "-", "mse"], [369, 0, 0, "-", "mse_v2"], [370, 0, 0, "-", "random"], [371, 0, 0, "-", "strategy"], [373, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[360, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[361, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[362, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[363, 1, 1, "", "BayesianOptimization"], [363, 1, 1, "", "BayesianTuneStrategy"], [363, 1, 1, "", "TargetSpace"], [363, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[364, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[365, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[366, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[368, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[369, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[370, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[371, 1, 1, "", "TuneStrategy"], [371, 1, 1, "", "TuneStrategyMeta"], [371, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[372, 0, 0, "-", "constant"], [374, 0, 0, "-", "tuning_sampler"], [375, 0, 0, "-", "tuning_space"], [376, 0, 0, "-", "tuning_structs"], [377, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[374, 1, 1, "", "BlockFallbackTuningSampler"], [374, 1, 1, "", "FallbackTuningSampler"], [374, 1, 1, "", "LowerBitsSampler"], [374, 1, 1, "", "ModelWiseTuningSampler"], [374, 1, 1, "", "OpTypeWiseTuningSampler"], [374, 1, 1, "", "OpWiseTuningSampler"], [374, 1, 1, "", "SmoothQuantSampler"], [374, 1, 1, "", "TuningOrder"], [374, 1, 1, "", "TuningSampler"], [374, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[375, 1, 1, "", "TuningItem"], [375, 1, 1, "", "TuningSpace"], [375, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [375, 2, 1, "", "pattern_to_internal"], [375, 2, 1, "", "pattern_to_path"], [375, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[376, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[377, 1, 1, "", "ClassRegister"], [377, 1, 1, "", "OrderedDefaultDict"], [377, 1, 1, "", "QuantOptions"], [377, 1, 1, "", "QuantType"], [377, 2, 1, "", "build_slave_faker_model"], [377, 2, 1, "", "extract_data_type"], [377, 2, 1, "", "get_adaptor_name"], [377, 2, 1, "", "preprocess_user_cfg"], [377, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[378, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[378, 1, 1, "", "ExampleClass"], [378, 4, 1, "", "attribute1"], [378, 2, 1, "", "function1"], [378, 2, 1, "", "function2"], [378, 2, 1, "", "function3"], [378, 2, 1, "", "generator1"], [378, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[378, 4, 1, "", "attr1"], [378, 4, 1, "", "attr2"], [378, 4, 1, "", "attr5"]], "neural_compressor.tensorflow.algorithms.smoother": [[379, 0, 0, "-", "calibration"], [380, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[379, 1, 1, "", "SmoothQuantCalibration"], [379, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[380, 1, 1, "", "SmoothQuantScaler"], [380, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[381, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[381, 1, 1, "", "TensorFlowAdaptor"], [381, 1, 1, "", "TensorFlowConfig"], [381, 1, 1, "", "TensorflowConfigConverter"], [381, 1, 1, "", "TensorflowQuery"], [381, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.quantization.utils": [[382, 0, 0, "-", "graph_converter"], [383, 0, 0, "-", "graph_converter_without_calib"], [438, 0, 0, "-", "graph_util"], [439, 0, 0, "-", "quantize_graph"], [466, 0, 0, "-", "quantize_graph_common"], [469, 0, 0, "-", "transform_graph"], [472, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[382, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[383, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[386, 0, 0, "-", "bf16"], [410, 0, 0, "-", "generic"], [420, 0, 0, "-", "graph_base"], [428, 0, 0, "-", "int8"], [434, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[384, 0, 0, "-", "bf16_convert"], [385, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[384, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[385, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[387, 0, 0, "-", "convert_add_to_biasadd"], [388, 0, 0, "-", "convert_layout"], [389, 0, 0, "-", "convert_leakyrelu"], [390, 0, 0, "-", "convert_nan_to_random"], [391, 0, 0, "-", "convert_placeholder_to_const"], [392, 0, 0, "-", "dilated_contraction"], [393, 0, 0, "-", "dummy_biasadd"], [394, 0, 0, "-", "expanddims_optimizer"], [395, 0, 0, "-", "fetch_weight_from_reshape"], [396, 0, 0, "-", "fold_batch_norm"], [397, 0, 0, "-", "fold_constant"], [398, 0, 0, "-", "fuse_biasadd_add"], [399, 0, 0, "-", "fuse_column_wise_mul"], [400, 0, 0, "-", "fuse_conv_with_math"], [401, 0, 0, "-", "fuse_decomposed_bn"], [402, 0, 0, "-", "fuse_decomposed_in"], [403, 0, 0, "-", "fuse_gelu"], [404, 0, 0, "-", "fuse_layer_norm"], [405, 0, 0, "-", "fuse_pad_with_conv"], [406, 0, 0, "-", "fuse_pad_with_fp32_conv"], [407, 0, 0, "-", "fuse_reshape_transpose"], [408, 0, 0, "-", "graph_cse_optimizer"], [409, 0, 0, "-", "grappler_pass"], [411, 0, 0, "-", "insert_print_node"], [412, 0, 0, "-", "move_squeeze_after_relu"], [413, 0, 0, "-", "pre_optimize"], [414, 0, 0, "-", "remove_training_nodes"], [415, 0, 0, "-", "rename_batch_norm"], [416, 0, 0, "-", "split_shared_input"], [417, 0, 0, "-", "strip_equivalent_nodes"], [418, 0, 0, "-", "strip_unused_nodes"], [419, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[387, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[388, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[389, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[390, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[391, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[392, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[393, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[394, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[395, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[396, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[397, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[398, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[399, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[400, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[401, 1, 1, "", "FuseDecomposedBNOptimizer"], [401, 2, 1, "", "bypass_reshape"], [401, 2, 1, "", "get_const_dim_count"], [401, 2, 1, "", "node_from_map"], [401, 2, 1, "", "node_name_from_input"], [401, 2, 1, "", "valid_reshape_inputs"], [401, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[402, 1, 1, "", "FuseDecomposedINOptimizer"], [402, 2, 1, "", "bypass_reshape"], [402, 2, 1, "", "get_const_dim_count"], [402, 2, 1, "", "node_from_map"], [402, 2, 1, "", "node_name_from_input"], [402, 2, 1, "", "valid_reshape_inputs"], [402, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[403, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[404, 1, 1, "", "FuseLayerNormOptimizer"], [404, 2, 1, "", "node_from_map"], [404, 2, 1, "", "node_name_from_input"], [404, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[405, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[406, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[407, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[408, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[409, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[411, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[412, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[413, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[414, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[415, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[416, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[417, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[418, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[419, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[420, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[421, 0, 0, "-", "freeze_fake_quant"], [422, 0, 0, "-", "freeze_value"], [423, 0, 0, "-", "freeze_value_without_calib"], [424, 0, 0, "-", "fuse_conv_redundant_dequantize"], [425, 0, 0, "-", "fuse_conv_requantize"], [426, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [427, 0, 0, "-", "fuse_matmul_requantize"], [429, 0, 0, "-", "meta_op_optimizer"], [430, 0, 0, "-", "post_hostconst_converter"], [431, 0, 0, "-", "post_quantized_op_cse"], [432, 0, 0, "-", "rnn_convert"], [433, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[421, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[422, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[423, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[424, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[425, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[426, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[427, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [427, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [427, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [427, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[429, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[430, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[431, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[432, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[433, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[435, 0, 0, "-", "insert_qdq_pattern"], [436, 0, 0, "-", "merge_duplicated_qdq"], [437, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[435, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[436, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[437, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[438, 1, 1, "", "GraphAnalyzer"], [438, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[441, 0, 0, "-", "qat"], [457, 0, 0, "-", "qdq"], [459, 0, 0, "-", "quantize_graph_base"], [460, 0, 0, "-", "quantize_graph_bn"], [461, 0, 0, "-", "quantize_graph_concatv2"], [462, 0, 0, "-", "quantize_graph_conv"], [463, 0, 0, "-", "quantize_graph_for_intel_cpu"], [464, 0, 0, "-", "quantize_graph_matmul"], [465, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[440, 0, 0, "-", "fake_quantize"], [442, 0, 0, "-", "quantize_config"], [443, 0, 0, "-", "quantize_helper"], [444, 0, 0, "-", "quantize_layers"], [449, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[440, 1, 1, "", "FakeQuantize"], [440, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[442, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[443, 2, 1, "", "init_quantize_config"], [443, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[445, 0, 0, "-", "optimize_layer"], [446, 0, 0, "-", "quantize_layer_add"], [447, 0, 0, "-", "quantize_layer_base"], [448, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[445, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[446, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[447, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[448, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[449, 1, 1, "", "QuantizeWrapper"], [449, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[450, 0, 0, "-", "fuse_qdq_bn"], [451, 0, 0, "-", "fuse_qdq_concatv2"], [452, 0, 0, "-", "fuse_qdq_conv"], [453, 0, 0, "-", "fuse_qdq_deconv"], [454, 0, 0, "-", "fuse_qdq_in"], [455, 0, 0, "-", "fuse_qdq_matmul"], [456, 0, 0, "-", "fuse_qdq_pooling"], [458, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[450, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[451, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[452, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[453, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[454, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[455, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[456, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[458, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[459, 1, 1, "", "QuantizeGraphBase"], [459, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[460, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[461, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[462, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[463, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[464, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[465, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[466, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[467, 0, 0, "-", "bias_correction"], [468, 0, 0, "-", "graph_transform_base"], [470, 0, 0, "-", "insert_logging"], [471, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[467, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[468, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[470, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[471, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[472, 2, 1, "", "apply_inlining"], [472, 2, 1, "", "collate_tf_preds"], [472, 2, 1, "", "construct_function_from_graph_def"], [472, 2, 1, "", "disable_random"], [472, 2, 1, "", "fix_ref_type_of_graph_def"], [472, 2, 1, "", "generate_feed_dict"], [472, 2, 1, "", "get_graph_def"], [472, 2, 1, "", "get_input_output_node_names"], [472, 2, 1, "", "get_model_input_shape"], [472, 2, 1, "", "get_tensor_by_name"], [472, 2, 1, "", "get_tensor_val_from_graph_node"], [472, 2, 1, "", "get_weight_from_input_tensor"], [472, 2, 1, "", "int8_node_name_reverse"], [472, 2, 1, "", "is_ckpt_format"], [472, 2, 1, "", "is_saved_model_format"], [472, 2, 1, "", "iterator_sess_run"], [472, 2, 1, "", "parse_saved_model"], [472, 2, 1, "", "read_graph"], [472, 2, 1, "", "reconstruct_saved_model"], [472, 2, 1, "", "strip_equivalent_nodes"], [472, 2, 1, "", "strip_unused_nodes"], [472, 2, 1, "", "tf_diagnosis_helper"], [472, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[473, 0, 0, "-", "data"], [474, 0, 0, "-", "model_wrappers"], [475, 0, 0, "-", "nets_factory"]], "neural_compressor.tensorflow.utils.data": [[473, 1, 1, "", "BaseDataLoader"], [473, 1, 1, "", "DummyDataset"], [473, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model_wrappers": [[474, 1, 1, "", "BaseModel"], [474, 1, 1, "", "KerasModel"], [474, 1, 1, "", "TensorflowBaseModel"], [474, 1, 1, "", "TensorflowCheckpointModel"], [474, 1, 1, "", "TensorflowLLMModel"], [474, 1, 1, "", "TensorflowModel"], [474, 1, 1, "", "TensorflowQATModel"], [474, 1, 1, "", "TensorflowSavedModelModel"], [474, 2, 1, "", "checkpoint_session"], [474, 2, 1, "", "estimator_session"], [474, 2, 1, "", "frozen_pb_session"], [474, 2, 1, "", "get_model_type"], [474, 2, 1, "", "graph_def_session"], [474, 2, 1, "", "graph_session"], [474, 2, 1, "", "keras_session"], [474, 2, 1, "", "load_saved_model"], [474, 2, 1, "", "saved_model_session"], [474, 2, 1, "", "slim_session"], [474, 2, 1, "", "validate_and_inference_input_output"], [474, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[475, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.torch.algorithms": [[476, 0, 0, "-", "layer_wise"]], "neural_compressor.torch.algorithms.layer_wise": [[477, 0, 0, "-", "load"], [478, 0, 0, "-", "modified_pickle"], [479, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[477, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[478, 3, 1, "", "PickleError"], [478, 3, 1, "", "PicklingError"], [478, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[479, 2, 1, "", "dowload_hf_model"], [479, 2, 1, "", "get_children"], [479, 2, 1, "", "get_module"], [479, 2, 1, "", "get_named_children"], [479, 2, 1, "", "get_super_module_by_name"], [479, 2, 1, "", "load_empty_model"], [479, 2, 1, "", "load_layer_wise_quantized_model"], [479, 2, 1, "", "load_tensor"], [479, 2, 1, "", "load_tensor_from_shard"], [479, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.weight_only": [[481, 0, 0, "-", "modules"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[480, 0, 0, "-", "quant_api"]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, 1, 1, "", "FakeAffineTensorQuantFunction"], [481, 1, 1, "", "MulLinear"], [481, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.training": [[482, 1, 1, "", "CallBacks"], [482, 1, 1, "", "CompressionManager"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[483, 0, 0, "-", "collect_layer_histogram"], [484, 0, 0, "-", "constant"], [485, 0, 0, "-", "create_obj_from_config"], [487, 0, 0, "-", "kl_divergence"], [488, 0, 0, "-", "load_huggingface"], [489, 0, 0, "-", "logger"], [490, 0, 0, "-", "neural_insights_utils"], [491, 0, 0, "-", "options"], [492, 0, 0, "-", "pytorch"], [493, 0, 0, "-", "utility"], [494, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[483, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[485, 2, 1, "", "create_dataloader"], [485, 2, 1, "", "create_dataset"], [485, 2, 1, "", "create_eval_func"], [485, 2, 1, "", "create_train_func"], [485, 2, 1, "", "get_algorithm"], [485, 2, 1, "", "get_func_from_config"], [485, 2, 1, "", "get_metrics"], [485, 2, 1, "", "get_postprocess"], [485, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[487, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[488, 1, 1, "", "OptimizedModel"], [488, 2, 1, "", "export_compressed_model"], [488, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[489, 1, 1, "", "Logger"], [489, 2, 1, "", "debug"], [489, 2, 1, "", "error"], [489, 2, 1, "", "fatal"], [489, 2, 1, "", "info"], [489, 2, 1, "", "log"], [489, 2, 1, "", "warn"], [489, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[490, 2, 1, "", "get_model_path"], [490, 2, 1, "", "register_neural_insights_workload"], [490, 2, 1, "", "update_neural_insights_workload"], [490, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[491, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[492, 2, 1, "", "is_int8_model"], [492, 2, 1, "", "load"], [492, 2, 1, "", "load_weight_only"], [492, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[493, 1, 1, "", "CaptureOutputToFile"], [493, 1, 1, "", "CpuInfo"], [493, 2, 1, "", "Dequantize"], [493, 1, 1, "", "DotDict"], [493, 1, 1, "", "GLOBAL_STATE"], [493, 1, 1, "", "LazyImport"], [493, 1, 1, "", "MODE"], [493, 1, 1, "", "OpEntry"], [493, 1, 1, "", "Statistics"], [493, 2, 1, "", "alias_param"], [493, 2, 1, "", "calculate_mse"], [493, 2, 1, "", "check_key_exist"], [493, 2, 1, "", "combine_histogram"], [493, 2, 1, "", "compare_objects"], [493, 2, 1, "", "compute_sparsity"], [493, 2, 1, "", "dequantize_weight"], [493, 2, 1, "", "dump_class_attrs"], [493, 2, 1, "", "dump_data_to_local"], [493, 2, 1, "", "dump_elapsed_time"], [493, 2, 1, "", "dump_table"], [493, 2, 1, "", "dump_table_to_csv"], [493, 2, 1, "", "equal_dicts"], [493, 2, 1, "", "fault_tolerant_file"], [493, 2, 1, "", "get_all_fp32_data"], [493, 2, 1, "", "get_number_of_sockets"], [493, 2, 1, "", "get_op_list"], [493, 2, 1, "", "get_size"], [493, 2, 1, "", "get_tensor_histogram"], [493, 2, 1, "", "get_tensors_info"], [493, 2, 1, "", "get_tuning_history"], [493, 2, 1, "", "get_weights_details"], [493, 2, 1, "", "load_data_from_pkl"], [493, 2, 1, "", "mse_metric_gap"], [493, 2, 1, "", "print_op_list"], [493, 2, 1, "", "print_table"], [493, 2, 1, "", "recover"], [493, 2, 1, "", "set_random_seed"], [493, 2, 1, "", "set_resume_from"], [493, 2, 1, "", "set_tensorboard"], [493, 2, 1, "", "set_workspace"], [493, 2, 1, "", "show_memory_info"], [493, 2, 1, "", "singleton"], [493, 2, 1, "", "str2array"], [493, 2, 1, "", "time_limit"], [493, 2, 1, "", "version1_eq_version2"], [493, 2, 1, "", "version1_gt_version2"], [493, 2, 1, "", "version1_gte_version2"], [493, 2, 1, "", "version1_lt_version2"], [493, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[494, 1, 1, "", "WeightsDetails"], [494, 1, 1, "", "WeightsStatistics"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "terms": {"": [31, 32, 91, 129, 134, 142, 152, 166, 167, 168, 172, 173, 174, 175, 178, 180, 185, 187, 188, 189, 202, 205, 218, 219, 220, 222, 224, 244, 247, 259, 260, 273, 298, 300, 326, 328, 329, 333, 359, 467, 472, 477, 490, 493, 497, 498, 500, 504, 505, 522, 526, 527, 529, 531, 533, 536, 541, 542, 549, 552, 554, 558, 561, 564, 566, 569, 579, 580, 581, 582, 583, 586, 587, 588, 589, 592, 593, 594, 595], "0": [4, 31, 32, 40, 76, 91, 134, 141, 142, 147, 149, 151, 156, 162, 164, 185, 188, 189, 194, 196, 200, 202, 203, 206, 207, 210, 215, 219, 221, 222, 235, 237, 242, 244, 245, 248, 249, 252, 257, 260, 265, 266, 275, 282, 290, 295, 303, 328, 339, 359, 364, 378, 388, 423, 472, 473, 477, 488, 499, 502, 522, 523, 524, 527, 529, 531, 532, 533, 537, 538, 540, 541, 542, 547, 549, 554, 558, 564, 574, 575, 580, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594], "00": 595, "000": [205, 247, 502, 524], "0000": 543, "00000": [205, 247], "00001": [205, 247], "00003": [205, 247], "00004": [205, 247], "0001": [4, 188, 189, 527, 541, 582], "0003": 595, "0004": 541, "0006": 595, "0007": 595, "0008": 595, "001": [205, 247, 524, 529, 589, 594], "00173": 574, "002": 529, "0029": [589, 595], "00296431384049356": 589, "0030": 595, "0036": 589, "0046": 595, "0048": 595, "005": 586, "0058": 595, "0059755356051027775": 589, "006533813662827015": 589, "00774": 580, "0086": 589, "00978": 586, "01": [32, 188, 189, 541, 582, 586, 592, 594, 595], "01024": 574, "0106": 595, "0115": 595, "0119": 595, "0130": 595, "0141": 595, "017": 591, "01x": 595, "02": [189, 595], "0213": 595, "02340": [162, 300], "027": 595, "02x": 595, "03": [502, 595], "04": [502, 537, 595], "04191": 521, "0438": 595, "04x": 595, "05": [152, 189, 275, 328, 540, 589, 595], "0500": 589, "05754": 580, "05x": 595, "06": [576, 594, 595], "0626": 595, "0698": 589, "07": [589, 594, 595], "0734": 595, "0737": 589, "07x": 595, "08": [219, 260, 591, 595], "0806": 589, "083": 595, "0837": 588, "09": 595, "0927": 595, "095": 590, "09656": 180, "099": [205, 247, 524], "0999": 595, "09x": 595, "0_224_frozen": [534, 563, 574], "0f": 529, "0x": [142, 477], "0x2b0001b0": 595, "1": [4, 30, 31, 32, 41, 60, 75, 91, 95, 99, 132, 134, 142, 144, 147, 149, 151, 152, 153, 156, 162, 174, 175, 177, 188, 189, 194, 196, 200, 202, 203, 204, 206, 207, 210, 211, 215, 219, 220, 221, 222, 235, 237, 242, 244, 245, 246, 248, 249, 252, 253, 257, 260, 266, 271, 272, 273, 275, 290, 295, 300, 303, 304, 324, 325, 326, 328, 339, 341, 359, 377, 378, 389, 408, 422, 437, 440, 470, 472, 473, 477, 481, 485, 488, 493, 497, 499, 502, 503, 505, 521, 523, 524, 526, 527, 531, 533, 534, 537, 539, 540, 542, 545, 547, 563, 564, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594], "10": [188, 189, 205, 247, 307, 363, 502, 520, 524, 531, 537, 541, 563, 564, 580, 582, 591, 592, 595], "100": [4, 153, 188, 189, 205, 247, 378, 520, 524, 529, 535, 537, 541, 566, 582, 583, 591, 592, 594, 595], "1000": [541, 570, 594], "10000": [307, 363, 580], "10004": [499, 500, 503, 523, 527, 528, 529, 533, 536, 542, 579, 582, 584, 586, 594], "10005": 584, "10006": [527, 528], "10016": 589, "100x": 586, "101": [203, 245, 275, 328, 540, 570, 589, 595], "1016": 595, "102": 595, "1024": [132, 205, 247, 470, 547], "103": 591, "10438": [586, 589], "1044": 595, "1048": 595, "1054": 595, "1072": 595, "1073": 595, "1077": 595, "108": 595, "10833": [219, 260], "109": 595, "1098": 595, "10k": [530, 534], "10x": 595, "11": [537, 540, 542, 563, 589, 592, 595], "110": 595, "1104": 595, "1111": 595, "1119": 595, "112": 544, "1121": 595, "1125": 595, "113": 595, "1130": 595, "1137": 595, "1139": 595, "1141": 595, "1142": 595, "1151": 595, "1159": 595, "116": 591, "1170": 595, "1186": 595, "119": 589, "11x": 595, "12": [563, 595], "120": 589, "121": 595, "1229": 595, "123": [205, 247, 524, 591], "124m": 589, "125": 595, "125m": [502, 589], "127": [206, 207, 248, 249, 473, 524, 583, 589, 595], "1276": 595, "128": [4, 32, 147, 203, 206, 207, 219, 245, 248, 249, 260, 473, 524, 541, 583, 586, 591, 595], "1286": 595, "1291": 595, "1295": 595, "12b": 539, "12x": 595, "13": [532, 537, 563, 587, 589], "130": 595, "13325": [586, 589], "1362": 595, "1365": [219, 260, 591], "1374": 595, "1377": 595, "1380": 595, "1381": 589, "1383": 595, "139": [589, 595], "13b": [539, 589, 595], "13x": 595, "14": [189, 264, 265, 502, 531, 537, 576, 595], "141": 595, "1414": 595, "14314": 586, "145": 595, "1451": 595, "1459": 595, "146": 595, "149": 595, "1498": 595, "14x": 595, "15": [134, 472, 533, 537, 575], "1508": 595, "151": [574, 595], "1510": 589, "1514": 595, "1515": 595, "152": 595, "1534": 595, "1556": 595, "1566": 595, "1567": 595, "1582": 595, "1583": 589, "159": 595, "1593": 595, "15x": 595, "16": [524, 537, 574, 586, 595], "1601": 589, "161": 595, "162": [589, 595], "163": 595, "1646": 595, "16599": 589, "166": 595, "1669": 595, "1673": 595, "168": 595, "169": 595, "16x": 595, "16x16gb": 595, "17": [537, 574, 595], "171": 595, "172": [589, 595], "173": 595, "17323": 586, "174": 595, "1742": 589, "1748": 595, "1749": 589, "17509": 589, "1751": 589, "1756": 595, "177": [273, 326, 595], "178": 595, "179": 595, "1792": 595, "1797": 595, "1798": 595, "17x": 595, "18": [581, 595], "1809": 521, "1810": [162, 300], "182": 595, "1821": 595, "183": 595, "18518": 137, "18529": 137, "1880": 595, "1889": 595, "189": 595, "1890": 589, "18x": 595, "19": [594, 595], "192": 589, "192795": 522, "1930": 595, "1934": 595, "195": 595, "1958": 595, "197": 595, "1978": [188, 189], "1983354538679123": 589, "19x": 595, "1_11_capabl": 505, "1b7": [539, 589], "1e": [152, 589, 594], "1s4c14ins1bsthroughput": 595, "1s56c1ins1bsthroughput": 595, "1x": 595, "1x1": [294, 527, 541, 580], "1x16": 294, "1x2": [294, 589], "1xchannel": [188, 189, 580], "2": [30, 31, 32, 40, 60, 91, 95, 142, 149, 151, 153, 168, 174, 175, 188, 189, 204, 220, 246, 271, 273, 275, 300, 307, 324, 326, 328, 339, 341, 363, 378, 388, 408, 437, 477, 493, 499, 502, 503, 521, 523, 524, 526, 527, 533, 536, 537, 538, 539, 540, 542, 565, 571, 572, 574, 575, 576, 578, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 593], "20": [219, 260, 566, 569, 574, 575, 576, 580, 591, 594, 595], "200": [218, 259, 499, 570, 592], "2000": 541, "2001": [203, 245], "2011": 521, "2012": [205, 247], "2017": 521, "2018": 521, "2019": 580, "2020": 137, "2021": 580, "20210514": 595, "2022": [188, 189, 502, 538, 580, 586, 589, 595], "2023": [502, 576, 580, 586, 589, 595], "2024": 502, "2043": [203, 245], "2048": [4, 493, 502, 586], "207": 589, "2083": 595, "2090": 595, "20b": [539, 595], "20x": 595, "21": [275, 328, 549, 550, 572, 575, 576, 581, 589, 595], "21020": 589, "211": 595, "2111": 580, "212": 595, "213": 595, "2132": 588, "214": 595, "216": 595, "2160": 595, "21x": 595, "22": [537, 595], "2204": 180, "2208": 595, "2209": [586, 589], "2210": 586, "2211": [586, 589], "2213": 595, "222": 595, "2220": 589, "2222": [569, 574, 575, 576], "22222": [569, 574, 575, 576], "223": 595, "224": [189, 215, 257, 502, 524, 529, 531, 534, 541, 544, 563, 591, 594], "22444": 589, "225": [215, 257, 541], "226": 595, "2277": 595, "229": [215, 257, 541], "22x": 595, "23": 595, "230": 595, "2301": 580, "2305": 586, "2306": 586, "234": 595, "235": 595, "236": 595, "2384": 595, "23f1": 595, "23x": 595, "24": [580, 592, 595], "2404": 595, "24101": 580, "24116": 580, "242": 595, "2420": 589, "2426": 595, "244": 595, "245": 595, "25": [580, 595], "250": [500, 580], "2504": 595, "2538": 595, "2548": 595, "255": [583, 589], "256": [210, 215, 252, 257, 524, 529, 541, 591], "256gb": 595, "2570": 589, "2578": 595, "25x": 595, "26": 595, "2603": 595, "265": 595, "268": 595, "26f1": 595, "26x": 595, "27": [532, 595], "272": 595, "2757": 595, "2788": 595, "2799": 595, "27x": 595, "28": [203, 204, 208, 245, 246, 250, 524, 595], "283": 595, "2862": 595, "2890": 595, "2897": 595, "28x": 595, "29": 595, "2914": 595, "2970": 589, "2989": 564, "2991": 589, "29x": 595, "2d": [56, 404, 589], "2gb": [337, 474], "2x": [530, 536], "2x1": [580, 595], "2x2": [294, 589], "2xlarg": 595, "3": [30, 32, 134, 142, 175, 189, 205, 219, 247, 260, 271, 324, 378, 472, 477, 493, 499, 500, 502, 521, 522, 523, 524, 527, 529, 531, 533, 534, 537, 540, 541, 542, 544, 548, 552, 554, 558, 563, 568, 569, 571, 572, 574, 578, 580, 582, 583, 586, 587, 588, 589, 591, 592, 595], "30": [219, 260, 530, 534, 536, 591, 595], "300": [524, 580, 595], "3000": 567, "304": 595, "30b": [539, 589, 595], "30x": 595, "31": [31, 595], "3121": 595, "3162": 575, "31x": 595, "32": [32, 164, 377, 529, 535, 586, 595], "322": 595, "3242": 595, "3253": 589, "329": 595, "3290": 595, "32accuraci": 595, "32x": 595, "33": [137, 595], "3333": [569, 574, 575, 576], "33333": [569, 574, 575, 576], "3334": 595, "3348": 595, "335": 595, "3365": 595, "3377": 595, "338174d13706855fc6924cec7b3a8ae8": 563, "33x": 595, "34": [502, 576, 595], "341": 595, "3429": 595, "343": 595, "3463": 595, "347": 595, "34f1": 595, "35": [580, 595], "3509": 595, "350m": 589, "353": 595, "354": 589, "3542": 589, "3568": 595, "35x": 595, "36": 595, "360": 595, "367": 595, "3690": 595, "36x": 595, "37": 595, "374": 595, "3740": 589, "3757": 589, "3758": 595, "379": 589, "37x": 595, "38": 595, "3804": 589, "381": 580, "3815": 589, "384": [219, 260, 591], "3845": 589, "385": 595, "3850": 589, "385297635664756e": 589, "3852e": 589, "3887": 589, "38x": 595, "39": 595, "3911": 589, "392": 595, "3924": 589, "393": 595, "3930": 589, "394": 595, "3947": 589, "395": 595, "3950": 595, "397": 595, "398": 595, "399": 595, "39x": 595, "3a14": 595, "3b": [539, 589], "3d": [56, 404, 581, 589], "3dgan": 581, "3rd": [542, 581, 583, 585], "4": [32, 40, 144, 147, 153, 168, 177, 188, 189, 212, 215, 219, 254, 257, 260, 268, 269, 271, 321, 322, 324, 377, 378, 388, 481, 497, 502, 503, 505, 520, 529, 530, 533, 536, 537, 540, 541, 549, 569, 571, 575, 580, 583, 586, 589, 591, 592, 595], "40": [594, 595], "400": [570, 595], "401": 595, "404": [570, 580, 595], "4055": 589, "406": [541, 595], "407": 595, "4080": 595, "409": 595, "4096": 595, "40b": 539, "40x": 595, "41": 595, "412": 595, "4124": 595, "413": 595, "4133": 595, "4149": 589, "416": 595, "417": 595, "4172": 589, "4193": 595, "41x": 595, "42": [189, 283, 595], "420": 536, "4202": 595, "4208": 595, "4227": 595, "4237": 595, "4259": 595, "4271": 595, "428": 595, "4289": 595, "4299": 595, "42x": 595, "43": 595, "4319": 595, "435": 595, "44": 595, "446": 595, "4469": 588, "448": 595, "4496": 595, "45": [499, 595], "450": 595, "4516": 589, "453": 595, "4533": 589, "4542": 595, "456": [541, 595], "46": 595, "4607": 595, "4628": 595, "4634": 589, "4697": 595, "46x": 595, "47": 595, "4728": 595, "473": 595, "4731": 595, "4734": 589, "4741": 589, "4743": 589, "4789": 595, "47x": 595, "48": [589, 595], "4800": 595, "4828": 589, "484": [378, 595], "485": 541, "487": 595, "489": 595, "4895": 595, "4899": 595, "49": 595, "490": 595, "4906": 589, "4907": 595, "4916": 595, "4923": 595, "4936": 589, "494": 595, "4954": 595, "497": 595, "4973": 595, "4980": 589, "4984": 595, "49x": 595, "4f": 522, "4th": [539, 581, 583], "4x": [177, 500, 583], "4x1": [168, 188, 189, 294, 541, 580, 595], "5": [141, 151, 156, 188, 189, 207, 215, 221, 249, 257, 275, 328, 359, 503, 524, 531, 533, 537, 540, 541, 566, 571, 574, 575, 580, 582, 583, 586, 589, 591, 592, 594, 595], "50": [273, 326, 500, 504, 566, 580, 589, 595], "500": [552, 570, 595], "5000": 563, "5018": 589, "5040": 589, "5045": 595, "5048": 589, "5049": 595, "5053": 595, "5057": 589, "5058": 595, "507": 595, "508": 595, "50803": 595, "5084": 595, "5098": 595, "50x": 595, "51": 595, "5142": 595, "517": 595, "5177": 595, "518": 589, "5185": 589, "51x": 595, "52": 595, "5228": 595, "5282": 595, "52f1": 595, "52x": 595, "53": 595, "532": 595, "5328": 595, "533": 595, "535": 595, "5359": 595, "5369": 595, "5398": 595, "53x": 595, "54": [594, 595], "540": 595, "5419": 595, "5436": 589, "5443": [589, 595], "5444": 589, "545": 595, "5477": 595, "5478": 595, "548": 595, "5494": 595, "54accuraci": 595, "55": [576, 595], "5510": 595, "5514": 595, "5523": 595, "5525": 595, "5540": 595, "5552": 589, "5555": 589, "556": 595, "5566": 595, "557": 595, "558": 595, "5582": 595, "5593": [589, 595], "55x": 595, "56": 595, "5603": 595, "5604": 595, "560m": 589, "5610": 595, "5617": 595, "562": 595, "5627": 595, "5637": 595, "5642": 595, "5655": 595, "567": 595, "568": 595, "5682": 595, "5692": 595, "56be4db0acb8001400a502ec": [273, 326], "56x": 595, "57": [589, 595], "5701": 595, "5703": 595, "5711": 595, "5714": 595, "5716": 595, "5718": 595, "5732": 595, "5738": 595, "5742": 589, "5752": 595, "5764": [589, 595], "5765": 595, "577": 595, "5777": 595, "5789": 589, "5799": 595, "57x": 595, "58": [575, 595], "5819": 595, "5823": 595, "5826": 589, "5834": 595, "584": 595, "5841": 595, "5843": 595, "585": 595, "5871": 595, "588": 595, "5881": 595, "5898": 595, "5899": 595, "58x": 595, "59": [589, 595], "590": 595, "591": 595, "5911": 595, "5933": 595, "5934": 595, "5951": 595, "5972": [589, 595], "5977": 589, "5991": 595, "5997": 595, "59f1": 595, "5b": 589, "5x": 581, "6": [188, 189, 533, 583, 589, 592, 595], "60": 595, "600": 541, "6004": 595, "6018": 595, "602": 595, "6029": 595, "6038": 589, "6053": 595, "6057": 595, "6059": 595, "6094": 595, "61": 595, "6123": 595, "6134": 595, "614": 595, "615": 595, "6154": 595, "6181": 595, "6187": 595, "6195": 595, "61accuraci": 595, "61x": 595, "62": 595, "621": 595, "6224": 595, "6239": 595, "624": 595, "6247": 589, "6261": 595, "6266": 595, "627": 595, "6297": 589, "62x": 595, "63": [580, 595], "6301": 595, "6312": 595, "6361": 595, "6365": 589, "637690492221736e": 589, "6376e": 589, "6377": 595, "6379": 595, "6390": 595, "6392": 589, "6393": 595, "6399": 595, "63x": 595, "64": [219, 260, 500, 586, 589, 591, 595], "6401": 595, "6404": 589, "6409": 595, "6410": 595, "6433": 595, "6434": 595, "6437": [589, 595], "6438": 595, "6439": 595, "6448": 595, "6455": 595, "6456": 595, "6472": 595, "6473": 595, "6474": 595, "648": 595, "6481": 589, "6483": 595, "6484": 595, "6488": [575, 595], "6491": 595, "6496": 595, "6497": 595, "6499": 589, "64x": 595, "65": 595, "6504": 595, "6505": 595, "6506": 589, "6509": 595, "6519": 595, "652": 595, "6527": 595, "653": 595, "6532": 595, "6535": 595, "6542": 589, "65421": 522, "6543": 595, "655": [589, 595], "6559": 595, "656": 595, "6569": 589, "657": 595, "6571": 595, "6575": 595, "6579": 595, "6582": 595, "659": 595, "6594": 595, "6598": 595, "65b": 589, "65x": 595, "66": [564, 595], "6604": 595, "6612": 595, "6614": 595, "6621": 589, "6622": 595, "663": 595, "6654": 595, "6661": 595, "6669": 595, "667": 595, "6678": 595, "6685": 595, "6687": 595, "6689": 595, "6693": 595, "66b": 589, "66x": 595, "67": 595, "6709": 595, "6713": 595, "6718": 589, "6719": 595, "6724": 595, "6726": 595, "6735": 589, "6739": 595, "6740": [589, 595], "6742": 595, "6746": 595, "6748": 595, "6756": 595, "6769": [589, 595], "678": 595, "679": 595, "67x": 595, "68": [591, 595], "6803": 595, "6804": [589, 595], "6814": 589, "6821": 589, "6824": 595, "6827": 595, "6829": 595, "683": 595, "6831": [589, 595], "6832": 595, "6835": 589, "6836": 589, "6837": 589, "6839": 589, "6842": 595, "6845": 595, "6848": 589, "685": 595, "6854": 595, "6857": 595, "6859": 595, "6861": 595, "6862": 595, "6864": 595, "6866": [589, 595], "6872": 589, "6876": 595, "6878": 595, "6883": 589, "6885": 595, "6887": 595, "689": 595, "6890": 595, "6895": 589, "68x": 595, "69": 595, "6902": 595, "6911": 595, "6918": 595, "693": 595, "6953": [589, 595], "696": 595, "6961": 595, "6977": 595, "6982": 595, "6994": 589, "69x": 595, "6ap0": 595, "6b": [539, 565, 589, 595], "6f": 529, "7": [30, 153, 188, 189, 339, 505, 520, 532, 533, 541, 580, 583, 587, 589, 592, 595], "70": 595, "7002": 595, "7006": 595, "7009": 595, "7018": 595, "7022": 595, "7024": 595, "7025": 595, "7030": 595, "7031": 595, "7032": 595, "7034": 595, "7056": 595, "7058": [589, 595], "7075": 595, "7077": 595, "7080": 595, "7088": 595, "709": 595, "70b": [539, 595], "70x": 595, "71": 595, "7103": 595, "7105": 595, "7106": 595, "7107": 595, "7111": 595, "7122": 595, "7128": 589, "7139": 595, "7143": 589, "7149": 589, "7153": 595, "716": 595, "7174": 589, "718": 595, "7186": 595, "7198": 595, "71x": 595, "72": [589, 595], "7203": 595, "721": 595, "722": 595, "7221": 589, "723": 595, "7233": 595, "7236": 595, "724": 595, "7240": 595, "7243": 595, "7244": 595, "7246": 595, "7247": 595, "7268": 595, "7269": 595, "727": 595, "7273": 595, "7277": 595, "728": 595, "7283": 595, "7285": 595, "73": 595, "7312": 595, "7322": 595, "7323": 595, "7326": 589, "7332": 589, "7334": 595, "7335": [589, 595], "7337": 595, "7350": 595, "7353": 595, "7357": 589, "7361": [589, 595], "739": 595, "7392": [589, 595], "7398": 589, "7399": 595, "73x": 595, "74": 595, "7415": 595, "7432": 595, "744": 595, "7440": 589, "7442": 595, "7443": 595, "7448": 595, "7451": 589, "746": 595, "7476": 595, "7486": 595, "7495": 588, "7497": 595, "75": [580, 595], "7502": 564, "7518": 595, "752": 595, "753": 595, "7541": 595, "7543": 595, "75552": 595, "7566": 595, "7568": 595, "7572": 595, "7589": 589, "7590": 589, "7596": 595, "75x": 595, "76": 595, "7602cd63d4c849e7a686a8165a77f69d": [574, 575], "7608": 589, "761": 595, "7615": [589, 595], "7616": 595, "7617": 595, "7622": 595, "7627": [589, 595], "7628": 595, "7632": 589, "7633": 595, "7634": 595, "7675": 595, "7677": [589, 595], "7682": 595, "7699": 595, "76x": 595, "77": 595, "770": 595, "7704": 595, "7706": 595, "7715": 595, "7742": 595, "774m": 589, "7753": 595, "7758": 595, "7759": [589, 595], "776": 590, "7764": 595, "7772": 589, "778": 595, "7797": 595, "77x": 595, "78": [591, 595], "7807": 595, "7813": 595, "7824": 595, "7828": 595, "7829": 595, "7835": 595, "7836": 595, "784": 595, "7840": 589, "7845": 595, "7851": 595, "7856": 595, "786": 595, "7873": 595, "7878": 595, "7894": 595, "7895": 580, "79": [590, 595], "790": 595, "7905": 595, "7908": 589, "7911": 595, "7927": 595, "7941": 595, "795": 595, "7957": 589, "7964": 595, "7965": 595, "79x": 595, "7b": [539, 589, 595], "7b1": [589, 595], "8": [99, 142, 188, 189, 218, 259, 440, 477, 499, 504, 521, 522, 533, 537, 568, 569, 580, 581, 586, 589, 592, 595], "80": [532, 584, 590, 595], "800": [219, 260, 591], "8000": [569, 574, 575, 576], "8001": [2, 483, 569, 574, 575, 576], "801": 580, "8018": 595, "8025": 595, "8044": 595, "8047": 595, "805": 586, "8058": 595, "8074": 595, "8080": 563, "8084": 595, "8096": 595, "80x": 595, "81": 595, "8146": 595, "8178": 595, "81x": 595, "82": 595, "8207": 589, "8213": [574, 595], "8235": 595, "8246": 589, "8256": 595, "8259": 595, "8266": 588, "829": 595, "8291": 588, "8294": 588, "8298": 589, "8299": 588, "82x": 595, "83": [588, 589, 595], "8314": 595, "8363": 595, "8371": 595, "8372": 588, "8382": 595, "84": [589, 595], "8411": 595, "8480": 595, "849": 595, "85": [588, 589, 595], "8537": 595, "8539": 595, "856": 595, "858": 595, "85x": 595, "86": 595, "8617": 574, "8626": 595, "8684": 595, "86x": 595, "87": [215, 257, 595], "875": [215, 257, 591], "8763": 589, "8768": 589, "8782": 595, "87f1": 595, "87x": 595, "88": [532, 588, 595], "8809": 595, "8814": 595, "8816": 595, "8863": 595, "88x": 595, "89": [589, 595], "890": 595, "8981": 564, "8984": 595, "89x": 595, "8ghz": 595, "8x1": [188, 189], "9": [162, 188, 189, 499, 537, 541, 580, 582, 589, 592, 594, 595], "90": [188, 189, 584, 594, 595], "9000000000": 547, "904": 595, "9048": 595, "9049": 564, "9091": 595, "90f1": 595, "90x": 595, "91": [586, 589, 595], "9125": 595, "9163": 595, "919": 595, "91x": 595, "92": 595, "927": 595, "93": [589, 595], "930": 595, "9301": 589, "9308": 589, "9317": 595, "9324": 595, "9359": 595, "93x": 595, "94": [591, 595], "9403": 595, "9411": 595, "9472": 595, "94x": 595, "95": [76, 275, 328, 423, 540, 595], "9522": 595, "9527": [307, 363, 541, 594], "95top1": 595, "96": 595, "9631": 564, "9635": 595, "964": 595, "96x": 595, "97": [541, 595], "9702": 595, "977": 595, "97x": 595, "98": [188, 189, 541, 580, 582, 595], "9860": 589, "9861": 595, "987": 595, "9892": 595, "99": [4, 595], "9902": 595, "9906": 595, "9909": 595, "9916": 595, "9917": 595, "9919": 595, "9921": 595, "9922": 595, "9931": 595, "9932": 595, "9933": 595, "9934": 595, "9935": 595, "9937": 595, "9941": 595, "9942": 595, "9944": 595, "9945": 595, "9947": 595, "9950": 595, "9951": 595, "9952": 595, "9953": 595, "9957": 595, "9958": 595, "9961": 595, "9962": 595, "9963": 595, "9967": 595, "9971": 595, "9978": 595, "9979": 595, "9983": 595, "9984": 595, "999": [4, 594], "9994": 595, "9998": 595, "99ccff": 592, "99x": 595, "A": [4, 41, 60, 61, 89, 102, 126, 127, 134, 140, 147, 154, 155, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 205, 219, 222, 224, 225, 247, 260, 261, 268, 271, 272, 273, 275, 278, 281, 282, 283, 290, 293, 295, 298, 299, 300, 301, 302, 307, 321, 324, 325, 326, 328, 329, 333, 337, 363, 379, 380, 389, 408, 409, 443, 472, 474, 478, 482, 493, 498, 502, 504, 522, 523, 524, 530, 533, 540, 541, 543, 554, 555, 558, 561, 569, 580, 581, 583, 586, 589, 591, 592, 594], "And": [56, 404, 498, 499, 520, 522, 541, 547, 589], "As": [499, 504, 523, 527, 540, 541, 555, 566, 580, 586, 592], "At": [498, 504, 567, 571, 592], "Being": 497, "But": 566, "By": [142, 166, 188, 189, 268, 321, 477, 504, 505, 540, 543, 554, 555, 558, 580, 581, 586, 592], "For": [30, 32, 147, 151, 166, 167, 170, 171, 181, 189, 205, 219, 247, 260, 272, 273, 275, 298, 301, 325, 326, 328, 329, 341, 359, 497, 499, 501, 503, 505, 527, 528, 529, 531, 533, 536, 544, 546, 547, 549, 552, 563, 564, 569, 580, 585, 586, 589, 590, 592, 594, 595], "IT": [205, 212, 247, 254, 581], "If": [53, 54, 56, 60, 142, 153, 188, 189, 192, 193, 205, 219, 233, 234, 247, 260, 299, 329, 359, 378, 401, 402, 404, 408, 477, 482, 498, 499, 504, 520, 522, 523, 524, 529, 537, 538, 540, 541, 547, 555, 556, 559, 561, 567, 572, 578, 580, 583, 586, 588, 589, 590, 591, 592], "In": [155, 170, 171, 172, 177, 178, 179, 182, 189, 202, 229, 244, 271, 298, 300, 324, 339, 497, 499, 500, 502, 503, 504, 523, 524, 526, 527, 528, 529, 540, 541, 551, 554, 555, 558, 564, 565, 566, 567, 574, 575, 576, 578, 579, 580, 583, 585, 586, 588, 589, 590, 591, 592, 593], "It": [40, 142, 154, 155, 159, 168, 192, 193, 228, 233, 234, 273, 275, 282, 298, 303, 310, 326, 328, 329, 359, 364, 368, 388, 477, 482, 503, 504, 505, 521, 526, 527, 541, 547, 550, 555, 561, 562, 563, 564, 566, 567, 569, 580, 583, 586, 587, 588, 592, 594], "Its": [504, 521, 580], "NOT": [203, 245, 533], "No": [498, 522, 532, 541, 569, 570, 581], "Not": [316, 317, 374, 375, 493, 500, 522], "ON": 585, "Of": 523, "On": [583, 595], "One": [505, 522, 524, 529, 536, 566, 580, 581, 592], "TO": [529, 546, 566], "The": [4, 22, 40, 60, 99, 105, 107, 126, 134, 142, 147, 148, 153, 155, 156, 158, 162, 166, 168, 170, 171, 173, 174, 175, 180, 181, 182, 183, 184, 185, 188, 189, 192, 193, 194, 203, 204, 205, 206, 207, 211, 212, 219, 221, 224, 226, 229, 233, 234, 235, 245, 246, 247, 248, 249, 253, 254, 260, 261, 266, 268, 269, 270, 272, 273, 275, 277, 278, 279, 281, 282, 284, 285, 287, 288, 289, 290, 293, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 321, 322, 323, 325, 326, 328, 329, 337, 339, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 377, 378, 379, 388, 408, 440, 446, 448, 472, 473, 474, 477, 482, 483, 485, 487, 488, 492, 493, 494, 497, 499, 500, 503, 504, 505, 506, 508, 512, 515, 518, 520, 521, 522, 523, 524, 526, 527, 529, 531, 533, 535, 536, 537, 539, 540, 541, 542, 543, 546, 547, 549, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595], "Their": 485, "Then": [271, 324, 504, 526, 554, 556, 558, 559, 566, 589, 592], "There": [101, 304, 306, 360, 362, 442, 522, 526, 527, 533, 536, 541, 544, 566, 568, 569, 586, 589, 592, 594], "These": [504, 536, 564], "To": [31, 271, 324, 339, 498, 502, 504, 505, 522, 524, 526, 529, 542, 545, 548, 554, 556, 558, 559, 563, 567, 580, 582, 585, 586, 587, 589, 592, 594], "Will": [129, 467, 527, 536], "With": [82, 339, 429, 499, 503, 505, 523, 541, 549, 554, 558, 562, 568, 578, 580, 581, 588, 589, 592, 595], "_": [192, 193, 233, 234, 359, 499, 500, 502, 503, 504, 521, 526, 527, 529, 531, 533, 541, 542, 543, 544, 550, 554, 556, 558, 559, 566, 569, 570, 578, 580, 583, 586, 587, 588, 589, 590, 592, 594], "__all__": 522, "__call__": [212, 254], "__class__": 339, "__getitem__": [201, 205, 219, 243, 247, 260, 523, 524, 541], "__init__": [503, 522, 523, 524, 540, 592], "__iter__": [201, 205, 243, 247, 523, 524, 541], "__len__": [201, 205, 243, 247, 524], "__name__": 339, "__version__": [2, 140, 478, 522], "_acc": 590, "_add_observer_": 590, "_description_": 136, "_epoch_ran": [155, 261], "_generate_dataload": [194, 235, 473], "_lossandgradi": 522, "_observer_forward_hook": 590, "_post_eval_hook": 590, "_pre_eval_hook": 590, "_propagate_qconfig_help": 147, "_quantiz": 265, "_quantizedconv": [77, 424], "_quantizeddeconv": [77, 424], "_quantizedfusedbatchnorm": [109, 450], "_quantizedmatmul": [79, 80, 426, 427], "_recordingobserv": 590, "_saved_model": [134, 472], "_type_": [147, 488], "_use_new_zipfile_seri": 163, "a100cuda": 595, "aarch64": 520, "ab": [31, 162, 180, 300, 580, 583, 589], "abbrevi": 189, "abc": [99, 273, 326, 440, 503, 590, 592], "abcadaptor": 503, "abctunestrategi": 592, "abeja": 595, "abil": [503, 504, 524, 533, 589], "abl": [192, 193, 233, 234, 329, 359, 482, 552, 561, 583], "abound": 581, "about": [162, 184, 493, 497, 522, 523, 541, 566, 567, 580, 585, 592, 593, 595], "abov": [40, 388, 503, 504, 505, 527, 563, 564, 566, 569, 580, 583, 589, 592], "absolut": [162, 188, 189, 275, 328, 540, 541, 580, 583, 592], "absorb": [147, 151, 586], "absorb_pair": 32, "absorb_to_lay": 147, "absorbed_1": 147, "absorpt": 147, "abstract": [72, 155, 219, 260, 261, 266, 303, 420, 503, 505, 535], "abus": 497, "ac": [307, 363], "acc": [500, 571, 580, 590, 595], "acc_delta": 552, "acceler": [164, 502, 527, 541, 544, 552, 561, 564, 568, 580, 581, 585, 586, 589, 592], "accelerator_execution_tim": 348, "accept": [188, 189, 378, 497, 520, 522, 523, 563, 586], "access": [53, 54, 56, 189, 401, 402, 404, 488, 493, 556, 559, 563], "accommod": [504, 505], "accompani": [538, 592], "accord": [2, 108, 147, 153, 188, 189, 203, 204, 205, 219, 245, 246, 247, 260, 310, 366, 368, 449, 485, 500, 503, 524, 529, 564, 569, 574, 575, 576, 580, 585, 589, 591, 592], "accordingli": [527, 552, 589], "account": [497, 588, 592], "accumul": [316, 374, 592], "accur": [30, 151, 341, 580, 586, 589], "accuraci": [32, 153, 185, 188, 189, 192, 193, 233, 234, 261, 266, 275, 290, 295, 303, 328, 329, 339, 359, 364, 378, 482, 490, 499, 502, 504, 505, 521, 523, 524, 526, 528, 529, 530, 531, 539, 540, 541, 552, 561, 563, 570, 571, 574, 575, 578, 579, 580, 581, 582, 586, 587, 588, 589, 590, 593, 594, 595], "accuracy_criterion": [188, 189, 339, 541, 565, 578, 582, 592, 594], "accuracy_level": 32, "accuracycriterion": [188, 189, 541, 592], "accuracyspars": 595, "achiev": [266, 303, 531, 539, 541, 564, 579, 580, 581, 583, 589, 590, 592], "acq": [307, 363], "acq_max": [307, 363], "acquir": 544, "acquisit": [307, 363], "across": [266, 276, 303, 329, 525, 541, 568, 571, 580, 584, 589, 592], "act": [185, 201, 243, 497], "act_fn": 167, "action": [497, 556, 559], "activ": [17, 32, 127, 147, 159, 188, 189, 228, 317, 375, 377, 380, 503, 504, 505, 521, 526, 528, 533, 541, 562, 563, 566, 574, 575, 576, 582, 583, 586, 589, 590, 594], "activation_max": 493, "activation_min": 493, "activation_min_max": 493, "activation_post_process": 590, "activationoper": 6, "activations_t": 564, "actord": [32, 586], "actual": [275, 328, 529], "ad": [179, 203, 245, 268, 307, 321, 363, 504, 505, 526, 542, 544, 549, 552, 556, 559, 569, 580, 586, 590], "adadelta": 529, "adam": [158, 594], "adamw": [158, 226], "adapt": [497, 502, 504, 524, 552, 581], "adaptor": [155, 188, 189, 319, 377, 381, 485, 502, 505, 536, 584, 585, 587, 589, 590, 593], "adaptor_registri": 503, "add": [31, 39, 50, 95, 105, 134, 158, 185, 188, 189, 203, 205, 226, 245, 247, 299, 317, 375, 387, 398, 437, 446, 472, 493, 498, 499, 502, 505, 523, 524, 529, 531, 533, 540, 541, 556, 559, 563, 564, 571, 574, 575, 588, 589, 590, 592, 593], "add_graph": 590, "add_histogram": 590, "add_modul": 590, "add_origin_loss": [156, 189, 221], "add_port_to_nam": 91, "add_qdq_pair_to_weight": [29, 188, 189, 583], "add_relu": 531, "addit": [147, 189, 482, 504, 505, 527, 555, 563, 569, 586, 587, 592], "addition": [505, 529, 580, 592], "addn": 533, "address": [205, 247, 497, 522, 542, 563, 566, 569, 581], "addv2": [39, 55, 387, 403, 533], "adher": 498, "adjust": [552, 583, 589], "admin_github_token": [556, 559], "adopt": [498, 544, 580, 581, 589], "advanc": [137, 188, 189, 497, 502, 504, 510, 539, 580, 583, 586, 594], "advantag": [561, 580, 582, 592], "afc": [273, 326], "affect": 589, "affin": [144, 481, 583], "aforement": 541, "after": [2, 64, 134, 147, 164, 168, 173, 175, 180, 188, 189, 203, 215, 219, 222, 245, 257, 260, 300, 364, 378, 412, 472, 488, 493, 500, 502, 504, 524, 526, 527, 528, 531, 536, 540, 541, 554, 555, 558, 562, 566, 578, 579, 580, 583, 585, 586, 588, 589, 590, 591, 592], "ag": 497, "again": [205, 247, 524, 564, 566, 585], "against": [269, 322], "agent": 500, "aggress": 592, "agnost": 527, "agnostic_mod": [271, 324], "agre": 498, "ai": [502, 544, 581, 585, 593], "aid": 525, "aim": [500, 502, 539, 544, 580, 589, 592, 593], "ajanthan": 580, "al": [137, 521, 586, 589], "albert": [550, 595], "alemb": 532, "alexnet": [550, 595], "algo": [381, 485], "algo_nam": 522, "algorithm": [2, 32, 147, 189, 268, 275, 283, 320, 321, 328, 485, 487, 500, 502, 503, 504, 505, 522, 527, 528, 533, 536, 539, 550, 555, 580, 583, 590, 594], "algorithm_entri": 522, "algorithm_registri": 148, "algorithm_typ": 148, "algorithmschedul": 148, "alia": [489, 493, 546, 551], "alias": [493, 522], "alias_param": 493, "alibaba": [502, 551, 558, 559, 581], "align": [219, 260, 497, 586, 591], "alignimagechannel": 591, "alignimagechanneltransform": [219, 260], "alistarh": 580, "aliv": 569, "all": [2, 4, 22, 32, 49, 83, 142, 143, 147, 148, 150, 153, 155, 158, 163, 168, 176, 185, 188, 189, 194, 195, 201, 205, 212, 219, 220, 226, 229, 235, 243, 247, 254, 260, 265, 268, 271, 273, 275, 282, 289, 293, 294, 298, 304, 313, 316, 321, 324, 326, 328, 330, 339, 371, 377, 397, 430, 473, 474, 477, 479, 485, 493, 497, 498, 502, 503, 504, 505, 522, 523, 524, 529, 533, 537, 541, 544, 552, 555, 556, 559, 560, 561, 562, 563, 566, 567, 569, 570, 574, 575, 576, 579, 580, 581, 583, 585, 586, 589, 591, 592], "allbalanc": 595, "allenai": [272, 273, 325, 326], "allevi": 589, "alloc": 571, "allow": [147, 307, 363, 527, 529, 540, 541, 542, 563, 568, 580, 582, 586, 589, 592, 594], "along": [537, 580, 586], "alpha": [127, 141, 144, 151, 162, 182, 380, 481, 522, 583, 592], "alpha_list": 374, "alpha_max": 589, "alpha_min": 589, "alpha_step": 589, "alreadi": [142, 153, 205, 218, 220, 247, 259, 477, 503, 524, 536, 556, 559, 563, 572, 592], "also": [140, 167, 202, 205, 219, 244, 247, 260, 268, 321, 328, 339, 359, 478, 498, 500, 503, 504, 505, 523, 526, 530, 534, 536, 540, 541, 544, 549, 554, 555, 558, 561, 562, 563, 566, 567, 578, 580, 581, 583, 585, 586, 589, 592], "altern": [142, 188, 189, 359, 477], "although": [202, 244, 588], "alwai": [224, 271, 324, 328, 359, 526, 540, 541, 566, 586], "amazon": [502, 544, 552], "amd": [502, 537, 595], "amodio": 562, "among": [275, 328, 555, 589], "amount": [4, 589], "amp": [2, 544, 551, 570, 586], "amp_cfg": 2, "amp_convert": 2, "amx": 581, "an": [2, 53, 54, 56, 91, 127, 129, 134, 137, 140, 142, 147, 152, 159, 173, 188, 189, 197, 201, 205, 219, 223, 228, 238, 243, 247, 260, 267, 268, 272, 273, 281, 282, 304, 320, 321, 325, 326, 329, 354, 358, 359, 378, 380, 401, 402, 404, 467, 472, 477, 478, 482, 493, 495, 497, 499, 500, 502, 503, 505, 521, 523, 524, 525, 526, 531, 539, 540, 541, 542, 544, 548, 549, 552, 561, 564, 565, 566, 569, 572, 578, 580, 581, 583, 586, 588, 589, 590, 591, 592], "anaconda": [537, 568, 569], "analysi": [544, 561, 580, 588], "analyt": [537, 581, 593], "analyz": [96, 166, 337, 438, 474, 588, 589, 590], "andrew": 521, "ani": [137, 142, 271, 273, 316, 324, 326, 354, 358, 374, 378, 477, 490, 493, 497, 502, 505, 522, 529, 544, 549, 562, 563, 567, 568, 580, 588, 592], "ann": 500, "anneal": 161, "anno_dir": [204, 246, 524], "anno_path": [275, 328, 540], "annot": [204, 246, 271, 324, 378, 504, 505, 524, 540, 580, 592], "announc": 552, "anoth": [219, 260, 268, 277, 321, 493, 526, 527, 554, 558, 591, 592], "answer": [219, 260, 272, 273, 325, 326, 497, 566, 580, 591, 595], "answer_start": [273, 326], "answeringsquad": 595, "ap": 540, "ap0": 595, "apach": [4, 538], "api": [56, 61, 96, 230, 266, 271, 303, 316, 317, 324, 328, 359, 374, 375, 378, 404, 409, 438, 480, 493, 499, 502, 506, 508, 512, 515, 518, 526, 531, 536, 537, 541, 546, 550, 551, 552, 568, 569, 573, 587, 588, 592, 596], "api_typ": [569, 574, 575, 576], "appear": [142, 477, 497, 555, 561, 563], "append": [147, 304, 307, 363, 499, 528, 541, 579], "append_attr": 147, "append_task": 571, "appl": 592, "appli": [32, 99, 112, 113, 114, 117, 119, 123, 134, 144, 155, 177, 179, 229, 269, 322, 440, 453, 454, 455, 458, 460, 464, 472, 481, 497, 504, 505, 541, 544, 546, 552, 561, 565, 566, 571, 579, 580, 583, 585, 588, 589, 592, 593, 594], "applianc": 581, "applic": [215, 257, 505, 531, 544, 561, 563, 569, 570, 574, 575, 581, 586, 589, 590, 591, 593], "apply_awq_clip": 32, "apply_awq_scal": 32, "apply_inlin": [134, 472], "appoint": 497, "approach": [188, 189, 278, 279, 281, 499, 500, 502, 521, 524, 527, 536, 541, 549, 561, 564, 572, 574, 575, 576, 580, 581, 582, 584, 586, 592, 594], "appropri": [497, 521, 589], "approv": 498, "approx": 586, "approxim": [268, 269, 321, 322, 504, 540, 586], "apr": 581, "apt": [532, 537, 547, 555], "ar": [53, 54, 91, 142, 147, 168, 173, 174, 175, 180, 188, 189, 203, 219, 245, 260, 271, 275, 282, 298, 299, 300, 304, 306, 307, 324, 328, 360, 362, 363, 377, 378, 401, 402, 477, 485, 492, 493, 497, 498, 499, 500, 503, 504, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 549, 552, 555, 561, 563, 564, 566, 567, 568, 569, 572, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "arang": 589, "arbitrari": [142, 477, 541, 579], "arcfac": 595, "architectur": [153, 220, 278, 281, 502, 520, 527, 541, 568, 580, 581, 586, 593], "archiv": 572, "arctic": 537, "are_shapes_equ": 91, "area": [219, 260, 271, 324, 540, 591], "aren": 567, "arg": [2, 40, 91, 147, 203, 204, 205, 245, 246, 247, 298, 307, 363, 378, 388, 488, 489, 524, 529, 541, 550, 580, 583, 586, 589, 590, 591], "argmax": 17, "argmaxoper": 7, "argpars": 561, "argu": 522, "argument": [142, 189, 378, 477, 500, 526, 565, 566, 569, 572, 574, 575, 576, 586], "ariel": 580, "aris": 582, "arithmet": 533, "arm": [502, 536, 537, 595], "around": 91, "arr": [31, 493], "arrai": [4, 31, 32, 134, 142, 219, 260, 271, 282, 324, 472, 477, 493, 591], "arrang": [174, 175, 180, 204, 205, 208, 246, 247, 250, 524, 580], "art": 580, "articl": [272, 273, 325, 326], "artifici": 500, "arxiv": [162, 180, 300, 502, 521, 580, 581, 586, 589], "as_text": 91, "ascend": 564, "ascii": [142, 477], "asd932_": [205, 247, 524], "ask": [502, 537], "aspect": [215, 219, 257, 260, 591], "asplo": 581, "assert_error": 91, "assertionerror": [163, 169, 176, 185, 298, 299, 300, 329], "assign": [271, 324, 493, 529, 582, 592], "assist": [154, 587], "associ": [134, 142, 271, 324, 472, 477], "assum": [218, 259, 271, 282, 324, 503, 533, 561], "asterisk": 589, "asym": [30, 31, 32, 144, 147, 481, 505, 533, 586, 594], "asymmetr": [505, 583, 586, 592], "atom": 538, "att": [272, 273, 325, 326], "attach": [527, 541, 589], "attack": 497, "attempt": 592, "attent": [17, 145, 164, 166, 177, 188, 189, 203, 245, 497, 527, 580], "attention_ffn_nam": 177, "attention_mask": [203, 245, 541], "attentionoper": 8, "attr": [91, 134, 166, 472], "attr1": 378, "attr2": 378, "attr5": 378, "attribut": [31, 69, 90, 91, 134, 147, 166, 177, 189, 417, 472, 493, 503, 523, 533, 535, 541, 582, 594], "attribute1": 378, "attribute_to_kwarg": 31, "attributeerror": [140, 378, 478], "aug": 581, "augment": 3, "author": 538, "auto": [147, 164, 166, 188, 189, 305, 361, 367, 493, 499, 521, 544, 547, 549, 551, 552, 580, 583, 586], "auto_alpha_arg": 589, "auto_config": 580, "auto_copi": 147, "auto_input_output": [134, 472], "auto_merg": 31, "auto_mixed_precis": [309, 367], "auto_qu": 550, "auto_round": 502, "auto_slim": 165, "autocast": 544, "autom": [500, 544, 561, 562, 581, 589], "automat": [164, 166, 167, 188, 189, 205, 208, 215, 247, 250, 257, 266, 276, 303, 499, 502, 520, 524, 536, 541, 542, 544, 546, 549, 550, 552, 554, 555, 556, 558, 559, 561, 568, 571, 579, 580, 583, 589, 591, 592], "automixedprecisiontunestrategi": [305, 361], "automodel": 502, "automodelforcausallm": [143, 479], "automodelforsequenceclassif": 541, "autonumb": [504, 505], "autoround": 502, "autotoken": [502, 541], "autotrack": [126, 134, 379, 472], "autotun": 522, "autotunestrategi": 360, "aux": 2, "auxiliari": 486, "avail": [181, 188, 189, 333, 502, 506, 508, 512, 515, 518, 522, 530, 532, 534, 536, 554, 558, 563, 568, 569, 570, 574, 575, 576, 580, 592, 595], "averag": [32, 272, 273, 275, 325, 326, 328, 540, 541, 586, 592, 595], "averagepool": 24, "avg": 583, "avgpool": [115, 124, 456, 465, 533], "avoid": [91, 142, 147, 203, 245, 477, 499, 522, 590], "avx512": [542, 583], "avx512_bf16": 542, "aw": [544, 552, 571, 581, 595], "awai": 523, "awar": [32, 137, 155, 189, 229, 277, 298, 366, 482, 503, 504, 505, 521, 528, 529, 531, 536, 561, 571, 579, 581, 586, 592], "awq": [32, 584, 586], "awq_arg": 586, "awq_g32asym": 586, "awq_quant": 32, "ax": [189, 265], "axi": [31, 189], "azur": [498, 502, 581], "b": [31, 60, 203, 245, 408, 493, 498, 521, 524, 540, 580, 586, 589, 592], "b0": 595, "b1": [60, 408], "b16": [37, 385], "b_dataload": [153, 188, 189, 520, 541], "b_filter": 2, "b_func": [153, 520], "babel": 567, "back": [142, 147, 219, 225, 260, 477, 526, 561, 567], "backbon": 588, "backend": [3, 29, 30, 151, 158, 188, 189, 190, 191, 195, 196, 199, 203, 204, 206, 207, 208, 209, 210, 214, 216, 219, 225, 226, 231, 232, 236, 237, 239, 241, 245, 246, 248, 249, 250, 251, 252, 256, 258, 260, 276, 311, 329, 330, 331, 333, 369, 499, 505, 526, 529, 535, 536, 541, 542, 550, 569, 574, 575, 576, 582, 586, 591, 592, 594], "background_thread": 547, "backward": [482, 527, 528, 529, 541, 579, 580, 583, 587], "baichuan": 539, "baichuan2": 539, "balanc": [211, 253, 586, 589], "ban": 497, "bandit": 498, "bandwidth": [541, 542, 586], "bar": [31, 205, 247, 561, 581], "bare": 532, "bart": 595, "base": [2, 4, 22, 33, 72, 91, 102, 106, 108, 118, 130, 137, 140, 145, 147, 148, 155, 162, 169, 176, 182, 184, 189, 194, 197, 201, 203, 205, 212, 219, 229, 235, 238, 243, 245, 247, 254, 260, 275, 281, 283, 289, 290, 293, 295, 300, 310, 313, 317, 328, 330, 337, 338, 339, 368, 371, 375, 381, 420, 443, 447, 449, 459, 468, 473, 474, 478, 500, 502, 503, 504, 505, 522, 524, 528, 529, 533, 541, 542, 549, 550, 552, 561, 564, 569, 572, 575, 576, 580, 581, 583, 586, 588, 589, 590, 592, 595], "base_dataload": 239, "base_dir": 31, "base_model": 331, "basecallback": 155, "baseconfig": 522, "basedataload": [194, 198, 200, 235, 240, 242, 473], "basedatalod": [194, 235, 473], "baselin": [485, 588, 589, 590], "baseline_acc_0": 590, "baseline_accuraci": 490, "basemetr": [275, 328, 359], "basemodel": [330, 474], "basepattern": [168, 170, 172], "baseprun": [173, 178, 180, 181], "basereg": 182, "basetransform": [219, 260], "bash": [502, 566, 590], "basi": 580, "basic": [166, 168, 176, 188, 189, 218, 259, 278, 298, 309, 313, 316, 367, 371, 374, 482, 536, 537, 541, 563, 582, 588], "basic_magnitud": [582, 594], "basic_na": 280, "basicmagnitudeprun": 287, "basicna": 278, "basicprun": [179, 181], "basictoken": [218, 259], "basictunestrategi": [306, 362], "batch": [2, 147, 194, 196, 197, 201, 202, 222, 235, 237, 238, 243, 244, 473, 482, 523, 527, 528, 541, 579, 580, 583, 589, 591, 592, 595], "batch_idx": 529, "batch_sampl": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523], "batch_siz": [189, 194, 196, 200, 201, 202, 203, 204, 222, 235, 237, 242, 243, 244, 245, 246, 265, 473, 500, 523, 524, 529, 531, 535, 541, 544, 583], "batchmatmul": [114, 455], "batchmatmulv2": [114, 455], "batchnorm": [21, 48, 53, 107, 396, 401, 448, 499, 589], "batchnormalizationoper": 21, "batchsampl": [201, 243], "batchtospacend": [44, 392], "bayesian": [189, 283, 309, 367, 500, 580, 582], "bayesianoptim": [307, 363], "bayesianoptimizationsearch": 283, "bayesiantunestrategi": [307, 363], "bbox": [271, 324, 499, 540], "bboxes_labels_scor": 499, "bc": [547, 555], "bdf0bd1b2cc14bc19bce12d4f9b333c7": 569, "bdist_wheel": [556, 559], "beam": [268, 321, 540], "becaus": [142, 172, 177, 219, 260, 298, 477, 499, 566, 583, 589, 591, 592], "becom": [503, 531, 580, 586], "been": [4, 142, 163, 169, 176, 268, 298, 300, 321, 477, 500, 505, 522, 527, 541, 542, 561, 586, 589], "befor": [93, 95, 151, 168, 173, 175, 180, 181, 183, 188, 189, 203, 245, 298, 300, 302, 435, 437, 498, 505, 523, 524, 527, 528, 529, 532, 533, 537, 541, 556, 559, 565, 566, 583, 586, 588, 590, 592], "begin": [102, 174, 175, 180, 300, 443, 522, 523, 527, 528, 541, 580, 592], "behavior": [142, 477, 497, 503, 504, 505, 533, 543, 586, 590, 592, 594], "being": [137, 271, 324, 505, 569], "belong": [205, 247, 333, 583], "below": [41, 52, 60, 188, 189, 304, 328, 359, 389, 400, 408, 498, 499, 502, 503, 504, 505, 523, 526, 527, 529, 535, 540, 544, 546, 554, 555, 558, 561, 564, 569, 578, 579, 580, 582, 583, 586, 588, 589, 590, 592, 593], "bench": 544, "bench_config": 548, "bench_featur": 548, "benchmark": [188, 189, 222, 267, 304, 320, 339, 493, 502, 510, 543, 544, 548, 552, 555, 561, 564, 592, 593, 594, 595], "benchmark_with_raw_cmd": 153, "benchmarkconf": 541, "benchmarkconfig": [153, 188, 189, 520, 526, 541], "benefici": 521, "benefit": 579, "berkeleyvis": 526, "bert": [166, 189, 199, 202, 203, 219, 241, 244, 245, 260, 502, 524, 527, 540, 542, 549, 572, 575, 576, 580, 591, 595], "bert_dataset": [209, 251], "bertattent": 166, "besid": [503, 527, 566, 586], "best": [155, 219, 260, 261, 266, 303, 310, 368, 497, 500, 502, 522, 537, 544, 550, 561, 567, 578, 583, 586, 589, 591, 592], "best_configur": 492, "best_model": [155, 261, 492, 586], "best_model_weight": 492, "best_scor": [155, 261], "beta": 162, "beta_1": 594, "beta_2": 594, "better": [82, 188, 189, 192, 193, 233, 234, 282, 329, 359, 429, 482, 522, 528, 540, 542, 580, 581, 583, 586, 588, 589, 592], "between": [4, 30, 129, 152, 179, 188, 189, 219, 260, 272, 275, 325, 328, 354, 358, 467, 493, 499, 503, 504, 505, 521, 526, 527, 536, 540, 541, 552, 583, 586, 587, 588, 589, 591, 592], "bf16": [32, 73, 136, 188, 189, 317, 375, 503, 504, 533, 541, 546, 551, 555, 561, 585, 592, 595], "bf16_convert": [38, 138, 386], "bf16_op": [34, 36, 93, 382, 384, 435, 504, 585], "bf16_symbolic_trac": 136, "bf16convert": [36, 384, 585], "bf16modul": 136, "bf16modulewrapp": 136, "bf16wrapper": 585, "bfloat16": [31, 542, 544, 552, 585], "bi": [272, 273, 325, 326], "bia": [129, 188, 189, 467, 586, 590], "bias_correct": [131, 469], "biasadd": [39, 45, 50, 52, 95, 387, 393, 398, 400, 437, 533], "biascorrect": [129, 467], "bibtex": 538, "bicub": [219, 260, 591], "bidaf": 595, "big": [137, 526, 586], "bigdl": [551, 552], "bigger": 566, "bigscienc": [539, 589, 595], "bilibili": 581, "bilinear": [215, 219, 257, 260, 591], "bilinearimagenet": [591, 594], "bilinearimagenettransform": [215, 257], "bilingu": [268, 321], "billion": 580, "bilstm": 595, "bin": [4, 142, 143, 477, 479, 493, 532], "binari": [9, 134, 275, 328, 472, 532, 540, 556, 559, 587], "binary_op": 17, "binarydirect8bitoper": 9, "binaryoper": 9, "bind": [153, 220], "bind_al": 590, "bio": 595, "bit": [30, 32, 147, 188, 189, 377, 502, 505, 521, 528, 542, 581, 583, 586, 589], "bitnami": 581, "bk3": 4, "black": 592, "black_nod": 3, "blade": 551, "blank": 555, "blendcnn": 595, "bleu": [269, 274, 322, 327, 540, 580], "bleu_hook": [269, 322], "bleu_scor": [269, 322], "bleu_token": [268, 321], "bleu_util": [274, 327], "blob": [4, 137, 170, 171, 268, 269, 272, 273, 298, 321, 322, 325, 326, 328, 359, 541, 550, 572, 575, 576], "blob_siz": 32, "block": [0, 32, 145, 147, 162, 172, 175, 180, 185, 298, 339, 378, 536, 578, 580, 586, 592], "block_list": 147, "block_mask": [162, 176], "block_num": 147, "block_pattern": 145, "block_prefix": 147, "block_siz": [172, 298, 586], "blockfallbacktuningsampl": 374, "blockmaskcriterion": 162, "blocksiz": 32, "blockwis": 589, "blockwise_over_matmul_gemm_conv": 185, "blog": [502, 581], "bloom": [502, 539, 580, 589, 595], "bloomz": [589, 595], "blue": 584, "bmm": 586, "bn": 595, "bnb": 586, "bo": 189, "bodi": 497, "bool": [2, 30, 31, 32, 127, 134, 142, 146, 147, 168, 188, 189, 203, 205, 215, 219, 245, 247, 257, 260, 265, 269, 275, 298, 316, 322, 328, 374, 378, 380, 472, 477, 488, 492, 493, 523, 524, 540, 572, 582, 591], "bool_val": 91, "boolean": 2, "boost": [542, 545, 561, 580, 581], "booster": 528, "bootstrap": 567, "border": 591, "bot": [556, 559], "both": [134, 189, 472, 497, 500, 503, 528, 541, 545, 564, 566, 568, 580, 582, 583, 586, 589, 592], "bottleneck": 586, "bottom": 566, "boudoukh": 580, "bound": [60, 153, 219, 260, 271, 307, 324, 363, 408, 540, 591], "boundari": [219, 260, 591], "bowl": [273, 326], "box": [219, 260, 271, 275, 324, 328, 499, 540, 544, 555, 561, 590, 591, 592], "branch": [134, 472, 498], "brand": 538, "break": [95, 437, 529, 541], "breakdown": 569, "breakpoint": 562, "breviti": [268, 269, 321, 322, 540], "bridg": [503, 504, 536], "briefli": [541, 589], "bright": 591, "bring": [266, 303, 555, 568, 589], "broad": [502, 536, 550, 593], "broadcast": [219, 260, 529, 591], "broadcast_optimizer_st": 529, "broadcast_paramet": 529, "bronco": [273, 326], "brought": [543, 545, 552, 583], "browser": [554, 558, 563, 567], "buffer": [142, 477], "bug": [498, 502], "build": [2, 30, 32, 101, 148, 149, 151, 152, 278, 281, 332, 334, 336, 337, 338, 342, 442, 474, 503, 504, 505, 537, 543, 554, 556, 558, 559, 562, 581, 592], "build_slave_faker_model": 377, "built": [61, 158, 177, 190, 191, 195, 199, 203, 204, 209, 211, 213, 214, 215, 216, 219, 224, 226, 231, 232, 236, 239, 241, 245, 246, 251, 253, 255, 256, 257, 258, 260, 304, 328, 331, 339, 359, 409, 482, 500, 503, 524, 529, 541, 554, 558, 578, 583, 588, 591, 592, 594], "builtin": [142, 477, 529], "bundl": 562, "busi": 581, "button": [498, 536, 555, 561], "bypass_reshap": [53, 54, 401, 402], "byte": [142, 477], "byte_arrai": [142, 477], "bytesio": [142, 477], "c": [4, 60, 205, 247, 408, 493, 524, 532, 537, 586, 592], "c1": [60, 408], "c1c2": [60, 408], "c2": [60, 408], "c6a": 595, "c6g": 595, "c6i": 595, "c_": 586, "cach": [203, 245, 532, 583, 586], "cache_dir": [143, 479], "cache_kl": 2, "cache_minmax": 2, "caff": 526, "caffe_ilsvrc12": 526, "caffenet": 595, "calcul": [31, 46, 147, 162, 170, 185, 189, 206, 207, 248, 249, 272, 273, 298, 300, 310, 325, 326, 368, 394, 473, 483, 493, 521, 524, 540, 541, 552, 564, 578, 580, 583, 586, 588, 589, 592, 594], "calculate_md5": [205, 247], "calculate_ms": 493, "calculate_quant_min_max": 147, "calculate_scale_zp": 31, "calib": [147, 504], "calib_cfg": 2, "calib_data": [2, 141], "calib_dataload": [222, 304, 359, 499, 502, 523, 524, 526, 534, 535, 540, 541, 563, 564, 583, 584, 585, 586], "calib_dataset": 564, "calib_func": [34, 147, 359, 382, 585], "calib_iter": 504, "calib_method": 4, "calib_model": 2, "calib_registri": 4, "calib_tensor": 2, "calibcollector": 2, "calibdata": 2, "calibr": [2, 5, 32, 35, 75, 76, 126, 147, 153, 188, 189, 192, 193, 233, 234, 266, 303, 341, 359, 383, 422, 423, 487, 503, 505, 524, 535, 536, 580, 583, 586, 592, 593, 594], "calibration_data": [85, 93, 432, 435], "calibration_sampling_s": [188, 189, 541, 566], "calibrationdataread": [340, 341], "calibratorbas": 4, "call": [2, 30, 142, 148, 166, 174, 175, 180, 271, 300, 324, 341, 477, 499, 500, 503, 523, 535, 550, 552, 562, 580, 583, 589, 590, 591], "call_on": 153, "callabl": [142, 188, 189, 273, 326, 477, 482, 522, 523], "callback": [290, 295, 482, 485, 499, 541, 579, 580, 583], "callbacks_list": 482, "camembert": 595, "can": [30, 31, 32, 129, 137, 142, 152, 166, 167, 168, 173, 181, 183, 188, 189, 192, 193, 202, 205, 219, 220, 222, 233, 234, 244, 247, 260, 271, 273, 275, 298, 300, 302, 324, 326, 328, 329, 339, 341, 359, 467, 477, 482, 493, 499, 500, 502, 503, 504, 505, 520, 522, 523, 524, 526, 527, 528, 529, 531, 533, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 554, 555, 556, 558, 559, 561, 562, 564, 566, 567, 568, 569, 571, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595], "cannot": [271, 324, 499, 522, 532, 586, 590], "cap": 502, "cap_s8_1_11": 505, "cap_s8_1_11_conv1d": 505, "capabl": [2, 33, 317, 375, 381, 504, 505, 520, 533, 541, 542, 552, 563, 568, 580, 582, 583, 592, 594], "capac": [586, 588], "captur": 493, "captureoutputtofil": 493, "card": 580, "carri": 580, "cascad": 537, "case": [31, 56, 60, 142, 153, 189, 202, 218, 219, 220, 244, 259, 260, 266, 290, 295, 303, 339, 404, 408, 477, 505, 522, 523, 527, 528, 529, 533, 535, 540, 545, 549, 561, 562, 563, 566, 572, 575, 576, 578, 580, 581, 583, 586, 587, 589, 591, 593, 594, 595], "cast": [31, 37, 385, 585, 591], "cast_tensor": 31, "castonnxtransform": [219, 260], "castpytorchtransform": [219, 260], "casttftransform": [219, 260], "cat": [499, 531, 547, 574, 575, 576], "categor": 540, "categori": [205, 247, 270, 323, 520, 524, 551], "category_id_set": [271, 324], "caus": [185, 504, 523, 545, 564, 566, 580, 586], "causal": 580, "cce5ff": 592, "cd": [526, 529, 537, 563, 565, 566, 568, 569, 574, 575, 576], "cdf419910f9b4d2a8320d0e420ac1d0a": 575, "cdot": 589, "ce": [156, 188, 189, 221, 541, 594], "cell": 555, "center": [219, 260, 501, 502, 537, 591, 592], "centercrop": 591, "centercroptftransform": [219, 260], "centercroptransform": [219, 260], "cento": [537, 595], "central_fract": [215, 257, 591], "cern": 581, "cert": 563, "certain": [142, 187, 477, 588], "certif": [498, 563], "cfg": [57, 58, 147, 317, 375, 405, 406, 485, 504, 505], "cfg_filter": 485, "cfg_from_fil": 493, "cfg_preprocess": 485, "cg": [526, 566, 590], "challeng": 584, "chang": [30, 82, 129, 152, 174, 175, 177, 178, 180, 183, 188, 189, 300, 302, 341, 366, 429, 467, 493, 498, 504, 523, 529, 532, 538, 541, 544, 554, 555, 558, 561, 567, 580, 590, 591, 592], "changelog": [556, 559, 560], "channel": [30, 31, 32, 129, 151, 152, 164, 167, 172, 188, 189, 215, 219, 257, 260, 298, 341, 467, 488, 502, 503, 505, 536, 537, 544, 546, 551, 566, 580, 586, 591, 595], "channel_axi": [99, 149, 152, 440], "channels_last": [215, 257, 544], "channelx1": [188, 189, 580], "chapter": 504, "characterist": 497, "chart": [566, 583, 588, 590], "chat": [539, 589, 595], "chatbot": 581, "chatglm2": 539, "chatglm3": 539, "check": [2, 32, 53, 54, 91, 134, 147, 185, 195, 205, 247, 263, 299, 401, 402, 472, 492, 493, 502, 526, 529, 537, 545, 547, 549, 556, 559, 560, 564, 567, 570, 571, 587], "check_cfg_and_qconfig": 147, "check_config": [185, 299], "check_dataload": 195, "check_integr": [205, 247], "check_key_exist": 493, "check_key_valid": 185, "check_model": 263, "check_mx_vers": 2, "checknumer": [66, 414], "checkout": 498, "checkpoint": [142, 337, 474, 477, 492, 543], "checkpoint_dir": 492, "checkpoint_sess": [337, 474], "checksum": [205, 247], "chees": 522, "cheeseshopaddress": 522, "chen": 538, "child": [60, 143, 408, 479, 590], "children": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 143, 479], "chines": 581, "choic": [203, 245, 503, 524, 540, 567, 589], "choos": [205, 247, 488, 536, 549, 581, 587, 589, 592, 594], "chosen": [504, 521], "chunk": [219, 260, 591], "chunk_siz": [205, 247], "ci": 498, "cifar": [205, 247, 524, 595], "cifar10": [205, 247, 524], "cifar100": [205, 247, 524], "circumst": [497, 582], "ckpt": [134, 329, 337, 359, 472, 474, 595], "cl": [143, 148, 156, 158, 168, 173, 181, 182, 183, 205, 212, 219, 221, 226, 247, 254, 260, 282, 289, 293, 298, 300, 302, 313, 328, 339, 371, 479, 493, 522], "claim": 538, "clamp_": 589, "clarifi": 497, "clase": 289, "class": [102, 135, 140, 147, 163, 169, 176, 209, 251, 282, 329, 359, 443, 478, 499, 500, 504, 522, 523, 524, 527, 540, 541, 552, 578, 579, 583, 587, 590, 592, 594], "class_1": [205, 247, 524], "class_n": [205, 247, 524], "classdef": 592, "classdiagram": 571, "classic": 592, "classif": [181, 203, 219, 245, 260, 275, 301, 328, 527, 531, 540, 550, 564, 572, 575, 576, 580, 581], "classifi": [166, 185, 203, 245, 275, 328, 524, 527], "classificationmnli": 595, "classificationmrpc": 595, "classificationqnli": 595, "classificationqqp": 595, "classificationsst": 595, "classifierheadsearch": 166, "classifierheadsearchertf": 166, "classregist": 377, "clean": [218, 259, 541], "clear": [201, 243, 503, 533, 540, 541], "cli": 564, "click": [536, 544, 545, 552, 555, 561, 566, 581, 590], "client": [563, 569, 576], "clip": [32, 586, 589], "clip_grad_norm_": 541, "clm": 580, "clone": [498, 526, 537, 554, 558, 563, 565, 566, 568, 569], "close": [129, 152, 467, 521, 570], "closur": 570, "cloud": [498, 502, 571, 581], "cluster": [571, 574, 575, 592], "cmd": 153, "cnn": 595, "cnt": 541, "co": 580, "coarsest": 589, "coco": [204, 211, 246, 253, 271, 275, 324, 328, 540, 580], "coco_dataset": [209, 251], "coco_filt": [213, 255], "coco_label_map": [274, 327], "coco_tool": [274, 327], "cocoev": [271, 324], "cocoevalwrapp": [271, 324], "cocomap": 540, "cocomapv2": [275, 328, 540], "coconpi": [204, 246, 524], "cocoraw": [204, 246, 524], "cocorecord": 524, "cocorecorddataset": [204, 246], "cocowrapp": [271, 324], "code": [142, 166, 192, 193, 220, 233, 234, 277, 301, 304, 359, 477, 482, 499, 502, 503, 504, 505, 524, 527, 528, 529, 535, 536, 538, 540, 544, 546, 548, 549, 550, 552, 555, 561, 565, 566, 568, 569, 570, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591], "codebert": 595, "codec": [142, 477], "codenam": [539, 542], "coder": [502, 536, 545, 546, 549, 552, 555, 568, 572, 581], "coeff": 182, "coeffici": [41, 182, 389, 580], "cola": [203, 245, 524, 540, 595], "collabor": [498, 502, 546, 552], "collat": [134, 147, 472], "collate_fn": [194, 196, 197, 200, 202, 222, 235, 237, 238, 242, 244, 473, 523, 524], "collate_pr": 31, "collate_result": 147, "collate_tf_pr": [134, 472], "collate_torch_pr": 147, "collctor": 4, "collect": [2, 4, 31, 147, 217, 219, 222, 224, 225, 227, 260, 273, 275, 326, 328, 483, 493, 504, 583, 590, 592], "collect_layer_histogram": 486, "collect_layer_input": 185, "collect_weight_info": 147, "collector": [2, 137, 483], "collectorbas": 2, "collecttransform": [219, 260], "color": [580, 584], "colorjitt": 591, "column": [493, 586, 589], "column_map": 493, "columnwis": [51, 399], "com": [4, 137, 170, 171, 181, 203, 245, 268, 269, 272, 273, 298, 301, 321, 322, 325, 326, 328, 359, 497, 522, 524, 526, 534, 537, 538, 541, 544, 550, 563, 565, 566, 568, 569, 572, 575, 576, 587, 588, 595], "comb": 528, "combin": [2, 147, 188, 189, 192, 193, 215, 229, 233, 234, 257, 329, 359, 482, 493, 499, 503, 536, 541, 579, 581, 583, 585, 586, 591, 592], "combine_cap": 2, "combine_histogram": 493, "come": [142, 477, 539, 592], "command": [153, 220, 482, 526, 529, 544, 546, 549, 554, 558, 562, 563, 565, 566, 567, 569], "comment": [140, 478, 497, 504, 524, 540, 541, 586, 591], "commentsbalancedor": 595, "commit": [497, 498], "common": [125, 140, 142, 189, 217, 267, 277, 281, 282, 283, 466, 477, 478, 485, 497, 522, 524, 528, 529, 531, 535, 537, 541, 583, 589], "commonli": [569, 580], "commun": [497, 563], "comoress": 488, "compact": [527, 541, 547, 580], "compar": [137, 275, 328, 493, 528, 540, 564, 580, 583, 586, 588, 590, 592], "compare_kei": 493, "compare_label": [275, 328, 359, 540], "compare_object": 493, "compare_weight": 137, "comparison": [493, 586, 587, 590], "compat": [134, 337, 472, 474, 498, 529, 543, 556, 559, 561, 580, 587], "compatible_format": [140, 478], "compil": [268, 321, 541], "complaint": 497, "complement": 580, "complet": [317, 375, 503, 504, 580, 583, 592, 594, 595], "complex": [522, 541, 542, 580], "complextfmap": 522, "compli": 592, "compon": [155, 261, 267, 304, 499, 522, 526, 529, 537, 538, 544, 561, 569, 579, 580], "compos": [219, 260, 485, 591], "composableconfig": 522, "composetransform": [219, 260], "comprehens": [541, 593], "compress": [267, 290, 295, 320, 339, 482, 488, 495, 502, 510, 527, 536, 541, 561, 563, 578, 579, 580, 581, 583, 589, 593, 595], "compressed_model": 586, "compression_dim": [488, 586], "compression_dtyp": [488, 586], "compression_manag": [188, 189, 482, 499, 527, 528, 541, 579, 580, 583], "compressionmanag": 482, "compressor": [2, 153, 155, 158, 170, 171, 181, 188, 189, 215, 216, 219, 220, 223, 226, 229, 257, 258, 260, 262, 267, 274, 275, 277, 298, 301, 303, 304, 309, 315, 320, 327, 328, 329, 333, 343, 359, 367, 373, 490, 495, 498, 500, 503, 504, 505, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 544, 545, 549, 551, 552, 554, 556, 558, 559, 560, 563, 564, 565, 566, 568, 569, 576, 578, 579, 580, 581, 583, 586, 587, 589, 590, 591, 592, 593, 594, 595], "comput": [31, 32, 91, 137, 147, 268, 269, 272, 273, 275, 321, 322, 325, 326, 328, 482, 493, 521, 523, 528, 531, 540, 541, 542, 544, 555, 564, 580, 581, 583, 586, 589, 592], "compute_bleu": [269, 322], "compute_const_folding_using_tf": 91, "compute_error": 137, "compute_spars": 493, "computemetr": [271, 324], "concat": [17, 133, 471], "concat_gener": [219, 260], "concatoper": 10, "concatv2": [110, 120, 133, 451, 461, 471, 533], "concentr": 566, "concept": [535, 588, 593], "conclud": 500, "concret": [134, 472, 592], "conda": [532, 537, 547, 555, 574, 575, 576, 587], "conda_env": [569, 574, 575, 576], "conda_prefix": 547, "condit": [71, 203, 204, 205, 219, 245, 246, 247, 260, 306, 360, 362, 419, 524, 538, 591, 592], "conduct": [499, 541, 549, 561, 592, 593], "conf": [148, 153, 155, 189, 192, 193, 220, 233, 234, 277, 284, 285, 287, 288, 289, 290, 295, 305, 306, 307, 308, 310, 311, 312, 313, 317, 329, 339, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 378, 482, 499, 500, 502, 505, 520, 527, 534, 535, 541, 542, 543, 563, 565, 566, 579, 583, 584, 585, 586, 588, 589, 592], "conf_fnam": 278, "conf_fname_or_obj": [220, 229, 261, 266, 276, 277, 278, 279, 281, 290, 295, 303], "confer": [137, 580, 589], "confid": 147, "confidence_batch": [147, 592], "confidenti": [497, 563], "config": [2, 32, 101, 102, 104, 108, 147, 153, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 192, 193, 203, 233, 234, 245, 284, 285, 287, 288, 289, 290, 295, 298, 299, 300, 301, 302, 317, 318, 320, 329, 354, 358, 375, 376, 377, 378, 381, 442, 443, 445, 449, 482, 485, 492, 493, 500, 502, 504, 505, 510, 520, 522, 523, 526, 527, 528, 529, 531, 534, 536, 540, 541, 542, 543, 563, 564, 579, 580, 582, 583, 585, 586, 588, 590, 592], "config_file_path": [181, 301], "config_inst": 153, "config_quantizable_lay": [104, 445], "configproto": 358, "configur": [2, 104, 136, 147, 153, 185, 188, 189, 192, 193, 195, 205, 208, 220, 225, 233, 234, 247, 250, 261, 265, 266, 277, 278, 279, 281, 290, 295, 299, 303, 304, 310, 328, 329, 339, 359, 368, 377, 445, 482, 484, 485, 491, 492, 499, 500, 503, 504, 524, 526, 541, 548, 562, 569, 574, 575, 576, 578, 580, 583, 586, 587, 589, 591, 592, 595], "confirm": 504, "conflict": [91, 522, 532], "connect": [162, 300, 561, 563, 570, 580, 588], "consecut": [164, 166, 167, 580], "conserv": [188, 189, 367], "conservativetunestrategi": 364, "consid": [32, 134, 275, 328, 472, 497, 521, 522, 527, 562, 592], "consider": 589, "consist": [42, 49, 390, 397, 498, 499, 522, 569, 589, 592], "consol": [562, 567], "consolid": 537, "const": [42, 43, 49, 50, 53, 54, 56, 68, 84, 390, 391, 397, 398, 401, 402, 404, 416, 431], "const_node_valu": 91, "constant": [91, 265, 307, 315, 363, 373, 486, 522, 523, 533, 564, 591], "constant_valu": [219, 260], "constfold": 533, "constrain": 584, "constraint": [188, 189, 266, 303, 541, 580, 588, 592, 594], "construct": [142, 203, 206, 207, 210, 217, 222, 224, 225, 227, 245, 248, 249, 252, 328, 333, 337, 377, 473, 474, 477, 485, 497, 504, 505, 524, 529, 580, 592], "construct_function_from_graph_def": [134, 472], "consum": 523, "consumpt": 589, "contact": [497, 587, 588], "contain": [2, 53, 54, 56, 60, 125, 134, 137, 142, 147, 153, 155, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 188, 189, 192, 193, 203, 204, 205, 233, 234, 245, 246, 247, 261, 265, 266, 271, 272, 273, 277, 290, 293, 295, 298, 299, 300, 301, 302, 303, 324, 325, 326, 329, 359, 401, 402, 404, 408, 466, 472, 477, 482, 485, 492, 502, 521, 524, 527, 536, 540, 562, 569, 574, 575, 576, 580, 586, 590, 592, 593], "container_id": 502, "content": [524, 569, 570, 574, 575, 576], "content_fold": [210, 252, 524], "context": [2, 493, 582, 586], "contextu": 580, "contigu": 147, "continu": [171, 271, 298, 324, 500, 539, 541, 562, 580, 593], "contract": [44, 392], "contrast": [168, 298, 591], "contrib": [4, 267, 320], "contribut": [497, 502, 580], "control": [148, 188, 189, 499, 541, 567, 580, 592], "conv": [17, 44, 48, 52, 57, 58, 59, 78, 95, 151, 188, 189, 392, 396, 400, 405, 406, 407, 425, 437, 499, 504, 505, 541, 580, 582, 583, 592], "conv0": [526, 566, 590], "conv1": [188, 189, 583, 594], "conv1d": [187, 505], "conv1d_relu": 531, "conv2d": [39, 45, 46, 47, 51, 52, 57, 111, 121, 129, 387, 393, 394, 395, 399, 400, 405, 452, 462, 467, 504, 505, 526, 531, 533, 566, 589, 590, 592], "conv2d_relu": 531, "conv2dbackpropinput": [112, 453], "conv3d": [57, 111, 405, 452], "conv3dbackpropinputv2": [112, 453], "conveni": [541, 568], "convent": [205, 247, 271, 324, 498, 527], "convers": [40, 41, 189, 277, 388, 389, 498, 503, 504, 541, 542, 583, 585, 589], "convert": [2, 31, 34, 35, 36, 39, 40, 41, 42, 43, 52, 60, 72, 85, 86, 88, 89, 90, 91, 117, 122, 126, 128, 136, 147, 166, 188, 189, 203, 215, 218, 219, 245, 257, 259, 260, 264, 271, 277, 299, 317, 324, 375, 378, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 400, 408, 420, 432, 433, 458, 463, 499, 504, 541, 542, 546, 583, 585, 586, 589, 591, 592], "convert_add_to_biasadd": [62, 410], "convert_bf16": 504, "convert_by_vocab": [218, 259], "convert_examples_to_featur": [203, 219, 245, 260], "convert_layout": [62, 410], "convert_leakyrelu": [62, 410], "convert_nan_to_random": [62, 410], "convert_placeholder_to_const": [62, 410], "convert_tensorflow_tensor_to_onnx": 91, "convert_to_unicod": [218, 259], "convertaddtobiasaddoptim": [39, 387], "converted_model": [189, 329, 541, 542], "convertlayoutoptim": [40, 388], "convertleakyreluoptim": [41, 389], "convertnantorandom": [42, 390], "convertplaceholdertoconst": [43, 391], "convolut": [527, 581], "convoper": 11, "cooper": [537, 542, 581], "coordin": [219, 260, 307, 363, 568, 591, 592], "copi": [189, 299, 493, 522, 523, 567], "copyreg": [140, 478], "copyright": [498, 538], "core": [153, 188, 189, 220, 498, 520, 538, 554, 558, 569, 595], "core_id": [153, 220], "core_list": 153, "cores_per_inst": [153, 188, 189, 520, 541, 582], "corner": [219, 260, 498, 503, 505, 591], "corpor": 538, "correct": [129, 152, 185, 188, 189, 271, 272, 273, 275, 299, 324, 325, 326, 328, 467, 497, 544], "correctli": 567, "correspond": [4, 137, 166, 177, 188, 189, 203, 245, 268, 271, 275, 321, 324, 328, 485, 493, 503, 533, 541, 580, 582, 583, 588, 592], "cost": [583, 586], "could": [142, 151, 168, 192, 193, 205, 233, 234, 247, 304, 329, 359, 477, 482, 497, 499, 528, 541, 579, 580, 583, 586, 589, 593], "couldn": 567, "count": [2, 500, 524, 586], "counter": 91, "coupl": [202, 244], "cover": [498, 531, 535, 581], "coverag": 498, "cpu": [77, 78, 79, 80, 141, 142, 147, 188, 189, 424, 425, 426, 427, 477, 488, 493, 502, 504, 520, 521, 536, 541, 542, 544, 546, 552, 561, 569, 581, 582, 583, 584, 585, 586, 590], "cpu_execution_tim": 348, "cpuexecutionprovid": [3, 29, 30, 32, 340, 341, 542, 583], "cpufreq": [522, 547], "cpuinfo": 493, "crbug": 522, "creat": [2, 4, 91, 140, 188, 189, 194, 203, 205, 222, 235, 245, 247, 271, 281, 282, 317, 324, 354, 358, 375, 377, 378, 473, 478, 485, 497, 500, 503, 524, 543, 554, 556, 558, 559, 562, 574, 575, 576, 580, 583, 588, 590, 592, 593], "create_data_exampl": 2, "create_dataload": 485, "create_dataset": 485, "create_eval_func": 485, "create_obj_from_config": 486, "create_onnx_config": 354, "create_search_space_pool": 282, "create_tf_config": 358, "create_train_func": 485, "crime": 595, "criteria": [163, 188, 189, 266, 290, 295, 298, 300, 303, 499, 561, 589], "criterion": [137, 155, 157, 158, 162, 168, 173, 174, 175, 177, 180, 184, 188, 189, 223, 226, 527, 528, 541, 580, 583, 589, 592, 594], "criterion_class": [162, 184], "criterion_conf": [188, 189], "criterion_registri": [156, 221], "criterion_typ": [156, 221], "critet": [156, 221], "critic": [177, 497], "crop": [215, 219, 257, 260, 524, 591], "crop_pad": [219, 260], "crop_ratio": [210, 252, 524], "cropres": 591, "cropresizetftransform": [219, 260], "cropresizetransform": [219, 260], "croptoboundingbox": [219, 260, 591], "cross": [158, 226, 275, 328, 535, 592], "crossentropyloss": [156, 188, 189, 527, 541], "crowd": [271, 324], "crt": 563, "crucial": 580, "cs412": 4, "cse": [60, 84, 408, 431], "csv": [493, 500, 564, 565], "ctrl": 562, "ctx": 2, "cube": [188, 189, 580], "cuda": [142, 185, 477, 542, 544, 546, 580, 583], "cudaexecutionprovid": [542, 583], "curat": 567, "curl": [569, 570, 574, 575], "current": [2, 56, 90, 162, 163, 166, 169, 173, 176, 188, 189, 277, 284, 285, 287, 288, 289, 298, 300, 307, 311, 363, 369, 404, 493, 499, 500, 503, 505, 521, 522, 529, 533, 541, 544, 548, 561, 569, 578, 580, 583, 586, 589, 592], "current_it": 590, "current_pattern": 166, "current_sparsity_ratio": [173, 300], "curv": 540, "custom": [101, 140, 147, 153, 189, 304, 328, 339, 442, 478, 492, 520, 527, 528, 544, 567, 568, 569, 573, 575, 576, 580, 581, 586, 588], "custom_metr": 535, "custom_models_optim": 574, "customis": [523, 524, 540], "customized_msg": 493, "cut": [556, 559], "cv": [188, 189, 580], "cv2": [215, 257], "cvf": 589, "cycl": 500, "d": [60, 147, 408, 527, 535, 562, 564, 570, 580, 595], "d1": [60, 408, 493], "d2": 493, "d3e10a49326449fb9d0d62f2bfc1cb43": 576, "d_": [188, 189], "d_conf": [188, 189, 528, 541, 579], "dai": 592, "daili": 561, "dampen": 32, "data": [2, 30, 31, 32, 42, 91, 126, 134, 137, 142, 147, 151, 166, 188, 189, 192, 193, 220, 222, 233, 234, 265, 267, 307, 317, 319, 320, 329, 341, 353, 357, 359, 363, 375, 377, 379, 390, 472, 477, 482, 485, 490, 493, 502, 503, 521, 523, 524, 529, 533, 534, 537, 540, 541, 542, 563, 564, 566, 569, 574, 575, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593], "data_dir": [203, 245, 524], "data_format": [205, 215, 247, 257], "data_it": [2, 166], "data_load": [34, 35, 382, 383, 503], "data_path": [208, 250, 524], "data_sourc": [201, 243, 485], "data_typ": [319, 377], "data_x": 2, "databas": [205, 247, 569], "databrick": [539, 589, 595], "datafunc": [205, 247], "dataiterload": 2, "dataload": [2, 3, 30, 32, 126, 127, 137, 147, 153, 163, 164, 166, 181, 185, 192, 193, 203, 214, 223, 233, 234, 245, 256, 261, 290, 295, 304, 340, 341, 353, 357, 359, 379, 380, 473, 482, 485, 499, 502, 503, 504, 526, 527, 528, 529, 534, 535, 541, 542, 563, 564, 579, 580, 583, 584, 585, 586, 589, 590, 591, 593, 594], "dataloader_cfg": 485, "dataloaderwrap": 2, "dataset": [126, 127, 147, 181, 192, 193, 194, 196, 197, 200, 201, 202, 214, 222, 233, 234, 235, 237, 238, 242, 243, 244, 256, 271, 272, 273, 275, 304, 324, 325, 326, 328, 329, 359, 379, 380, 473, 482, 485, 500, 502, 503, 504, 523, 529, 534, 540, 541, 549, 563, 564, 574, 580, 583, 586, 587, 589, 592, 594, 595], "dataset_config_nam": 565, "dataset_format": [205, 247], "dataset_loc": [526, 566, 574, 590], "dataset_nam": 565, "dataset_path": 500, "dataset_registri": [205, 247], "dataset_typ": [205, 247], "datatyp": [91, 147, 585, 592, 595], "date": 586, "datetim": [188, 189], "db": [569, 571], "dbaeumer": 562, "dbox": 499, "dco": 498, "ddr5": 595, "de": 500, "deal": 482, "deberta": 595, "debug": [378, 489, 526, 554, 558, 562, 592, 593], "debug_stripp": 533, "dec": 581, "decapoda": 595, "decid": [102, 188, 189, 269, 300, 322, 443, 503, 504, 541, 583, 587, 592], "decim": 493, "decis": [522, 540], "declar": [522, 562], "decod": [142, 215, 257, 268, 321, 477, 540, 591], "decode_singl": 499, "decodeimag": 591, "decompos": [53, 54, 401, 402], "decor": [4, 22, 53, 54, 56, 134, 148, 158, 168, 173, 181, 183, 219, 226, 260, 275, 282, 289, 293, 298, 300, 302, 313, 316, 328, 339, 371, 401, 402, 404, 472, 493, 499, 500, 503, 592], "decorator_metr": [275, 328], "decreas": [84, 431, 566, 580], "dedic": [188, 189], "dedicated_qdq_pair": [29, 188, 189, 583], "deem": 497, "deep": [502, 503, 504, 523, 536, 537, 541, 542, 544, 546, 549, 550, 552, 555, 561, 581, 583, 592, 593, 595], "deep_get": 339, "deep_set": 339, "deepcopi": [189, 522], "deepen": 581, "deeper": 527, "deepest": 527, "deepst": 189, "def": [53, 54, 56, 192, 193, 233, 234, 359, 378, 401, 402, 404, 482, 499, 503, 522, 523, 524, 527, 528, 529, 540, 541, 583, 589, 590, 592], "default": [4, 32, 83, 134, 142, 147, 185, 188, 189, 192, 193, 196, 203, 204, 205, 215, 219, 233, 234, 237, 245, 246, 247, 257, 260, 264, 265, 268, 277, 299, 319, 321, 328, 337, 377, 430, 472, 474, 477, 485, 488, 493, 499, 503, 522, 523, 524, 533, 536, 537, 540, 541, 542, 549, 552, 554, 558, 566, 569, 574, 575, 576, 578, 580, 582, 583, 585, 586, 588, 589, 591, 592, 594], "default_alpha": 589, "default_col": [196, 237], "default_config": 185, "default_dataload": 239, "default_dtyp": [317, 375], "default_opset_vers": 128, "default_workspac": [188, 189], "defaultdataload": [196, 202, 237, 244], "defin": [72, 137, 166, 168, 173, 174, 175, 180, 181, 182, 183, 188, 189, 192, 193, 233, 234, 278, 279, 281, 282, 283, 290, 295, 298, 299, 300, 302, 329, 359, 420, 482, 492, 497, 500, 503, 504, 523, 524, 527, 528, 533, 536, 540, 541, 562, 579, 580, 583, 586, 588, 589, 590, 592, 594], "definit": [134, 135, 144, 197, 201, 238, 243, 472, 481], "degrad": [528, 580, 592], "delet": [566, 580], "delete_assign": 358, "delight": 552, "deliv": [541, 581, 587], "delta": 552, "demand": 586, "demo": 541, "democrat": [546, 581], "demonstr": [502, 530, 544, 574, 575, 576, 590], "denot": 589, "dens": [166, 183, 188, 189, 302, 564, 580, 595], "dense_shap": [207, 249, 524], "densenet": 595, "densiti": 592, "denver": [273, 326], "depend": [2, 192, 193, 220, 233, 234, 329, 359, 482, 498, 532, 533, 567, 582, 583, 592], "deploi": [498, 527, 541, 567, 571, 586, 592], "deploy": [525, 544, 561, 581, 584, 589], "deprec": [522, 556, 559, 587, 591], "depth": [147, 527, 585], "depthwiseconv2dn": [51, 57, 111, 121, 399, 405, 452, 462, 533], "dequant": [30, 31, 32, 37, 74, 77, 78, 79, 80, 82, 137, 147, 385, 421, 424, 425, 426, 427, 429, 493, 499, 504, 589, 590], "dequantize_cast_optim": [38, 386], "dequantize_data": 31, "dequantize_data_with_scale_zero": 31, "dequantize_per_channel": 589, "dequantize_tensor": 493, "dequantize_weight": 493, "dequantizecastoptim": [37, 385], "dequantizelinear": 31, "deriv": [155, 162, 170, 171, 172, 178, 179, 180, 181, 182, 183, 184, 261, 298, 300, 302], "derogatori": 497, "desc": 541, "descend": 564, "descent": [166, 502, 581], "describ": [503, 505, 522, 526, 533, 563, 590], "descript": [2, 118, 378, 459, 499, 504, 505, 523, 569, 573, 589], "deseri": [142, 477], "design": [155, 202, 224, 229, 244, 328, 364, 500, 502, 541, 549, 552, 580, 583, 593], "desir": [189, 215, 219, 257, 260, 504, 505, 580, 589, 591], "dest": 91, "destin": [134, 263, 277, 472], "detach": 589, "detail": [30, 151, 166, 219, 260, 341, 493, 494, 497, 502, 504, 505, 521, 522, 527, 533, 534, 535, 539, 540, 541, 542, 544, 552, 561, 569, 570, 580, 586, 587, 588, 589, 590, 592, 593], "detect": [145, 147, 166, 188, 189, 271, 275, 324, 328, 333, 498, 499, 544, 551, 552, 580, 592], "detection_box": [271, 324, 541, 594], "detection_boxes_list": [271, 324], "detection_class": [271, 324, 541, 594], "detection_classes_list": [271, 324], "detection_mask": [271, 324], "detection_scor": [271, 324, 541, 594], "detection_scores_list": [271, 324], "detection_typ": [271, 324], "detectionboxes_precis": [275, 328], "detectioncoco": 595, "detections_list": [271, 324], "detector": 145, "determin": [162, 168, 173, 184, 188, 189, 487, 497, 499, 521, 580, 583], "determinist": 541, "dettmer": 586, "dev": [532, 554, 558], "develop": [137, 339, 498, 499, 522, 537, 541, 542, 544, 550, 561, 567, 580, 581, 585, 588], "deviat": [219, 260, 526, 591], "devic": [2, 65, 75, 76, 77, 78, 79, 80, 83, 93, 117, 122, 133, 141, 142, 147, 163, 166, 167, 181, 185, 188, 189, 413, 422, 423, 424, 425, 426, 427, 430, 435, 458, 463, 471, 477, 488, 502, 504, 523, 527, 541, 542, 544, 547, 552, 561, 580, 582, 584, 586], "device_id": [142, 477], "devop": 498, "df": 91, "diag": 32, "diagnos": 526, "diagnosi": [134, 188, 189, 472, 541, 564, 565, 566, 581, 587, 593], "diagnosis_help": 503, "diagnost": 563, "diagon": [32, 586], "diagram": [504, 505, 526, 592], "dict": [2, 32, 102, 134, 136, 137, 142, 147, 148, 153, 158, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 202, 220, 226, 233, 234, 244, 263, 265, 270, 271, 272, 273, 275, 278, 281, 282, 283, 290, 293, 295, 298, 299, 300, 301, 302, 307, 310, 316, 319, 323, 324, 325, 326, 328, 329, 337, 359, 374, 377, 378, 381, 443, 472, 474, 477, 482, 483, 485, 492, 493, 499, 504, 522, 531, 540, 580, 582, 583, 589, 590, 592], "dictionari": [53, 54, 56, 134, 136, 137, 142, 147, 187, 188, 189, 218, 259, 271, 278, 281, 283, 324, 401, 402, 404, 472, 477, 493], "diff": 561, "differ": [129, 148, 152, 156, 177, 188, 189, 197, 205, 219, 221, 238, 247, 260, 266, 275, 281, 283, 292, 303, 328, 337, 339, 467, 487, 497, 499, 500, 504, 523, 524, 526, 527, 529, 530, 535, 536, 540, 541, 543, 554, 558, 563, 566, 569, 578, 580, 583, 586, 589, 590, 591, 592], "difficult": [503, 589], "difficulti": 589, "diffus": [502, 581], "digit": [268, 321, 493, 581], "dilat": [44, 392], "dilated_contract": [62, 410], "dilatedcontract": [44, 392], "dim": [219, 260, 589, 591], "dimens": [53, 54, 91, 196, 219, 237, 260, 401, 402, 524, 527, 586, 591], "dir": [147, 203, 245, 488, 492, 524, 532, 535], "direct": [86, 172, 298, 433, 580], "direct8bit": 12, "direct8bitoper": 12, "direct_q8": 17, "directli": [164, 188, 189, 202, 244, 271, 275, 299, 324, 328, 502, 540, 541, 548, 580, 582, 583, 590], "directori": [188, 189, 204, 205, 246, 247, 337, 474, 488, 490, 492, 493, 524, 529, 532, 554, 556, 558, 559, 565, 567, 590], "dirty_decay_m": 547, "disabl": [134, 188, 189, 472, 497, 561, 566, 585, 586, 589], "disable_al": [188, 189, 582], "disable_random": [134, 472], "disappear": 590, "disc": 551, "discard": 523, "discord": 502, "discourag": 580, "discov": [521, 590], "discret": [4, 592], "discrimin": 595, "discuss": 502, "dispatch": [504, 536, 568, 571], "dispatch_task": 571, "dispers": [526, 564], "displai": [188, 189, 316, 317, 374, 375, 493, 561, 564], "dist": [556, 559], "distanc": [493, 527], "distil": [155, 188, 189, 221, 228, 229, 267, 502, 530, 534, 536, 579, 593, 594], "distil_loss": [188, 189, 541], "distil_loss_conf": 527, "distilbert": [203, 245, 502, 524, 542, 581, 595], "distilgpt2": 595, "distillation_conf": [155, 261], "distillation_criterion": [528, 541, 579], "distillationcallback": 155, "distillationconfig": [188, 189, 482, 527, 528, 541, 579], "distilroberta": 595, "distort": 504, "distribut": [2, 4, 129, 152, 188, 189, 194, 196, 197, 200, 201, 202, 222, 235, 237, 238, 242, 243, 244, 467, 473, 487, 502, 504, 523, 527, 537, 556, 559, 563, 566, 574, 581, 583, 586, 587, 589, 593, 595], "distribute_calib_tensor": 2, "distributedoptim": 529, "distributedsampl": 529, "distutil": 532, "div_": 589, "dive": [533, 593], "diverg": [4, 483, 487, 505, 521, 527, 592], "divid": [523, 571, 589, 592], "divis": 32, "dl": [266, 276, 290, 295, 303, 329, 526, 535, 548, 561, 581, 595], "dlabel": 499, "dlrm": [275, 328], "dmlexecutionprovid": 583, "dnnl_primitive_cache_capac": 547, "dnnlexecutionprovid": [542, 583], "do": [155, 181, 188, 189, 202, 203, 244, 245, 261, 265, 268, 271, 301, 321, 324, 492, 497, 504, 522, 524, 529, 533, 536, 540, 541, 556, 559, 580, 585, 587, 589, 592], "do_blockwis": 589, "do_constant_fold": 265, "do_ev": [549, 550, 565, 572, 575, 576], "do_lower_cas": [203, 218, 219, 245, 259, 260, 524, 591], "do_train": 565, "doc": [170, 171, 188, 189, 298, 316, 317, 328, 359, 374, 375, 378, 493, 540, 541, 556, 559, 567], "doc_span_index": [219, 260], "doc_strid": [219, 260, 591], "doc_token": [219, 260], "docker": 502, "docstr": [189, 378], "docstyl": 498, "document": [219, 260, 378, 504, 505, 510, 529, 539, 542, 546, 556, 559, 560, 567, 568, 570, 580, 587, 591, 593], "doe": [268, 321, 377, 522, 523, 524, 540, 541, 586, 587, 591], "doesn": [142, 219, 260, 477, 503, 529, 541, 542, 562, 594], "dolli": [539, 580, 589, 595], "domain": [90, 91, 188, 189, 580, 592], "don": [129, 152, 168, 188, 189, 467, 499, 567, 580, 592], "done": [499, 527, 528, 545, 561, 570, 574, 575, 580, 583], "dong": 137, "dot": [542, 583], "dotdict": [185, 189, 339, 493], "doubl": 581, "dowload_hf_model": [143, 479], "down": 555, "download": [143, 205, 247, 479, 524, 526, 537, 566, 572, 587], "download_url": [205, 247], "downstream": 580, "dq": [93, 95, 117, 435, 437, 458, 589], "draft": [556, 559], "draw": [523, 588, 592], "drive": 505, "driven": [339, 502, 541, 561, 578, 590], "drop": [185, 271, 299, 324, 498, 541, 542, 555, 580, 586, 589, 595], "drop_last": [197, 201, 238, 243], "dropdown": 562, "dry_run": 529, "dscore": 499, "dtype": [31, 32, 88, 91, 188, 189, 206, 207, 215, 219, 248, 249, 257, 260, 473, 488, 502, 504, 505, 524, 526, 531, 533, 544, 566, 582, 583, 586, 589, 590, 591, 594], "dtype_map": 31, "dtype_to_nam": 31, "duc": 595, "due": [505, 531, 580, 583, 589, 590], "dummi": [45, 166, 206, 207, 248, 249, 275, 328, 393, 473, 502, 524, 534, 540, 541, 563], "dummy_biasadd": [62, 410], "dummy_dataset": [209, 251], "dummy_dataset_v2": [209, 251], "dummy_v2": [207, 249, 473, 524], "dummydataset": [206, 207, 248, 249, 473], "dummydatasetv2": 473, "dump": [3, 140, 147, 153, 265, 340, 478, 493, 498, 566, 583, 587, 590], "dump_class_attr": 493, "dump_data_to_loc": 493, "dump_elapsed_tim": [493, 503], "dump_fp32": [132, 470], "dump_op_typ": 3, "dump_tabl": 493, "dump_table_to_csv": 493, "dump_tim": 590, "duplic": [84, 94, 307, 363, 431, 436], "durat": [526, 570, 574, 575, 588], "dure": [2, 140, 142, 168, 172, 183, 188, 189, 298, 302, 339, 477, 478, 493, 504, 526, 541, 543, 568, 578, 579, 580, 583, 589, 590, 594], "dyna": [189, 280, 500, 536, 582], "dynam": [142, 189, 194, 235, 265, 317, 375, 473, 477, 503, 523, 527, 531, 536, 541, 544, 549, 550, 551, 552, 555, 561, 581, 592, 595], "dynamic_ax": [189, 265, 531], "dynamic_length": [203, 245, 524], "dynamic_quant_export": 265, "e": [142, 168, 188, 189, 477, 497, 498, 502, 527, 530, 534, 544, 549, 550, 554, 558, 580, 586, 589, 592], "e16": 498, "e2m1": 586, "each": [127, 134, 137, 142, 147, 185, 188, 189, 201, 205, 208, 215, 219, 243, 247, 250, 257, 260, 269, 271, 272, 273, 310, 322, 324, 325, 326, 368, 380, 472, 477, 493, 498, 503, 504, 505, 522, 524, 526, 527, 528, 533, 541, 546, 552, 555, 561, 569, 571, 578, 580, 584, 586, 588, 590, 591, 592, 593], "eager": [181, 301, 358, 502, 529, 536, 583, 585, 590], "earli": [188, 189, 541, 583, 592, 594], "eas": [537, 546, 581], "easi": [203, 245, 303, 531, 541, 564, 568, 581, 583, 586, 588], "easier": [554, 558, 561, 563, 581], "easili": [339, 503, 545, 549, 561, 578, 589], "echo": 547, "econom": 497, "ecosystem": [502, 581], "edg": 591, "edit": 497, "edouard": 589, "edu": [4, 205, 247, 524], "educ": 497, "effect": [180, 502, 503, 580, 581], "effici": [30, 151, 341, 500, 502, 521, 523, 527, 544, 569, 579, 580, 581, 586, 589, 592], "efficientnet": 595, "efficientnet_b0": 595, "efficientnet_b3": 595, "efficientnet_b7": 595, "effort": 541, "effortlessli": 568, "eg": [147, 205, 247, 524, 582], "eightbit": 590, "einop": 564, "either": [142, 189, 271, 324, 477, 545, 549, 569, 579, 582, 583], "elaps": 493, "electra": 595, "electron": 497, "elem_typ": 91, "element": [32, 170, 171, 185, 201, 243, 271, 298, 324, 493, 524, 536, 540, 580, 586, 589], "elementwise_over_al": 185, "elementwise_over_matmul_gemm_conv": 185, "eleutherai": [502, 539, 565, 589, 595], "elia": 586, "elimin": [52, 400, 568], "els": [2, 134, 189, 201, 243, 339, 472, 490, 549, 586, 590], "em": 595, "email": 502, "embed": [147, 521, 580], "embed_layernorm": 17, "embed_out": 580, "embedlayernorm": 13, "embedlayernormalizationoper": 13, "emerg": 589, "emnlp": [502, 581], "emot": 595, "empathi": 497, "empir": [129, 152, 467], "empti": [143, 188, 189, 479, 547, 584], "emsp": 580, "emul": [541, 583], "en": 500, "enabl": [32, 95, 137, 173, 188, 189, 300, 437, 504, 505, 529, 537, 542, 544, 546, 549, 550, 552, 563, 565, 566, 568, 571, 580, 581, 589, 592], "enable_act": 137, "enable_al": [188, 189], "enable_auto_scal": [32, 586], "enable_bas": [188, 189], "enable_eager_execut": 529, "enable_extend": [188, 189], "enable_full_rang": [488, 584, 586], "enable_mse_search": [32, 586], "encapsul": [96, 192, 193, 233, 234, 329, 359, 438, 482, 543], "encod": [142, 271, 324, 477, 564, 591], "encodejp": 591, "encount": 523, "encrypt": 563, "end": [134, 173, 174, 175, 180, 188, 189, 203, 218, 219, 245, 259, 260, 300, 306, 360, 362, 472, 503, 504, 505, 527, 528, 533, 537, 541, 555, 571, 578, 580, 590, 591, 592], "end_epoch": [541, 582, 594], "end_posit": [219, 260], "end_step": [173, 188, 189, 300, 541, 580, 582], "endlessli": 592, "english": 580, "enhanc": [521, 544, 580, 581, 585], "enjoi": [545, 549, 552], "enough": 583, "ensp": [524, 591], "ensur": [2, 219, 260, 307, 363, 529, 583, 591], "ensure_list": 2, "enter": [555, 561, 569], "entir": [359, 482, 499, 504, 505, 521, 568, 580], "entranc": [65, 195, 413], "entri": [53, 54, 56, 137, 158, 226, 266, 304, 401, 402, 404, 493, 522, 538], "entropi": [188, 189, 521, 592], "enum": 2, "enumer": [282, 482, 503, 527, 528, 529, 541, 579, 580, 590], "env": [153, 220, 532, 574, 575, 576], "env_var": [153, 220], "environ": [31, 153, 220, 497, 502, 520, 554, 558, 561, 569, 572, 574, 575, 576, 592], "eoferror": [140, 478], "ep": [4, 152, 542], "epoch": [155, 174, 175, 180, 261, 300, 482, 523, 527, 528, 529, 541, 579, 580, 594], "epsilon": 594, "equal": [91, 129, 134, 152, 378, 467, 493, 580, 586], "equal_dict": 493, "equat": [31, 273, 275, 326, 328, 583, 589], "equival": [69, 417, 502, 581, 586, 589], "erf": [55, 403], "error": [32, 91, 137, 142, 275, 310, 328, 368, 477, 489, 526, 540, 545, 566, 567, 570, 586, 589, 592], "error_msg": 91, "eslint": [562, 567], "esri": 537, "essenti": [521, 532], "estim": [134, 275, 328, 337, 474, 592], "estimator_sess": [337, 474], "et": [137, 521, 586, 589], "etc": [153, 155, 218, 259, 261, 266, 273, 290, 295, 303, 326, 329, 359, 492, 502, 527, 536, 563, 567, 580, 588, 592], "ethnic": 497, "euclidean": [493, 527], "eural_compressor": 339, "eval": [499, 522, 523, 526, 544, 583, 590], "eval_dataload": [153, 188, 189, 192, 193, 233, 234, 304, 305, 306, 307, 308, 310, 311, 312, 313, 329, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 482, 520, 535, 540, 541, 563, 583, 584, 592], "eval_dataset": 564, "eval_frequ": [155, 261], "eval_func": [126, 192, 193, 233, 234, 304, 305, 306, 307, 308, 310, 311, 312, 313, 329, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 378, 379, 482, 499, 523, 524, 526, 527, 528, 529, 541, 564, 583, 584, 585, 586, 592, 594], "eval_metr": [192, 193, 329, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 482, 540, 563, 583], "eval_result": 522, "evalu": [153, 155, 168, 188, 192, 193, 203, 220, 233, 234, 245, 261, 268, 271, 272, 273, 275, 277, 321, 324, 325, 326, 328, 329, 339, 359, 482, 485, 500, 503, 504, 522, 524, 527, 528, 535, 536, 539, 540, 541, 542, 544, 550, 552, 555, 561, 578, 580, 583, 588, 589, 590, 592, 594], "evaluate_squad": [274, 327], "evaluation_result": 529, "evaluation_time_cost": 529, "even": [584, 586, 589], "evenli": 523, "event": [497, 590], "ever": 567, "everi": [53, 54, 56, 168, 171, 173, 188, 189, 298, 300, 401, 402, 404, 503, 523, 549, 554, 558, 584, 586, 592], "everyon": 497, "everyth": [185, 299, 549], "evid": 564, "evolutionari": 500, "exact": [272, 325], "exact_match_scor": [272, 325], "exactli": [529, 545], "exampl": [2, 32, 137, 142, 147, 153, 166, 167, 181, 188, 189, 203, 204, 205, 215, 219, 245, 246, 247, 257, 260, 271, 272, 273, 275, 301, 324, 325, 326, 328, 329, 339, 359, 377, 378, 477, 482, 492, 493, 497, 502, 504, 505, 510, 535, 536, 544, 547, 548, 549, 552, 569, 572, 585, 587, 591, 592, 593, 596], "example_gener": 378, "example_index": [219, 260], "example_inp": 147, "example_input": [147, 188, 189, 265, 492, 531], "exampleclass": 378, "exce": [219, 260, 586, 591], "exceed": [337, 474], "excel": 586, "except": [142, 378, 477, 493, 522, 567, 583, 584], "exchang": 531, "exclud": [188, 189, 503, 521, 585], "excluded_op_nam": [57, 58, 188, 189, 405, 406, 541, 580], "excluded_precis": [188, 189, 585], "exec": 502, "execut": [30, 31, 40, 142, 153, 173, 174, 175, 188, 189, 300, 304, 306, 358, 359, 360, 362, 388, 477, 482, 485, 492, 493, 526, 527, 528, 541, 542, 546, 547, 554, 555, 561, 562, 563, 564, 568, 571, 579, 580, 583, 586, 588, 592, 595], "executionprovid": 595, "exemplifi": 580, "exhaust": [189, 283, 309, 367, 582], "exhaustivetunestrategi": [308, 365], "exist": [40, 153, 220, 337, 388, 474, 493, 531, 540, 548, 592], "exit": [188, 189, 306, 360, 362, 541, 569, 574, 575, 576, 594], "exit_polici": [541, 594], "exp": [188, 189, 541, 580], "expanddim": [46, 394], "expanddims_optim": [62, 410], "expanddimsoptim": [46, 394], "expect": [205, 247, 497, 498, 532, 539, 561, 583, 586, 592], "expens": [527, 541, 592], "experi": [497, 544, 566, 588, 589, 592], "experiment": [320, 500, 524, 528, 529, 531, 537, 541, 580, 582, 583, 587, 591], "explain": [505, 526, 589], "explicit": 497, "explicitli": [188, 189, 535, 580], "explor": 503, "exporsingleimagedetectionboxestococo": [271, 324], "export": [87, 189, 267, 271, 324, 502, 534, 547, 562, 564, 590, 593], "export_compressed_model": [488, 586], "exportconfig": 189, "exportdetectionstococo": [271, 324], "exportgroundtruthtococo": [271, 324], "exportsingleimagedetectionboxestococo": [271, 324], "exportsingleimagedetectionmaskstococo": [271, 324], "exportsingleimagedetectionstococo": [271, 324], "exportsingleimagegroundtruthtococo": [271, 324], "expos": 563, "express": [268, 321, 497], "ext": [554, 556, 558, 559, 560], "extend": [504, 505], "extend_engin": [96, 438], "extens": [140, 142, 477, 478, 493, 500, 502, 503, 533, 536, 537, 539, 541, 542, 543, 545, 550, 551, 552, 556, 559, 560, 564, 580, 581, 583, 586, 589, 592, 593, 594], "extern": 563, "extra": [142, 273, 326, 477, 541, 586], "extra_opset": 88, "extract": [53, 54, 56, 134, 166, 205, 247, 319, 377, 401, 402, 404, 472, 524], "extract_data_typ": [319, 377], "extran": 522, "extrem": 521, "f": [142, 163, 477, 522, 527, 529, 583, 586, 589], "f1": [272, 274, 275, 325, 327, 328, 529, 540, 541, 564, 588, 595], "f1_score": [272, 273, 325, 326], "f5": 562, "face": [143, 479, 497, 502, 510, 544, 548, 568, 570, 581, 587, 595], "facebook": [539, 567, 589, 595], "facil": [142, 477], "facilit": [522, 544], "fact": 583, "factor": [4, 127, 380, 586, 589, 595], "factori": [335, 475], "fail": [142, 477, 499, 523, 531, 570], "failur": [498, 499], "fair": 497, "faith": 497, "fake": [30, 32, 99, 144, 151, 341, 377, 440, 481, 541, 583, 586, 589], "fake_qu": [34, 74, 93, 117, 122, 382, 421, 435, 458, 463], "fake_quant": [100, 441], "fakeaffinetensorquantfunct": [144, 481], "fakequ": [74, 421], "fakequant": [99, 440], "fakequantizebas": [99, 440], "falcon": [502, 539, 580, 589, 595], "fall": [142, 147, 477], "fallback": [147, 189, 310, 311, 366, 368, 369, 531, 542, 564, 585, 592], "fallback_list": 29, "fallback_ord": 147, "fallbacktuningsampl": [316, 374], "fals": [2, 3, 29, 30, 31, 32, 33, 34, 35, 57, 58, 75, 78, 85, 88, 89, 91, 99, 117, 122, 129, 132, 133, 134, 141, 142, 146, 147, 153, 156, 159, 188, 189, 194, 196, 200, 202, 203, 205, 215, 219, 220, 221, 222, 228, 235, 237, 242, 244, 245, 247, 257, 260, 271, 275, 324, 328, 339, 359, 378, 381, 382, 383, 405, 406, 422, 425, 432, 440, 458, 463, 467, 470, 471, 472, 473, 477, 485, 488, 492, 493, 503, 504, 523, 524, 533, 540, 541, 554, 558, 564, 572, 575, 576, 582, 583, 586, 589, 590, 591, 592, 594], "familiar": 593, "famou": 586, "faq": [497, 502], "fashionmnist": [205, 247, 524], "fast": [180, 188, 189, 502, 580, 581, 586], "fast_bias_correct": [150, 188, 189, 583], "fastai": 537, "fastapi": 577, "fastbiascorrect": [149, 152], "faster": [523, 525, 531, 581, 592, 595], "fatal": 489, "father": [143, 166, 479], "fault": 498, "fault_tolerant_fil": 493, "fbgemm": [542, 583], "fc": [147, 189, 580], "fc1": 147, "fc2": [32, 147], "fcn": 595, "feasibl": [188, 189], "featur": [188, 189, 203, 204, 215, 219, 245, 246, 257, 260, 498, 502, 520, 523, 525, 527, 541, 542, 543, 544, 548, 549, 552, 561, 563, 567, 580, 581, 587, 591], "feb": 581, "fed": 592, "feed": [134, 202, 244, 472, 527, 580], "feed_dict": [134, 202, 244, 472], "feedstock": [556, 559], "feedward": 177, "feel": [563, 567], "fefin": [193, 234], "feng": 538, "ferplu": 595, "fetch": [47, 147, 150, 197, 238, 395, 504, 524, 574, 575, 576], "fetch_modul": 147, "fetch_weight_from_reshap": [62, 410], "fetcher": 239, "fetchweightfromreshapeoptim": [47, 395], "few": [580, 581, 589, 592], "ffffff": 592, "ffn": [145, 177], "ffn2_sparsiti": [164, 580], "ffn_modul": 177, "ffn_name": 177, "field": [188, 189, 205, 247, 271, 324, 499, 503, 505, 529, 541, 588, 592, 594], "field_nam": 493, "figur": [500, 554, 555, 558, 584], "file": [91, 134, 140, 142, 143, 147, 150, 159, 181, 185, 188, 189, 192, 193, 203, 204, 205, 208, 218, 219, 225, 228, 233, 234, 245, 246, 247, 250, 259, 260, 261, 266, 271, 277, 278, 279, 281, 290, 295, 299, 301, 303, 304, 324, 329, 339, 346, 347, 350, 359, 472, 477, 478, 479, 492, 493, 498, 500, 503, 504, 505, 529, 532, 535, 538, 540, 541, 543, 547, 556, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 574, 575, 576, 578, 582, 583, 586, 590, 591], "file_lik": [142, 477], "file_typ": 493, "filenam": [205, 247, 493, 524, 567], "filepath": [142, 477, 493, 522], "fill": [561, 588, 591, 592], "filter": [2, 203, 204, 205, 206, 207, 208, 210, 214, 245, 246, 247, 248, 249, 250, 252, 256, 473, 493, 505, 524, 536, 580, 590], "filter_registri": [212, 254], "filter_typ": [212, 254], "final": [142, 166, 173, 185, 300, 477, 504, 541, 547, 578, 580, 583, 587, 592], "find": [31, 53, 54, 56, 91, 134, 187, 275, 282, 307, 328, 363, 401, 402, 404, 472, 493, 503, 526, 539, 547, 554, 558, 561, 562, 564, 566, 580, 586, 588, 589, 590, 592], "find_by_nam": 31, "find_lay": 187, "find_opset": 91, "find_pareto_front": 282, "fine": [179, 203, 245, 522, 524, 547, 580, 581, 583], "finer": [589, 592], "finest": 589, "finetun": [564, 580, 586, 595], "finish": [555, 571], "firewal": 563, "first": [129, 142, 147, 152, 167, 188, 189, 203, 245, 271, 317, 324, 364, 375, 467, 477, 493, 499, 500, 502, 503, 504, 505, 524, 526, 537, 542, 546, 555, 556, 559, 562, 564, 565, 566, 582, 583, 585, 586, 588, 589, 590, 592, 594], "first_conv_or_matmul_quant": [188, 189, 583], "first_n": [132, 470], "fit": [153, 168, 188, 189, 307, 329, 359, 363, 378, 482, 499, 502, 520, 523, 524, 526, 529, 534, 535, 540, 541, 542, 543, 563, 564, 580, 583, 584, 585, 586], "fit_with_raw_cmd": 153, "fix": [134, 178, 180, 203, 245, 300, 472, 523, 524, 548, 580, 583, 586, 592], "fix_ref_type_of_graph_def": [134, 472], "flag": [188, 189, 269, 322, 526], "flan": 580, "flatten_static_graph": 166, "flex": [502, 537], "flexibl": [266, 290, 295, 303, 502, 527, 568, 580, 586], "flip": [215, 219, 257, 260, 591], "float": [4, 31, 32, 126, 127, 137, 168, 173, 182, 185, 188, 189, 203, 215, 245, 257, 269, 271, 272, 273, 300, 322, 324, 325, 326, 374, 378, 379, 380, 490, 493, 522, 524, 540, 582, 583, 589, 591], "float16": [6, 9, 31, 488, 524, 586], "float16activationoper": 6, "float16binaryoper": 9, "float32": [206, 207, 219, 248, 249, 260, 271, 324, 473, 488, 503, 520, 524, 541, 583, 586, 589, 591], "float_dict": 137, "float_model": [137, 502], "float_to_bfloat16": 31, "float_to_float16": 31, "floatfunct": 499, "flop": 586, "flow": [272, 273, 325, 326, 499, 500, 541], "flowchart": 592, "focu": [521, 592], "focus": [497, 503], "fold": [48, 49, 147, 265, 396, 397, 533, 586, 589], "fold_batch_norm": [62, 410], "fold_const": [62, 410], "foldbatchnormnodesoptim": [48, 396], "folder": [134, 205, 210, 247, 252, 329, 359, 472, 492, 524, 549, 554, 558, 567, 574, 575, 576, 586, 590], "follow": [74, 96, 167, 205, 247, 268, 271, 321, 324, 421, 438, 497, 498, 499, 500, 502, 503, 504, 505, 522, 523, 524, 527, 528, 529, 533, 537, 538, 540, 541, 542, 543, 544, 545, 546, 554, 558, 563, 565, 566, 569, 574, 579, 580, 582, 583, 586, 589, 590, 592], "footprint": [188, 189, 266, 290, 295, 303, 339, 528, 541, 578, 580, 582, 584], "forc": 585, "forfeit": 563, "forg": [532, 537], "fork": [498, 556, 559], "form": [273, 326, 526, 527, 561], "format": [6, 31, 40, 134, 147, 188, 189, 203, 204, 205, 245, 246, 247, 265, 271, 277, 317, 324, 375, 378, 381, 388, 472, 488, 502, 504, 505, 522, 524, 529, 531, 540, 541, 542, 543, 544, 566, 569, 581, 583, 586, 587], "format_vers": [140, 478], "formerli": 537, "formul": 541, "formula": [580, 589], "forpytorch": 537, "fortensorflow": 537, "fortieth": 580, "forward": [2, 147, 185, 504, 541, 563, 580, 582, 583, 586, 589, 590], "forward_wrapp": 147, "foster": 497, "found": [155, 261, 502, 522, 527, 539, 542, 549, 566, 570, 589, 592, 595], "foundat": 581, "four": [571, 590, 595], "fp1": 589, "fp16": [32, 189, 317, 375, 583], "fp2": 589, "fp32": [29, 30, 32, 65, 117, 122, 129, 147, 152, 188, 189, 192, 193, 233, 234, 264, 265, 275, 310, 317, 328, 364, 368, 375, 413, 458, 463, 467, 485, 488, 492, 493, 498, 503, 505, 526, 533, 534, 540, 541, 542, 551, 563, 564, 565, 566, 582, 583, 585, 586, 587, 588, 589, 590, 592, 594, 595], "fp32_acc": 552, "fp32_baselin": [485, 503], "fp32_graph": [129, 467], "fp32_model": [134, 137, 147, 265, 472, 493, 503, 584, 586], "fp32_model_path": 584, "fp32_onnx_config": 531, "fp32_onnx_path": 265, "fp32_op": [34, 36, 93, 382, 384, 435], "fp32_tensor": 493, "fp4": [502, 586], "fp8": [502, 581], "fpath": [205, 247], "frac": [526, 589], "fraction": [215, 257, 591], "fragment": 503, "framework": [2, 153, 156, 158, 163, 169, 173, 176, 180, 181, 190, 191, 195, 196, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 219, 221, 222, 226, 231, 232, 236, 237, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 258, 260, 266, 275, 276, 303, 311, 317, 328, 329, 330, 331, 333, 369, 375, 485, 502, 503, 505, 521, 522, 526, 529, 530, 534, 535, 536, 537, 540, 541, 542, 563, 564, 580, 581, 583, 587, 590, 591, 592, 593, 594, 595], "framework_dataset": [205, 247], "framework_nam": 522, "framework_specific_info": [33, 381, 503], "frantar": [580, 586], "free": [30, 151, 180, 192, 193, 233, 234, 341, 359, 497, 550, 555, 563, 571, 578, 588, 589], "freez": [74, 75, 76, 134, 421, 422, 423, 472, 544, 580], "freeze_fake_qu": [81, 428], "freeze_valu": [81, 428], "freeze_value_without_calib": [81, 428], "freezefakequantopoptim": [74, 421], "freezevaluetransform": [75, 422], "freezevaluewithoutcalibtransform": [76, 423], "frequenc": [155, 173, 188, 189, 261, 300, 541, 580, 594], "frequent": 537, "friendli": [533, 541, 581, 589, 593, 594], "from": [2, 31, 47, 53, 54, 56, 91, 134, 142, 143, 147, 153, 155, 156, 162, 163, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 192, 193, 194, 197, 200, 203, 204, 205, 206, 207, 208, 210, 215, 221, 222, 225, 233, 234, 235, 238, 242, 245, 246, 247, 248, 249, 250, 252, 257, 261, 263, 264, 265, 268, 271, 272, 273, 277, 282, 298, 299, 300, 302, 317, 319, 321, 324, 325, 326, 329, 337, 339, 359, 375, 377, 378, 395, 401, 402, 404, 472, 473, 474, 477, 479, 482, 485, 488, 492, 493, 497, 498, 499, 500, 503, 505, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 536, 539, 540, 542, 543, 544, 548, 549, 550, 552, 562, 564, 566, 567, 571, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593], "from_logit": 594, "from_pretrain": [488, 502, 541], "front": [282, 500], "frontend": [556, 559, 569, 576], "frontend_grpc": 569, "frozen": [329, 337, 359, 474, 543], "frozen_func": [134, 472], "frozen_pb_sess": [337, 474], "full": [31, 203, 204, 205, 245, 246, 247, 488, 493, 502, 521, 524, 526, 532, 538, 562, 567, 580, 586, 587], "fulli": [304, 541, 569, 583, 589], "fulltoken": [218, 259], "fun": 378, "func": [134, 147, 472, 493, 583, 594], "func_dict": 485, "function": [125, 126, 140, 154, 174, 175, 180, 188, 189, 192, 193, 204, 233, 234, 246, 278, 281, 290, 295, 341, 379, 466, 478, 486, 498, 499, 500, 503, 504, 505, 520, 523, 527, 528, 531, 535, 536, 537, 539, 540, 541, 542, 552, 562, 568, 569, 580, 583, 586, 587, 588, 589, 590, 592, 593], "function1": 378, "function2": 378, "function3": 378, "fundament": [521, 541], "funnel": 595, "funsd": [564, 595], "further": [56, 189, 404, 497, 542, 543, 544, 546, 555, 561, 583], "fuse": [2, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 77, 78, 79, 80, 82, 117, 122, 146, 147, 151, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 424, 425, 426, 427, 429, 458, 463, 499, 589, 590], "fuse_biasadd_add": [62, 410], "fuse_column_wise_mul": [62, 410], "fuse_conv_redundant_dequant": [81, 428], "fuse_conv_requant": [81, 428], "fuse_conv_with_math": [62, 410], "fuse_decomposed_bn": [62, 410], "fuse_decomposed_in": [62, 410], "fuse_gelu": [62, 410], "fuse_layer_norm": [62, 410], "fuse_matmul_redundant_dequant": [81, 428], "fuse_matmul_requant": [81, 428], "fuse_pad_with_conv": [62, 410], "fuse_pad_with_fp32_conv": [62, 410], "fuse_qdq_bn": [116, 457], "fuse_qdq_concatv2": [116, 457], "fuse_qdq_conv": [116, 457], "fuse_qdq_deconv": [116, 457], "fuse_qdq_in": [116, 457], "fuse_qdq_matmul": [116, 457], "fuse_qdq_pool": [116, 457], "fuse_reshape_transpos": [62, 410], "fusebiasaddandaddoptim": [50, 398], "fusecolumnwisemuloptim": [51, 399], "fuseconvredundantdequantizetransform": [77, 424], "fuseconvrequantizetransform": [78, 425], "fuseconvwithmathoptim": [52, 400], "fusedbatchnorm": [67, 415], "fusedbatchnormv2": [67, 415], "fusedbatchnormv3": [109, 119, 450, 460], "fusedbatcnormv3": [56, 404], "fusedecomposedbnoptim": [53, 401], "fusedecomposedinoptim": [54, 402], "fusedinstancenorm": [113, 454], "fusedmatmul": 19, "fusedmatmuloper": 19, "fusegeluoptim": [55, 403], "fuselayernormoptim": [56, 404], "fusematmulredundantdequantizetransform": [79, 426], "fusematmulrequantizedequantizenewapitransform": [80, 427], "fusematmulrequantizedequantizetransform": [80, 427], "fusematmulrequantizenewapitransform": [80, 427], "fusematmulrequantizetransform": [80, 427], "fusenodestartwithconcatv2": [110, 120, 451, 461], "fusenodestartwithconv2d": [111, 121, 452, 462], "fusenodestartwithdeconv2d": [112, 453], "fusenodestartwithfusedbatchnormv3": [109, 119, 450, 460], "fusenodestartwithfusedinstancenorm": [113, 454], "fusenodestartwithmatmul": [114, 123, 455, 464], "fusenodestartwithpool": [115, 124, 456, 465], "fusepadwithconv2doptim": [57, 405], "fusepadwithfp32conv2doptim": [58, 406], "fusetransposereshapeoptim": [59, 407], "fusion": [45, 47, 56, 64, 95, 112, 113, 114, 117, 118, 119, 123, 393, 395, 404, 412, 437, 453, 454, 455, 458, 459, 460, 464, 499, 503, 533], "futur": [151, 192, 193, 222, 233, 234, 536, 539, 541, 552, 574, 575, 576, 593], "fvcore": 564, "fw": 504, "fwk": 333, "fwk_name": 522, "fx": [147, 188, 311, 369, 536, 542, 550, 551, 565, 581, 583, 585], "fx_model": 147, "fx_sub_module_list": 136, "fx_white_list": 147, "g": [91, 142, 168, 188, 189, 477, 498, 527, 530, 534, 544, 549, 580, 586, 587, 589, 592], "gain": [555, 579, 581], "gan": 581, "gap": [526, 543], "gather": [2, 17, 188, 189, 298], "gatheroper": 14, "gaudi": 502, "gaudi2": 502, "gauid2": 502, "gaussian": [307, 363, 592], "gavgpool": 17, "gcc": 595, "gcp": [571, 581], "gelu": [55, 403], "gemm": [17, 188, 189], "gemm_to_matmul": [188, 189, 583], "gemmoper": 16, "gen": [539, 542, 581, 583, 585], "gen_bar_updat": [205, 247], "gender": 497, "gener": [2, 34, 35, 73, 108, 134, 147, 153, 166, 185, 192, 193, 194, 202, 205, 206, 207, 208, 219, 233, 234, 235, 244, 247, 248, 249, 250, 260, 268, 276, 307, 321, 329, 355, 359, 363, 378, 382, 383, 449, 472, 473, 482, 498, 499, 503, 505, 523, 527, 540, 541, 542, 544, 549, 554, 556, 558, 559, 561, 563, 564, 578, 580, 581, 583, 585, 586, 589, 590, 591, 592], "generaltopk": [275, 328], "generate_activation_observ": 147, "generate_feed_dict": [134, 472], "generate_ffn2_pruning_config": 164, "generate_mha_pruning_config": 164, "generate_prefix": 153, "generate_pruner_config": 185, "generategraphwithqdqpattern": [93, 435], "generator1": 378, "geomean": 536, "gestalt": 581, "get": [2, 30, 31, 32, 53, 54, 56, 90, 91, 134, 143, 147, 153, 158, 159, 162, 163, 164, 166, 169, 176, 182, 183, 184, 185, 189, 197, 219, 220, 226, 228, 238, 260, 265, 298, 300, 302, 310, 317, 319, 328, 337, 359, 368, 375, 377, 401, 402, 404, 472, 474, 479, 485, 488, 490, 493, 504, 521, 532, 536, 537, 539, 541, 547, 564, 566, 574, 575, 581, 586, 589, 592, 593, 596], "get_absorb_lay": 147, "get_activ": [159, 228], "get_adaptor_nam": [319, 377], "get_algorithm": 485, "get_all_config_set_from_config_registri": 522, "get_all_fp32_data": 493, "get_all_pending_task": 571, "get_architectur": [153, 220], "get_attribut": 166, "get_blob_s": 32, "get_block_prefix": 147, "get_bounded_thread": [153, 220], "get_children": [143, 479], "get_common_modul": 166, "get_const_dim_count": [53, 54, 401, 402], "get_core_id": [153, 220], "get_criterion": 162, "get_dataload": 502, "get_depth": 147, "get_dict_at_depth": 147, "get_element_under_depth": 147, "get_embedding_contigu": 147, "get_estimator_graph": 134, "get_example_input": 147, "get_fallback_ord": 147, "get_final_text": [219, 260], "get_framework_nam": 2, "get_func_from_config": 485, "get_graph_def": [134, 472], "get_hidden_st": 147, "get_index_from_strided_slice_of_shap": 91, "get_input_output_node_nam": [134, 472], "get_lay": 185, "get_max_supported_opset_vers": 90, "get_metr": 485, "get_model_fwk_nam": 333, "get_model_input_shap": [134, 472], "get_model_path": 490, "get_model_typ": [337, 474], "get_modul": [143, 479], "get_module_input_output": 147, "get_mse_order_per_fp32": 147, "get_mse_order_per_int8": 147, "get_named_children": [143, 479], "get_node_map": 265, "get_node_original_nam": 31, "get_node_statu": 571, "get_number_of_socket": 493, "get_observer_dict": 590, "get_op_list": 493, "get_op_type_by_nam": 147, "get_pattern": [169, 298], "get_physical_id": [153, 220], "get_postprocess": 485, "get_preprocess": 485, "get_prun": [176, 300], "get_quant_dequant_output": 30, "get_quantizable_onnx_op": 265, "get_quantizable_ops_from_cfg": 147, "get_reg": 182, "get_reg_typ": 182, "get_schedul": [183, 302], "get_schema": 90, "get_siz": 493, "get_sparsity_ratio": 185, "get_sparsity_ratio_tf": 185, "get_statu": 571, "get_subgraphs_from_onnx": 91, "get_super_module_by_nam": [143, 479], "get_tensor_by_nam": [134, 472], "get_tensor_histogram": 493, "get_tensor_val_from_graph_nod": [134, 472], "get_tensor_valu": 590, "get_tensorflow_node_attr": 91, "get_tensorflow_node_shape_attr": 91, "get_tensorflow_tensor_data": 91, "get_tensorflow_tensor_shap": 91, "get_tensors_info": 493, "get_tf_criterion": 184, "get_thread": [153, 220], "get_threads_per_cor": [153, 220], "get_torch_vers": 147, "get_torchvision_map": [219, 260], "get_tuning_histori": 493, "get_weight_from_input_tensor": [134, 472], "get_weight_scal": 32, "get_weights_detail": 493, "getenv": 522, "getmtim": 564, "gholami": 580, "gigant": 589, "git": [498, 526, 532, 537, 563, 565, 566, 568, 569], "github": [4, 137, 170, 171, 181, 203, 245, 268, 269, 272, 273, 298, 301, 321, 322, 325, 326, 328, 359, 498, 502, 524, 526, 530, 537, 538, 541, 550, 556, 559, 563, 565, 566, 567, 568, 569, 572, 575, 576, 587], "give": [504, 561, 592], "given": [2, 4, 31, 53, 54, 56, 90, 91, 102, 134, 143, 147, 187, 219, 260, 271, 324, 359, 401, 402, 404, 443, 472, 479, 500, 505, 580, 589, 591], "glob": 564, "global": [101, 168, 188, 189, 284, 285, 287, 288, 289, 298, 377, 442, 493, 499, 541, 580, 582, 592], "global_config": [185, 284, 285, 287, 288, 289], "global_st": 493, "global_step": [173, 300], "globalaveragepool": 15, "globalaveragepooloper": 15, "glue": [268, 275, 321, 328, 524, 540, 541, 550], "gluon": [2, 329, 359, 543], "glx": 532, "go": [533, 556, 559, 567, 582, 586, 591], "goal": [153, 261, 266, 290, 295, 303, 329, 359, 504, 523, 579, 583, 592], "good": [497, 583, 592], "googl": [502, 522, 542, 581], "googleapi": [534, 563, 566], "googlenet": 595, "got": [134, 472, 504, 532, 590], "governor": 547, "gp": [307, 363], "gpt": [502, 539, 565, 580, 589, 595], "gpt2": 595, "gptq": [32, 522, 584, 586], "gptq_arg": 586, "gptq_config": 586, "gptq_config_path": 586, "gptq_g128asym": 586, "gptq_g32asym": 586, "gptq_g32asym_disable_last_matmul": 586, "gptq_quantiz": 32, "gptqw4g128asym": 595, "gptqw4g128sym": 595, "gptqw4g32asym": 595, "gptqw4g32sym": 595, "gpu": [75, 76, 83, 142, 188, 189, 422, 423, 430, 477, 502, 520, 536, 541, 542, 546, 552, 561, 582, 583, 584], "gracefulli": 497, "grad": [175, 180], "gradient": [162, 284, 502, 536, 541, 580, 581, 595], "gradient_accumulation_step": 541, "gradient_sensit": 286, "gradientcriterion": 162, "gradientsensitivityprun": 284, "gradual": [183, 302, 580], "grain": [179, 580, 581, 592], "gram": [269, 322], "granular": [503, 504, 505, 533, 536, 547, 583, 589, 594], "graph": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 116, 118, 122, 125, 128, 129, 131, 132, 133, 134, 166, 202, 244, 266, 330, 337, 358, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 457, 459, 463, 466, 467, 469, 470, 471, 472, 474, 499, 503, 524, 527, 529, 535, 543, 544, 563, 566, 583, 584, 585, 590], "graph_bas": 73, "graph_convert": 97, "graph_converter_without_calib": 97, "graph_cse_optim": [62, 410], "graph_def": [40, 126, 127, 134, 264, 329, 337, 358, 359, 379, 380, 388, 472, 474], "graph_def_sess": [337, 474], "graph_nam": 88, "graph_node_name_map": [134, 472], "graph_optim": 267, "graph_optimization_conf": 266, "graph_optimization_level": [188, 189, 582, 583], "graph_output": 91, "graph_rewrit": 97, "graph_sess": [337, 474], "graph_transform_bas": [131, 469], "graph_util": 97, "graphanalyz": [96, 438], "graphconvert": [34, 382], "graphconverterwithoutcalib": [35, 383], "graphcseoptim": [60, 408], "graphdef": [60, 134, 337, 358, 408, 472, 474, 543], "graphfoldconstantoptim": [49, 397], "graphmodul": [147, 499, 585], "graphrewriterbas": [72, 420], "graphrewriterhelp": [96, 438], "graphtransform": [130, 468], "graphtransformbas": [130, 468], "grappler": [61, 409, 533], "grappler_optim": 533, "grappler_pass": [62, 410], "grappleroptim": [61, 409], "great": 544, "greater": [134, 493, 574, 580, 592], "greatest": 592, "greatli": [584, 586], "grei": 584, "grid": [189, 283, 500, 580], "gridsearch": 283, "ground": [272, 273, 325, 326], "ground_truth": [272, 273, 325, 326], "groundtruth": [188, 189, 271, 324], "groundtruth_box": [271, 324], "groundtruth_boxes_list": [271, 324], "groundtruth_class": [271, 324], "groundtruth_classes_list": [271, 324], "groundtruth_dict": [271, 324], "groundtruth_is_crowd": [271, 324], "groundtruth_mask": [271, 324], "group": [32, 182, 285, 502, 536, 580, 586, 590, 591, 592, 595], "group_dim": 586, "group_lasso": 286, "group_norm": 531, "group_siz": [32, 144, 147, 377, 481, 586], "grouplasso": 182, "grouplassoprun": 285, "groupnorm": 589, "grow": 586, "grown": 580, "growth": [541, 542, 580], "grpc": [568, 569, 573, 574, 575, 577], "grpc_api_port": [569, 574, 575, 576], "gt": [524, 589, 591], "guangxuan": [586, 589], "guarante": [188, 189, 541], "guess_output_rank": 31, "gui": [526, 536, 566, 580], "guid": [203, 245, 499, 502, 522, 524, 527, 537, 544, 552, 561, 596], "guidelin": [501, 502], "gz": [205, 247, 524, 526, 556, 559], "h": [32, 188, 189, 219, 260, 529, 569, 570, 574, 575, 576, 591], "h384": 595, "h5": 543, "ha": [53, 54, 56, 60, 142, 172, 173, 220, 268, 298, 300, 321, 378, 401, 402, 404, 408, 477, 498, 500, 503, 504, 505, 523, 531, 536, 541, 542, 547, 561, 566, 567, 569, 572, 580, 582, 583, 585, 588, 589, 592], "habana": 502, "habana_visible_devic": 502, "habanalab": 502, "hack": [268, 321], "haihao": [538, 580], "half": [542, 552], "hand": 500, "handl": [47, 134, 151, 154, 395, 472, 489, 499, 501, 522, 523, 569, 589], "handler": [493, 592], "hanj": 4, "hanwen": 538, "happen": 526, "harass": 497, "hard": [189, 523, 526], "hardswish": 531, "hardtanh": 589, "hardwar": [502, 503, 527, 536, 541, 561, 580, 581, 582], "harm": 497, "harmon": [273, 275, 326, 328], "has_zp": 32, "hash": [567, 570], "hassoun": 580, "hat": 595, "hatch": 559, "have": [4, 60, 69, 127, 134, 142, 163, 167, 169, 176, 201, 222, 243, 268, 271, 298, 300, 321, 324, 328, 359, 377, 378, 380, 408, 417, 472, 477, 497, 498, 504, 505, 522, 523, 524, 526, 529, 533, 538, 540, 541, 542, 544, 561, 564, 567, 569, 574, 575, 576, 578, 580, 583, 584, 586, 589, 592, 593], "haven": 580, "hawq": [137, 366, 592], "hawq_metr": 138, "hawq_top": 137, "hawq_v2": [189, 367], "hawq_v2_loss": 592, "hawq_v2tunestrategi": 366, "hbm": 537, "he": 503, "head": [164, 166, 170, 177, 185, 580, 595], "head_mask": 177, "header": [493, 532], "headless": [537, 555], "health": 570, "healthi": 570, "heavi": 528, "height": [172, 215, 219, 257, 260, 298, 529, 591, 594], "hellaswag": 595, "hello": 562, "helloworld": [524, 542, 591], "help": [147, 159, 228, 277, 522, 539, 543, 544, 550, 561, 569, 574, 575, 576, 586, 592, 593], "helper": [31, 96, 102, 134, 147, 203, 204, 205, 218, 245, 246, 247, 259, 263, 264, 265, 337, 438, 443, 472, 474, 491], "henc": 582, "here": [271, 324, 378, 504, 524, 529, 530, 531, 533, 534, 539, 540, 549, 556, 559, 561, 564, 567, 569, 583, 587, 588, 589, 595], "herebi": 589, "herlper": [125, 466], "hesit": 580, "hessian": [32, 137, 366, 586, 592], "hessian_trac": 137, "hessiantrac": 137, "heterogen": 581, "heurist": [544, 561], "hf": [143, 479, 539, 589, 595], "hf_model": [569, 573, 575, 576], "hf_models_grpc": [573, 576], "hidden": [167, 172, 298, 503], "high": [31, 206, 207, 248, 249, 473, 524, 526, 537, 566, 581, 592], "higher": [188, 189, 192, 193, 233, 234, 282, 329, 359, 482, 499, 526, 527, 531, 540, 564, 580, 583, 588], "higher_is_bett": [188, 189, 328, 359, 592, 594], "highest": [566, 572, 592], "highli": [581, 586], "highlight": 499, "hint": 493, "histogram": [4, 483, 493, 563, 590], "histogramcollector": 4, "histori": [188, 189, 492, 493, 561, 565, 592], "history_cfg": 492, "hoc": [268, 321], "hold": [271, 307, 324, 363, 524], "holder": [210, 252, 524], "home": 547, "hook": [137, 155, 159, 177, 228, 229, 290, 295, 485, 527, 528, 541, 580, 589, 590], "hope": 531, "horizont": [219, 260, 591], "horovod": 529, "host": [502, 529, 569, 571, 574, 575, 576], "host1": [569, 574, 575], "host2": [569, 574, 575], "host_ip": 570, "hostconst": [83, 430], "hostfil": [569, 571, 574, 575, 576], "hostnam": 569, "hour": 592, "hous": 569, "hover": 561, "how": [32, 142, 155, 162, 168, 174, 175, 180, 188, 189, 219, 260, 261, 298, 477, 498, 499, 501, 503, 523, 524, 527, 528, 529, 535, 540, 541, 555, 556, 559, 560, 561, 563, 574, 575, 576, 580, 581, 583, 589, 591, 592, 593, 594], "howev": [142, 477, 567, 580, 586, 589], "howpublish": 538, "hpo": [192, 233, 580], "hpoconfig": 189, "ht": 595, "html": [499, 502, 504, 521, 529, 536, 556, 559, 562, 564, 570, 574, 583], "htmllabel": 592, "http": [4, 137, 162, 170, 171, 180, 181, 203, 205, 245, 247, 268, 269, 271, 272, 273, 298, 300, 301, 321, 322, 324, 325, 326, 328, 359, 499, 524, 526, 534, 537, 538, 541, 550, 556, 559, 563, 565, 566, 567, 568, 569, 572, 574, 575, 576, 580, 587], "hub": [143, 479, 502, 530, 534, 552], "hue": 591, "hug": [143, 479, 502, 568, 581], "huge": [528, 566, 580, 584], "huggingfac": [166, 177, 203, 245, 488, 524, 530, 534, 549, 550, 551, 552, 572, 573, 575, 576, 589, 595], "huggingface_model": [181, 301, 565], "human": 592, "hvd": [275, 328, 529], "hybirdblock": [329, 359], "hybridblock": 543, "hyper": [160, 594], "hyperparamet": [188, 189, 316, 588, 589, 592], "hypjudi": 564, "i": [2, 31, 32, 34, 35, 37, 40, 41, 46, 50, 56, 68, 71, 91, 118, 129, 134, 137, 140, 142, 146, 147, 152, 153, 155, 158, 159, 162, 166, 167, 173, 178, 179, 180, 181, 182, 184, 185, 188, 189, 192, 193, 194, 201, 202, 203, 204, 205, 206, 207, 210, 212, 215, 219, 220, 222, 226, 228, 229, 233, 234, 235, 243, 244, 245, 246, 247, 248, 249, 252, 254, 257, 260, 268, 271, 273, 275, 277, 282, 290, 295, 299, 300, 304, 311, 321, 324, 326, 328, 329, 339, 346, 347, 350, 359, 364, 369, 377, 378, 382, 383, 385, 388, 389, 394, 398, 404, 416, 419, 459, 467, 472, 473, 477, 478, 482, 488, 492, 493, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 512, 515, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595], "ia": 527, "ic": [537, 581], "id": [153, 218, 220, 259, 268, 270, 271, 272, 273, 321, 323, 324, 325, 326, 502, 540, 569, 570, 574, 575, 576, 588, 592], "idea": [502, 563, 580, 589, 592], "ident": [60, 66, 167, 408, 414, 497, 527], "identifi": [53, 54, 56, 142, 271, 324, 337, 401, 402, 404, 474, 477, 569, 580, 586], "idx": [282, 524], "idx1": [205, 247, 524], "idx3": [205, 247, 524], "ieee": [137, 542, 589], "ignor": [493, 521, 524, 586, 589, 592], "ignore_attr": 493, "ignore_kei": 493, "ii": 592, "illinoi": 4, "illustr": [504, 505, 528, 592], "ilsvr2012": 526, "ilsvrc2012": 500, "imag": [204, 205, 208, 210, 215, 219, 246, 247, 250, 252, 257, 260, 271, 324, 502, 524, 529, 531, 580, 582, 589, 590, 591, 595], "image_format": [210, 252, 524], "image_height": [271, 324], "image_id": [271, 324, 540], "image_list": [208, 250, 524], "image_nam": 524, "image_recognit": [526, 566, 590], "image_tensor": [541, 594], "image_width": [271, 324], "imageclassifi": [205, 247], "imagefold": [205, 247, 524, 529, 541], "imagenet": [205, 208, 215, 247, 250, 257, 500, 526, 541, 550, 566, 580, 590, 591, 594, 595], "imagenet_dataset": [209, 251], "imagenet_transform": [216, 258], "imagenetraw": [208, 250, 524], "imagerecord": [524, 529, 594], "imageri": 497, "img": 502, "img1": [208, 250, 524], "img2": [208, 250, 524], "img_dir": [204, 246, 524], "img_raw": 566, "imgx": [208, 250, 524], "iml": 581, "immedi": [554, 558, 580], "impact": [366, 580, 587, 592], "imper": 499, "implement": [96, 129, 133, 142, 192, 193, 198, 201, 202, 203, 205, 233, 234, 240, 243, 244, 245, 247, 268, 321, 329, 339, 359, 366, 438, 467, 471, 477, 482, 505, 523, 524, 540, 541, 552, 562, 580, 583, 586, 587, 590, 592, 594], "implicitli": [142, 477], "import": [134, 153, 188, 189, 277, 329, 339, 359, 378, 472, 482, 493, 499, 500, 502, 505, 520, 523, 524, 526, 527, 528, 529, 531, 534, 540, 541, 542, 543, 544, 548, 550, 563, 564, 572, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593], "importerror": [140, 478, 532], "improv": [179, 498, 521, 522, 541, 544, 561, 562, 564, 580, 581, 583, 585, 586, 592, 593, 595], "in_graph": [134, 472], "in_graph_is_binari": [134, 472], "in_mp": 31, "inappropri": 497, "inc": [219, 260, 497, 502, 504, 539, 544, 551, 561, 563, 568, 581, 582, 587, 592], "inc_auto": 551, "inc_model": [531, 543], "incdataset": 564, "incept": [566, 595], "inception_v3": [566, 590], "inceptionv3": 590, "inceptionv3_dump_tensor": 590, "inceptionv3_fp32_pretrained_model": [566, 590], "incid": 497, "incit": 589, "includ": [140, 156, 162, 166, 168, 182, 184, 188, 189, 203, 205, 212, 219, 221, 245, 247, 254, 260, 266, 276, 298, 303, 378, 478, 493, 497, 503, 504, 505, 523, 524, 526, 537, 538, 539, 540, 541, 544, 547, 550, 555, 567, 571, 574, 575, 576, 580, 583, 585, 586, 590, 592], "include_lay": 483, "include_nod": 2, "include_tensors_kl": 2, "include_tensors_minmax": 2, "inclus": 497, "incom": 571, "incompat": 532, "incorpor": [504, 505, 528, 580, 592], "incorrect": [142, 477], "increas": [188, 189, 525, 536, 544, 561, 566, 586, 592], "increasingli": 580, "increment": 592, "incub": 4, "independ": [177, 354, 358, 505], "index": [53, 54, 56, 91, 153, 185, 189, 197, 201, 205, 238, 243, 247, 282, 401, 402, 404, 493, 524, 540, 562, 566, 586, 589], "indexdataset": [201, 243], "indexerror": [140, 478], "indexfetch": [197, 238], "indic": [142, 155, 188, 189, 197, 201, 203, 238, 243, 245, 261, 271, 282, 324, 477, 499, 523, 532, 564, 569, 590], "individu": [127, 168, 298, 354, 358, 380, 497, 569, 580, 589], "industri": [540, 581], "infer": [2, 31, 91, 126, 147, 166, 266, 303, 337, 339, 359, 379, 474, 482, 502, 503, 504, 521, 527, 528, 541, 542, 561, 578, 580, 581, 583, 586, 589, 590, 592], "infer_onnx_shape_dtyp": 91, "infer_shap": 31, "influenc": [147, 580], "info": [31, 147, 170, 171, 185, 217, 222, 227, 298, 333, 488, 489, 493, 499, 522, 526, 543, 571, 576], "inform": [2, 137, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 193, 222, 224, 225, 233, 234, 298, 300, 301, 302, 304, 328, 340, 493, 497, 498, 501, 502, 503, 504, 505, 506, 508, 512, 515, 518, 521, 522, 527, 533, 541, 543, 556, 559, 562, 563, 566, 567, 569, 570, 574, 575, 580, 585, 586, 587, 589, 590, 594, 595, 596], "infrastructur": 525, "ingest": [271, 324], "inherit": [155, 156, 178, 179, 183, 188, 200, 219, 221, 229, 242, 260, 300, 302, 500, 503, 504, 524], "init": [1, 5, 30, 150, 157, 163, 165, 186, 524, 540, 592], "init_quantize_config": [102, 443], "initi": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 30, 31, 32, 91, 102, 134, 142, 156, 173, 192, 193, 200, 203, 221, 233, 234, 242, 245, 299, 300, 317, 359, 375, 443, 472, 477, 482, 500, 505, 524, 540, 560, 580, 583, 589, 592], "initial_op_tuning_cfg": [316, 374], "initial_spars": [582, 594], "initial_tuning_cfg_with_quant_mod": [317, 375], "initialize_name_count": 91, "inject": [45, 393, 541], "injectdummybiasaddoptim": [45, 393], "inlin": [134, 472, 544, 549, 552], "inner": 500, "innov": [502, 552, 581], "inplac": [30, 341], "input": [2, 3, 30, 31, 32, 40, 46, 50, 53, 54, 56, 57, 58, 60, 68, 69, 71, 72, 91, 95, 96, 102, 108, 127, 134, 136, 144, 146, 147, 151, 166, 167, 185, 188, 189, 192, 193, 203, 204, 205, 207, 215, 218, 219, 224, 233, 234, 245, 246, 247, 249, 257, 259, 260, 263, 264, 265, 328, 329, 333, 337, 341, 359, 380, 388, 394, 398, 401, 402, 404, 405, 406, 408, 416, 417, 419, 420, 437, 438, 443, 449, 472, 473, 474, 481, 482, 488, 490, 492, 493, 500, 503, 504, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 535, 540, 541, 542, 543, 544, 549, 580, 582, 583, 586, 589, 590, 591, 594], "input2tupl": 147, "input_data": [30, 523], "input_desc": 2, "input_dtyp": 91, "input_fil": [219, 260], "input_fn": [134, 337, 474], "input_func": 147, "input_graph": [117, 122, 129, 355, 358, 458, 463, 467, 503], "input_graph_def": [53, 54, 56, 401, 402, 404], "input_id": [203, 219, 245, 260, 541], "input_mask": [219, 260, 541], "input_model": [290, 295, 543, 564, 565, 566, 590], "input_model_tensor": 493, "input_nam": [53, 54, 88, 128, 189, 264, 265, 337, 401, 402, 531], "input_name_to_nod": 263, "input_node_map": [53, 54, 401, 402], "input_node_nam": [70, 117, 122, 134, 418, 458, 463, 472], "input_output_nam": [61, 409], "input_pb": [130, 132, 133, 468, 470, 471], "input_scal": [144, 481], "input_shap": [91, 207, 249, 473, 524], "input_tensor": [134, 337, 472, 474], "input_tensor_data": 494, "input_tensor_ids_op_nam": 147, "input_tensor_nam": [134, 337, 472, 474], "input_valu": 147, "inputbatch": [219, 260], "inputfeatur": [203, 219, 245, 260], "inputs_as_nchw": [128, 264], "insecur": [142, 477, 563], "insert": [63, 91, 93, 95, 99, 132, 151, 411, 435, 437, 440, 470, 499, 504, 523, 536, 541, 544, 580, 583, 585, 586, 589, 590], "insert_log": [131, 469], "insert_newlin": 493, "insert_print_nod": [62, 410], "insert_qdq_pattern": [92, 434], "insertlog": [132, 470], "insertprintminmaxnod": [63, 411], "inset": 541, "insid": [271, 324, 527, 528, 562, 580, 584, 592], "insight": [189, 490, 502, 526, 581, 587, 592, 593], "inspect": [587, 590], "inspect_result": 565, "inspect_sav": 565, "inspect_tensor": 503, "inspect_typ": 503, "inspir": 586, "instal": [529, 532, 534, 544, 546, 549, 552, 556, 559, 561, 562, 564, 565, 566, 596], "instanc": [101, 102, 153, 188, 189, 192, 193, 220, 233, 234, 272, 273, 275, 278, 281, 284, 285, 287, 288, 289, 307, 319, 325, 326, 328, 329, 359, 363, 377, 442, 443, 482, 490, 493, 497, 498, 499, 503, 520, 541, 546, 552, 586, 592, 594, 595], "instance_norm": 531, "instancenorm": [54, 402, 589], "instances_val2017": [204, 246, 524], "instanti": 579, "instead": [189, 202, 244, 493, 547, 549, 552, 567, 580, 586], "institut": [205, 247], "instruct": [504, 505, 527, 537, 542, 556, 559, 563, 564, 565, 566, 580, 581, 582, 583, 589, 595], "instrument": 590, "insult": 497, "int": [2, 4, 30, 31, 32, 91, 126, 134, 145, 147, 164, 188, 189, 202, 203, 204, 215, 219, 244, 245, 246, 257, 260, 264, 265, 269, 271, 275, 282, 322, 324, 328, 340, 348, 354, 358, 377, 378, 379, 472, 488, 493, 502, 522, 523, 524, 540, 541, 572, 582, 586, 591], "int32": [488, 524, 586], "int4": [502, 539, 583, 595], "int64": 524, "int8": [6, 7, 31, 32, 73, 109, 110, 111, 117, 119, 120, 121, 122, 129, 134, 152, 153, 188, 189, 215, 257, 263, 264, 265, 317, 319, 375, 377, 450, 451, 452, 458, 460, 461, 462, 463, 467, 472, 492, 493, 498, 499, 502, 503, 504, 505, 520, 524, 528, 533, 539, 541, 542, 546, 549, 551, 552, 555, 561, 564, 566, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 594], "int8_acc": 552, "int8_conv_config": 504, "int8_model": [264, 265, 503], "int8_model_path": 584, "int8_node_name_revers": [134, 472], "int8_onnx_config": [189, 531], "int8_sequ": [34, 382], "int_label": 540, "int_max": 31, "integ": [155, 172, 173, 188, 189, 261, 271, 275, 282, 298, 300, 324, 328, 378, 503, 505, 521, 583, 586, 589, 592], "integerop": 595, "integr": [134, 156, 221, 472, 503, 541, 562, 563, 568, 586], "intel": [158, 170, 171, 181, 223, 226, 262, 267, 274, 275, 298, 301, 309, 315, 320, 327, 328, 343, 359, 367, 373, 495, 497, 498, 500, 501, 503, 504, 505, 521, 524, 525, 527, 528, 530, 531, 533, 534, 538, 539, 542, 543, 544, 549, 551, 552, 563, 564, 565, 566, 568, 569, 578, 579, 580, 581, 583, 585, 586, 587, 589, 590, 592, 593, 594], "intel_extension_for_transform": 551, "intelcaff": 581, "intellig": 581, "intelon": 581, "inteltensorflow": [208, 210, 250, 252, 537], "intend": 498, "inter": [188, 189], "inter_area": [215, 257], "inter_num_of_thread": [188, 189, 354, 358, 541, 582], "inter_pol": [215, 257], "interact": [567, 588], "interest": [497, 502, 563, 590], "interfac": [72, 99, 266, 290, 295, 303, 304, 420, 440, 485, 536, 541, 552, 570, 583, 587], "interleav": [204, 246, 524], "intermedi": [31, 137, 156, 188, 189, 221, 499, 536, 583], "intermediatelayersknowledgedistillationloss": [156, 221], "intermediatelayersknowledgedistillationlossconfig": [189, 527], "intern": [137, 201, 243, 317, 375, 523, 524, 540, 580], "internal_pattern": [317, 375], "internet": [205, 247, 524, 563], "interpol": [179, 219, 260, 540, 580, 591], "intersect": [275, 328, 503, 540], "interv": [179, 580], "intra": [188, 189], "intra_num_of_thread": [188, 189, 354, 358, 541, 582], "introduc": [60, 408, 503, 504, 505, 533, 541, 583, 586, 587, 589, 593], "introduct": 593, "intuit": [586, 589], "inturn": 540, "inuput": 31, "invalid_lay": 168, "invent": 583, "invers": 586, "investig": [497, 522, 566], "invok": [271, 324, 504], "io": [2, 142, 477, 567], "iou": [275, 328], "iou_thr": [271, 275, 324, 328, 540], "iou_typ": [271, 324], "ip": 569, "ipc": 502, "ipex": [147, 188, 189, 492, 536, 541, 542, 546, 550, 551, 589], "ipex_config": 147, "ipex_config_path": 147, "ipexmodel": 338, "ir_vers": 30, "is_asymmetr": 504, "is_b_transpos": 31, "is_ckpt_format": [134, 472], "is_contigu": 293, "is_fused_modul": 147, "is_glob": [168, 298], "is_imposs": [219, 260], "is_int8_model": 492, "is_large_model": 31, "is_list_or_tupl": 91, "is_measur": 339, "is_model_quant": 2, "is_onnx_domain": 91, "is_perchannel": 504, "is_qat": 146, "is_quant": 590, "is_saved_model_format": [134, 472], "is_subgraph": 88, "isa": 552, "isiter": 2, "isn": [53, 54, 56, 401, 402, 404], "issu": [497, 498, 501, 502, 537, 564, 566, 583, 590], "item": [31, 185, 188, 189, 218, 259, 299, 317, 375, 521, 529, 580, 589, 592], "item_list": 31, "item_typ": [317, 375], "itemstyl": 592, "iter": [2, 3, 91, 126, 134, 147, 153, 167, 173, 180, 183, 188, 189, 192, 193, 197, 201, 205, 206, 222, 233, 234, 238, 243, 247, 248, 300, 302, 329, 340, 359, 379, 472, 473, 482, 485, 499, 500, 503, 520, 523, 524, 541, 580, 582, 583, 589, 590, 592, 594], "iter_bar": 541, "iter_op": [134, 472], "iterabledataset": [201, 205, 243, 247], "iterablefetch": [197, 238], "iterablesampl": [201, 243], "iteration_list": 503, "iterativeschedul": [183, 302], "iterator_sess_run": [134, 472], "itex": [33, 95, 188, 189, 264, 381, 437, 542, 583, 589], "itex_mod": [33, 34, 75, 93, 117, 122, 381, 382, 422, 435, 458, 463], "itex_qdq_mod": [57, 58, 405, 406], "itrex": [188, 189, 589], "its": [31, 46, 82, 134, 137, 166, 175, 178, 180, 185, 189, 199, 205, 219, 241, 247, 260, 263, 269, 270, 300, 307, 322, 323, 363, 394, 429, 472, 497, 524, 527, 538, 540, 542, 552, 554, 558, 561, 562, 580, 586, 588, 591, 592], "itself": [549, 580], "j": [502, 539, 565, 580, 589, 595], "jan": 581, "japanes": 595, "jason": 589, "jbla": 32, "jeffrei": 521, "jemalloc": 555, "ji": 586, "jit": [166, 188, 544, 546, 551, 589, 590], "jitbasicsearch": 166, "jitter": 591, "jlpm": [554, 558], "join": [502, 564, 569, 574, 575], "joint": 581, "jonathanhuang": [271, 324], "journei": 581, "jpeg": 591, "jpg": [204, 208, 210, 246, 250, 252, 502, 524], "json": [147, 204, 219, 246, 260, 492, 524, 543, 562, 569, 570, 574, 575, 576, 586, 591], "json_file_path": 492, "juli": 581, "jun": 581, "june": 581, "jupyt": [552, 554, 555, 558], "jupyterlab": [502, 544, 550, 552, 554, 558, 593], "just": [83, 194, 217, 219, 222, 224, 225, 227, 235, 260, 339, 430, 473, 500, 541, 551, 555, 561, 569, 579, 583, 589, 591, 592], "k": [275, 328, 359, 540, 563, 580], "k_block": 32, "kd": 527, "keep": [142, 177, 185, 299, 364, 477, 499, 503, 522, 560, 561, 587], "keep_mask_lay": 168, "keepdim": 589, "kei": [134, 137, 142, 143, 166, 177, 185, 188, 189, 282, 299, 337, 378, 472, 474, 477, 479, 483, 485, 493, 502, 504, 563, 564, 570, 581, 586, 590, 592], "kept": [172, 298], "kera": [56, 102, 158, 166, 185, 189, 205, 212, 226, 247, 254, 332, 337, 404, 443, 474, 504, 523, 529, 543, 551, 552], "keras_amp": 551, "keras_inc": 551, "keras_model": 331, "keras_sess": [337, 474], "kerasbasepattern": 168, "kerasbaseprun": 173, "kerasbasicprun": 174, "kerasmodel": [332, 474], "keraspatternnxm": 172, "kernel": [32, 151, 188, 189, 503, 504, 592], "keutzer": 580, "key_layer_nam": 177, "keynot": 581, "keyword": [142, 189, 477], "kim": 580, "kind": [147, 541], "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 581, "kl": [2, 4, 188, 189, 483, 487, 504, 505, 521, 533, 541, 592, 594], "kl_diverg": 486, "klcalibr": 4, "kmp_affin": 547, "kmp_blocktim": 547, "know": [222, 522, 529, 587], "knowledg": [155, 156, 188, 189, 221, 261, 528, 530, 534, 536, 541, 543, 594], "knowledgedistillationframework": [156, 221], "knowledgedistillationloss": [156, 221, 541, 594], "knowledgedistillationlossconfig": [188, 189, 527, 528, 541, 579], "known": [142, 222, 307, 363, 477, 541, 580, 583, 590, 592], "kriz": [205, 247, 524], "kullback": [505, 527], "kwarg": [3, 31, 91, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 123, 143, 147, 164, 188, 189, 205, 217, 219, 224, 227, 247, 260, 316, 318, 328, 329, 330, 332, 334, 336, 337, 338, 340, 342, 359, 374, 376, 378, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 462, 464, 474, 479, 482, 488, 489, 492, 493, 523], "kwon": 580, "l": [521, 527, 590, 592], "l1": 189, "l12": 595, "l2": [189, 580], "l6": 595, "l954": [268, 321], "l983": [268, 321], "lab": [554, 555, 556, 558, 559], "label": [188, 189, 192, 193, 203, 205, 206, 207, 208, 211, 215, 219, 224, 233, 234, 245, 247, 248, 249, 250, 253, 257, 260, 268, 270, 275, 321, 323, 328, 329, 359, 473, 482, 499, 523, 524, 526, 540, 541, 583, 591], "label_fil": [203, 219, 245, 260, 524, 591], "label_list": [203, 245, 275, 328], "label_map": 540, "label_path": 526, "label_shap": [207, 249, 473, 524], "label_shift": [215, 257, 591], "labelbal": 524, "labelbalancecocorawfilt": [211, 253], "labelbalancecocorecordfilt": [211, 253], "labelshift": [215, 257, 591], "labextens": [554, 555, 558], "lack": [523, 532], "lake": [537, 542, 581], "lambada": 589, "lambada_openai": 595, "lambda": [142, 477, 584], "lamini": [580, 589], "land": 581, "languag": [30, 151, 268, 321, 341, 497, 502, 531, 539, 565, 581, 584, 586, 589], "larei": 580, "larg": [30, 31, 151, 341, 502, 523, 527, 539, 541, 581, 584, 586, 589, 595], "larger": [504, 580, 586, 589], "lasso": [182, 285, 536, 580], "lassounbalanc": 595, "last": [147, 162, 185, 188, 189, 523, 542, 544, 546, 551, 555, 583, 586, 589], "last_batch": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523], "last_conv_or_matmul_quant": [188, 189, 583], "latenc": [588, 592], "later": [142, 151, 477, 522, 568, 569, 590], "latest": [502, 537, 581, 587], "latin1": [142, 477], "launch": [542, 562, 567], "launch_task": 571, "launcher": [500, 502, 527, 528, 552, 593], "layer": [33, 102, 103, 104, 105, 107, 108, 139, 141, 143, 151, 156, 159, 164, 166, 167, 168, 172, 177, 185, 187, 188, 189, 221, 228, 298, 299, 381, 443, 444, 445, 446, 448, 449, 476, 479, 483, 485, 493, 502, 503, 504, 505, 528, 536, 564, 580, 586, 587, 593], "layer1": [166, 188, 189, 541, 580, 583], "layer2": [166, 541, 580, 583], "layer3": [541, 580], "layer_1": 167, "layer_2": 167, "layer_idx": 185, "layer_input": 185, "layer_map": [156, 189, 221, 527], "layer_nam": [189, 580], "layer_norm": 531, "layer_tensor": 483, "layer_wis": [492, 584], "layer_wise_qu": [138, 189, 584], "layerhistogramcollector": 483, "layernorm": [56, 404, 589], "layerwisequ": 141, "layout": [40, 388], "layoutlm": 595, "layoutlmv2": 595, "layoutlmv3": [564, 595], "lazi": 493, "lazyimport": 493, "ld_preload": 547, "lead": [188, 189, 522, 527, 541, 542, 566, 580, 586, 589], "leadership": 497, "leaf": 590, "leaky_relu": 531, "leakyrelu": [41, 389, 589], "learn": [502, 503, 504, 523, 524, 531, 535, 536, 537, 541, 542, 544, 546, 549, 550, 552, 555, 556, 559, 561, 580, 581, 583, 589, 590, 592, 593], "learning_r": [188, 189, 541, 582, 594], "least": [181, 301, 498, 541, 580, 592], "leav": [102, 443, 555], "lee": 580, "left": [215, 219, 257, 260, 555, 561, 589, 591], "legaci": 286, "legal": [502, 596], "leibler": [505, 527], "len": [137, 189, 219, 260, 524, 529, 591], "length": [177, 188, 189, 203, 219, 245, 260, 271, 324, 502, 524, 540, 581, 583, 586, 591], "less": [41, 134, 147, 188, 189, 389, 493, 520, 527, 541, 568, 580], "let": [505, 533, 549, 580, 582, 594], "level": [32, 166, 364, 378, 489, 497, 571, 589, 592], "levelwis": 166, "leverag": [61, 409, 488, 500, 502, 527, 531, 544, 561, 579, 583, 586, 592], "lib": 547, "libgl": 532, "libgl1": 532, "libglib2": 532, "libiomp5": 547, "libjemalloc": 547, "librari": [167, 223, 267, 320, 354, 495, 502, 537, 541, 542, 546, 555, 561, 581, 583], "licens": 498, "lie": [500, 521], "lieu": [554, 558], "light": 528, "lightn": [502, 551], "lightweight": 580, "like": [60, 82, 84, 134, 142, 166, 185, 189, 192, 193, 194, 205, 233, 234, 235, 247, 266, 275, 300, 303, 304, 328, 337, 359, 408, 429, 431, 472, 473, 474, 477, 482, 498, 499, 500, 503, 504, 526, 527, 528, 536, 549, 564, 566, 579, 580, 583, 586, 587, 589, 592], "limit": [140, 307, 363, 478, 493, 502, 526, 527, 539, 583, 586, 587, 590], "lin": 586, "line": [504, 522, 529, 536, 544, 549, 550, 569, 590], "linear": [31, 144, 147, 151, 164, 166, 167, 172, 177, 185, 187, 188, 189, 298, 481, 499, 527, 531, 541, 580, 586, 589, 592], "linear2linearsearch": 166, "linear_lay": 177, "linear_pattern": 167, "linearcompress": 167, "linearcompressioniter": 167, "linearli": 31, "link": [188, 189, 203, 245, 328, 359, 521, 524, 531, 554, 558, 561, 586, 595], "linkedin": 581, "lint": 567, "linux": [520, 532, 537, 555, 561], "list": [2, 30, 31, 32, 40, 91, 126, 134, 136, 137, 145, 147, 153, 166, 167, 172, 177, 181, 185, 187, 188, 189, 192, 193, 197, 203, 215, 219, 220, 233, 234, 238, 245, 257, 260, 264, 265, 268, 269, 271, 272, 273, 275, 282, 290, 295, 298, 301, 316, 321, 322, 324, 325, 326, 328, 329, 337, 340, 341, 346, 347, 350, 359, 374, 378, 379, 388, 472, 474, 482, 483, 493, 499, 502, 503, 524, 531, 533, 537, 539, 541, 544, 549, 551, 554, 555, 558, 566, 569, 571, 572, 578, 580, 582, 583, 585, 589, 590, 592], "listen": 563, "liter": 378, "llama": [539, 580, 581, 584, 586, 589, 595], "llama2": 502, "llamanorm": 589, "llm": [126, 127, 379, 380, 580, 581, 584, 586, 589], "llm_weight_minmax": [93, 435], "lm": [580, 595], "lm_head": 580, "ln": 532, "load": [134, 140, 142, 143, 203, 218, 219, 245, 259, 260, 329, 337, 359, 472, 474, 478, 479, 492, 493, 504, 523, 554, 558, 562, 564, 582, 583, 584, 589], "load_and_cache_exampl": [203, 245], "load_data_from_pkl": 493, "load_empty_model": [143, 479, 584], "load_huggingfac": [486, 541], "load_layer_wise_quantized_model": [143, 479], "load_saved_model": [337, 474], "load_state_dict": [142, 477], "load_tensor": [143, 479], "load_tensor_from_shard": [143, 479], "load_vocab": [218, 259], "load_weight_onli": 492, "loadannot": [271, 324], "loader": [2, 126, 192, 193, 233, 234, 329, 359, 379, 482, 488, 523, 583], "loc": [142, 477], "local": [168, 188, 189, 298, 493, 522, 554, 558, 563, 570, 571, 580, 588], "local_config": [185, 188, 189, 284, 285, 287, 288, 289], "local_config_fil": [33, 381], "localhost": [567, 569, 574, 575], "locat": [142, 148, 185, 219, 260, 477, 529, 547, 554, 558, 561, 569, 583, 587, 591, 594], "lock": [178, 288, 289, 536, 579, 580], "log": [132, 153, 154, 166, 346, 347, 350, 470, 489, 499, 552, 574, 575, 576, 588, 590, 592], "log_fil": [153, 353, 357], "log_interv": 529, "logdir_spec": 590, "logger": [296, 483, 486, 493], "logic": 594, "login": [502, 556, 559, 588], "logit": 527, "loglevel": 592, "logo": 538, "long": [219, 260, 522, 532, 586, 591], "long_str": 522, "longer": [203, 219, 245, 260, 524, 591], "longest": [219, 260, 591], "look": [134, 177, 472, 503, 505, 533, 540, 563, 564, 566, 589, 594], "lookup": 166, "loop": [482, 499, 500, 504, 505, 533, 571, 588, 592], "loss": [30, 156, 188, 189, 221, 266, 275, 290, 295, 303, 328, 482, 521, 526, 527, 528, 529, 530, 539, 540, 541, 542, 552, 564, 566, 579, 580, 581, 583, 586, 589, 592, 594], "loss_func": [163, 181], "loss_sum": 541, "loss_typ": [156, 188, 189, 221, 541, 594], "loss_weight": [156, 188, 189, 221, 541, 594], "lossi": 583, "lot": [499, 566, 589], "low": [31, 192, 193, 206, 207, 233, 234, 248, 249, 266, 276, 303, 329, 473, 503, 504, 520, 521, 524, 529, 541, 542, 566, 581, 583, 586, 589, 592], "low_memory_usag": 189, "lower": [218, 219, 259, 260, 273, 326, 364, 528, 580, 581, 583, 589, 591, 592], "lowerbitssampl": 374, "lowercas": [203, 245, 524], "lowest": [580, 592], "lpot": [581, 587], "lr": [188, 189, 527, 529, 541], "lr_schedul": [541, 580], "lstm": 17, "lstmoper": 18, "lt": [500, 524, 595], "lvwerra": 595, "m": [31, 137, 170, 171, 188, 189, 298, 498, 527, 537, 544, 546, 549, 552, 556, 559, 569, 580, 595], "mac": [500, 562], "machin": [268, 321, 531, 537, 547, 561, 563, 569, 581, 589, 590], "maco": 537, "made": [366, 503, 583, 587, 592], "mae": [275, 328, 540], "magnitud": [162, 184, 188, 189, 275, 286, 328, 536, 580], "magnitude_progress": [188, 189], "magnitudecriterion": [162, 184], "magnitudeprun": 300, "mahonei": 580, "mai": [4, 134, 140, 142, 284, 285, 287, 288, 289, 378, 472, 477, 478, 497, 498, 504, 521, 522, 526, 531, 532, 538, 542, 554, 558, 564, 567, 569, 581, 583, 586, 589, 592], "mail": 497, "main": [4, 158, 177, 181, 226, 301, 499, 523, 526, 529, 541, 548, 550, 562, 571, 580, 583, 586], "mainli": [155, 183, 229, 302, 502, 541, 580, 583], "mainstream": [502, 593], "maintain": [275, 328, 497, 498, 522, 543, 544, 556, 559, 563, 568, 569, 580, 586, 587], "mainten": 503, "major": [535, 566, 583, 589], "make": [31, 91, 129, 152, 168, 173, 181, 183, 201, 243, 298, 300, 302, 467, 493, 497, 503, 504, 520, 522, 523, 533, 540, 541, 549, 554, 558, 561, 563, 580, 583, 584, 585, 586, 588, 589, 592], "make_dquant_nod": 31, "make_matmul_weight_only_nod": 32, "make_modul": 2, "make_nam": 91, "make_nc_model": 2, "make_nod": 31, "make_onnx_inputs_output": 91, "make_onnx_shap": 91, "make_quant_nod": 31, "make_sub_graph": 30, "make_symbol_block": 2, "makeiter": [134, 472], "malici": [142, 477], "malloc_conf": 547, "manag": [482, 485, 541, 544, 545, 555], "mandatori": [192, 193, 233, 234, 359, 541, 594], "mani": [32, 328, 359, 522, 523, 537, 586, 592, 594], "manifest": 562, "manipul": [88, 89], "manner": [523, 527, 543], "manual": [205, 247, 524, 544, 550, 552, 555, 569, 574, 575, 576, 580], "mao": 521, "map": [2, 31, 91, 134, 142, 147, 189, 219, 260, 263, 265, 266, 270, 272, 273, 275, 290, 295, 300, 303, 323, 325, 326, 328, 472, 477, 522, 524, 529, 540, 541, 554, 558, 566, 580, 583, 586], "map_kei": [275, 328], "map_loc": [142, 477], "map_numpy_to_onnx_dtyp": 91, "map_onnx_to_numpy_typ": 91, "map_point": [271, 275, 324, 328, 540], "map_tensorflow_dtyp": 91, "mar": 581, "mark": 521, "market": 561, "marketplac": [502, 562, 581], "mask": [0, 162, 168, 170, 173, 175, 179, 180, 203, 245, 271, 300, 324, 580, 595], "mask_padding_with_zero": [203, 245], "mask_shap": [293, 294], "massiv": 580, "master": [4, 170, 171, 181, 268, 269, 272, 273, 298, 301, 321, 322, 325, 326, 328, 359, 541, 592], "match": [64, 88, 142, 166, 271, 272, 324, 325, 412, 477, 502, 527, 562, 586], "match_datatype_pattern": 147, "matcher": 562, "math": [52, 400, 583], "mathemat": 589, "matmul": [17, 32, 39, 45, 51, 59, 80, 95, 114, 123, 172, 188, 189, 298, 387, 393, 399, 407, 427, 437, 455, 464, 533, 564, 586, 592], "matmul_weight_only_nod": 32, "matmulfpq4": 32, "matmulnbit": 32, "matmuloper": 19, "matric": 589, "matrix": [32, 328, 359, 502, 552, 593], "matter": [201, 243, 585], "max": [31, 90, 129, 152, 188, 189, 219, 260, 272, 273, 307, 325, 326, 363, 467, 493, 502, 526, 537, 541, 564, 566, 580, 583, 586, 589, 591, 592], "max_answer_length": [219, 260, 591], "max_column": 564, "max_dim": [219, 260, 591], "max_filter_tensor": 493, "max_grad_norm": 541, "max_inclusive_opset_vers": 90, "max_input_chars_per_word": [218, 259], "max_length": [203, 245], "max_min_data": [75, 76, 422, 423], "max_num_class": [271, 324], "max_ord": [269, 322], "max_output": 499, "max_query_length": [219, 260, 591], "max_row": 564, "max_seq_length": [203, 219, 245, 260, 524, 591], "max_sparsity_ratio_per_lay": [300, 582], "max_sparsity_ratio_per_op": [168, 173, 188, 189, 541, 580], "max_trial": [188, 189, 541, 592], "maxim": [541, 580, 592], "maximum": [41, 168, 173, 188, 189, 203, 219, 245, 260, 269, 300, 307, 322, 337, 363, 389, 474, 505, 521, 524, 526, 541, 580, 583, 589, 591], "maxpool": [17, 115, 124, 456, 465, 533], "maxpooloper": 20, "mbzuai": 589, "mckinstri": 521, "md": [170, 171, 188, 189, 298, 328, 359], "md5": [205, 247], "mean": [30, 32, 168, 177, 188, 189, 215, 219, 257, 260, 273, 275, 298, 310, 326, 328, 341, 368, 499, 504, 505, 523, 526, 529, 533, 540, 541, 547, 566, 580, 583, 584, 586, 589, 591, 592, 594, 595], "mean_valu": [215, 257, 591], "meaning": [541, 579], "meanwhil": 584, "measur": [134, 220, 329, 472, 487, 500, 503, 520, 526, 527, 540, 541, 586, 590, 592, 595], "mechan": [140, 162, 478, 580, 588, 593], "media": [497, 581], "median": [126, 379], "medium": 581, "meet": [189, 195, 304, 306, 360, 362, 499, 504, 578, 581, 582, 583, 586, 590, 592], "member": [497, 503], "memomeri": 141, "memori": [60, 147, 266, 290, 295, 303, 339, 408, 493, 521, 523, 528, 541, 542, 544, 578, 580, 583, 584, 586, 589, 592, 595], "memory_format": 544, "mention": [580, 586], "merg": [94, 196, 237, 317, 375, 436, 556, 559, 590, 592], "merge_duplicated_qdq": [92, 434], "mergeduplicatedqdqoptim": [94, 436], "mesa": 532, "messag": [91, 132, 470, 498, 569, 570, 574, 575, 576, 592], "met": [500, 533, 583, 590], "meta": [82, 429, 539, 581, 595], "meta_op_optim": [81, 428], "metaclass": 371, "metadata": [142, 477], "metadata_thp": 547, "metagraphdef": [337, 474], "metainfochangingmemopoptim": [82, 429], "metal": 532, "metaop": [82, 429], "method": [32, 127, 129, 140, 142, 147, 182, 188, 189, 197, 201, 202, 203, 205, 212, 219, 222, 238, 243, 244, 245, 247, 254, 260, 281, 282, 283, 317, 375, 377, 380, 467, 477, 478, 485, 486, 488, 489, 499, 500, 502, 521, 522, 523, 524, 526, 527, 528, 540, 541, 579, 580, 583, 585, 586, 589, 591, 592], "metric": [155, 188, 189, 192, 193, 223, 233, 234, 261, 266, 267, 282, 290, 295, 303, 304, 320, 329, 359, 482, 485, 500, 503, 504, 524, 526, 529, 541, 542, 563, 583, 588, 589, 590, 592, 593, 594, 595], "metric_cl": [224, 328, 359, 541], "metric_criterion": 339, "metric_fn": [272, 273, 325, 326], "metric_max_over_ground_truth": [272, 273, 325, 326], "metric_registri": [275, 328], "metric_typ": [275, 328], "metric_weight": 339, "mha": [169, 176, 580], "mha_compress": 177, "mha_head_s": 177, "mha_modul": 177, "mha_nam": 177, "mha_scor": 177, "mha_spars": [164, 580], "mhacompress": 177, "microcod": 595, "microsoft": [4, 502, 503], "middl": [567, 589], "migacz": 521, "might": [185, 499, 522, 563, 592], "migrat": [589, 593], "mimic": 583, "min": [129, 152, 189, 467, 493, 526, 564, 566, 580, 583, 586, 589, 591, 592], "min_dim": [219, 260, 591], "min_filter_tensor": 493, "min_sparsity_ratio_per_op": [168, 188, 189, 541, 580], "min_train_sampl": 189, "mini": 595, "minilm": [502, 581, 595], "minim": [129, 152, 307, 363, 467, 504, 505, 521, 527, 530, 540, 541, 554, 558, 580, 583, 592], "minimum": [168, 188, 189, 505, 521, 526, 541, 552, 580, 589, 592], "minmax": [2, 4, 504, 505, 521, 533, 583, 594], "minmax_file_path": 493, "minmaxcalibr": 4, "miou": [275, 328], "misc": [140, 478, 538], "miss": [580, 583], "mistral": 539, "mistralai": 539, "mitig": 586, "mix": [136, 188, 189, 305, 317, 329, 361, 375, 502, 503, 510, 536, 544, 550, 551, 552, 593], "mix_precis": [189, 320, 378, 541, 542], "mixed_precis": [267, 329, 541], "mixed_precision_model": 136, "mixedprecis": [189, 276, 541], "mixedprecisionconfig": [189, 329, 378, 541, 542], "mkl": 555, "ml": 581, "mla": [503, 542, 583], "mleffici": 581, "mlp": 580, "mlperf": [581, 595], "mm": 595, "mnist": [205, 247, 524, 529], "mnli": [203, 245, 524, 540, 595], "mobil": [527, 541, 595], "mobilebert": [203, 245, 524, 527, 595], "mobilenet": [531, 588, 595], "mobilenet_v1": 594, "mobilenet_v1_1": [534, 563, 574], "mobilenetv2": 595, "mobilenetv3": 500, "mode": [29, 30, 31, 96, 142, 212, 254, 271, 317, 324, 337, 341, 375, 438, 474, 477, 490, 492, 493, 503, 504, 526, 536, 554, 558, 566, 567, 583, 585, 586, 592], "model": [2, 3, 4, 17, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102, 104, 126, 127, 128, 134, 136, 137, 141, 142, 143, 145, 146, 147, 151, 153, 155, 163, 164, 166, 173, 174, 175, 178, 180, 181, 183, 185, 188, 189, 192, 193, 199, 202, 203, 205, 219, 220, 223, 224, 233, 234, 241, 244, 245, 247, 260, 261, 263, 264, 265, 266, 267, 275, 276, 277, 278, 281, 284, 285, 287, 288, 289, 290, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 320, 328, 329, 339, 340, 341, 342, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 377, 378, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 443, 445, 472, 474, 477, 479, 482, 488, 490, 492, 493, 495, 498, 499, 500, 502, 503, 505, 510, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 535, 536, 538, 540, 542, 544, 549, 551, 552, 555, 561, 563, 568, 570, 571, 572, 573, 578, 579, 581, 583, 587, 588, 590, 591, 592, 593, 594], "model_build": [278, 281], "model_convers": 267, "model_loss": 592, "model_nam": [102, 188, 189, 443, 502], "model_name_or_path": [203, 245, 524, 541, 549, 550, 565, 572, 575, 576, 584], "model_origin": [189, 359, 585], "model_path": [126, 134, 379, 472, 526, 574], "model_proto": 91, "model_slim": [163, 177], "model_slim_ffn2": 164, "model_slim_mha": 164, "model_summari": 565, "model_typ": [203, 245, 493, 524], "model_wis": [541, 594], "model_wrapp": [3, 138], "modelconvers": 277, "modelproto": [32, 263, 329, 341, 543], "models": [188, 189, 339, 541, 578, 582], "modelwisetuningsampl": [316, 374], "modern": [546, 586], "modif": [498, 503, 533, 549, 568], "modifi": [177, 205, 247, 358, 377, 499, 505, 529, 533, 565, 566, 580, 594], "modified_pickl": [139, 476], "modul": [135, 138, 139, 163, 169, 176, 280, 286, 296, 297, 476, 499, 522, 523, 527, 536, 540, 541, 543, 580, 582, 585, 586, 590, 593], "module_debug_level1": 378, "module_hook_config": 147, "module_nam": [143, 162, 163, 173, 174, 175, 176, 178, 179, 180, 182, 184, 300, 479, 493], "module_name_list": 147, "module_node_map": 265, "momentum": [162, 300, 536, 541, 580, 594], "momentumbalanc": 595, "momentumunbalanc": 595, "monitor": [569, 574, 575, 576], "more": [30, 134, 151, 170, 171, 219, 260, 298, 341, 472, 500, 501, 502, 504, 521, 522, 524, 527, 529, 531, 534, 536, 537, 539, 541, 542, 544, 552, 556, 559, 564, 569, 578, 579, 580, 585, 586, 589, 592, 593, 595], "moreoev": 300, "mosaicml": [589, 595], "mose": [268, 321], "mosesdecod": [268, 321], "mosh": 580, "most": [188, 189, 275, 328, 526, 541, 542, 580, 583, 586, 589, 592, 595], "mostli": 522, "move": [64, 142, 412, 477, 499, 567, 582, 586, 587], "move_input_devic": 147, "move_squeeze_after_relu": [62, 410], "movesqueezeafterreluoptim": [64, 412], "mpi": [568, 569, 592], "mpirun": [571, 592], "mpt": [580, 589, 595], "mrpc": [203, 245, 275, 328, 524, 540, 549, 572, 575, 576, 580, 592, 595], "mscoco": [271, 324], "mse": [32, 147, 188, 189, 275, 309, 328, 359, 367, 493, 526, 540, 566, 582, 586, 587], "mse_metric_gap": 493, "mse_v2": [189, 309, 367], "mse_v2tunestrategi": [311, 369], "mseloss": 589, "msetunestrategi": [310, 368], "msft": 581, "msg": [489, 570, 574, 575], "mt": 595, "mteval": [268, 321], "mu": 526, "much": [155, 162, 188, 189, 219, 260, 261, 527, 555, 589, 591], "mul": [41, 51, 52, 55, 151, 389, 399, 400, 403, 531, 586, 589], "mullinear": [144, 481], "multi": [153, 164, 166, 177, 271, 324, 328, 359, 500, 523, 524, 536, 541, 578, 580, 583, 592], "multi_object": 578, "multiclass": 540, "multilabel": 540, "multilingu": 595, "multiobject": 339, "multipl": [158, 164, 190, 191, 195, 196, 203, 204, 206, 207, 208, 209, 210, 214, 216, 219, 226, 231, 232, 236, 237, 239, 245, 246, 248, 249, 250, 251, 252, 256, 258, 260, 276, 329, 330, 331, 333, 339, 520, 524, 531, 541, 568, 571, 579, 580, 588, 589, 592], "multipli": [4, 188, 189, 586], "must": [219, 260, 271, 324, 498, 499, 504, 520, 523, 537, 583, 591], "muzzy_decay_m": 547, "mx": 2, "mxnet": [1, 2, 4, 189, 198, 202, 205, 208, 212, 219, 240, 244, 247, 250, 254, 260, 266, 275, 303, 328, 329, 334, 359, 498, 502, 503, 504, 521, 523, 530, 533, 536, 541, 542, 543, 582, 592, 594], "mxnet_dataload": 239, "mxnet_model": 331, "mxnetcifar10": [205, 247], "mxnetcifar100": [205, 247], "mxnetcropresizetransform": [219, 260], "mxnetcroptoboundingbox": [219, 260], "mxnetdataload": [198, 240], "mxnetdataset": [205, 247], "mxnetfashionmnist": [205, 247], "mxnetfilt": [212, 254], "mxnetimagefold": [205, 247], "mxnetimagenetraw": [208, 250], "mxnetmetr": [275, 328], "mxnetmnist": [205, 247], "mxnetmodel": 334, "mxnetnormalizetransform": [219, 260], "mxnettransform": [219, 260], "mxnettranspos": [219, 260], "my": 498, "my_model": 544, "n": [170, 171, 188, 189, 204, 219, 246, 260, 269, 298, 322, 378, 505, 522, 524, 526, 527, 569, 580, 583, 589, 591], "n_best_siz": [219, 260, 591], "n_bit": 589, "n_block": 586, "n_gpu": 541, "n_iter": [307, 363], "n_metric": 282, "n_pareto_point": 282, "n_point": 282, "n_sampl": [32, 147], "n_warmup": [307, 363], "na": [189, 267, 333, 536, 595], "name": [2, 31, 40, 53, 54, 56, 90, 91, 96, 102, 126, 134, 136, 137, 142, 143, 146, 147, 148, 153, 159, 162, 166, 168, 173, 176, 177, 181, 182, 183, 184, 185, 187, 188, 189, 203, 204, 205, 208, 212, 217, 219, 220, 224, 227, 228, 245, 246, 247, 250, 254, 260, 263, 264, 265, 270, 275, 293, 298, 300, 302, 317, 319, 323, 328, 333, 337, 339, 359, 375, 377, 379, 388, 401, 402, 404, 438, 443, 472, 474, 477, 479, 483, 485, 490, 493, 498, 499, 505, 522, 524, 526, 529, 531, 533, 538, 540, 541, 543, 547, 554, 558, 562, 563, 569, 580, 583, 587, 588, 590, 592, 594, 595], "namecollector": 2, "named_children": 590, "named_paramet": 529, "namespac": 522, "namhoon": 580, "nan": [42, 390], "nano": [551, 552], "nano_": 551, "nano_bf16": 546, "nano_bf16_channels_last": 546, "nano_bf16_ipex": 546, "nano_bf16_ipex_channels_last": 546, "nano_fp32_channels_last": 546, "nano_fp32_ipex": 546, "nano_fp32_ipex_channels_last": 546, "nano_gpu_to_cpu": 546, "nano_int8": 546, "nano_jit_bf16": 546, "nano_jit_bf16_channels_last": 546, "nano_jit_bf16_ipex": 546, "nano_jit_bf16_ipex_channels_last": 546, "nano_jit_fp32": 546, "nano_jit_fp32_channels_last": 546, "nano_jit_fp32_ipex": 546, "nano_jit_fp32_ipex_channels_last": 546, "nano_onnxruntime_fp32": 546, "nano_onnxruntime_int8_qlinear": 546, "nano_openvino_fp32": 546, "nano_openvino_int8": 546, "narrow_rang": [99, 440], "nas_method": 282, "nas_registri": 282, "nas_util": 280, "nasbas": [281, 500], "nasconfig": [189, 279, 281, 500], "nation": [205, 247, 497], "nativ": 505, "natur": [268, 321, 531], "nbest_predict": [219, 260, 591], "nbsp": 592, "nc": [588, 592], "nc_inception_v3": 566, "nc_inceptionv3": 590, "nc_model": [2, 290, 295], "nc_resnet50_v1": 529, "nc_workspac": [188, 189, 564, 565], "nchw": [40, 215, 388], "ncmodel": 2, "ndarrai": [2, 30, 31, 53, 54, 56, 219, 260, 401, 402, 404, 483, 532, 591], "ndarray_to_devic": 2, "nearest": [166, 219, 260, 586, 591], "nearst": 32, "necessari": [31, 181, 497, 500, 504, 543, 562, 580, 588, 592], "necessarili": [140, 478], "need": [2, 30, 91, 95, 153, 166, 181, 189, 192, 193, 194, 201, 202, 205, 212, 219, 222, 224, 225, 233, 234, 235, 243, 244, 247, 254, 260, 265, 304, 310, 328, 329, 339, 341, 359, 368, 437, 473, 482, 492, 493, 499, 503, 522, 523, 524, 526, 527, 529, 536, 541, 544, 546, 547, 550, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 568, 572, 574, 580, 582, 583, 584, 585, 586, 587, 589, 591, 592, 594], "neither": 583, "neo": [502, 595], "neox": [539, 595], "nepoch": 541, "nest": 147, "nesterov": [541, 594], "net": [335, 475, 502], "netflix": 581, "nets_factori": 331, "network": [137, 162, 168, 169, 300, 366, 500, 521, 527, 528, 531, 541, 563, 581, 583, 589, 592], "neural": [2, 137, 153, 155, 158, 168, 169, 170, 171, 181, 188, 189, 215, 216, 219, 220, 223, 226, 229, 257, 258, 260, 262, 267, 274, 275, 277, 290, 295, 298, 301, 303, 304, 309, 315, 320, 327, 328, 329, 333, 343, 359, 366, 367, 373, 490, 495, 498, 503, 504, 505, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 545, 546, 549, 551, 552, 554, 556, 558, 559, 560, 572, 578, 579, 581, 583, 586, 587, 589, 590, 591, 592, 594, 595], "neural_cod": [544, 546, 548, 549, 550, 552], "neural_compressor": [499, 500, 502, 505, 520, 522, 523, 524, 526, 527, 528, 529, 531, 534, 535, 540, 541, 542, 543, 563, 564, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 591, 592, 594], "neural_insight": [563, 565, 566], "neural_insights_util": 486, "neural_solut": [568, 569, 574, 575, 576], "neurip": [502, 581], "neuron": 580, "never": [142, 477, 592], "new": [2, 4, 32, 134, 153, 194, 205, 219, 220, 235, 247, 260, 299, 339, 472, 473, 498, 504, 529, 541, 542, 555, 561, 562, 563, 564, 570, 571, 574, 575, 580, 581, 583, 586, 587, 588, 591, 593, 594], "new_api": [34, 35, 57, 58, 63, 65, 78, 85, 117, 122, 129, 382, 383, 405, 406, 411, 413, 425, 432, 458, 463, 467], "new_dtyp": 31, "new_func": [134, 472], "new_graph_def": [134, 472], "new_init": 32, "new_metr": 540, "new_modul": [143, 147, 479], "new_quantized_nam": 31, "newapi": [80, 427], "newdataload": 523, "newer": 537, "newli": [541, 580], "newlin": [273, 326, 493], "newmetr": 540, "next": [46, 197, 238, 378, 394, 500, 504, 505, 523, 582, 586, 592], "next_annotation_id": [271, 324], "next_tune_cfg": 592, "nextplatform": 581, "nf4": [502, 586], "nfl": [273, 326], "ngram": [268, 321, 540], "nhwc": [40, 215, 388], "ni_workload_nam": 189, "nightli": 537, "ninm": 169, "nll_loss": 529, "nlp": [181, 188, 189, 301, 549, 565, 580, 583], "nn": [135, 143, 144, 147, 166, 167, 177, 187, 188, 189, 265, 329, 359, 479, 481, 488, 492, 499, 527, 541, 543, 586, 589, 590], "nncf": 137, "no_absorb_lay": 147, "no_grad": 544, "node": [2, 30, 31, 32, 36, 40, 41, 42, 43, 46, 48, 50, 53, 54, 56, 60, 63, 66, 68, 69, 70, 84, 88, 89, 91, 96, 118, 126, 134, 166, 263, 265, 337, 358, 379, 384, 388, 389, 390, 391, 394, 396, 398, 401, 402, 404, 408, 411, 414, 416, 417, 418, 431, 438, 459, 472, 474, 503, 526, 529, 564, 568, 571, 574, 575, 576, 584, 590, 592, 595], "node1": [529, 574, 575], "node2": [529, 574, 575], "node_collector": 137, "node_def": [53, 54, 56, 401, 402, 404], "node_from_map": [53, 54, 56, 401, 402, 404], "node_list": 571, "node_map": [53, 54, 56, 401, 402, 404], "node_modul": 562, "node_nam": [53, 54, 56, 134, 337, 348, 401, 402, 404, 472, 474, 504], "node_name_from_input": [53, 54, 56, 401, 402, 404], "node_name_list": [132, 470], "node_op": 504, "nodedef": [53, 54, 56, 401, 402, 404], "nodej": [554, 558], "non": [4, 299, 493, 499, 526, 586, 592], "nondigit_punct_r": [268, 321], "none": [2, 29, 31, 32, 33, 34, 35, 49, 75, 88, 90, 91, 96, 102, 128, 134, 137, 141, 142, 143, 144, 147, 153, 155, 156, 162, 163, 164, 166, 170, 181, 185, 188, 189, 192, 193, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 215, 219, 220, 221, 222, 229, 233, 234, 235, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 257, 260, 261, 264, 265, 266, 271, 275, 276, 277, 278, 281, 290, 295, 299, 303, 305, 306, 307, 308, 310, 311, 312, 313, 317, 324, 328, 329, 339, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 378, 381, 382, 383, 397, 422, 438, 443, 472, 473, 477, 479, 481, 482, 483, 485, 488, 490, 492, 493, 502, 503, 504, 523, 524, 540, 564, 583, 586, 590, 591, 592], "nor": 583, "norm": 17, "normal": [4, 21, 219, 260, 273, 326, 541, 570, 578, 586, 589, 591], "normalfloat": 586, "normalizationoper": 21, "normalize_answ": [273, 326], "normalizetftransform": [219, 260], "normalizetransform": [219, 260], "notabl": 560, "notat": [189, 493], "note": [41, 140, 172, 271, 311, 324, 369, 389, 478, 500, 502, 504, 505, 522, 523, 526, 529, 531, 533, 537, 539, 541, 546, 549, 554, 558, 561, 563, 567, 569, 571, 580, 583, 586, 589, 590, 592, 593, 594], "notebook": 593, "noteworthi": 521, "noth": [271, 324, 592], "notic": [129, 152, 220, 467, 538, 542, 564, 587], "notif": 571, "nov": 581, "novel": [528, 544, 555, 561], "now": [188, 189, 219, 260, 499, 500, 505, 524, 529, 552, 582, 591, 592], "np": [31, 219, 260, 307, 363, 529, 571, 589, 591, 592], "np_dtype": 91, "npm": [554, 555, 558], "npm_token": [556, 559], "npu": [189, 583], "npy": [204, 246, 524], "npy_dir": [204, 246, 524], "npz": [205, 247, 524], "nr": 91, "ns_workspac": [569, 574, 575, 576], "nsampl": 586, "nsdf3": [205, 247, 524], "nsga2": 500, "num": 493, "num_bin": [2, 4, 483], "num_bit": [32, 99, 144, 147, 440, 481, 589], "num_class": [275, 328], "num_cor": [203, 204, 208, 245, 246, 250, 524], "num_correct": [275, 328], "num_detect": [271, 275, 324, 328, 540, 541, 594], "num_ev": 500, "num_gt_box": [271, 324], "num_of_inst": [153, 188, 189, 520, 541, 582], "num_of_process": 529, "num_quantized_bin": 4, "num_replica": 529, "num_sampl": [275, 328], "num_train_epoch": [541, 580], "num_work": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523, 541, 583], "numactl": [153, 532, 547, 555], "number": [4, 32, 53, 54, 91, 126, 147, 164, 170, 171, 188, 189, 201, 204, 215, 219, 243, 246, 257, 260, 272, 273, 275, 298, 307, 325, 326, 328, 354, 358, 363, 378, 379, 401, 402, 485, 493, 520, 523, 524, 529, 540, 569, 571, 580, 583, 586, 588, 589, 591, 592], "number_of_process": 592, "number_of_socket": [574, 575], "number_of_thread": [574, 575], "numer": [189, 275, 328, 505, 542, 581, 583, 586], "numpi": [30, 31, 53, 54, 56, 91, 134, 219, 260, 271, 282, 324, 401, 402, 404, 472, 532, 589, 591], "nvidia": [502, 521, 536, 537, 595], "nweight": 564, "nxm": [169, 179, 188, 189, 294, 298, 580], "o": [142, 378, 477, 522, 537, 546, 564], "o0": [364, 592], "o1": 592, "oaa": 570, "obj": [2, 91, 163, 185, 202, 244, 261, 266, 277, 278, 279, 281, 290, 295, 299, 303, 329, 339, 359, 482, 485, 493], "obj1": 493, "obj2": 493, "obj_cl": 339, "obj_criterion": 339, "obj_weight": 339, "object": [2, 30, 31, 32, 60, 72, 91, 102, 118, 134, 136, 137, 140, 142, 146, 147, 153, 155, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 192, 193, 194, 203, 204, 205, 219, 220, 222, 233, 234, 235, 245, 246, 247, 260, 261, 266, 271, 279, 281, 284, 285, 287, 288, 289, 290, 295, 298, 299, 300, 301, 302, 303, 307, 320, 324, 328, 329, 337, 338, 354, 358, 359, 363, 377, 408, 420, 443, 459, 472, 473, 474, 477, 478, 482, 485, 492, 493, 499, 500, 504, 510, 520, 522, 523, 524, 532, 540, 541, 543, 579, 580, 582, 583, 591, 592, 593, 595], "object_detect": [188, 189, 271, 324], "objective_cfg": 339, "objective_cl": 339, "objective_custom_registri": 339, "objective_registri": 339, "oblig": [497, 567], "observ": [147, 505, 586, 588, 590, 592], "observer_dict": 590, "obtain": [164, 166, 175, 180, 182, 185, 299, 499, 504, 569, 580, 588, 589, 592], "oct": [502, 581], "ofa_mbv3_d234_e346_k357_w1": 500, "off": [4, 53, 54, 56, 401, 402, 404, 498, 586], "offens": 497, "offer": 524, "offici": [134, 268, 272, 273, 321, 325, 326, 472, 497, 589], "offlin": [493, 497, 541, 583, 589], "offset_height": [219, 260, 591], "offset_width": [219, 260, 591], "ofir": 580, "often": [185, 523, 527, 566, 579, 580], "old": [493, 541, 587], "old_hist": 493, "oliv": [502, 581], "omit": 586, "ompi_mca_btl_vader_single_copy_mechan": 502, "on_after_compute_loss": [482, 527, 528, 541, 579], "on_after_optimizer_step": [541, 580], "on_before_optimizer_step": [482, 527, 528, 541, 579, 580], "on_epoch_begin": [482, 485, 527, 528, 541, 579], "on_epoch_end": [482, 485, 527, 528, 541, 579], "on_step_begin": [482, 485, 527, 528, 541, 579, 580], "on_step_end": [482, 485, 527, 528, 541, 579], "on_train_begin": [482, 499, 527, 528, 541, 579, 580, 583], "on_train_end": [482, 527, 528, 541, 579, 580, 583], "onc": [134, 142, 158, 183, 226, 302, 306, 360, 362, 472, 477, 504, 505, 523, 561, 567, 580, 581, 592, 595], "one": [32, 95, 96, 101, 142, 147, 153, 168, 172, 177, 180, 181, 183, 219, 229, 260, 268, 271, 275, 277, 298, 301, 302, 321, 324, 328, 437, 438, 442, 477, 500, 503, 521, 527, 528, 529, 533, 536, 537, 540, 541, 542, 544, 545, 549, 550, 552, 554, 555, 558, 561, 562, 563, 566, 567, 568, 569, 571, 578, 579, 580, 582, 583, 584, 586, 587, 589, 591, 592], "oneapi": [537, 581, 593], "onednn": [537, 542, 583], "ones": [142, 271, 324, 477, 580], "oneshotschedul": [183, 302], "onli": [30, 32, 40, 49, 56, 72, 95, 101, 129, 142, 151, 152, 153, 158, 163, 169, 176, 188, 189, 203, 220, 222, 226, 245, 265, 277, 298, 300, 311, 341, 359, 369, 377, 378, 388, 397, 404, 420, 437, 442, 467, 477, 493, 503, 504, 505, 520, 521, 523, 526, 527, 529, 532, 533, 539, 541, 542, 549, 562, 580, 581, 582, 583, 584, 589, 590, 592, 593, 594], "onlin": [497, 588], "onnx": [3, 4, 17, 29, 31, 32, 73, 128, 151, 188, 189, 199, 241, 263, 264, 265, 329, 336, 341, 342, 354, 491, 498, 502, 503, 504, 506, 523, 526, 530, 531, 533, 534, 536, 542, 543, 546, 551, 552, 564, 581, 582, 586, 587, 589, 592], "onnx_graph": 87, "onnx_inc_dynamic_qu": 551, "onnx_inc_static_quant_qdq": 551, "onnx_inc_static_quant_qlinear": 551, "onnx_ml_pb2": [329, 543], "onnx_model": [331, 340, 341, 353, 564], "onnx_nod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 87], "onnx_qlinear_to_qdq": 263, "onnx_quant": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "onnx_schema": 87, "onnx_typ": 91, "onnxbilinearimagenettransform": [215, 257], "onnxcommunitymeetup2023": 581, "onnxgraph": 88, "onnxmodel": [32, 336, 340, 341, 342, 353], "onnxnod": 89, "onnxopschema": 90, "onnxprofilingpars": 346, "onnxqlinear2qdq": 189, "onnxqlinear2qdqconfig": 189, "onnxresizecropimagenettransform": [215, 257], "onnxrt": [30, 31, 32, 203, 205, 212, 219, 245, 247, 254, 260, 275, 328, 353, 491, 503, 526, 542, 563, 583, 595], "onnxrt_cuda_ep": [188, 189, 542, 583], "onnxrt_dataload": [239, 353], "onnxrt_dml_ep": [189, 583], "onnxrt_dnnl_ep": [189, 542, 583], "onnxrt_integ": [541, 594], "onnxrt_integerop": [205, 212, 219, 247, 254, 260, 582], "onnxrt_qdq": [205, 212, 247, 254, 582], "onnxrt_qlinear": [541, 594], "onnxrt_qlinearop": [205, 212, 219, 247, 254, 260, 582], "onnxrt_qlinearopsadaptor": 503, "onnxrt_qoper": 582, "onnxrt_trt_ep": [188, 189, 542, 583], "onnxrtaug": 3, "onnxrtbertdataload": [199, 241], "onnxrtbertdataset": [203, 245], "onnxrtcroptoboundingbox": [219, 260], "onnxrtdataload": [199, 241, 353], "onnxrtglu": [275, 328], "onnxrtimagenetdataset": [208, 250], "onnxrtitdataset": [205, 247], "onnxrtitfilt": [212, 254], "onnxrtitmetr": [275, 328], "onnxrtittransform": [219, 260], "onnxrtparserfactori": 345, "onnxrtqldataset": [205, 247], "onnxrtqlfilt": [212, 254], "onnxrtqlmetr": [275, 328], "onnxrtqltransform": [219, 260], "onnxruntim": [4, 188, 189, 199, 205, 212, 241, 247, 254, 276, 354, 503, 521, 523, 536, 537, 542, 564, 582], "onto": [142, 477], "op": [2, 17, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 67, 71, 74, 77, 78, 79, 80, 82, 91, 93, 95, 109, 110, 111, 117, 119, 120, 121, 122, 127, 129, 132, 134, 136, 137, 146, 147, 151, 166, 188, 189, 265, 310, 317, 318, 354, 358, 364, 366, 368, 375, 376, 377, 380, 385, 387, 399, 400, 401, 402, 403, 404, 405, 406, 408, 412, 415, 419, 421, 424, 425, 426, 427, 429, 435, 437, 450, 451, 452, 458, 460, 461, 462, 463, 467, 470, 472, 487, 493, 502, 503, 504, 505, 526, 533, 541, 542, 565, 566, 580, 583, 585, 587, 589, 590, 592, 594], "op_block_lst": 374, "op_cfg": 141, "op_defin": 348, "op_dict": 541, "op_dtyp": [316, 374], "op_dtype_dict": [316, 374], "op_infos_from_cfg": 147, "op_list": [503, 590], "op_nam": [147, 188, 189, 318, 376, 493, 494, 504, 541, 580, 590], "op_name_dict": [188, 189, 526, 541, 564, 566, 583, 592], "op_name_typ": [317, 375], "op_quant_mod": [318, 376], "op_registri": 22, "op_run": 348, "op_typ": [22, 126, 127, 134, 187, 318, 376, 379, 380, 472], "op_type_dict": [188, 189, 502, 505, 582, 583, 586, 592], "op_types_to_quant": 29, "op_user_cfg": 377, "op_user_cfg_modifi": 377, "op_wis": [541, 590, 594], "op_wise_config": [93, 117, 122, 435, 458, 463, 504], "op_wise_sequ": [117, 122, 458, 463], "open": [142, 223, 267, 320, 477, 485, 495, 497, 502, 531, 532, 541, 556, 559, 562, 563, 567, 568, 569, 581], "openai": [589, 595], "opencv": [532, 537, 555], "opentri": 493, "openvino": 546, "openvinotoolkit": 137, "oper": [5, 31, 90, 96, 126, 134, 166, 167, 172, 188, 189, 215, 257, 298, 354, 358, 379, 438, 472, 499, 520, 523, 526, 531, 561, 567, 580, 583, 586, 589, 591, 592], "ops_lst": 147, "ops_nam": 147, "opset": [30, 88, 90, 91, 189, 264, 265, 531], "opset_vers": [91, 128, 189, 264, 265, 531], "opt": [181, 502, 539, 549, 580, 589, 592, 595], "opt_cfg": [61, 409], "opt_model": [304, 541], "optdecoderlay": 589, "optim": [40, 60, 61, 65, 66, 102, 104, 134, 157, 160, 161, 163, 166, 175, 180, 188, 189, 223, 229, 266, 283, 303, 307, 363, 388, 408, 409, 413, 414, 443, 445, 472, 482, 483, 490, 493, 500, 502, 520, 522, 526, 527, 528, 529, 533, 534, 536, 537, 539, 541, 543, 544, 546, 548, 549, 552, 555, 563, 566, 567, 568, 570, 572, 581, 582, 583, 585, 586, 588, 589, 590, 592, 594], "optimization_result": [570, 574], "optimize_for_infer": 551, "optimize_lay": [103, 444], "optimize_qdq": [116, 457], "optimized_accuraci": 490, "optimized_model_tensor": 493, "optimized_result": 575, "optimized_tensor_data": 494, "optimizedmodel": 488, "optimizeqdqgraph": [117, 458], "optimizer_registri": [158, 226], "optimizer_typ": [158, 226], "optimum": [502, 551, 552, 564, 586], "option": [4, 32, 91, 142, 147, 168, 188, 189, 192, 193, 203, 219, 233, 234, 245, 260, 264, 265, 271, 277, 298, 304, 317, 324, 328, 329, 359, 375, 377, 378, 477, 482, 486, 488, 493, 504, 505, 522, 523, 524, 533, 537, 541, 555, 569, 572, 574, 575, 576, 580, 583, 586, 588, 589, 591, 592, 594], "optuningconfig": [316, 317, 318, 374, 375, 376], "optyp": [2, 188, 189, 263, 504], "optype_wise_": 504, "optypes_to_exclude_output_qu": [29, 188, 189, 583], "optypewis": 504, "optypewisetuningsampl": [316, 374], "opwis": 504, "opwisetuningsampl": [316, 374], "orchestr": [482, 502, 536, 593], "order": [141, 147, 268, 269, 304, 307, 310, 319, 321, 322, 363, 368, 377, 499, 526, 540, 564, 582, 586, 589, 590, 592], "ordered_op": 147, "ordereddefaultdict": [319, 377], "ordereddict": 522, "ordinari": 588, "org": [162, 180, 271, 300, 324, 499, 526, 537, 556, 559, 580], "organ": 594, "orient": 497, "orig_answer_text": [219, 260], "orig_lay": [144, 481], "orig_text": [219, 260], "origin": [31, 32, 126, 134, 143, 147, 166, 178, 185, 189, 203, 219, 220, 245, 260, 284, 285, 287, 288, 289, 299, 300, 319, 364, 377, 379, 472, 479, 488, 493, 498, 524, 549, 580, 583, 591, 592, 594], "ort": 354, "ortsmoothqu": 30, "other": [53, 54, 56, 140, 151, 202, 244, 273, 326, 337, 401, 402, 404, 474, 478, 497, 499, 504, 505, 522, 526, 533, 536, 538, 541, 543, 564, 578, 580, 583, 589, 591, 592, 595], "otherwis": [142, 205, 219, 247, 260, 477, 493, 497, 504, 524, 556, 559, 582, 586, 591], "ouput_dir": 584, "our": [129, 147, 188, 189, 467, 500, 502, 531, 541, 562, 563, 566, 588, 593], "out": [171, 188, 189, 203, 204, 205, 245, 246, 247, 266, 298, 303, 498, 499, 502, 524, 544, 549, 554, 555, 556, 558, 559, 561, 567, 580, 582, 583, 586], "out_graph_def": [134, 472], "out_graph_fil": [134, 472], "outcom": [275, 328], "outer": [196, 237], "outlier": [126, 379, 504, 521, 526, 566, 586, 589], "outlin": [504, 505], "outofcheeseerror": 522, "outperform": 500, "output": [30, 31, 32, 37, 40, 45, 60, 84, 91, 96, 134, 147, 159, 166, 167, 172, 185, 188, 189, 192, 193, 224, 228, 233, 234, 264, 265, 268, 298, 321, 328, 329, 337, 359, 385, 388, 393, 408, 431, 438, 472, 474, 482, 488, 489, 493, 499, 503, 504, 527, 528, 529, 531, 533, 535, 540, 541, 543, 552, 561, 562, 564, 569, 570, 574, 575, 576, 579, 580, 582, 583, 586, 587, 589, 590, 591, 592, 594], "output_data": 30, "output_dict": 32, "output_dir": [141, 488, 541, 549, 550, 565, 566, 572, 575, 576], "output_fn": [219, 260], "output_func": 147, "output_graph": 189, "output_handl": 493, "output_index_map": [275, 328, 540], "output_mod": [203, 245], "output_model": [378, 541, 564, 566, 590], "output_nam": [88, 128, 189, 264, 265, 337, 531], "output_node_nam": [69, 70, 117, 118, 122, 134, 417, 418, 458, 459, 463, 472], "output_path": [271, 324], "output_process": [159, 228], "output_shap": 88, "output_tensor": [134, 337, 472, 474], "output_tensor_ids_op_nam": 147, "output_tensor_nam": [134, 337, 472, 474], "output_tensors_dict": 590, "output_valu": 147, "outputs_to_valu": 91, "over": [91, 142, 205, 247, 275, 328, 477, 504, 530, 534, 536, 540, 552, 561, 567, 571, 580, 582, 589, 592], "overal": [505, 569, 594], "overflow": 583, "overhead": 589, "overli": 522, "overrid": [188, 189, 493, 522], "overridden": 592, "oversize_threshold": 547, "overview": [502, 592], "overwrit": [205, 247, 554, 558], "overwrite_exist": [153, 220], "overwritten": [284, 285, 287, 288, 289, 549], "own": [60, 142, 201, 219, 243, 260, 339, 408, 477, 500, 504, 523, 524, 536, 540, 563, 567, 578, 586, 588, 593], "p": [4, 502, 562, 563, 586], "p1": 571, "p2": 571, "p3": 571, "p4": 571, "p_conf": [541, 579], "pack": [31, 47, 395], "packag": [90, 502, 503, 532, 537, 561, 562, 581, 587, 592], "pad": [17, 32, 57, 58, 203, 219, 245, 260, 405, 406, 524, 591], "pad_max_length": 586, "pad_tensor": 32, "pad_token": [203, 245], "pad_token_segment_id": [203, 245], "paddedcentercroptransform": [219, 260], "padding_mod": 591, "pade": 32, "padoper": 23, "page": [497, 498, 563, 566, 567], "pager": 522, "pain": 583, "pair": [93, 188, 189, 435, 504, 523, 541, 542, 587], "palett": 562, "panda": 564, "panel": [556, 559, 561], "paper": [527, 580, 586, 589], "par": [500, 571], "paragraph": [272, 273, 325, 326], "parallel": [204, 246, 354, 358, 524, 541, 568, 571, 592], "param": [147, 153, 158, 194, 220, 226, 235, 275, 307, 328, 363, 473, 493, 503, 543, 592], "param1": 378, "param2": 378, "param3": 378, "param_alia": 493, "param_dict": [156, 158, 221, 226], "param_nam": 493, "paramet": [2, 4, 30, 31, 32, 53, 54, 56, 72, 91, 102, 118, 126, 127, 134, 136, 137, 142, 143, 146, 147, 148, 153, 155, 156, 158, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 202, 203, 205, 212, 215, 219, 221, 226, 233, 234, 244, 245, 247, 254, 257, 260, 261, 263, 264, 265, 266, 268, 269, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 293, 295, 298, 299, 300, 301, 302, 303, 307, 313, 317, 319, 321, 322, 324, 325, 326, 328, 329, 333, 337, 339, 354, 358, 359, 363, 371, 375, 377, 378, 379, 380, 401, 402, 404, 420, 443, 459, 472, 474, 477, 479, 482, 485, 488, 489, 490, 492, 493, 499, 504, 523, 524, 527, 529, 536, 540, 541, 555, 561, 562, 563, 564, 569, 574, 575, 580, 583, 584, 586, 588, 589, 591, 592, 594], "parameter": 580, "parameter1": 378, "parameter2": 378, "parent": [178, 179, 183, 294, 300, 302, 590], "pareto": [282, 500], "pars": [91, 134, 147, 203, 204, 215, 219, 245, 246, 257, 260, 346, 347, 350, 472, 504, 505, 591], "parse_auto_slim_config": [164, 580], "parse_last_linear": 185, "parse_last_linear_tf": 185, "parse_not_to_prun": 299, "parse_saved_model": [134, 472], "parse_to_prun": [185, 299], "parse_to_prune_tf": 185, "parse_tune_config": 2, "parse_valid_pruner_typ": 176, "parsedecodebert": [203, 245], "parsedecodecoco": [204, 246], "parsedecodeimagenet": [215, 257, 591], "parsedecodeimagenettransform": [215, 257], "parsedecodevoctransform": [219, 260], "parserfactori": 344, "part": [147, 164, 173, 298, 300, 499, 537, 542, 556, 559, 569, 571, 580, 584, 589, 593], "parti": [271, 324, 498, 538, 583], "partial": [177, 580, 583], "particip": [497, 571], "particular": [502, 580, 586], "partit": [529, 580], "partner": 581, "parzen": 592, "pascal": [205, 247], "paser_cfg": 147, "pass": [63, 134, 140, 142, 153, 328, 359, 411, 472, 477, 478, 492, 493, 498, 499, 503, 520, 524, 527, 528, 529, 535, 540, 541, 562, 569, 580, 582, 583, 585, 589, 594], "past": [503, 586], "pat": 581, "patch": [548, 561], "patch_path": 548, "path": [91, 126, 134, 143, 147, 166, 181, 185, 203, 204, 205, 219, 245, 246, 247, 260, 261, 264, 265, 266, 277, 278, 279, 281, 290, 295, 299, 301, 303, 304, 317, 329, 337, 341, 358, 359, 375, 379, 472, 474, 479, 488, 490, 493, 499, 500, 503, 524, 526, 529, 535, 540, 541, 542, 543, 547, 550, 561, 564, 566, 569, 574, 575, 576, 579, 586, 591, 594], "path_to_cert": 563, "path_to_private_kei": 563, "path_to_sav": 482, "pathlib": 341, "pathlik": [142, 477], "patient": 527, "pattern": [44, 45, 47, 64, 82, 93, 94, 95, 117, 122, 147, 162, 163, 166, 167, 173, 174, 175, 176, 178, 180, 182, 188, 189, 205, 247, 288, 289, 291, 296, 300, 317, 375, 392, 393, 395, 412, 429, 435, 436, 437, 458, 463, 503, 522, 524, 533, 536, 541, 562, 579, 582, 589, 592, 595], "pattern_analyz": 165, "pattern_detector": 138, "pattern_lock": [176, 188, 189, 286], "pattern_lst": 145, "pattern_registri": 293, "pattern_to_intern": [317, 375], "pattern_to_path": [317, 375], "pattern_typ": 293, "patternbas": 293, "patternlockprun": [288, 300], "patternmha": 170, "patternninm": 298, "patternnxm": 298, "pb": [153, 188, 189, 329, 337, 359, 474, 520, 529, 534, 541, 543, 563, 566, 574, 590, 595], "pbound": [307, 363], "pc": 498, "pd": 564, "pdf": 4, "peak": [339, 578], "pegasu": 595, "peleenet": 595, "penal": 580, "penalti": [268, 269, 321, 322, 540], "pend": [532, 570], "pentium": 538, "peopl": 583, "pep": [378, 522], "per": [30, 31, 32, 151, 153, 188, 189, 220, 341, 487, 503, 505, 523, 569, 580, 585, 586, 595], "per_channel": [99, 440, 504, 505, 533, 583, 594], "per_channel_symmetr": 505, "per_tensor": [504, 505, 533, 583, 594], "per_tensor_symmetr": 505, "percdamp": [32, 586], "percent": 32, "percentag": [273, 326, 521, 586, 594], "percentil": [4, 32, 126, 379, 521], "percentilecalibr": 4, "perceptron": 580, "perchannel": 32, "perf": 571, "perform": [82, 126, 153, 182, 188, 189, 203, 215, 220, 245, 257, 266, 290, 295, 303, 310, 328, 339, 359, 364, 368, 379, 429, 498, 499, 500, 503, 504, 520, 524, 525, 526, 528, 530, 531, 536, 537, 540, 541, 542, 543, 544, 546, 550, 552, 555, 561, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 594, 595], "performance_onli": [33, 34, 35, 93, 117, 122, 133, 188, 381, 382, 383, 435, 458, 463, 471, 541], "perm": [219, 260, 591], "perman": [164, 497, 580], "permiss": 497, "permut": [219, 260, 591], "perplex": 595, "persist": 543, "person": [497, 581], "perspect": 592, "phase": [148, 500, 541, 580, 583, 585, 592], "phi": 538, "philip": 580, "philosophi": 583, "physic": [153, 220, 497, 520, 569], "pick": [556, 559, 562], "pickl": [140, 142, 477, 478], "pickle_load_arg": [142, 477], "pickle_modul": [142, 163, 477], "pickle_protocol": 163, "pickleerror": [140, 478], "pickler": [140, 478], "pickletool": [140, 478], "picklingerror": [140, 478], "piec": [218, 259, 268, 321, 540, 586], "pil": [219, 260, 591], "pillow": 564, "pin": [523, 554, 558], "pin_memori": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523], "ping_memori": [541, 583], "pip": [502, 526, 529, 532, 534, 537, 546, 549, 554, 556, 558, 559, 563, 564, 565, 566, 587], "pip3": 555, "pipe": 522, "pipelin": [155, 261, 278, 279, 304, 498, 528, 541, 579], "piqa": 595, "pixel": 591, "pkg": [556, 559], "pkl": [493, 565], "pl": [268, 321], "place": [528, 537, 574, 580, 590, 592], "placehold": [43, 201, 243, 391, 522], "placeholder_dtyp": 166, "placeholder_shap": 166, "plai": [330, 474, 581, 586, 589], "plan": 536, "platform": [493, 502, 536, 544, 552, 571, 581, 583], "platinum": 595, "pleas": [30, 137, 151, 162, 170, 171, 172, 180, 181, 188, 189, 203, 204, 205, 208, 245, 246, 247, 250, 298, 300, 301, 328, 341, 359, 378, 499, 500, 501, 502, 503, 520, 521, 524, 528, 529, 531, 537, 539, 540, 542, 544, 545, 549, 552, 568, 569, 570, 580, 583, 585, 586, 587, 588, 589, 592, 593], "plu": 542, "plug": [522, 581], "plugin": [544, 562], "png": [205, 247, 524], "point": [31, 32, 215, 257, 272, 273, 282, 307, 325, 326, 363, 493, 540, 561, 566, 567, 583, 586, 589, 591, 592], "polici": [306, 310, 360, 362, 368, 497, 502, 594, 596], "polit": 497, "pollut": 522, "pont": 537, "pool": [17, 571], "pooloper": 24, "poor": [564, 590], "pop": [561, 571], "popen": 522, "popul": 500, "popular": [267, 320, 495, 502, 503, 504, 521, 527, 530, 531, 534, 539, 541, 580, 583, 586, 592, 593], "popularli": 540, "port": [53, 54, 56, 401, 402, 404, 563, 570], "portabl": [140, 478], "portion": [203, 245], "pose": 584, "posit": [219, 260, 497, 540, 544, 569, 574, 575, 576], "possibl": [142, 220, 477, 526, 563, 579, 580, 584, 585, 592], "post": [30, 83, 84, 151, 180, 189, 192, 193, 233, 234, 341, 359, 430, 431, 497, 502, 503, 504, 526, 528, 529, 531, 536, 537, 544, 550, 561, 571, 580, 581, 584, 586, 589, 590, 592], "post_batch": 2, "post_hostconst_convert": [81, 428], "post_node_nam": [63, 411], "post_quantized_op_cs": [81, 428], "post_training_auto_qu": 592, "post_training_dynamic_qu": [541, 582, 592], "post_training_static_qu": [188, 524, 541, 582, 592], "postcompressionutil": 167, "postcseoptim": [84, 431], "posterior": 592, "postfix": [75, 76, 422, 423], "posthostconstconvert": [83, 430], "postposttrainingquantconfig": 585, "postprocess": [188, 189, 216, 219, 223, 260, 328, 359, 485, 503, 541, 590, 591], "postprocess_cfg": 485, "postprocess_cl": [217, 227, 541], "posttrainingquantconfig": [188, 189, 359, 499, 502, 505, 523, 526, 531, 534, 540, 541, 543, 563, 564, 565, 566, 583, 584, 585, 586, 588, 589, 592], "potenti": [500, 526], "power": [527, 541, 555, 581], "powersav": 547, "pp": 580, "pr": [498, 523, 540, 556, 559, 587], "pre": [65, 102, 143, 166, 192, 193, 203, 233, 234, 245, 329, 359, 413, 443, 479, 482, 522, 524, 527, 528, 541, 549, 566, 580, 581, 583, 586, 590, 592], "pre_batch": 2, "pre_node_nam": [63, 411], "pre_optim": [62, 410], "pre_post_process_quant": [188, 189, 583], "pre_process": 529, "preced": [268, 321, 589, 592], "precis": [136, 188, 189, 192, 193, 233, 234, 266, 273, 275, 276, 303, 305, 317, 326, 328, 329, 339, 361, 364, 375, 381, 493, 502, 503, 504, 510, 520, 521, 528, 529, 533, 536, 544, 550, 551, 552, 581, 582, 583, 586, 589, 592, 593], "pred": [134, 275, 328, 472, 540], "pred_list": [275, 328], "pred_text": [219, 260], "predict": [134, 219, 224, 260, 268, 272, 273, 275, 321, 325, 326, 328, 359, 472, 500, 527, 540, 552, 586, 589, 590, 591], "predictor": 500, "prefer": [153, 266, 303, 359, 580, 586], "prefix": [134, 136, 142, 143, 146, 147, 153, 472, 477, 479, 544, 549, 590], "preoptim": [65, 413], "prepar": [2, 32, 147, 499, 524, 529, 534, 563, 574, 575, 576, 580, 583], "prepare_compress": [188, 189, 482, 499, 527, 528, 541, 579, 580, 583], "prepare_dataload": 2, "prepare_dataset": 566, "prepare_input": 32, "prepare_model": 2, "prepare_model_data": 2, "prepare_prun": [163, 580], "preprint": [521, 580, 586, 589], "preprocess": [147, 188, 189, 203, 219, 245, 260, 377, 485, 529, 591], "preprocess_user_cfg": 377, "present": [53, 54, 56, 401, 402, 404, 526, 569, 581, 589], "preserv": [162, 521, 580, 586], "press": 562, "pretrain": [488, 544, 550], "pretrained_model_name_or_path": [141, 143, 479], "prettyt": 493, "preval": 586, "previou": [185, 504, 505, 541, 580, 587, 589, 590, 592, 593, 595], "previous": 523, "primari": [521, 592], "primit": [142, 477], "print": [63, 137, 166, 275, 328, 378, 411, 493, 529, 540, 541, 563, 564, 580, 589, 592], "print_iter": 166, "print_op_list": 493, "print_tabl": 493, "printer": 493, "prior": [2, 74, 421, 592], "prioriti": [522, 572], "privat": 497, "prob": 499, "probabl": [4, 188, 189, 487, 586], "problem": [140, 203, 245, 275, 328, 478, 540, 542, 562], "proce": [174, 175, 180], "procedur": [500, 580, 592], "proceed": 589, "process": [102, 126, 137, 153, 154, 168, 173, 174, 175, 181, 183, 185, 188, 189, 192, 193, 203, 204, 205, 215, 219, 220, 233, 234, 245, 246, 247, 257, 260, 298, 300, 302, 306, 307, 329, 359, 360, 362, 363, 379, 443, 482, 492, 493, 500, 503, 504, 505, 521, 523, 524, 527, 528, 529, 531, 541, 545, 566, 568, 569, 571, 579, 580, 583, 584, 586, 589, 590, 591, 594], "process_and_check_config": [185, 299], "process_config": [185, 299], "process_weight_config": 185, "process_yaml_config": 185, "processor": [502, 539, 542, 569, 581, 583, 585], "produc": 527, "product": [162, 502, 536, 542, 544, 545, 561, 567, 581, 583, 588, 592], "profession": 497, "profil": [153, 189, 320], "profilerfactori": [351, 352, 356], "profilingpars": 347, "profilingresult": 348, "program": [502, 529, 538, 544, 561], "programm": [546, 552, 561], "progress": [31, 176, 205, 247, 555, 561, 563, 580, 583], "project": [219, 260, 496, 497, 498, 567, 581, 588, 592, 596], "promis": [528, 541, 580], "prompt": 529, "prone": 580, "propag": [2, 86, 433], "properli": 569, "properti": [203, 245, 377, 538], "proport": [275, 328], "propos": [500, 503, 527, 542, 586, 589], "protect": 586, "protected_nod": [66, 414], "proto": [215, 219, 257, 260, 591], "protobuf": [91, 337, 474, 564], "prototyp": 499, "prove": [521, 586, 589], "provid": [30, 31, 32, 88, 91, 96, 166, 192, 193, 219, 233, 234, 260, 266, 271, 290, 295, 303, 304, 324, 329, 340, 341, 359, 438, 482, 486, 488, 500, 502, 503, 504, 505, 520, 523, 526, 528, 529, 530, 536, 537, 539, 540, 541, 542, 543, 544, 548, 552, 555, 561, 562, 563, 569, 570, 580, 582, 583, 586, 589, 590, 592, 593, 594, 595], "proxi": 499, "prune": [155, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 188, 189, 229, 230, 267, 284, 285, 287, 288, 289, 293, 295, 296, 298, 299, 300, 302, 304, 493, 502, 529, 530, 533, 534, 536, 579, 581, 593, 594], "prune_conf": 541, "prune_config": [185, 299], "prune_domain": 582, "prune_typ": [582, 594], "prune_util": 296, "pruner": [284, 285, 286, 287, 288, 290, 295, 296, 298, 301, 541, 580, 594], "pruner2": 580, "pruner_class": 180, "pruner_info": [181, 301], "pruner_legaci": 267, "pruner_registri": 289, "pruners_info": 185, "pruning_class": 181, "pruning_config": [188, 189, 541, 580], "pruning_end": 580, "pruning_frequ": [173, 188, 189, 541, 580], "pruning_func": 541, "pruning_op_typ": [188, 189, 541, 580], "pruning_pattern": 580, "pruning_recip": 267, "pruning_scop": [188, 189, 541, 580], "pruning_start": 580, "pruning_typ": [188, 189, 541, 580], "pruning_v2": 267, "pruningcallback": 155, "pruningconf": [290, 295], "pruningconfig": 482, "pruningcriterion": [162, 184], "pruningschedul": 183, "pseudo": [192, 193, 233, 234, 359, 482, 586, 590], "pt": [142, 477, 492, 537, 543, 565, 581, 583, 585, 586], "pt_fp32_model": 265, "pt_int8_model": 265, "ptq": [189, 359, 499, 526, 529, 536, 541, 566, 583, 589, 590, 592], "ptq_static": [526, 565], "public": [378, 497, 556, 559], "publish": [497, 538, 539, 542, 562, 589], "pull": [53, 54, 56, 401, 402, 404], "punct_nondigit_r": [268, 321], "punctuat": [218, 259, 268, 273, 321, 326], "punish": 595, "pure": [290, 295, 580], "purif": 581, "purpos": [533, 542, 561, 563, 582, 583], "push": [498, 580, 586, 589], "put": [142, 205, 247, 477, 524, 527], "py": [4, 134, 137, 153, 173, 188, 189, 269, 271, 272, 273, 300, 322, 324, 325, 326, 378, 472, 499, 503, 522, 526, 529, 537, 541, 546, 548, 549, 550, 556, 559, 563, 565, 566, 568, 569, 571, 572, 574, 575, 576, 583, 587, 590], "pycocotool": [271, 324, 532, 537], "pyhessian": 137, "pylanc": 522, "pylint": 498, "pyobject": 532, "pypi": [537, 556, 559], "pypi_token": [556, 559], "pyproject": [556, 559], "pytest": 498, "python": [4, 61, 134, 140, 142, 205, 223, 247, 267, 320, 378, 409, 472, 477, 478, 493, 495, 499, 502, 522, 524, 526, 529, 532, 537, 541, 546, 552, 555, 561, 565, 566, 568, 569, 571, 574, 576, 580, 581, 591], "python3": 532, "pythonmultiheadattentionprun": 177, "pytorch": [156, 158, 159, 163, 166, 169, 172, 173, 176, 181, 187, 188, 189, 202, 203, 205, 208, 212, 219, 221, 226, 228, 244, 245, 247, 250, 254, 260, 265, 266, 275, 276, 296, 298, 301, 303, 311, 328, 329, 338, 359, 369, 486, 493, 498, 499, 500, 502, 503, 504, 505, 521, 522, 523, 527, 528, 530, 533, 536, 537, 539, 541, 542, 543, 544, 546, 549, 550, 551, 552, 561, 563, 572, 575, 576, 580, 581, 582, 586, 587, 589, 592, 594], "pytorch_aliblad": 551, "pytorch_amp": 551, "pytorch_channels_last": [548, 551], "pytorch_cpu": 505, "pytorch_dataload": 239, "pytorch_fx": [205, 212, 247, 254, 541, 582], "pytorch_inc_bf16": 551, "pytorch_inc_dynamic_qu": 551, "pytorch_inc_huggingface_optimum_dynam": 551, "pytorch_inc_huggingface_optimum_stat": 551, "pytorch_inc_static_quant_fx": 551, "pytorch_inc_static_quant_ipex": 551, "pytorch_inc_static_quant_ipex_xpu": 551, "pytorch_ipex": [205, 212, 247, 254, 541, 582, 594], "pytorch_ipex_bf16": 551, "pytorch_ipex_fp32": 551, "pytorch_ipex_int8_dynamic_qu": 551, "pytorch_ipex_int8_static_qu": 551, "pytorch_jit_script": [548, 551], "pytorch_jit_script_ofi": 551, "pytorch_jit_trac": 551, "pytorch_jit_trace_ofi": 551, "pytorch_lightning_bf16_cpu": 551, "pytorch_prun": [181, 267], "pytorch_torchdynamo_jit_script": 551, "pytorch_torchdynamo_jit_script_ofi": 551, "pytorch_torchdynamo_jit_trac": 551, "pytorch_torchdynamo_jit_trace_ofi": 551, "pytorchalignimagechannel": [219, 260], "pytorchbasemodel": 338, "pytorchbasepattern": [168, 182], "pytorchbaseprun": 173, "pytorchbasicprun": 174, "pytorchbertdataset": [203, 245], "pytorchblockmaskprun": 175, "pytorchcifar10": [205, 247], "pytorchcifar100": [205, 247], "pytorchcriterion": [156, 221], "pytorchcropresizetransform": [219, 260], "pytorchcrossentropyloss": [156, 221], "pytorchdataload": [200, 242], "pytorchdataset": [205, 247], "pytorchfashionmnist": [205, 247], "pytorchfilt": [212, 254], "pytorchfxmodel": 338, "pytorchimagenetraw": [208, 250], "pytorchintermediatelayersknowledgedistillationloss": [156, 221], "pytorchintermediatelayersknowledgedistillationlosswrapp": [156, 221], "pytorchknowledgedistillationloss": [156, 221, 541], "pytorchknowledgedistillationlosswrapp": [156, 221], "pytorchloss": [275, 328], "pytorchmetr": [275, 328], "pytorchmnist": [205, 247], "pytorchmodel": [284, 285, 287, 288, 289, 338], "pytorchmxnettransform": [219, 260], "pytorchmxnetwrapdataset": [205, 247], "pytorchmxnetwrapfunct": [205, 219, 247, 260], "pytorchnormalizetransform": [219, 260], "pytorchoptim": [158, 226], "pytorchpatternlockprun": 178, "pytorchpatternninm": 171, "pytorchpatternnxm": 172, "pytorchprogressiveprun": 179, "pytorchretrainfreeprun": 180, "pytorchselfknowledgedistillationloss": 156, "pytorchselfknowledgedistillationlosswrapp": 156, "pytorchsgd": [158, 226], "pytorchtransform": [219, 260], "pytorchtranspos": [219, 260], "q": [31, 32, 93, 95, 117, 435, 437, 458, 586, 589], "q_conf": 528, "q_config": [29, 147, 265, 503], "q_dataload": [192, 193, 233, 234, 305, 306, 307, 308, 310, 311, 312, 313, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 535, 592], "q_func": [192, 193, 233, 234, 305, 306, 307, 308, 310, 311, 312, 313, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 503, 504, 541, 592], "q_hook": [192, 193, 233, 234, 305, 306, 307, 308, 310, 311, 312, 313, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371], "q_max": 589, "q_min": 589, "q_model": [137, 141, 189, 277, 359, 499, 523, 524, 526, 529, 531, 534, 535, 540, 541, 543, 563, 564, 583, 584, 585, 586], "q_weight": 32, "q_x": 589, "qa": [272, 273, 325, 326, 502], "qactivationoper": 6, "qargmaxoper": 7, "qas_id": [219, 260], "qat": [98, 146, 189, 277, 337, 439, 474, 528, 529, 536, 541, 583], "qat_clone_funct": [102, 443], "qat_op_name_dict": 189, "qattent": 8, "qattentionoper": 8, "qbinari": 9, "qbinaryoper": 9, "qconcat": 10, "qconcatoper": 10, "qconfig": [2, 147, 492, 586, 590], "qconvoper": 11, "qdirect": 12, "qdirectoper": 12, "qdq": [30, 73, 98, 99, 128, 147, 188, 189, 263, 264, 265, 439, 440, 503, 526, 531, 536, 551, 552, 583, 587, 589], "qdq_enabl": [34, 382], "qdq_op_fp32_bia": 189, "qdq_op_fp32_bias_qdq": 189, "qdq_op_int32_bia": 189, "qdq_tensor": 32, "qembedlayernorm": 13, "qembedlayernormalizationoper": 13, "qgather": 14, "qgatheroper": 14, "qgemm": 16, "qgemmoper": 16, "qglobalaveragepooloper": 15, "qintegerop": [536, 583], "qkv": 177, "qkv_modul": 177, "qkv_name": 177, "qlinear": [189, 205, 212, 247, 254, 275, 328, 503, 551], "qlinear2qdq": 262, "qlinearaveragepool": 24, "qlinearconv": 11, "qlinearglobalaveragepool": 15, "qlinearmatmul": 19, "qlinearop": [263, 526, 536, 552, 583, 595], "qlora": 586, "qmatmuloper": 19, "qmax": 147, "qmaxpool": 20, "qmaxpooloper": 20, "qmin": 147, "qmodel": 137, "qnli": [203, 245, 524, 540, 595], "qop_registri": 22, "qoper": [6, 22, 188, 189, 531, 564], "qpad": 23, "qpadoper": 23, "qpooloper": 24, "qqp": [203, 245, 524, 540, 595], "qresiz": 26, "qresizeoper": 26, "qscheme": 505, "qsplit": 27, "qsplitoper": 27, "qsym_model": 2, "qt_config": [34, 382], "qtensor_to_tensor": 2, "qtype": [30, 31, 503], "quala": [502, 581], "qualiti": [268, 321, 522], "quan": 565, "quan_model": [134, 472], "quant": [32, 134, 147, 188, 189, 317, 340, 375, 381, 472, 499, 522, 539, 541, 583], "quant_aware_train": 582, "quant_config": 381, "quant_dequant_data": 30, "quant_format": [188, 189, 265, 531, 564], "quant_level": [188, 189, 564, 586, 589, 592], "quant_max": 505, "quant_min": 505, "quant_mod": [33, 317, 375, 381, 504, 505], "quant_mode_from_pattern": [317, 375], "quant_opt": 377, "quant_tensor": 32, "quant_typ": 377, "quantconf": 303, "quantformat": 31, "quantif": [586, 589], "quantil": 592, "quantiti": 526, "quantiz": [2, 4, 5, 30, 31, 32, 34, 35, 74, 78, 80, 82, 85, 93, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 139, 143, 144, 147, 151, 153, 154, 155, 188, 189, 192, 193, 215, 222, 229, 233, 234, 257, 265, 266, 267, 277, 304, 310, 316, 320, 340, 341, 364, 366, 368, 377, 379, 380, 381, 476, 479, 480, 481, 482, 483, 487, 488, 492, 493, 503, 510, 522, 523, 524, 529, 530, 533, 535, 536, 540, 543, 544, 549, 551, 552, 555, 568, 570, 571, 573, 579, 581, 587, 590, 591, 592, 593, 594], "quantizable_nod": 2, "quantizable_op": 147, "quantization_aware_training_conf": 541, "quantization_cfg": 503, "quantization_param": 29, "quantizationawaretrainingcallback": 155, "quantizationawaretrainingconfig": [188, 189, 482, 499, 528, 531, 541, 583, 585, 592], "quantizationconfig": 188, "quantizationmod": 31, "quantize_config": [100, 441, 504], "quantize_data": 31, "quantize_data_per_channel": 31, "quantize_data_with_scale_zero": 31, "quantize_graph": 97, "quantize_graph_bas": [98, 439], "quantize_graph_bn": [98, 439], "quantize_graph_common": 97, "quantize_graph_concatv2": [98, 439], "quantize_graph_conv": [98, 439], "quantize_graph_for_intel_cpu": [98, 439], "quantize_graph_matmul": [98, 439], "quantize_graph_pool": [98, 439], "quantize_help": [100, 441], "quantize_lay": [100, 441], "quantize_layer_add": [103, 444], "quantize_layer_bas": [103, 444], "quantize_layer_bn": [103, 444], "quantize_nod": 265, "quantize_nparrai": 31, "quantize_per_channel": 589, "quantize_per_tensor_absmax": 589, "quantize_rang": 31, "quantize_recip": [102, 443], "quantize_sym_model": 2, "quantize_wrapp": [100, 441], "quantizeconfig": [101, 102, 442, 443], "quantized_data": 31, "quantized_dict": 137, "quantized_model": [502, 570, 574, 575], "quantized_nod": [93, 435], "quantized_value_typ": 31, "quantizedconcatv2": [110, 120, 451, 461], "quantizedconv": [77, 78, 424, 425], "quantizeddeconv": [77, 424], "quantizediniti": 31, "quantizedinput": [215, 257, 591], "quantizedmatmul": [79, 80, 426, 427], "quantizedmatmulwithbiasanddequant": [80, 427], "quantizedrnnconvert": [85, 432], "quantizedvalu": 31, "quantizedvaluetyp": 31, "quantizegraph": [118, 459], "quantizegraphbas": [118, 459], "quantizegraphforintel": [122, 463], "quantizegraphhelp": [125, 466], "quantizelay": [106, 447], "quantizelayeradd": [105, 446], "quantizelayerbas": [106, 447], "quantizelayerbatchnorm": [107, 448], "quantizelinear": 31, "quantizenodebas": [118, 459], "quantizev2": [84, 431], "quantizewrapp": [102, 108, 443, 449], "quantizewrapperbas": [108, 449], "quantiztaion": [188, 189], "quantopt": 377, "quanttyp": [31, 377], "queri": [2, 33, 134, 147, 166, 177, 188, 189, 381, 472, 504, 505, 571, 583], "query_framework_cap": 504, "query_fused_pattern": 503, "query_fw_cap": [503, 505], "query_id": 569, "query_layer_nam": 177, "query_quantizable_nod": 2, "query_task_statu": 571, "querybackendcap": [503, 504], "question": [219, 260, 272, 273, 325, 326, 497, 498, 502, 503, 537, 544, 568, 580, 589, 591, 595], "question_text": [219, 260], "queue": 568, "quick": [533, 542, 580, 593, 594], "quickli": [539, 592, 593], "quint8": 31, "quit": 580, "qweight_config_path": 586, "r": [31, 129, 152, 467, 526, 537, 562, 563, 565, 566, 568, 569, 583, 595], "r1": [134, 472], "r34": 499, "race": 497, "rais": [53, 54, 56, 91, 140, 142, 147, 163, 169, 176, 185, 271, 298, 299, 300, 324, 329, 378, 401, 402, 404, 477, 478, 502, 522, 563, 580, 581], "ram": [142, 477], "ran": [155, 261], "rand": [544, 589], "randn": [189, 531], "random": [42, 134, 188, 189, 215, 219, 257, 260, 283, 307, 309, 363, 367, 390, 472, 493, 500, 541, 580, 582, 591, 594], "random_crop": [215, 257, 591], "random_flip_left_right": [215, 257, 591], "random_se": [188, 189, 307, 363, 541, 594], "randomcrop": 591, "randomcroptftransform": [219, 260], "randomcroptransform": [219, 260], "randomhorizontalflip": [219, 260, 541, 591], "randomli": [219, 260, 283, 307, 363, 500, 589, 591, 592], "randomresizedcrop": [541, 591], "randomresizedcropmxnettransform": [219, 260], "randomresizedcroppytorchtransform": [219, 260], "randomresizedcroptftransform": [219, 260], "randomresizedcroptransform": [219, 260], "randomsearch": 283, "randomst": [307, 363], "randomtunestrategi": [312, 370], "randomverticalflip": [219, 260, 591], "rang": [206, 207, 219, 248, 249, 260, 378, 473, 482, 488, 502, 503, 505, 521, 524, 526, 527, 528, 529, 541, 564, 566, 579, 580, 583, 586, 589, 591], "rank": 529, "rapid": [537, 539], "rate": [541, 580, 583], "rather": [535, 586], "ratio": [32, 129, 152, 168, 173, 185, 188, 189, 215, 219, 257, 260, 300, 467, 524, 541, 564, 580, 591, 595], "ratiospars": 595, "raw": [31, 153, 204, 208, 211, 246, 250, 253, 310, 368, 540, 565, 592], "raw_cmd": 153, "raw_dir": 566, "raw_imag": [205, 247], "rb": [142, 477], "rcnn": 531, "re": [561, 567, 586], "reach": [168, 183, 188, 189, 302, 498, 523, 563, 580, 592], "read": [91, 134, 142, 208, 219, 250, 260, 299, 472, 477, 524, 585, 588], "read_csv": 564, "read_graph": [134, 472], "read_squad_exampl": [219, 260], "read_tensorflow_node_attr": 91, "readabl": 522, "readi": [567, 580], "readlin": [142, 477], "readm": [529, 574], "real": [31, 206, 222, 248, 473, 504, 521, 529, 563, 570, 581, 583], "realdiv": [52, 55, 400, 403], "realiz": [529, 578, 585, 588], "rearrang": [32, 180, 580, 586], "reason": [222, 497, 504, 523, 566, 586, 590, 592], "rebuild": [134, 472, 545, 554, 558], "rebuilt": [554, 558], "recal": [273, 275, 326, 328], "receiv": [571, 588], "recent": [541, 542], "recip": [34, 166, 188, 189, 266, 303, 382, 502, 541, 584, 586, 589, 592], "recipe_sampl": 166, "recipesearch": 166, "recogn": [268, 321, 592], "recognit": [529, 531, 580, 590], "recognitionimagenet": 595, "recommend": [224, 328, 502, 503, 524, 533, 552, 555, 560, 562, 580, 582, 592], "recommendation_system": [188, 189], "reconstruct": [134, 472, 581], "reconstruct_saved_model": [134, 472], "record": [137, 147, 156, 159, 203, 204, 205, 211, 221, 228, 245, 246, 247, 253, 493, 524, 566, 586, 588, 590, 592], "record_output": [159, 228], "recov": [30, 341, 492, 493, 503, 528], "recover_config": [35, 383], "recover_model_from_json": 492, "rectangl": 584, "recurs": [187, 493], "red": 595, "redpajama": 589, "reduc": [17, 188, 189, 503, 521, 528, 541, 542, 561, 562, 580, 581, 583, 584, 585, 586, 589, 592, 594], "reduce_rang": [3, 29, 30, 188, 189, 505, 582], "reducemax": 25, "reducemin": 25, "reduceminmaxoper": 25, "reduceoper": 25, "reduct": [580, 584, 594], "redund": [77, 79, 424, 426], "ref": [4, 134, 472], "refer": [30, 137, 151, 162, 170, 171, 172, 180, 181, 185, 188, 189, 203, 245, 268, 269, 275, 298, 300, 301, 321, 322, 328, 341, 359, 378, 499, 502, 503, 504, 520, 523, 524, 526, 528, 529, 531, 535, 537, 538, 540, 541, 542, 544, 549, 552, 563, 564, 566, 568, 569, 570, 578, 582, 584, 587, 591, 592], "reference_corpu": [269, 322], "refin": [535, 580], "reflect": [540, 591], "reform": 595, "refresh": [554, 558], "reg": [163, 174, 175, 180, 189], "reg_term": 182, "regard": [497, 585], "regardless": 497, "region": 589, "regist": [4, 22, 140, 142, 148, 156, 158, 162, 163, 168, 169, 173, 176, 181, 182, 183, 184, 205, 212, 219, 221, 226, 247, 254, 260, 275, 282, 289, 293, 298, 300, 302, 313, 316, 328, 339, 371, 377, 477, 478, 490, 500, 503, 522, 524, 529, 540, 541, 562, 578, 589, 592], "register_algo": 522, "register_config": 522, "register_criterion": [162, 184], "register_customer_metr": 328, "register_forward_hook": 590, "register_neural_insights_workload": 490, "register_packag": [142, 477], "register_pattern": [168, 298], "register_prun": [173, 181, 300], "register_reg": 182, "register_schedul": [183, 302], "registercommand": 562, "registr": [148, 205, 212, 219, 247, 254, 260, 293], "registri": [162, 168, 173, 181, 182, 183, 184, 298, 300, 302, 500], "registry_criterion": [156, 221], "regress": [203, 245, 498, 526], "regul": [174, 175, 180], "regular": [182, 268, 299, 321], "regulariz": 182, "reinstal": 532, "reject": 497, "rel": [188, 189, 339, 541, 564, 582, 592, 594, 595], "relat": [167, 182, 261, 271, 290, 295, 298, 324, 377, 485, 505, 544, 568, 569, 580, 594], "relationship": [189, 563], "relaunch": 562, "releas": [502, 537, 550, 552, 554, 558, 560, 572, 575, 576, 596], "relev": [307, 363, 504, 505, 522, 566, 580], "reli": [541, 589], "religion": 497, "reload": [545, 562, 564, 567], "relu": [60, 64, 95, 408, 412, 437, 499, 533, 589, 590], "relu6": [60, 408, 533], "remain": 549, "remaind": 521, "remap": [56, 142, 404, 477], "remot": 561, "remov": [6, 31, 37, 43, 46, 60, 66, 69, 70, 71, 82, 84, 126, 164, 177, 273, 326, 379, 385, 391, 394, 408, 414, 417, 418, 419, 429, 431, 497, 541, 554, 558, 567, 574, 575, 580, 590], "removableactivationoper": 6, "remove_init_from_model_input": 31, "remove_training_nod": [62, 410], "removetrainingnodesoptim": [66, 414], "renam": [67, 415, 587], "rename_batch_norm": [62, 410], "renamebatchnormoptim": [67, 415], "repeat": [526, 592], "repercuss": 497, "replac": [4, 143, 147, 273, 326, 479, 522, 529, 541, 552, 587], "replic": 592, "replica": 592, "repo": [203, 245, 496, 498, 524, 530, 554, 556, 558, 559, 596], "repo_id": [143, 479], "repo_typ": [143, 479], "report": [497, 498, 502, 571, 588], "repositori": [498, 556, 559], "repres": [31, 168, 172, 173, 181, 182, 185, 205, 210, 247, 252, 271, 273, 275, 324, 326, 328, 497, 505, 521, 524, 531, 569, 580, 583, 584, 592], "represent": [31, 140, 478, 497, 499, 521, 528, 580, 583], "requant": [78, 80, 425, 427, 590], "requantize_cfg": 147, "request": [502, 569, 570, 571, 574, 575, 576, 583], "requir": [147, 188, 189, 195, 304, 337, 358, 474, 499, 503, 504, 520, 521, 523, 526, 528, 529, 533, 541, 542, 543, 545, 555, 561, 563, 568, 569, 572, 575, 576, 580, 583, 586, 587, 588, 589, 590, 592, 594], "requisit": 549, "rerang": [133, 471], "rerange_quant": [133, 471], "rerange_quantized_concat": [131, 469], "rerangequantizedconcat": [133, 471], "rerewrit": [37, 385], "resblock": 189, "rescal": [215, 219, 260, 591], "rescalekeraspretraintransform": [219, 260], "rescaletftransform": [219, 260], "rescaletransform": [219, 260], "research": [502, 538, 589, 595], "reserv": [192, 193, 233, 234], "reserve_resourc": 571, "reset": 540, "reset_non_value_to_default": 299, "reset_none_to_default": 185, "reshap": [47, 53, 54, 59, 395, 401, 402, 407, 589], "reshape_in0_ndef": [53, 54, 401, 402], "reshape_in1_ndef": [53, 54, 401, 402], "reshuffl": 523, "resid": [142, 477], "resiz": [17, 203, 204, 215, 219, 245, 246, 257, 260, 524, 591], "resize_method": [215, 257], "resize_shap": [210, 252, 524], "resize_sid": [215, 257, 591], "resizecropimagenet": [529, 591], "resizemxnettransform": [219, 260], "resizeoper": 26, "resizepytorchtransform": [219, 260], "resizetftransform": [219, 260], "resizetransform": [219, 260], "resizewithaspectratio": [215, 257], "resizewithratio": [219, 260, 591], "resnest50": 595, "resnet": [529, 595], "resnet101": 595, "resnet18": [502, 542, 546, 595], "resnet34": [499, 595], "resnet50": [189, 502, 526, 529, 531, 542, 544, 548, 580, 583, 588, 595], "resnet50_fp32_pretrained_model": 529, "resnet50_torchvis": 526, "resnet50_v1": [526, 529, 541], "resnetv2": 595, "resnext101_32x16d_wsl": 595, "resnext101_32x8d": 595, "resolut": 521, "resolv": [499, 501], "resort": 541, "resourc": [527, 568, 571, 592], "respect": [497, 533, 580, 589, 594], "respons": [346, 347, 350, 574, 575, 576, 583], "rest": [147, 568, 569, 574, 575, 576], "restful_api_port": [569, 574, 575, 576], "restor": 586, "restrict": [56, 142, 188, 189, 404, 477, 580, 588], "restructuredtext": 378, "result": [31, 134, 137, 147, 215, 219, 257, 260, 268, 271, 272, 273, 275, 321, 324, 325, 326, 328, 359, 366, 472, 482, 492, 493, 497, 500, 502, 523, 526, 527, 529, 536, 538, 540, 541, 549, 550, 561, 562, 565, 569, 570, 571, 572, 578, 580, 581, 583, 586, 588, 589, 590, 591, 592, 593, 595], "result_monitor_port": [569, 574, 575, 576], "result_path": [570, 574, 575], "resultmonitor": 571, "results_csv_path": 500, "resum": [188, 189, 192, 193, 233, 234, 305, 306, 308, 311, 312, 313, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371], "resume_from": [188, 189, 493], "retain": 521, "retrac": 585, "retrain": [180, 528], "retrain_fre": [162, 176, 580], "retrainfreecriterion": 162, "retrainfreeprun": [180, 181], "retriev": [154, 201, 243, 580], "return": [2, 4, 32, 40, 53, 54, 56, 60, 91, 102, 134, 136, 137, 142, 146, 147, 148, 153, 156, 158, 163, 166, 168, 169, 173, 176, 181, 182, 183, 185, 187, 192, 193, 205, 212, 215, 219, 220, 221, 226, 233, 234, 247, 254, 257, 260, 265, 268, 269, 271, 272, 273, 275, 281, 282, 289, 293, 298, 299, 300, 302, 307, 313, 317, 319, 321, 322, 324, 325, 326, 328, 329, 333, 337, 339, 354, 358, 359, 363, 371, 375, 377, 378, 388, 401, 402, 404, 408, 443, 472, 474, 477, 482, 485, 490, 492, 493, 499, 500, 504, 505, 523, 524, 529, 540, 543, 574, 575, 576, 578, 580, 583, 586, 589, 590, 592], "return_int": 586, "revers": [134, 472, 564], "revert": [311, 319, 369, 377, 592], "reverted_data_typ": [319, 377], "review": [497, 498, 502, 581], "revis": [143, 479], "rewrit": [36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 163, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "rgb": [215, 257], "right": [142, 215, 257, 271, 324, 477, 497, 498, 499, 561, 567, 589, 591], "rmax": [31, 583], "rmin": [31, 583], "rmse": [275, 328, 540, 592], "rnn": [85, 432], "rnn_convert": [81, 428], "rnn_detail": [85, 432], "roberta": [203, 245, 524, 595], "roc": [266, 275, 290, 295, 303, 328], "role": [330, 474, 586, 589], "rollov": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523], "romanian": 580, "root": [166, 203, 204, 205, 208, 245, 246, 247, 250, 275, 328, 524, 529, 540, 541, 594], "root_linear": 167, "root_rank": 529, "roughli": 586, "round": [32, 129, 152, 467, 502, 581, 583, 586, 589], "round_": 589, "round_multipli": 164, "row": [493, 526, 564, 589], "rowi": 32, "rte": [203, 245, 524, 540, 595], "rtn": [32, 147, 522, 584, 586], "rtn_algo_entri": 522, "rtn_arg": [584, 586], "rtn_g32asym": 586, "rtn_quantiz": 32, "rtnw4g32asym": 595, "rtnw4g32sym": 595, "rule": [526, 544, 580], "run": [2, 126, 134, 142, 153, 173, 185, 188, 189, 192, 193, 202, 218, 220, 233, 234, 244, 259, 299, 300, 307, 329, 359, 363, 379, 472, 477, 482, 502, 503, 520, 529, 532, 533, 541, 544, 546, 548, 549, 550, 552, 554, 555, 556, 558, 559, 561, 569, 570, 571, 572, 574, 575, 576, 581, 583, 586, 587, 588, 590, 592, 594], "run_bench": 548, "run_clm": 565, "run_cmd": 592, "run_forward": 2, "run_glu": [549, 550, 572, 575, 576], "run_glue_optim": 549, "run_inst": 153, "run_quant": 590, "run_tun": 566, "run_tuning_dump_tensor": 590, "runner": [562, 567], "runs_v3": 590, "runtim": [498, 502, 503, 504, 506, 523, 526, 530, 533, 536, 542, 546, 551, 552, 582, 586, 587, 592], "rw": 595, "s1": 592, "s2": 592, "s3": 592, "s4": 592, "s5": 592, "s6": 592, "s7": 592, "s8": 265, "sa_optim": 160, "sacrif": 581, "safe": 498, "sagemak": [544, 552], "sai": 549, "salient": [32, 580, 586], "same": [69, 127, 134, 180, 189, 203, 219, 245, 260, 271, 324, 380, 417, 472, 493, 503, 505, 520, 523, 524, 527, 529, 533, 541, 545, 549, 554, 558, 580, 582, 583, 586, 589, 590, 591, 592], "sampl": [32, 63, 147, 188, 189, 197, 201, 203, 204, 205, 215, 219, 238, 243, 245, 246, 247, 257, 260, 275, 282, 307, 328, 363, 411, 500, 523, 524, 530, 536, 562, 583, 586, 589, 591, 592, 594, 595], "sampler": [194, 196, 200, 202, 222, 235, 237, 239, 242, 244, 316, 374, 473, 523, 529], "sampling_s": [541, 594], "samsum": 595, "sapphir": [537, 539], "satisfactori": 566, "satisfi": [202, 244, 526, 537, 567], "satur": 591, "save": [91, 134, 141, 142, 163, 185, 188, 189, 205, 247, 264, 265, 304, 337, 359, 472, 474, 477, 482, 483, 488, 493, 499, 503, 535, 541, 542, 543, 545, 549, 554, 558, 564, 569, 574, 575, 576, 579, 583, 584, 586, 589], "save_for_huggingface_upstream": [488, 541], "save_path": [134, 264, 265, 472, 503, 543], "save_protobuf": 91, "save_to_disk": 503, "saved_dir": [488, 586], "saved_model": [134, 277, 472, 584], "saved_model_sess": [337, 474], "saved_model_tag": [337, 474], "saved_result": [543, 565, 586], "savedmodel": [329, 337, 359, 474, 595], "scalabl": [502, 537, 539, 542, 581, 583, 585], "scalar": [192, 193, 233, 234, 329, 359, 482, 540, 583, 592], "scale": [4, 31, 32, 86, 127, 129, 144, 147, 151, 152, 215, 219, 257, 260, 380, 433, 467, 481, 583, 586, 588, 589, 591, 592], "scale_c": [129, 152, 467], "scale_dtyp": [488, 586], "scale_info": 493, "scale_nam": 31, "scale_propag": [81, 428], "scale_valu": 31, "scalepropagationtransform": [86, 433], "scales_per_op": [127, 380], "scaling_governor": 547, "scan": [498, 502], "scenario": [503, 520, 527, 541, 580, 586], "scene": 580, "schedul": [163, 173, 174, 175, 180, 182, 188, 189, 267, 296, 300, 541, 568, 569, 571, 579], "schedule_task": 571, "schema": 90, "scheme": [30, 31, 32, 144, 147, 481, 503, 504, 505, 523, 533, 552, 586, 592, 594], "scienc": 537, "scipi": [307, 363], "scope": [134, 472, 498, 504, 541], "score": [162, 168, 173, 177, 184, 188, 189, 268, 269, 271, 272, 273, 275, 300, 321, 322, 324, 325, 326, 328, 366, 485, 499, 540, 564, 578, 580, 588, 592], "script": [166, 268, 269, 272, 273, 321, 322, 325, 326, 498, 502, 529, 536, 544, 548, 551, 552, 555, 572, 574, 581], "script_url": [572, 574, 575, 576], "sdist": [556, 559], "se_resnext50_32x4d": 595, "seamlessli": [568, 580, 592], "search": [134, 166, 180, 189, 192, 193, 233, 234, 266, 268, 278, 281, 282, 283, 303, 307, 321, 363, 472, 493, 502, 522, 536, 540, 544, 545, 555, 580, 581, 586, 589, 590, 592, 593], "search_algorithm": [189, 280, 500], "search_result": 500, "search_spac": [189, 278, 281, 282, 283], "searcher": [166, 189, 283], "searching_result": 166, "sec": 595, "second": [50, 142, 167, 188, 189, 203, 245, 364, 398, 477, 493, 526, 541, 554, 558, 562, 574, 575, 586, 589, 592, 594], "secret": [556, 559], "section": [378, 505, 522, 526, 527, 528, 561, 564, 567, 580, 582, 586, 594], "secur": [140, 478, 502, 563, 581, 596], "sed": 587, "see": [140, 219, 260, 268, 321, 478, 497, 498, 499, 501, 522, 538, 541, 554, 555, 558, 561, 562, 566, 567, 586, 589, 590, 592], "seed": [134, 188, 189, 283, 472, 493, 541, 594], "seek": [142, 477, 586], "seem": 522, "seen": [493, 503], "segment": [203, 245, 269, 271, 322, 324, 498], "segment_id": [219, 260, 541], "select": [182, 185, 189, 203, 245, 488, 499, 500, 521, 536, 537, 561, 580, 583, 586, 590, 592], "self": [49, 147, 166, 188, 189, 339, 397, 503, 504, 523, 524, 536, 540, 563, 588, 590, 592], "selfknowledg": [156, 221], "selfknowledgedistillationloss": [156, 221], "selfknowledgedistillationlossconfig": [189, 527, 541], "selfmhasearch": 166, "semant": [503, 533], "send": [498, 504], "senior": 521, "sensit": [162, 284, 300, 536, 580], "sensitivitybalanc": 595, "sentenc": 522, "sentencepiec": 564, "sep": [502, 581], "separ": [304, 497, 522, 535, 538, 569, 571, 579, 582], "seq_length": [203, 245], "seqev": 564, "seqlen": 502, "seqtyp": 91, "sequenc": [49, 91, 167, 170, 171, 188, 189, 203, 218, 219, 245, 259, 260, 269, 273, 298, 322, 326, 397, 503, 524, 533, 580, 586, 591], "sequencediagram": [504, 505, 571], "sequenti": [201, 243, 304, 306, 360, 362, 592], "sequentialsampl": [201, 243], "seri": [215, 257, 502, 537, 541, 591], "serial": [140, 142, 477, 478], "serv": [189, 337, 474, 569, 574, 575, 576], "serve_log": [569, 574, 575, 576], "server": [561, 563, 566, 569, 574, 575, 576], "servic": [502, 561, 568, 581], "sess": [134, 337, 472, 474], "session": [32, 134, 202, 244, 337, 472, 474, 541, 590], "sessionopt": 354, "set": [2, 31, 37, 82, 91, 101, 134, 142, 147, 153, 158, 185, 188, 189, 192, 193, 194, 203, 205, 208, 219, 220, 225, 226, 233, 234, 235, 245, 247, 250, 260, 271, 277, 290, 295, 299, 304, 324, 328, 329, 337, 358, 359, 378, 385, 429, 442, 472, 473, 474, 477, 482, 490, 493, 497, 500, 502, 504, 520, 523, 524, 527, 529, 531, 533, 535, 536, 537, 540, 541, 542, 544, 546, 548, 562, 563, 564, 565, 566, 567, 571, 574, 580, 582, 583, 586, 588, 589, 592, 594], "set_all_env_var": [153, 220], "set_backend": 225, "set_eager_execut": 358, "set_env_var": [153, 220], "set_epoch": 529, "set_modul": 147, "set_nam": 91, "set_opt": 564, "set_random_se": [188, 189, 493], "set_resume_from": [188, 189, 493], "set_tensor": 503, "set_tensorboard": [188, 189, 493], "set_workspac": [188, 189, 493], "setter": 222, "settings_recommend": 522, "setup": [502, 526, 533, 537, 556, 559, 563, 565, 566, 568, 569, 580], "setuptool": 564, "sever": [125, 183, 219, 260, 302, 304, 466, 500, 526, 527, 528, 536, 541, 542, 554, 558, 569, 580, 582, 584, 589, 591, 592, 594], "sex": 497, "sexual": 497, "sf": 532, "sgd": [158, 188, 189, 226, 527, 541, 582, 594], "sh": [566, 590], "shallow": 527, "shape": [31, 32, 91, 134, 168, 206, 207, 215, 219, 248, 249, 257, 260, 271, 324, 472, 473, 502, 524, 533, 534, 541, 563, 564, 586, 589, 591], "shape_overrid": 128, "shard": [143, 479], "share": [31, 32, 68, 84, 95, 127, 380, 416, 431, 437, 532, 533, 586, 589, 592], "share_qdq_y_pattern": [92, 434], "shared_criterion": 589, "shareqdqforitexypatternoptim": [95, 437], "shell": 590, "shen": [538, 580], "shift": [129, 152, 215, 257, 467, 562, 591], "shop": 522, "short": 592, "shortcut": [203, 245, 524], "shorter": [203, 219, 245, 260, 524, 591], "shot": [162, 180, 183, 229, 300, 302, 500, 536, 541, 580, 581, 586], "should": [41, 101, 102, 142, 155, 164, 166, 177, 188, 189, 192, 193, 201, 203, 205, 219, 224, 233, 234, 243, 245, 247, 260, 265, 269, 322, 328, 329, 359, 378, 389, 442, 443, 477, 482, 493, 499, 500, 503, 504, 505, 524, 527, 529, 540, 541, 547, 556, 559, 561, 563, 564, 578, 580, 583, 586, 591, 592, 594], "shouldn": 567, "show": [173, 493, 497, 527, 529, 541, 547, 562, 563, 564, 566, 569, 574, 575, 576, 589, 592, 593], "show_memory_info": 493, "show_nam": [132, 470], "show_op": [132, 470], "shown": [500, 523, 526, 527, 540, 541, 555, 564, 566, 578, 579, 580, 584, 589, 592], "shrink": 580, "shuffl": [194, 196, 200, 202, 222, 235, 237, 242, 244, 473, 523, 541, 583], "shufflenet": 595, "side": [219, 260, 524, 555, 591], "sidebar": 561, "sigma": 526, "sigmoid": 531, "sign": [319, 377, 498, 502, 505, 521, 563, 581, 583, 586, 588], "signatur": [337, 474], "signed_flag": [319, 377], "signifi": 91, "signific": [580, 581, 584, 589], "significantli": [541, 542, 564, 566, 580, 592], "sigopt": [191, 232, 581], "sigopt_api_token": [541, 588, 592], "sigopt_experiment_id": 588, "sigopt_experiment_nam": [541, 588, 592], "sigopt_project_id": [541, 588, 592], "sigopttunestrategi": [192, 233], "similar": [177, 541, 565, 582, 589, 592, 594], "similarli": 589, "simpl": [219, 260, 537, 541, 580, 588, 589, 592], "simple_infer": 147, "simple_progress_bar": 31, "simplest": [500, 521, 547], "simpli": [529, 543, 544, 546, 549, 561, 569], "simplic": 589, "simplifi": [544, 555, 561, 580, 581], "simul": [161, 505], "simultan": [177, 544, 568, 579, 582], "sinc": [188, 189, 266, 268, 290, 295, 303, 321, 527, 531, 537, 540, 555, 561, 566, 579, 586, 587], "since_vers": 90, "singl": [162, 183, 188, 189, 197, 203, 219, 238, 245, 260, 271, 300, 302, 324, 328, 359, 499, 524, 526, 537, 567, 580, 584, 589], "single_output": [275, 328], "singleton": [96, 438, 493], "site": 587, "situat": [188, 189, 529, 580], "sixteen": 542, "size": [84, 170, 171, 196, 197, 202, 205, 211, 215, 219, 237, 238, 244, 247, 253, 257, 260, 298, 337, 339, 431, 474, 493, 497, 504, 523, 524, 529, 532, 541, 561, 562, 578, 580, 583, 584, 586, 589, 591, 594, 595], "skill": 563, "skip": [142, 477, 590, 592], "skip_convers": 89, "skip_first": [316, 374], "skylak": 537, "slave": [377, 592], "slice": 91, "slim": [164, 165, 166, 271, 324, 335, 337, 474, 475, 543, 580], "slim_sess": [337, 474], "small": [4, 53, 54, 55, 56, 366, 401, 402, 403, 404, 500, 566, 567, 580, 586, 592, 595], "smaller": [56, 219, 260, 404, 527, 541, 580, 591], "smbo": 592, "smooth": [4, 126, 127, 134, 151, 188, 189, 316, 340, 379, 380, 472, 522, 580, 592], "smooth_distribut": 4, "smooth_quant": [5, 141, 147, 150, 188, 189, 522, 583, 589], "smooth_quant_arg": [188, 189, 583, 589], "smooth_quant_calibr": 97, "smooth_quant_en": 147, "smooth_quant_entri": 522, "smooth_quant_scal": 97, "smoothquant": [30, 147, 151, 341, 502, 539, 581, 586, 593], "smoothquant_scale_info": 147, "smoothquantcalibr": [126, 379], "smoothquantcalibrationllm": [126, 379], "smoothquantsampl": [316, 374], "smoothquantscal": [127, 380], "smoothquantscalerllm": [127, 380], "smt": [268, 321], "snapshot": [492, 565], "snip": [162, 188, 189, 300, 536, 580, 595], "snip_momentum": [162, 188, 189, 541, 580], "snip_momentum_progress": [188, 189], "snip_progress": [188, 189], "snipcriterion": 162, "snipmomentumcriterion": 162, "snipmomentumprun": 300, "snippet": [522, 536], "snipprun": 300, "so": [32, 91, 219, 260, 377, 499, 503, 526, 532, 536, 542, 547, 549, 565, 566, 567, 583, 585, 586, 589, 590, 591, 593], "social": [497, 581], "socio": 497, "socket": [153, 220, 493, 569, 571, 595], "soft": 189, "softmax": 527, "softwar": [502, 538, 580, 581, 587], "solut": [129, 152, 467, 502, 503, 504, 532, 546, 550, 555, 581, 586, 587, 589, 592, 593], "solv": [498, 583, 587], "some": [164, 166, 188, 189, 203, 245, 299, 504, 505, 522, 524, 526, 531, 537, 540, 541, 563, 564, 565, 566, 569, 578, 580, 583, 585, 586, 589, 590, 592, 593, 595], "someth": [192, 193, 205, 233, 234, 247, 359, 482], "sometim": [91, 499, 526, 583], "somewhat": 504, "soon": 539, "sort": [188, 189, 310, 368, 526, 564, 586, 592], "sort_valu": 564, "sorted_data": 564, "sota": [502, 581], "sound": 537, "sourc": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 502, 538, 541, 554, 556, 558, 559, 561, 581], "space": [153, 174, 175, 180, 188, 189, 192, 193, 233, 234, 266, 273, 278, 281, 282, 283, 303, 307, 310, 317, 326, 329, 359, 363, 368, 375, 497, 498, 500, 503, 504, 505, 522, 580, 583, 589, 594], "spacetobatchnd": [44, 392], "spanbert": 595, "spars": [164, 178, 300, 524, 581], "sparse_dummy_v2": [207, 249, 524], "sparse_gpt": 580, "sparse_ratio": [207, 249, 524], "sparsecategoricalcrossentropi": 594, "sparsecategoricalcrossentropyloss": 156, "sparsedummydataset": [207, 249], "sparsegpt": [181, 580], "sparsegptprun": 181, "sparsiti": [168, 170, 171, 173, 174, 175, 178, 180, 183, 185, 188, 189, 300, 302, 493, 502, 524, 536, 541, 593, 595], "sparsity_decay_typ": [188, 189, 541, 580], "speak": 586, "special": [102, 142, 166, 339, 443, 477, 499, 523, 540, 541, 578, 580, 586, 593], "specif": [30, 90, 102, 153, 158, 185, 188, 189, 203, 204, 205, 206, 210, 212, 226, 245, 246, 247, 248, 252, 254, 284, 285, 287, 288, 289, 328, 359, 443, 473, 490, 497, 500, 503, 504, 521, 522, 523, 526, 527, 533, 535, 539, 540, 541, 542, 543, 544, 548, 549, 551, 555, 561, 563, 569, 578, 580, 582, 586, 592, 594], "specifi": [96, 142, 147, 153, 185, 188, 189, 192, 193, 219, 220, 233, 234, 260, 266, 271, 275, 277, 278, 281, 290, 295, 303, 304, 324, 328, 329, 359, 378, 438, 477, 482, 492, 493, 504, 505, 529, 533, 540, 541, 549, 563, 569, 573, 574, 575, 576, 578, 580, 582, 586, 591, 592, 594], "speed": [521, 541, 552, 580, 581, 583, 592], "speedup": [530, 536, 583], "spellcheck": 498, "spent": 592, "spike": 566, "spiq": [30, 151, 341, 589], "split": [17, 31, 68, 218, 219, 259, 260, 416, 499, 584, 586, 589, 591], "split_shared_bia": 31, "split_shared_input": [62, 410], "splitoper": 27, "splitsharedinputoptim": [68, 416], "spot": 589, "spr": [33, 381], "sprase": 164, "sq": [539, 589], "sq_weight_tensor": [134, 472], "sq_weights_nod": [134, 472], "sqlalchemi": 532, "sqrt": [55, 403, 526], "squad": [203, 219, 245, 260, 272, 273, 275, 325, 326, 328, 524, 540, 580, 591, 595], "squadexampl": [219, 260], "squadf1": [275, 328, 540], "squadv1": [219, 260, 591], "squar": [275, 310, 328, 368, 526, 540, 566, 592], "squeez": [64, 412, 499], "squeezenet": 595, "squeezer": 167, "squential": [201, 243], "src": [91, 562], "ssd": [499, 531, 595], "ssd_mobilenet_v1": 541, "ssh": [529, 561], "sst": [580, 595], "sst2": 550, "st": [203, 245, 524, 540], "stabil": 586, "stabilityai": 589, "stabl": [502, 537, 580, 581], "stablelm": 589, "stack": 502, "stage": [306, 311, 360, 362, 369, 527, 580, 590, 592], "stai": [586, 589], "stand": [580, 592], "stand_norm": [206, 207, 248, 249, 473, 524], "standard": [205, 219, 247, 260, 498, 504, 522, 526, 531, 540, 591, 592], "star": 498, "start": [188, 189, 219, 260, 271, 324, 364, 537, 566, 581, 591, 592, 593, 596], "start_epoch": [541, 582, 594], "start_posit": [219, 260], "start_step": [173, 188, 189, 300, 541, 580, 582], "startup": 562, "state": [137, 167, 505, 547, 580], "state_dict": [137, 529, 586, 590], "static": [29, 30, 33, 151, 166, 189, 265, 317, 341, 359, 375, 381, 503, 504, 505, 526, 531, 536, 541, 544, 549, 550, 551, 552, 555, 561, 564, 572, 574, 575, 576, 584, 589, 592, 595], "static_graph": 166, "static_group": 586, "static_ipex": 549, "static_qu": 522, "static_quant_conf": 502, "static_quant_export": 265, "staticmethod": [125, 466], "staticquantconfig": 381, "statist": [493, 494], "statu": [166, 490, 497, 523, 571, 574, 575, 576, 578, 580], "std": [215, 219, 257, 260, 541, 591], "std_valu": [215, 257], "stderr": 493, "step": [162, 172, 173, 174, 175, 179, 180, 183, 188, 189, 298, 300, 302, 482, 504, 505, 526, 527, 528, 529, 541, 556, 559, 561, 574, 575, 576, 579, 580, 582, 585, 586, 588, 589, 590, 592], "step1": [317, 375], "step2": [317, 375], "step3": [317, 375], "step4": [317, 375], "step5": [317, 375], "step_siz": 589, "still": [521, 541, 567, 581, 583, 585], "stock": [33, 381, 550, 589], "stop": [188, 189, 541, 592, 593, 594], "stopgradi": [66, 414], "storag": [142, 477, 534, 540, 563, 566, 586, 589], "store": [126, 162, 163, 166, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 188, 189, 205, 247, 293, 300, 379, 535], "storywrit": 595, "str": [2, 30, 31, 32, 126, 136, 137, 142, 143, 145, 146, 147, 148, 156, 158, 163, 166, 187, 188, 189, 203, 204, 205, 212, 215, 219, 221, 225, 226, 245, 246, 247, 254, 257, 260, 264, 265, 268, 269, 271, 273, 275, 282, 293, 316, 319, 321, 322, 324, 326, 328, 340, 341, 348, 353, 355, 357, 358, 374, 377, 378, 379, 477, 479, 485, 488, 490, 493, 494, 522, 523, 524, 540, 572, 582, 590, 591], "str2arrai": 493, "str_label": 540, "straightforward": [580, 586, 589], "strategi": [2, 147, 180, 188, 189, 190, 205, 231, 247, 267, 320, 502, 503, 504, 505, 510, 521, 522, 523, 529, 536, 541, 549, 561, 566, 581, 582, 583, 585, 586, 587, 593, 594], "strategy_kwarg": [188, 189, 588, 592], "strategy_registri": [313, 371, 592], "stream": [493, 595], "streamlin": [537, 568, 581], "strftime": [188, 189], "stride": [91, 219, 260, 591], "string": [31, 102, 134, 140, 142, 153, 156, 158, 166, 168, 173, 181, 182, 183, 185, 188, 189, 205, 221, 226, 247, 261, 266, 268, 271, 277, 278, 279, 281, 282, 290, 295, 298, 299, 300, 301, 302, 303, 321, 324, 333, 337, 443, 472, 474, 477, 478, 485, 490, 493, 540, 591], "strip": [53, 54, 56, 69, 70, 134, 401, 402, 404, 417, 418, 472, 590], "strip_equivalent_nod": [62, 134, 410, 472], "strip_unused_lib": [134, 472], "strip_unused_nod": [62, 134, 410, 472], "stripequivalentnodesoptim": [69, 417], "stripunusednodesoptim": [70, 418], "stroke": 592, "structur": [167, 178, 179, 188, 189, 300, 318, 376, 493, 536, 560, 562, 565, 574, 580, 581, 583, 590, 593, 595], "stsb": 595, "student": [155, 159, 188, 189, 203, 228, 245, 261, 524, 527, 528, 595], "student1_layer_name1": 189, "student1_layer_name2": 189, "student2_layer_name1": 189, "student2_layer_name2": 189, "student_layer_nam": 189, "student_layer_output_process": 189, "student_loss": [527, 528], "student_model": [156, 189, 221, 541], "student_output": [527, 528], "studio": [502, 552, 561, 571, 593], "style": [197, 210, 238, 252, 378, 522, 524, 535], "style_fold": [210, 252, 524], "style_transf": 524, "style_transfer_dataset": [209, 251], "styletransferdataset": [210, 252], "sub": [52, 147, 153, 166, 220, 400, 500, 522, 592], "sub_class": [328, 359], "sub_modul": 522, "subclass": [4, 22, 148, 158, 168, 173, 181, 183, 198, 202, 205, 212, 219, 226, 240, 244, 247, 254, 260, 275, 282, 289, 293, 298, 300, 302, 313, 316, 328, 339, 371, 503], "subfold": [205, 247, 564], "subgraph": [41, 52, 91, 146, 389, 400, 584, 592], "subgraphstyl": 592, "subject": 538, "submit": [498, 568, 571, 581], "submodul": 590, "subpixel": [215, 257], "subprocess": [522, 523], "subsect": [589, 594], "subsequ": [177, 504, 544, 561], "subset": [205, 208, 247, 250, 524, 566], "subsidiari": 538, "substanti": 584, "success": [537, 563], "successfulli": [499, 502, 529, 570, 574, 575, 576, 581], "successor": [77, 78, 79, 80, 424, 425, 426, 427], "sudo": [532, 547], "suffici": 588, "suffix": [134, 472], "suggest": [499, 522, 588], "suit": [537, 562, 590], "suitabl": 567, "sum": [188, 189, 275, 328, 526, 527], "sum_over_batch_s": 594, "summar": [132, 470, 522, 527], "summari": [153, 482, 526, 556, 559, 590, 595], "summary_benchmark": 153, "summarywrit": 590, "super": [273, 326, 500], "superbench": 544, "supernet": 500, "suppli": 2, "support": [2, 30, 31, 32, 83, 90, 151, 156, 158, 163, 169, 176, 180, 188, 189, 192, 193, 202, 203, 205, 212, 215, 219, 221, 222, 223, 226, 233, 234, 244, 245, 247, 254, 257, 260, 267, 275, 277, 282, 298, 300, 304, 311, 317, 320, 328, 329, 333, 339, 341, 359, 369, 375, 378, 430, 482, 485, 487, 488, 493, 495, 502, 504, 522, 539, 541, 544, 549, 552, 555, 561, 568, 569, 572, 581, 585, 588, 592, 593], "supported_lay": 147, "supported_op_typ": [49, 397], "suppos": 589, "suppress": [586, 589], "sure": [168, 173, 181, 183, 298, 300, 302, 520, 563], "surg": [142, 477], "surrog": 592, "suyu": 538, "sweep": 548, "sweep_object": 548, "sweet": 589, "switch": [71, 419, 544, 590], "switch_optim": [62, 410], "switchoptim": [71, 419], "sy": [493, 522, 547], "sym": [30, 31, 32, 504, 505, 533, 583, 586, 594], "sym_full_rang": 586, "sym_model": 2, "symbol": [2, 31, 136, 146, 147, 268, 321, 329, 359, 499, 543], "symbol_r": [268, 321], "symbolblock": 2, "symbolic_trac": 138, "symlink": [554, 558], "symmetr": [99, 440, 488, 505, 583, 586, 591, 592], "symnet": 2, "synchron": 592, "syntax": 533, "sys_nic": 502, "system": [137, 142, 153, 220, 477, 493, 520, 547, 580, 595], "systemat": 589, "szymon": 521, "t": [31, 53, 54, 56, 129, 142, 152, 168, 188, 189, 219, 222, 260, 273, 326, 401, 402, 404, 467, 477, 499, 503, 522, 526, 527, 529, 541, 542, 562, 567, 580, 583, 586, 592, 594], "t10k": [205, 247, 524], "t5": [580, 595], "t5norm": 589, "tab": [273, 326, 561, 590], "tabl": [166, 177, 493, 505, 526, 531, 564, 566, 595], "table_entri": 493, "taco": [502, 581], "tag": [142, 337, 474, 477, 589, 590], "take": [4, 168, 189, 192, 193, 197, 219, 224, 233, 234, 238, 260, 298, 307, 328, 329, 359, 363, 482, 497, 499, 500, 523, 526, 527, 533, 541, 561, 580, 583, 585, 586, 591, 592, 594], "taken": [192, 193, 233, 234, 329, 359, 482, 583], "tamper": [142, 477], "tar": [205, 247, 524, 526, 556, 559], "target": [2, 30, 31, 88, 147, 166, 183, 185, 189, 299, 302, 307, 363, 488, 524, 529, 541, 580, 590, 591, 592, 594], "target_boxes_num": 540, "target_depth": 147, "target_dtyp": 374, "target_height": [219, 260, 591], "target_lay": 166, "target_linear": 167, "target_op_lut": 166, "target_spars": [168, 188, 189, 541, 580, 582, 594], "target_sparsity_ratio": [173, 300], "target_width": [219, 260, 591], "targetspac": [307, 363], "task": [129, 203, 210, 245, 252, 275, 328, 467, 524, 527, 528, 531, 536, 540, 541, 564, 568, 571, 580, 584, 586, 589, 595], "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 569, "task_collect": 571, "task_db": 571, "task_id": [569, 574, 575, 576], "task_log": 569, "task_monitor_port": [569, 574, 575, 576], "task_nam": [549, 550, 572, 575, 576], "task_request": [570, 574, 575, 576], "task_request_distribut": 574, "task_workspac": 569, "taskdataset": 595, "taskdb": 571, "tasklaunch": 571, "taskmonitor": 571, "td": 592, "teacher": [155, 188, 189, 261, 527, 528, 541, 595], "teacher_layer_nam": 189, "teacher_layer_name1": 189, "teacher_layer_name2": 189, "teacher_layer_output_process": 189, "teacher_logit": 541, "teacher_model": [156, 188, 189, 221, 527, 528, 541], "team": [154, 273, 326, 497, 585], "technic": 502, "techniqu": [267, 320, 495, 502, 536, 541, 544, 563, 579, 580, 581, 582, 583, 593, 594, 595], "technologi": [205, 247, 539, 541], "tee": 547, "tel2p1": 595, "tell": [142, 328, 359, 477, 582], "temp_path": [126, 379], "temperatur": [156, 188, 189, 221, 541, 594], "templat": [181, 301, 541, 580], "template_config": 185, "temporari": [126, 147, 379, 493, 497], "temporarili": 497, "tencent": [502, 581], "tend": 580, "tensor": [2, 3, 4, 31, 32, 56, 91, 126, 134, 137, 142, 143, 147, 162, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 189, 219, 260, 263, 265, 298, 300, 310, 337, 368, 379, 404, 472, 474, 477, 479, 488, 492, 493, 499, 505, 522, 523, 524, 526, 580, 583, 587, 590, 591, 592], "tensor2tensor": [269, 322], "tensor_data": [75, 422, 493, 494], "tensor_dict": 503, "tensor_dtyp": 91, "tensor_nam": [31, 134, 142, 143, 472, 477, 479], "tensor_to_nod": 2, "tensor_v": [134, 472], "tensor_valu": 31, "tensorboard": [188, 189, 485, 493, 503, 541, 564], "tensorcollector": 2, "tensordataset": [203, 245, 524], "tensorflow": [38, 40, 61, 62, 63, 73, 81, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 103, 116, 126, 127, 128, 131, 134, 156, 158, 184, 188, 189, 202, 203, 204, 205, 208, 210, 212, 219, 226, 244, 245, 246, 247, 250, 252, 254, 260, 264, 265, 266, 269, 271, 275, 276, 277, 303, 311, 322, 324, 328, 329, 337, 353, 354, 357, 358, 359, 369, 493, 498, 500, 502, 503, 504, 521, 522, 523, 526, 527, 528, 530, 533, 534, 536, 537, 541, 542, 543, 551, 552, 563, 566, 580, 581, 582, 588, 589, 592, 594], "tensorflow1": [202, 244], "tensorflow_addon": [158, 226], "tensorflow_amp": 551, "tensorflow_dataload": [239, 357], "tensorflow_inc": 551, "tensorflow_itex": [205, 208, 210, 212, 247, 250, 252, 254, 523, 582], "tensorflow_itexadaptor": [33, 381], "tensorflow_model": [331, 357, 566], "tensorflowadam": 158, "tensorflowadamw": [158, 226], "tensorflowadaptor": [33, 381], "tensorflowbasemodel": [337, 357, 474], "tensorflowbertdataload": [202, 244], "tensorflowbertdataset": [203, 245], "tensorflowcheckpointmodel": [337, 474], "tensorflowcifar10": [205, 247], "tensorflowcifar100": [205, 247], "tensorflowcocomap": [275, 328], "tensorflowconfig": 381, "tensorflowconfigconvert": 381, "tensorflowcriterion": [156, 221], "tensorflowcroptoboundingbox": [219, 260], "tensorflowcrossentropyloss": [156, 221], "tensorflowdataload": [202, 244, 357], "tensorflowdataset": [205, 247], "tensorflowfashionmnist": [205, 247], "tensorflowfilt": [212, 254], "tensorflowimagefold": 247, "tensorflowimagenetdataset": [208, 250], "tensorflowimagenetraw": [208, 250], "tensorflowimagerecord": [205, 247], "tensorflowknowledgedistillationloss": [156, 221], "tensorflowknowledgedistillationlossextern": [156, 221], "tensorflowknowledgedistillationlosswrapp": 156, "tensorflowllmmodel": [337, 474], "tensorflowmap": [275, 328], "tensorflowmetr": [275, 328], "tensorflowmnist": [205, 247], "tensorflowmodel": [337, 474], "tensorflowmodelzoobertdataload": [202, 244], "tensorflowmodelzoobertdataset": [203, 204, 245, 246], "tensorflowoptim": [158, 226], "tensorflowparserfactori": 349, "tensorflowprofilingpars": 350, "tensorflowqatmodel": [337, 474], "tensorflowqdqtoonnxqdqconvert": 128, "tensorflowqueri": [33, 381, 503], "tensorflowrandomhorizontalflip": [219, 260], "tensorflowrandomverticalflip": [219, 260], "tensorflowresizecropimagenettransform": [215, 257], "tensorflowresizewithratio": [219, 260], "tensorflowsavedmodelmodel": [337, 474], "tensorflowsgd": [158, 226], "tensorflowshiftrescal": 215, "tensorflowsparsecategoricalcrossentropi": 156, "tensorflowtfrecorddataset": [205, 247], "tensorflowtopk": [275, 328], "tensorflowtransform": [219, 260], "tensorflowtranspos": [219, 260], "tensorflowtransposelastchannel": 215, "tensorflowvocmap": [275, 328], "tensorflowvocrecord": [205, 247], "tensorflowwrapfunct": [219, 260], "tensorproto": [31, 91], "tensorrt": [31, 521, 542, 583], "tensorrtexecutionprovid": [542, 583], "tensors_kl": 2, "tensors_minmax": 2, "teq": [502, 581, 584, 586], "teqlinearfakequ": [144, 481], "term": [155, 174, 175, 180, 182, 261, 498, 521, 527, 538, 540, 578, 579, 592], "termin": [526, 554, 555, 558, 564], "test": [153, 188, 189, 219, 260, 498, 502, 526, 537, 569, 574, 595], "test_func": 529, "text": [91, 181, 218, 219, 259, 260, 268, 273, 301, 321, 326, 531, 538, 550, 572, 575, 576, 580, 581, 586, 589, 591, 595], "textdist": 564, "tf": [91, 102, 127, 134, 166, 185, 202, 203, 204, 205, 219, 244, 245, 246, 247, 260, 335, 337, 380, 443, 472, 474, 475, 522, 529, 537, 543, 581, 585, 591], "tf1": [202, 244, 543], "tf2": 543, "tf2onnx": [189, 262], "tf2onnx_convert": 97, "tf2onnx_util": 87, "tf2onnxconfig": [189, 531], "tf_criteria": 163, "tf_diagnosis_help": [134, 472], "tf_enable_onednn_opt": 537, "tf_example1": [573, 574, 575], "tf_modul": 358, "tf_to_fp32_onnx": 264, "tf_to_int8_onnx": 264, "tfdatadataload": [202, 244], "tfmodelzoocollecttransform": [219, 260], "tfpruningcallback": [290, 295], "tfrecord": [203, 204, 205, 245, 246, 247, 524], "tfrecorddataset": 524, "tfslimnetsfactori": [335, 475], "tfsquadv1modelzooposttransform": [219, 260], "tfsquadv1posttransform": [219, 260], "th": [75, 76, 422, 423], "thalaiyasingam": 580, "than": [41, 134, 203, 219, 245, 260, 389, 493, 500, 502, 520, 524, 535, 566, 574, 578, 579, 580, 583, 586, 588, 591, 592], "thei": [142, 220, 378, 477, 497, 522, 527, 533, 541, 549, 564, 567, 578], "them": [142, 166, 203, 245, 477, 499, 505, 523, 526, 531, 533, 535, 564, 567, 579, 580, 586, 592], "themselv": 583, "theoret": [583, 586], "therefor": [499, 541, 564, 566, 580, 583, 584, 587, 589], "thi": [30, 72, 96, 118, 125, 129, 133, 137, 140, 142, 147, 152, 155, 159, 164, 166, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 188, 189, 192, 193, 202, 203, 204, 205, 206, 207, 208, 210, 219, 222, 228, 229, 233, 234, 244, 245, 246, 247, 248, 249, 250, 252, 260, 268, 271, 272, 273, 275, 284, 285, 287, 288, 289, 290, 295, 298, 300, 302, 303, 304, 307, 310, 321, 324, 325, 326, 328, 329, 339, 359, 363, 368, 377, 378, 420, 438, 459, 466, 467, 471, 473, 477, 478, 482, 492, 493, 497, 498, 499, 500, 503, 504, 505, 521, 522, 523, 524, 527, 528, 529, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 574, 575, 576, 580, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593], "think": 586, "third": [271, 324, 498, 538], "those": [60, 142, 310, 368, 408, 477, 493, 526, 527, 528, 535, 541, 542, 579, 580, 583, 592], "though": 589, "thread": [153, 188, 189, 220, 354, 358, 523, 571], "threat": 563, "threaten": 497, "three": [60, 185, 203, 245, 306, 360, 362, 408, 499, 503, 504, 521, 537, 542, 555, 569, 579, 583, 585, 588, 589, 590], "threshold": [2, 149, 483, 487, 540], "through": [137, 192, 193, 233, 234, 328, 329, 359, 502, 520, 533, 535, 536, 540, 547, 568, 578, 579, 580, 582, 583, 586], "throw": 523, "thu": [271, 324, 541, 580, 583], "thudm": 539, "tian": 538, "tiiuae": [539, 589, 595], "tile": [294, 522], "tile_pattern": 292, "tile_pattern_1x1": 582, "tilepattern_1x1": 294, "tilepattern_1x16": 294, "tilepattern_1x2": 294, "tilepattern_2x2": 294, "tilepattern_4x1": 294, "tilepatternbas": 294, "till": [493, 592], "tim": 586, "time": [134, 142, 188, 189, 219, 260, 275, 307, 328, 339, 363, 472, 477, 493, 504, 523, 526, 529, 532, 541, 549, 551, 554, 558, 561, 562, 567, 570, 574, 575, 578, 580, 581, 583, 586, 588, 589, 590, 591, 592], "time_limit": 493, "timeout": [188, 189, 541, 582, 592, 594], "timm": 564, "tini": 595, "tinybert": 595, "tip": 564, "titl": [493, 538, 562, 592], "tl": 563, "tloss": 529, "tmp_file_path": 493, "to_numpi": 31, "toarrai": [219, 260, 591], "todo": [203, 206, 245, 248, 271, 317, 324, 375, 473], "togeth": [188, 189, 219, 260, 527, 537, 548, 581, 590, 591], "togethercomput": 589, "token": [203, 216, 219, 245, 258, 260, 268, 269, 321, 322, 488, 502, 524, 540, 541, 563, 564, 586, 588, 589, 591, 592], "token_is_max_context": [219, 260], "token_to_orig_map": [219, 260], "token_type_id": [203, 245, 541], "tokenzi": [218, 259], "toler": 566, "tolerable_loss": [188, 189, 541, 592], "tolist": 589, "toml": [556, 559], "tondarrai": 591, "tondarraytransform": [219, 260], "tool": [4, 134, 264, 472, 493, 502, 503, 541, 554, 558, 564, 567, 568, 569, 580, 581, 583], "toolbar": 562, "toolchain": [532, 581], "toolkit": [499, 537, 544, 552, 581, 593], "top": [219, 260, 266, 275, 290, 295, 303, 328, 498, 540, 561, 564, 566, 591], "top1": [482, 540, 563, 580, 583, 595], "topic": 502, "topilimag": 591, "topk": [328, 359, 529, 540, 541, 563, 583], "topologi": 590, "torch": [135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 151, 163, 166, 167, 169, 177, 188, 189, 265, 329, 359, 488, 492, 499, 502, 505, 506, 527, 529, 531, 541, 542, 543, 544, 549, 552, 564, 583, 586, 589, 590], "torch2onnx": [189, 262], "torch2onnxconfig": [189, 531], "torch_dtyp": 505, "torch_load": 139, "torch_model": 331, "torch_to_fp32_onnx": 265, "torch_to_int8_onnx": 265, "torch_util": [223, 502, 584, 589], "torchdynamo": 551, "torchscript": [531, 584, 589], "torchsmoothqu": 589, "torchvis": [219, 260, 502, 530, 534, 544, 550, 564], "toronto": [205, 247, 524], "torr": 580, "total": [31, 173, 219, 260, 275, 300, 328, 524, 526, 580, 586, 591, 595], "total_block_arg": 147, "total_block_kwarg": 147, "total_execution_tim": 348, "total_valu": 147, "totensor": [541, 591], "tow": 529, "toward": [497, 527], "tpe": [191, 232], "tpetunestrategi": [193, 234], "tqdm": [31, 541], "trace": [136, 137, 146, 147, 166, 188, 189, 265, 366, 499, 551, 592], "trace_and_fuse_sub_graph": 146, "traceabl": 499, "traced_model": 146, "tracer": 499, "track": [561, 588], "trackabl": [134, 472], "trade": 586, "tradit": [547, 580], "train": [30, 43, 66, 151, 155, 174, 175, 178, 180, 188, 189, 192, 193, 203, 205, 219, 229, 233, 234, 245, 247, 260, 261, 277, 300, 320, 341, 359, 391, 414, 485, 500, 502, 503, 504, 510, 524, 526, 527, 528, 531, 536, 542, 544, 550, 561, 566, 574, 579, 581, 584, 586, 588, 589, 592, 594], "train_cfg": 485, "train_dataload": [541, 580, 583], "train_dataset": [529, 583], "train_fun": 541, "train_func": [304, 482, 529, 541, 583], "train_kwarg": 529, "train_load": 529, "train_loop": [482, 541, 579], "train_sampl": 529, "trainabl": [502, 581, 586], "trainer": [541, 552], "training_arg": 541, "training_func": 541, "training_func_for_nc": [527, 528], "transact": 589, "transfer": [155, 210, 252, 261, 524, 527, 528, 541, 589], "transform": [31, 36, 129, 131, 132, 133, 145, 180, 203, 204, 205, 206, 207, 208, 210, 212, 214, 245, 246, 247, 248, 249, 250, 252, 254, 256, 384, 467, 469, 470, 471, 473, 499, 500, 502, 521, 524, 527, 528, 529, 530, 534, 539, 541, 544, 549, 550, 551, 552, 564, 572, 575, 576, 580, 581, 585, 586, 589, 590, 592, 594, 595], "transform_func": [219, 260], "transform_graph": 97, "transform_list": [219, 260, 591], "transform_registri": [219, 260], "transform_typ": [219, 260], "transformerbasedmodelblockpatterndetector": 145, "transit": 567, "translat": [268, 269, 321, 322, 580, 592], "translation_corpu": [269, 322], "transpos": [31, 59, 172, 215, 219, 260, 264, 298, 407, 586, 591], "travers": [504, 505, 586, 592], "treat": [142, 477, 523], "tree": [181, 301, 317, 375, 569], "tri": [189, 522, 592], "trial": 592, "trigger": [153, 173, 300], "troll": 497, "troubleshoot": 567, "trt_env_setup": 31, "true": [2, 31, 32, 71, 99, 132, 134, 142, 153, 188, 189, 201, 203, 205, 206, 218, 219, 220, 243, 245, 247, 248, 259, 260, 265, 269, 275, 293, 316, 322, 328, 339, 359, 374, 378, 419, 440, 470, 472, 473, 477, 485, 488, 492, 493, 502, 504, 523, 524, 526, 529, 533, 540, 541, 544, 547, 548, 563, 564, 565, 566, 572, 574, 582, 583, 584, 586, 589, 590, 591, 592, 594], "truncat": [203, 219, 245, 260, 524, 591], "trust": [142, 477, 526, 563], "trust_remote_cod": 502, "truth": [272, 273, 325, 326], "try": [201, 243, 337, 499, 502, 526, 564, 580, 583, 589, 592], "try_cnt": [134, 472], "try_loading_kera": 337, "tsl": 562, "tune": [2, 153, 154, 188, 189, 192, 193, 203, 205, 233, 234, 245, 247, 266, 303, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 329, 339, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 482, 493, 503, 504, 521, 522, 523, 524, 526, 529, 536, 538, 541, 542, 561, 565, 568, 570, 571, 578, 580, 581, 585, 587, 588, 590, 594], "tune_": 590, "tune_0_acc0": 590, "tune_1": 590, "tune_1_acc0": 590, "tune_1_acc_0": 590, "tune_cfg": [2, 134, 136, 147, 472, 503, 505, 592], "tune_config": 504, "tuner": [192, 193, 233, 234, 266, 303, 329, 359, 482, 583], "tunestrategi": [313, 371, 592], "tunestrategymeta": 371, "tuning_cfg_to_fw": 504, "tuning_criterion": [189, 541, 578, 588, 592], "tuning_history_path": 493, "tuning_info": [570, 574], "tuning_items_prior": [316, 374], "tuning_order_lst": [316, 374], "tuning_sampl": [315, 373], "tuning_spac": [315, 316, 318, 373, 374, 376], "tuning_strategi": [188, 189], "tuning_struct": [315, 316, 317, 373, 374, 375], "tuningcriterion": [189, 541, 578, 588, 592], "tuningitem": [317, 375], "tuninglogg": 154, "tuningord": [316, 374], "tuningsampl": [316, 374], "tuningsamplerregistri": 316, "tuningspac": [316, 317, 374, 375], "tupl": [2, 91, 134, 147, 189, 192, 193, 215, 219, 233, 234, 257, 260, 265, 316, 329, 359, 374, 472, 482, 492, 504, 522, 524, 540, 541, 583, 591], "turbo": 595, "turn": [540, 555, 584], "tutori": [499, 552, 581, 593], "tweak": 567, "twine": [556, 559], "twitter": 581, "two": [134, 137, 142, 153, 167, 172, 179, 183, 205, 210, 220, 247, 252, 271, 298, 302, 304, 311, 324, 369, 472, 477, 493, 498, 499, 500, 522, 523, 524, 527, 529, 531, 533, 541, 542, 568, 569, 571, 580, 583, 585, 586, 588, 589, 592, 594], "txt": [208, 250, 524, 526, 537, 563, 565, 566, 568, 569], "type": [2, 4, 30, 31, 32, 60, 82, 91, 102, 108, 118, 126, 134, 136, 137, 142, 147, 148, 156, 158, 166, 167, 168, 173, 181, 182, 183, 185, 187, 188, 189, 201, 203, 205, 212, 219, 221, 226, 243, 245, 247, 254, 260, 265, 268, 269, 271, 275, 282, 289, 293, 298, 300, 302, 307, 313, 317, 319, 321, 322, 324, 328, 337, 339, 363, 364, 371, 375, 377, 378, 379, 408, 429, 443, 449, 459, 472, 474, 477, 492, 493, 503, 504, 524, 526, 529, 531, 533, 536, 541, 542, 562, 564, 569, 570, 574, 575, 583, 584, 586, 588, 591, 592, 593, 594], "typealia": 522, "types_to_splic": [66, 414], "typescript": [554, 558], "typic": [277, 304, 500, 502, 528, 530, 534, 566, 580, 595], "u": [129, 152, 467, 544, 563, 568], "ubuntu": 537, "ubuntu22": 502, "ubyt": [205, 247, 524], "ui": 563, "uint4": 505, "uint8": [31, 215, 257, 271, 319, 324, 377, 503, 524, 533, 582, 583, 591, 594], "ultim": 583, "ultra": 595, "unaccept": 497, "unari": 28, "unary_op": 17, "unarydirect8bitoper": 28, "unaryoper": 28, "unbalanc": 595, "uncas": [203, 219, 245, 260, 524, 591, 595], "uncertain": 580, "undefin": [142, 185, 299, 477], "under": [96, 188, 189, 205, 247, 438, 488, 492, 498, 500, 502, 524, 538, 540, 541, 544, 549, 550, 561, 569, 579, 580, 581, 584, 586, 590, 592], "underli": [53, 54, 56, 142, 401, 402, 404, 477], "understand": [567, 583, 590, 593], "understudi": [268, 321], "unicod": [218, 259], "unicodedecodeerror": [142, 477], "unicoderegex": [268, 321], "unifi": [154, 266, 303, 503, 504, 505, 523, 535, 536, 540, 541, 543], "uniform": [521, 586], "uniformli": 586, "uninstal": 561, "union": [275, 328, 482, 540, 572], "uniqu": [271, 304, 324, 583], "unique_id": [219, 260], "unit": [168, 298, 498, 569, 580], "unk": [218, 259], "unk_token": [218, 259], "unless": [142, 477, 533], "unnecessari": [220, 541], "unpickl": [140, 142, 477, 478], "unpicklingerror": [140, 478], "unpreced": 580, "unsaf": [142, 477], "unseen": 583, "unset": 32, "unsign": [147, 319, 377, 505, 586], "unstructur": [188, 189, 294, 536, 580, 595], "unsupport": [531, 541, 580], "until": [500, 504, 592], "untrac": 499, "untrust": [142, 477], "unus": [70, 134, 418, 472], "unwelcom": 497, "up": [2, 86, 177, 219, 260, 299, 433, 502, 529, 530, 533, 536, 552, 556, 559, 561, 580, 581, 582, 583, 588, 591, 592, 594], "up1": 533, "up2": 533, "updat": [60, 143, 147, 162, 168, 185, 300, 328, 359, 408, 479, 490, 532, 539, 540, 541, 547, 552, 555, 571, 580, 586, 589, 592, 593], "update_config": [188, 189], "update_frequ": 582, "update_frequency_on_step": [300, 582], "update_modul": [143, 479], "update_neural_insights_workload": 490, "update_neural_insights_workload_accuracy_data": 490, "update_param": 185, "update_sq_scal": 147, "update_statu": 571, "update_task_statu": 571, "upgrad": [502, 541], "upload": [536, 556, 559], "upload_path": [569, 574, 575, 576], "upper": 561, "url": [205, 247, 498, 538, 572, 573, 580], "us": [2, 4, 22, 30, 31, 32, 34, 35, 56, 89, 91, 102, 127, 137, 142, 147, 153, 156, 158, 162, 166, 168, 173, 177, 178, 181, 183, 184, 188, 189, 192, 193, 201, 202, 203, 204, 205, 206, 207, 210, 218, 219, 220, 221, 226, 233, 234, 243, 244, 245, 246, 247, 248, 249, 252, 259, 260, 264, 265, 266, 268, 269, 271, 275, 276, 277, 282, 289, 290, 293, 295, 298, 300, 301, 302, 303, 304, 307, 310, 313, 316, 317, 321, 322, 324, 328, 339, 354, 358, 359, 363, 366, 368, 371, 375, 377, 378, 380, 381, 382, 383, 404, 443, 473, 477, 482, 483, 484, 485, 486, 488, 493, 497, 498, 499, 500, 502, 503, 504, 520, 521, 522, 524, 526, 527, 528, 529, 531, 533, 535, 537, 538, 541, 542, 543, 544, 545, 546, 548, 549, 552, 554, 556, 558, 559, 561, 563, 564, 565, 566, 567, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 594, 595], "usag": [147, 202, 244, 271, 277, 304, 324, 378, 504, 524, 529, 530, 544, 552, 563, 569, 574, 575, 576, 578, 582, 586, 591], "use_bf16": [34, 35, 188, 382, 383, 582], "use_bp": [269, 322], "use_distributed_tun": 188, "use_full_length": 586, "use_max_length": 586, "use_optimum_format": [488, 586], "user": [142, 153, 158, 166, 178, 185, 188, 189, 192, 193, 205, 208, 212, 219, 220, 226, 233, 234, 247, 250, 254, 260, 266, 290, 295, 301, 303, 304, 328, 329, 339, 359, 364, 377, 477, 482, 493, 499, 500, 502, 503, 504, 505, 510, 520, 522, 523, 527, 528, 531, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 555, 561, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 596], "user_config": 185, "user_metr": [224, 328, 359], "user_obj_cfg": 339, "user_object": 339, "user_postprocess": [217, 227], "usernam": 569, "usr": 532, "usr_cfg": 339, "usual": [203, 245, 504, 526, 527, 566, 579, 580, 583, 584, 589], "utf": [142, 218, 259, 477], "util": [1, 5, 91, 96, 97, 125, 128, 136, 137, 138, 139, 146, 157, 163, 186, 188, 189, 228, 269, 299, 309, 320, 322, 340, 341, 367, 476, 504, 505, 506, 521, 522, 529, 541, 544, 564, 580, 583, 592, 593], "uuid": 490, "v": [552, 561, 580, 592, 594], "v0": [526, 539, 566, 589, 590], "v1": [134, 215, 257, 272, 273, 275, 325, 326, 328, 337, 472, 474, 529, 531, 532, 540, 543, 565, 580, 587, 588, 589, 595], "v14": [268, 321], "v1_6": [534, 563, 566], "v2": [137, 366, 523, 529, 531, 532, 537, 539, 550, 587, 589, 592, 593, 595], "v3": [566, 595], "v4": [550, 572, 575, 576, 595], "v5": 498, "v5s6": 595, "val": [134, 185, 205, 208, 247, 250, 299, 472, 526, 541, 566], "val2017": [204, 246, 524], "val_dataload": [541, 583], "val_dataset": [541, 583], "val_load": 583, "val_map": [208, 250, 524], "valid": [41, 53, 54, 91, 154, 173, 176, 185, 188, 189, 205, 247, 271, 299, 300, 324, 337, 389, 401, 402, 474, 500, 502, 503, 524, 526, 527, 530, 533, 536, 538, 541, 552, 566, 580, 583, 586, 587], "valid_mixed_precis": 533, "valid_reshape_input": [53, 54, 401, 402], "validate_and_inference_input_output": [337, 474], "validate_graph_nod": [337, 474], "valu": [4, 31, 32, 42, 53, 54, 56, 75, 76, 91, 129, 134, 142, 147, 152, 153, 162, 166, 167, 177, 184, 185, 188, 189, 192, 193, 203, 206, 207, 215, 219, 220, 233, 234, 245, 248, 249, 257, 260, 271, 275, 299, 307, 310, 317, 324, 328, 329, 359, 363, 368, 375, 377, 378, 390, 401, 402, 404, 422, 423, 467, 472, 473, 477, 482, 483, 485, 493, 499, 504, 505, 521, 524, 526, 533, 540, 541, 542, 547, 564, 566, 572, 578, 580, 582, 583, 586, 587, 589, 591, 592, 594], "valuabl": [580, 590], "value_layer_nam": 177, "valueerror": [53, 54, 56, 147, 271, 324, 378, 401, 402, 404, 532], "valueinfo": 31, "values_from_const": [53, 54, 56, 401, 402, 404], "vanhouck": 521, "vanilla": [503, 504, 536], "var": 526, "vari": [266, 290, 295, 303, 566, 580, 589, 595], "variabl": [31, 140, 153, 182, 188, 189, 205, 220, 247, 307, 363, 377, 478, 537, 580, 592], "varianc": [129, 152, 467, 526], "variant": [199, 241], "varieti": [530, 582, 592], "variou": [266, 276, 303, 329, 505, 536, 544, 571, 580, 582, 584], "vault": 502, "vcvtne2ps2bf16": 542, "vcvtneps2bf16": 542, "vdpbf16p": 542, "vec": 526, "vecchio": 537, "ventura": 537, "verbos": [31, 265, 307, 363], "veri": [541, 562, 566, 583, 586, 592, 593], "verifi": [531, 539], "version": [2, 40, 90, 144, 147, 166, 189, 264, 265, 320, 388, 481, 497, 499, 503, 522, 533, 537, 538, 541, 554, 556, 558, 559, 581, 589, 592, 593], "version1": [134, 493], "version1_eq_version2": [134, 493], "version1_gt_version2": [134, 493], "version1_gte_version2": [134, 493], "version1_lt_version2": [134, 493], "version1_lte_version2": [134, 493], "version2": [134, 493], "vertic": [172, 219, 260, 298, 591], "vgg": 595, "vgg16": [531, 595], "vgg19": 595, "via": [266, 290, 295, 303, 497, 502, 529, 536, 541, 544, 561, 580, 581], "view": [498, 502, 530, 552, 561, 567, 587], "viewlet": 562, "viewpoint": 497, "vincent": 521, "violat": [140, 478], "virtual": [377, 581], "vision": [502, 531, 548, 589], "visit": 595, "visual": [188, 189, 502, 552, 561, 588, 590, 592, 593], "vmware": 581, "vnni": [530, 536, 582, 583], "voc": [205, 247, 275, 328], "vocab": [218, 259], "vocab_fil": [218, 219, 259, 260, 591], "vocabulari": [203, 218, 219, 245, 259, 260, 591], "vocmap": 540, "vscode": [522, 560, 562], "vtune": 538, "w": [32, 219, 260, 580, 589, 591], "w8a8": [584, 586], "w_dq": 589, "w_fp32": [129, 152, 467], "w_int8": [129, 152, 467], "w_q": 589, "w_scale": 589, "wa": [142, 188, 189, 477, 503, 541, 566, 567, 570, 581, 592], "wai": [166, 204, 205, 208, 246, 247, 250, 337, 500, 505, 523, 524, 526, 540, 541, 544, 547, 562, 563, 567, 568, 569, 579, 580, 583, 586, 589, 592, 594], "wait": [554, 558, 561, 571], "wait_new_task": 571, "wanda": 163, "want": [53, 54, 56, 166, 188, 189, 201, 203, 243, 245, 300, 364, 401, 402, 404, 482, 499, 503, 523, 524, 529, 541, 549, 561, 562, 569, 578, 583, 586, 588, 590, 592], "waq": 589, "warmup": [188, 189, 520, 541, 582], "warn": [489, 522], "wasn": [142, 477], "wasserblat": 580, "watch": [554, 558, 567], "we": [30, 31, 53, 54, 56, 60, 72, 129, 142, 151, 152, 153, 166, 170, 177, 188, 189, 202, 220, 222, 244, 268, 271, 321, 324, 341, 366, 401, 402, 404, 408, 420, 467, 477, 497, 499, 503, 504, 505, 522, 523, 526, 529, 531, 533, 539, 540, 541, 548, 549, 552, 556, 559, 561, 562, 564, 567, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 589, 590, 592, 593], "web": [502, 563, 569, 574, 575, 576, 590], "webpack": 567, "webpag": 566, "websit": 537, "wechat": [502, 581], "wei": [586, 589], "weight": [30, 31, 32, 46, 47, 108, 126, 127, 129, 134, 137, 147, 152, 162, 163, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 188, 189, 265, 298, 300, 317, 328, 341, 359, 366, 375, 377, 379, 380, 394, 395, 449, 467, 472, 493, 494, 503, 504, 505, 521, 526, 528, 533, 535, 539, 541, 563, 574, 578, 580, 581, 582, 583, 584, 589, 590, 592, 593, 594], "weight_bit": 504, "weight_compress": [582, 594], "weight_config": 32, "weight_correct": [150, 188, 189, 583], "weight_decai": [541, 594], "weight_dict": 137, "weight_empir": [129, 467], "weight_name_map": [126, 379], "weight_onli": [5, 189, 492, 502, 522, 584, 586], "weight_shap": 32, "weight_slim": [165, 177], "weight_tensor": 493, "weight_typ": 265, "weightcorrect": 152, "weightdetail": 493, "weightonli": 32, "weightonlylinear": 586, "weightonlyquantsampl": 374, "weightpruningconfig": [188, 189, 541, 579, 580], "weights_detail": 486, "weights_onli": [142, 477], "weights_tabl": [564, 565], "weightsdetail": 494, "weightsstatist": 494, "welcom": [496, 497, 498, 502, 563, 570, 596], "well": [192, 193, 233, 234, 329, 359, 482, 500, 502, 522, 524, 580, 583, 587, 589, 594], "were": [142, 275, 328, 477, 547, 580], "wget": [526, 532, 534, 563, 566], "what": [147, 173, 201, 243, 328, 359, 482, 497, 581], "when": [31, 40, 50, 56, 134, 140, 142, 167, 173, 178, 185, 188, 189, 203, 204, 212, 219, 245, 246, 254, 260, 269, 299, 300, 322, 359, 388, 398, 404, 472, 477, 478, 482, 497, 500, 504, 522, 523, 524, 541, 552, 554, 555, 558, 562, 563, 566, 567, 568, 570, 574, 580, 583, 586, 589, 591, 592], "where": [31, 142, 188, 189, 271, 275, 324, 328, 377, 477, 493, 505, 521, 526, 527, 554, 558, 562, 589, 590], "whether": [2, 31, 32, 91, 102, 134, 142, 147, 168, 188, 189, 201, 203, 215, 219, 243, 245, 257, 260, 269, 271, 275, 298, 322, 324, 328, 443, 472, 477, 485, 488, 492, 493, 503, 524, 540, 583, 586, 589, 591], "which": [2, 30, 42, 69, 96, 137, 142, 162, 166, 167, 169, 173, 174, 175, 177, 180, 181, 183, 185, 188, 189, 203, 204, 205, 215, 220, 245, 246, 247, 257, 268, 273, 282, 284, 285, 287, 288, 289, 293, 298, 299, 300, 302, 307, 321, 326, 328, 333, 339, 341, 359, 363, 390, 417, 438, 477, 493, 497, 499, 500, 502, 503, 504, 505, 521, 523, 524, 526, 527, 529, 532, 533, 536, 540, 541, 542, 543, 545, 549, 552, 555, 561, 562, 563, 566, 569, 574, 575, 576, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594], "while": [167, 178, 185, 300, 307, 363, 503, 504, 524, 530, 536, 542, 544, 549, 561, 563, 580, 582, 583, 586, 589], "whisper": 595, "white_nod": 3, "whitelist": 590, "whitespac": [218, 259, 273, 326], "whitespace_token": [218, 259], "whl": [556, 559], "who": [364, 497], "whole": [283, 505, 563, 583, 595], "whose": [151, 168, 299, 337, 474, 535, 589, 592], "why": [589, 590], "wide": [502, 530, 542, 580, 583, 595], "wideresnet40": 595, "width": [172, 215, 219, 257, 260, 298, 521, 529, 580, 583, 591, 594], "wiki": 497, "wikitext": [565, 595], "window": [153, 520, 537, 561, 562], "winogrand": 595, "winter": 589, "wip": 539, "wise": [129, 139, 141, 143, 152, 188, 189, 307, 310, 363, 364, 368, 467, 476, 479, 502, 504, 536, 566, 580, 586, 589, 590, 592, 593, 594], "wish": 538, "with_arg": 505, "within": [90, 174, 175, 180, 187, 266, 271, 303, 324, 337, 354, 358, 474, 497, 499, 505, 521, 542, 554, 558, 561, 569, 580, 581, 589, 592], "without": [35, 76, 134, 178, 219, 260, 300, 319, 377, 383, 423, 472, 497, 527, 529, 541, 552, 563, 566, 580, 581, 582, 592, 593], "wmt": 500, "wnli": [203, 245, 524, 540], "won": [189, 583, 586], "woq": 539, "woq_conf": 502, "word": [268, 321, 522, 540, 580, 586, 595], "word_perplex": 595, "wordpiec": [218, 219, 259, 260, 591], "wordpiecetoken": [218, 259], "work": [189, 266, 303, 501, 504, 522, 523, 527, 556, 559, 567, 585, 586, 587, 589, 590], "worker": [541, 571, 574, 575, 576, 583], "workflow": [502, 504, 505, 526, 527, 531, 537, 542, 556, 559, 563, 590, 593], "workload": [189, 490, 493, 563, 581], "workload_loc": [490, 493], "workload_mod": 490, "workload_nam": 490, "workload_uuid": 490, "workshop": 581, "workspac": [188, 189, 492, 493, 543, 569, 574, 575, 576], "workspace_path": [188, 189], "world": 562, "worth": [522, 580], "would": [498, 541, 565, 580, 583, 589], "wouldn": 567, "wrap": [2, 91, 102, 156, 221, 271, 324, 443, 499, 529, 556, 559], "wrapmxnetmetr": [275, 328], "wraponnxrtmetr": [275, 328], "wrapped_lay": [102, 443], "wrapper": [61, 88, 89, 90, 91, 108, 126, 136, 144, 156, 163, 202, 219, 221, 222, 224, 225, 244, 260, 271, 275, 324, 328, 333, 337, 379, 409, 449, 474, 481, 585], "wrappytorchmetr": [275, 328], "write": [134, 212, 254, 472, 493, 529, 535, 541, 544, 590], "write_graph": [134, 472], "writer": 590, "written": 541, "wt_compare_dict": 137, "www": [205, 247, 524, 595], "x": [2, 41, 60, 167, 188, 189, 202, 219, 244, 260, 307, 363, 378, 389, 408, 521, 522, 526, 529, 542, 543, 569, 570, 574, 575, 577, 583, 584, 589, 590, 591, 593], "x1": [589, 592], "x2": [589, 592], "x86": 542, "x86_64": 520, "x_max": [307, 363], "x_q": 589, "x_scale": 589, "x_tmp": 589, "xdoctest": [142, 477], "xeon": [502, 537, 538, 539, 542, 581, 583, 585, 595], "xgb": 189, "xgboost": 580, "xiao": [586, 589], "xiui": [586, 589], "xlm": [203, 245, 524, 595], "xlnet": [203, 245, 524, 595], "xpu": [189, 552, 583], "xvzf": 526, "xx": 147, "xx_func": 522, "xxx": [205, 247, 524, 541], "xxy": [205, 247, 524], "xxz": [205, 247, 524], "y": [95, 188, 189, 219, 260, 307, 363, 437, 522, 526, 532, 547, 589, 591], "y_dq": 589, "y_max": [307, 363], "y_q": 589, "yaml": [185, 189, 192, 193, 203, 205, 220, 233, 234, 245, 247, 261, 266, 277, 278, 279, 281, 290, 295, 303, 304, 492, 493, 503, 505, 535, 540, 541, 578, 582, 590, 591], "yaml_fil": [493, 524, 529], "yaml_file_path": 529, "yao": 137, "yarn": [554, 558], "year": 538, "yet": [500, 556, 559, 562, 569, 583], "yield": [192, 193, 201, 222, 233, 234, 243, 307, 329, 359, 363, 378, 482, 523, 583, 592], "yolo": 595, "yolov3": 595, "yolov4": 595, "yolov5": 580, "you": [30, 142, 188, 189, 201, 203, 243, 245, 300, 328, 341, 359, 477, 498, 499, 504, 522, 523, 524, 526, 529, 537, 538, 540, 542, 544, 546, 547, 549, 554, 558, 561, 562, 563, 564, 565, 566, 567, 569, 580, 583, 586, 587, 588, 589, 590, 593], "your": [201, 203, 243, 245, 498, 502, 522, 523, 524, 526, 529, 538, 541, 544, 547, 548, 549, 554, 555, 556, 558, 559, 561, 563, 567, 569, 574, 575, 576, 580, 581, 588, 590, 592, 593], "your_node1_nam": 529, "your_node2_nam": 529, "your_patch_path": 548, "your_script": 587, "yourself": 580, "yum": [532, 537], "yvinec": 589, "z": [31, 521, 522, 527, 589], "zafrir": 580, "zero": [4, 31, 32, 173, 185, 219, 260, 300, 493, 502, 566, 580, 583, 586, 589, 591, 592], "zero_grad": [529, 541, 580], "zero_point": [31, 32], "zero_point_nam": 31, "zeropoint": 583, "zfnet": 595, "zhen": 137, "zhewei": 137, "zip": [499, 570, 574, 575], "zo_valu": 31, "zone": 581, "zoo": [202, 219, 244, 260, 502, 530, 534, 595], "zp": [32, 589], "\u03b1": 521, "\u03b2": 521, "\u2776": 504, "\u2777": 504, "\u2778": 504, "\u2779": 504, "\u277a": 504, "\u277b": 504, "\u277c": 504, "\u817e\u8baf\u4e91taco": 581, "\u96c6\u6210\u82f1\u7279\u5c14": 581}, "titles": ["block_mask", "neural_compressor.adaptor.mxnet_utils", "neural_compressor.adaptor.mxnet_utils.util", "neural_compressor.adaptor.ox_utils.calibration", "neural_compressor.adaptor.ox_utils.calibrator", "neural_compressor.adaptor.ox_utils", "neural_compressor.adaptor.ox_utils.operators.activation", "neural_compressor.adaptor.ox_utils.operators.argmax", "neural_compressor.adaptor.ox_utils.operators.attention", "neural_compressor.adaptor.ox_utils.operators.binary_op", "neural_compressor.adaptor.ox_utils.operators.concat", "neural_compressor.adaptor.ox_utils.operators.conv", "neural_compressor.adaptor.ox_utils.operators.direct_q8", "neural_compressor.adaptor.ox_utils.operators.embed_layernorm", "neural_compressor.adaptor.ox_utils.operators.gather", "neural_compressor.adaptor.ox_utils.operators.gavgpool", "neural_compressor.adaptor.ox_utils.operators.gemm", "neural_compressor.adaptor.ox_utils.operators", "neural_compressor.adaptor.ox_utils.operators.lstm", "neural_compressor.adaptor.ox_utils.operators.matmul", "neural_compressor.adaptor.ox_utils.operators.maxpool", "neural_compressor.adaptor.ox_utils.operators.norm", "neural_compressor.adaptor.ox_utils.operators.ops", "neural_compressor.adaptor.ox_utils.operators.pad", "neural_compressor.adaptor.ox_utils.operators.pooling", "neural_compressor.adaptor.ox_utils.operators.reduce", "neural_compressor.adaptor.ox_utils.operators.resize", "neural_compressor.adaptor.ox_utils.operators.split", "neural_compressor.adaptor.ox_utils.operators.unary_op", "neural_compressor.adaptor.ox_utils.quantizer", "neural_compressor.adaptor.ox_utils.smooth_quant", "neural_compressor.adaptor.ox_utils.util", "neural_compressor.adaptor.ox_utils.weight_only", "neural_compressor.adaptor.tensorflow", "neural_compressor.adaptor.tf_utils.graph_converter", "neural_compressor.adaptor.tf_utils.graph_converter_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", "neural_compressor.adaptor.tf_utils.graph_rewriter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.adaptor.tf_utils.graph_util", "neural_compressor.adaptor.tf_utils", "neural_compressor.adaptor.tf_utils.quantize_graph", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", "neural_compressor.adaptor.tf_utils.quantize_graph.qat", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph_common", "neural_compressor.adaptor.tf_utils.smooth_quant_calibration", "neural_compressor.adaptor.tf_utils.smooth_quant_scaler", "neural_compressor.adaptor.tf_utils.tf2onnx_converter", "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", "neural_compressor.adaptor.tf_utils.transform_graph", "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", "neural_compressor.adaptor.tf_utils.util", "neural_compressor.adaptor.torch_utils.autoround.model_wrapper", "neural_compressor.adaptor.torch_utils.bf16_convert", "neural_compressor.adaptor.torch_utils.hawq_metric", "neural_compressor.adaptor.torch_utils", "neural_compressor.adaptor.torch_utils.layer_wise_quant", "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", "neural_compressor.adaptor.torch_utils.model_wrapper", "neural_compressor.adaptor.torch_utils.pattern_detector", "neural_compressor.adaptor.torch_utils.symbolic_trace", "neural_compressor.adaptor.torch_utils.util", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.utils.logger", "neural_compressor.compression.callbacks", "neural_compressor.compression.distillation.criterions", "neural_compressor.compression.distillation", "neural_compressor.compression.distillation.optimizers", "neural_compressor.compression.distillation.utility", "neural_compressor.compression.hpo", "neural_compressor.compression.hpo.sa_optimizer", "neural_compressor.compression.pruner.criteria", "neural_compressor.compression.pruner", "neural_compressor.compression.pruner.model_slim.auto_slim", "neural_compressor.compression.pruner.model_slim", "neural_compressor.compression.pruner.model_slim.pattern_analyzer", "neural_compressor.compression.pruner.model_slim.weight_slim", "neural_compressor.compression.pruner.patterns.base", "neural_compressor.compression.pruner.patterns", "neural_compressor.compression.pruner.patterns.mha", "neural_compressor.compression.pruner.patterns.ninm", "neural_compressor.compression.pruner.patterns.nxm", "neural_compressor.compression.pruner.pruners.base", "neural_compressor.compression.pruner.pruners.basic", "neural_compressor.compression.pruner.pruners.block_mask", "neural_compressor.compression.pruner.pruners", "neural_compressor.compression.pruner.pruners.mha", "neural_compressor.compression.pruner.pruners.pattern_lock", "neural_compressor.compression.pruner.pruners.progressive", "neural_compressor.compression.pruner.pruners.retrain_free", "neural_compressor.compression.pruner.pruning", "neural_compressor.compression.pruner.regs", "neural_compressor.compression.pruner.schedulers", "neural_compressor.compression.pruner.tf_criteria", "neural_compressor.compression.pruner.utils", "neural_compressor.compression.pruner.wanda", "neural_compressor.compression.pruner.wanda.utils", "neural_compressor.conf.pythonic_config", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.dataloaders.base_dataloader", "neural_compressor.data.dataloaders.dataloader", "neural_compressor.data.dataloaders.default_dataloader", "neural_compressor.data.dataloaders.fetcher", "neural_compressor.data.dataloaders.mxnet_dataloader", "neural_compressor.data.dataloaders.onnxrt_dataloader", "neural_compressor.data.dataloaders.pytorch_dataloader", "neural_compressor.data.dataloaders.sampler", "neural_compressor.data.dataloaders.tensorflow_dataloader", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.onnxrt.algorithms.smoother.calibrator", "neural_compressor.onnxrt.algorithms.smoother.core", "neural_compressor.onnxrt.utils.onnx_model", "neural_compressor.profiling", "neural_compressor.profiling.parser.factory", "neural_compressor.profiling.parser.onnx_parser.factory", "neural_compressor.profiling.parser.onnx_parser.parser", "neural_compressor.profiling.parser.parser", "neural_compressor.profiling.parser.result", "neural_compressor.profiling.parser.tensorflow_parser.factory", "neural_compressor.profiling.parser.tensorflow_parser.parser", "neural_compressor.profiling.profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.profiler", "neural_compressor.profiling.profiler.onnxrt_profiler.utils", "neural_compressor.profiling.profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.factory", "neural_compressor.profiling.profiler.tensorflow_profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.utils", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.template.api_doc_example", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.tensorflow.utils.nets_factory", "neural_compressor.torch.algorithms.layer_wise", "neural_compressor.torch.algorithms.layer_wise.load", "neural_compressor.torch.algorithms.layer_wise.modified_pickle", "neural_compressor.torch.algorithms.layer_wise.utils", "neural_compressor.torch.algorithms.weight_only.hqq.quant_api", "neural_compressor.torch.algorithms.weight_only.modules", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "titleterms": {"": [502, 537, 562, 568], "0": 595, "1": [500, 529, 532, 535, 541, 561, 568, 569, 595], "13": 595, "15": [581, 595], "2": [500, 529, 532, 535, 541, 561, 568, 569, 595], "2018": 581, "2020": 581, "2021": 581, "2022": 581, "2023": 581, "25": 581, "3": [532, 545, 561], "35": 581, "4": [532, 552, 561, 581], "5": 561, "64": 537, "79": 581, "For": 545, "One": 579, "Or": 555, "With": 583, "abil": 505, "accept": 498, "access": 582, "accord": [504, 505], "accuraci": [542, 564, 566, 583, 592], "activ": [6, 564], "ad": 503, "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 503, 504, 506], "add": [504, 569], "addit": 502, "advanc": [500, 567, 593], "ai": 537, "algorithm": [148, 149, 150, 151, 152, 340, 341, 379, 380, 381, 476, 477, 478, 479, 480, 481, 521, 586, 589, 592], "alpha": 589, "amazon": 545, "an": [504, 574, 575, 576], "analyz": [564, 566, 567], "annot": 522, "api": [500, 503, 504, 509, 510, 520, 523, 524, 527, 528, 529, 534, 535, 540, 542, 544, 548, 562, 563, 570, 576, 578, 579, 580, 582, 593], "api_doc_exampl": 378, "app": 567, "appendix": 531, "approach": 583, "architectur": [500, 525, 536, 537], "argmax": 7, "argument": 549, "ask": 532, "attent": 8, "attribut": [205, 247, 378, 497], "auto": [360, 555, 561, 585, 589, 592], "auto_mixed_precis": [305, 361], "auto_slim": 164, "autom": [556, 559], "autoround": 135, "avail": 567, "aw": 545, "awai": 562, "awar": [499, 541, 580, 583], "backend": [503, 583], "background": [503, 522, 561], "base": [168, 173, 537, 570, 593], "base_dataload": [194, 235], "base_model": 330, "basic": [174, 306, 362, 500, 592], "basic_na": 278, "bayesian": [307, 363, 592], "bench": 548, "benchmark": [153, 220, 511, 520, 526, 541, 582], "benefit": 588, "bert_dataset": [203, 245], "best": [547, 555], "between": 535, "bf16": [36, 37, 38, 384, 385, 386, 542], "bf16_convert": [36, 136, 384], "bias_correct": [129, 467], "bigdl": 546, "binari": 537, "binary_op": 9, "bleu": [268, 321], "bleu_util": [269, 322], "block": 589, "block_mask": [0, 175], "build": [523, 532, 540, 567, 568, 569], "built": [535, 537, 540], "bundl": 567, "calcul": 504, "calibr": [3, 4, 340, 379, 504, 521], "callback": 155, "capabl": [503, 586], "chang": [505, 535, 560, 562, 587], "changelog": [553, 557], "channel": 589, "check": 498, "checklist": 498, "citat": 538, "class": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 141, 144, 145, 148, 149, 151, 152, 154, 155, 156, 158, 162, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 259, 260, 261, 266, 268, 271, 275, 276, 277, 278, 279, 281, 283, 284, 285, 287, 288, 289, 290, 293, 294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 321, 324, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 481, 482, 483, 487, 488, 489, 491, 493, 494, 503, 571], "client": 577, "cluster": [569, 570], "coco_dataset": [204, 246], "coco_filt": [211, 253], "coco_label_map": [270, 323], "coco_tool": [271, 324], "code": [497, 498, 500, 522, 541, 562, 567, 586, 593], "coder": [544, 548, 550, 561, 593], "collabor": 563, "collect_layer_histogram": 483, "comment": 522, "common": [154, 221, 222, 223, 224, 225, 226, 227, 228, 499, 532], "commun": 502, "comparison": 588, "compat": 537, "compon": 229, "compress": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 230, 512, 586], "compressor": [496, 499, 502, 523, 526, 536, 537, 540, 541, 555, 561, 588, 596], "concat": 10, "conda": [556, 559], "conduct": [497, 498], "conf": 188, "config": [189, 513, 524, 578], "configur": [505, 529, 533, 567, 582, 588, 594], "conserv": [364, 592], "constant": [314, 372, 484], "contact": [544, 568], "content": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 259, 260, 261, 263, 264, 265, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 502, 571], "contrib": [190, 191, 192, 193, 231, 232, 233, 234], "contribut": [498, 554, 558], "contributor": [497, 498], "control": 547, "conv": 11, "convent": 522, "convert_add_to_biasadd": [39, 387], "convert_layout": [40, 388], "convert_leakyrelu": [41, 389], "convert_nan_to_random": [42, 390], "convert_placeholder_to_const": [43, 391], "core": 341, "coven": [497, 498], "cpu": [537, 547, 595], "creat": [498, 567], "create_obj_from_config": 485, "criteria": [162, 498, 580, 592], "criterion": [156, 221], "custom": [500, 523, 540, 574, 592], "data": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 473, 504, 505, 526, 530, 565], "dataload": [194, 195, 196, 197, 198, 199, 200, 201, 202, 222, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 523, 524], "dataset": [203, 204, 205, 206, 207, 208, 209, 210, 245, 246, 247, 248, 249, 250, 251, 252, 524, 526, 535, 566], "debug": [564, 566], "decai": 580, "default_dataload": [196, 237], "defin": [505, 529], "definit": 571, "deploy": [567, 580], "dequantize_cast_optim": [37, 385], "descript": [526, 570, 572], "design": [504, 525, 571, 592], "detail": 499, "determin": 589, "develop": [554, 558], "devic": 583, "diagnosi": [526, 563], "diagram": 571, "differ": 588, "dilated_contract": [44, 392], "direct_q8": 12, "distil": [156, 157, 158, 159, 261, 527, 528, 541, 582, 595], "distribut": [529, 550, 592], "do": [526, 544], "doc": 571, "document": [496, 502, 509, 596], "doe": 568, "download": [570, 574, 575], "driven": 542, "dummy_biasadd": [45, 393], "dummy_dataset": [206, 248], "dummy_dataset_v2": [207, 249], "dump": [563, 565], "dure": [542, 585], "dyna": 279, "dynam": [499, 500, 583], "each": 589, "eject": 567, "embed_layernorm": 13, "enabl": [548, 555, 561], "end": [568, 574, 575, 576], "endpoint": 570, "enforc": 497, "engin": 589, "enhanc": 589, "entir": 589, "environ": [537, 547], "evalu": 529, "evaluate_squad": [272, 325], "event": [502, 581], "exampl": [499, 500, 503, 509, 520, 523, 524, 526, 527, 528, 529, 530, 531, 540, 541, 542, 543, 546, 550, 563, 564, 565, 566, 568, 573, 574, 575, 576, 578, 579, 580, 583, 584, 586, 589, 590, 595], "except": [140, 478], "execut": 529, "exhaust": [308, 365, 592], "exit": 592, "expanddims_optim": [46, 394], "experiment": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319], "explor": 562, "export": [262, 263, 264, 265, 531, 586], "extens": [544, 554, 555, 558, 561, 562, 571, 595], "f1": [273, 326], "face": [535, 575, 576], "factori": [344, 345, 349, 351, 352, 356], "fail": 567, "fake_quant": [99, 440], "fallback": 526, "fast_bias_correct": 149, "featur": [526, 529, 533, 536, 550, 551, 555, 582, 583, 590, 594], "fetch_weight_from_reshap": [47, 395], "fetcher": [197, 238], "few": 505, "file": [524, 533, 594], "filter": [211, 212, 213, 253, 254, 255], "fix": 589, "flow": [503, 583], "fold_batch_norm": [48, 396], "fold_const": [49, 397], "folder": [522, 562], "forg": [556, 559], "fp16": 542, "fp32": [504, 531], "framework": [504, 523, 524, 531, 533, 543, 582, 584, 586, 589], "free": 580, "freeze_fake_qu": [74, 421], "freeze_valu": [75, 422], "freeze_value_without_calib": [76, 423], "frequenc": 547, "frequent": 532, "from": [502, 504, 537, 541, 563, 568, 569], "full": 581, "function": [2, 4, 22, 30, 31, 32, 53, 54, 56, 90, 91, 102, 104, 134, 136, 137, 142, 143, 146, 147, 148, 153, 156, 158, 159, 162, 163, 164, 166, 168, 169, 173, 176, 181, 182, 183, 184, 185, 187, 195, 196, 203, 205, 212, 218, 219, 220, 221, 225, 226, 228, 237, 245, 247, 254, 259, 260, 263, 264, 265, 268, 269, 271, 272, 273, 275, 282, 289, 293, 298, 299, 300, 302, 307, 313, 317, 319, 321, 322, 324, 325, 326, 328, 329, 333, 337, 339, 354, 358, 359, 363, 371, 375, 377, 378, 401, 402, 404, 443, 445, 472, 474, 477, 479, 482, 485, 488, 489, 490, 492, 493, 529], "fundament": [583, 589], "further": 562, "fuse_biasadd_add": [50, 398], "fuse_column_wise_mul": [51, 399], "fuse_conv_redundant_dequant": [77, 424], "fuse_conv_requant": [78, 425], "fuse_conv_with_math": [52, 400], "fuse_decomposed_bn": [53, 401], "fuse_decomposed_in": [54, 402], "fuse_gelu": [55, 403], "fuse_layer_norm": [56, 404], "fuse_matmul_redundant_dequant": [79, 426], "fuse_matmul_requant": [80, 427], "fuse_pad_with_conv": [57, 405], "fuse_pad_with_fp32_conv": [58, 406], "fuse_qdq_bn": [109, 450], "fuse_qdq_concatv2": [110, 451], "fuse_qdq_conv": [111, 452], "fuse_qdq_deconv": [112, 453], "fuse_qdq_in": [113, 454], "fuse_qdq_matmul": [114, 455], "fuse_qdq_pool": [115, 456], "fuse_reshape_transpos": [59, 407], "fx": 499, "gather": 14, "gavgpool": 15, "gemm": 16, "gener": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 504], "get": [499, 500, 502, 503, 520, 523, 524, 526, 527, 528, 529, 533, 534, 540, 542, 544, 555, 562, 563, 567, 568, 569, 570, 578, 579, 580, 582, 583, 590, 594], "go": 562, "govern": 547, "gpu": 537, "gradient_sensit": 284, "graph": 504, "graph_bas": [72, 420], "graph_convert": [34, 382], "graph_converter_without_calib": [35, 383], "graph_cse_optim": [60, 408], "graph_optim": 266, "graph_rewrit": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "graph_transform_bas": [130, 468], "graph_util": [96, 438], "grappler_pass": [61, 409], "group_lasso": 285, "grpc": 576, "guid": [545, 593], "guidelin": 498, "hardwar": [537, 542, 595], "hawq_metr": 137, "hawq_v2": [366, 592], "help": 555, "highlight": 552, "histogram": 566, "horovodrun": 529, "how": [504, 505, 526, 564, 565, 566, 568], "hpo": [160, 161], "hqq": 480, "hug": [575, 576], "hyperparamet": 580, "icon": 561, "imagenet_dataset": [208, 250], "imagenet_transform": [215, 257], "implement": [503, 504], "import": 522, "inc": 522, "incompat": [535, 587], "infer": 529, "inform": 538, "infrastructur": 536, "innov": 593, "insert_log": [132, 470], "insert_print_nod": [63, 411], "insert_qdq_pattern": [93, 435], "insight": [563, 564, 565, 566], "inspect": 569, "instal": [502, 526, 537, 545, 547, 554, 555, 558, 563, 568, 569], "instanc": 545, "int4": 505, "int8": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 531, 595], "intel": [496, 502, 523, 526, 536, 537, 540, 541, 547, 555, 561, 595, 596], "interfac": 522, "intermedi": 527, "intern": 522, "introduct": [499, 500, 503, 504, 505, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 540, 542, 543, 561, 564, 565, 566, 578, 579, 580, 582, 583, 584, 586, 588, 589, 590, 591, 592, 594], "invok": 505, "ipex": [539, 583], "issu": [532, 587], "iter": 504, "jemalloc": 547, "json": 522, "jupyt": [544, 545, 556, 559], "jupyterlab": 555, "kei": 539, "keras_model": 332, "kernel": 505, "kit": 537, "kl_diverg": 487, "knowledg": [527, 595], "known": 587, "lab": [544, 545], "languag": 580, "larg": 580, "launcher": [544, 549], "layer": [527, 584, 589], "layer_wis": [476, 477, 478, 479], "layer_wise_qu": [139, 140, 141, 142, 143], "learn": [567, 568], "legal": 538, "let": 555, "licens": 538, "like": 505, "limit": 589, "line": 505, "list": [504, 530, 573, 591], "llm": [502, 539], "load": 477, "load_huggingfac": 488, "log": [560, 569, 570], "logger": [154, 297, 489, 522], "lstm": 18, "lwq": 584, "magnitud": 287, "make": [556, 559, 562, 567], "manag": [569, 574, 575], "manual": [556, 559], "matmul": [19, 589], "matrix": [499, 500, 503, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 540, 542, 543, 546, 578, 579, 580, 582, 583, 584, 586, 589, 590, 594], "maxpool": 20, "merge_duplicated_qdq": [94, 436], "meta_op_optim": [82, 429], "method": [568, 569], "metric": [224, 268, 269, 270, 271, 272, 273, 274, 275, 321, 322, 323, 324, 325, 326, 327, 328, 535, 540], "mha": [170, 177], "migrat": 541, "minifi": 567, "mix": [514, 541, 542, 585], "mix_precis": 329, "mixed_precis": 276, "mkl": 547, "mode": [499, 595], "model": [225, 330, 331, 332, 333, 334, 335, 336, 337, 338, 504, 515, 531, 534, 537, 539, 541, 543, 550, 564, 565, 566, 574, 575, 576, 580, 584, 586, 589, 595], "model_convers": 277, "model_slim": [164, 165, 166, 167], "model_wrapp": [135, 144, 474], "modifi": 526, "modified_pickl": [140, 478], "modulmore": [567, 568], "move_squeeze_after_relu": [64, 412], "mse": [310, 368, 592], "mse_v2": [311, 369, 592], "multipl": [537, 578, 595], "mxnet": [524, 540, 583, 591], "mxnet_dataload": [198, 240], "mxnet_model": 334, "mxnet_util": [1, 2], "na": [278, 279, 280, 281, 282, 283, 500, 582], "nano": 546, "nas_util": 282, "need": 504, "nets_factori": [335, 475], "network": 580, "neural": [496, 499, 500, 502, 523, 526, 536, 537, 540, 541, 544, 548, 550, 555, 561, 563, 564, 565, 566, 568, 569, 570, 574, 575, 576, 580, 588, 593, 596], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "neural_compressor_ext_lab": [554, 556], "neural_compressor_ext_lab_alibaba": [558, 559], "neural_insights_util": 490, "new": [502, 503, 505, 556, 559, 592], "ninm": 171, "node": 569, "non": 502, "norm": 21, "note": [499, 587], "notebook": 545, "npm": [556, 559, 567], "numa": 547, "nxm": 172, "oaa": 571, "object": [339, 516, 574, 575, 576, 578], "off": 585, "offer": 544, "onli": [500, 502, 586], "onnx": [87, 88, 89, 90, 91, 507, 537, 583, 584, 595], "onnx_graph": 88, "onnx_model": [336, 342], "onnx_nod": 89, "onnx_pars": [345, 346], "onnx_schema": 90, "onnxrt": [340, 341, 342, 524, 540, 591], "onnxrt_dataload": [199, 241], "onnxrt_profil": [352, 353, 354], "onnxrtadaptor": 503, "op": [22, 531], "open": [561, 566], "openmp": 547, "oper": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 504, 505], "optim": [158, 226, 551, 561, 571, 574, 575, 576, 579, 580, 593], "optimize_lay": [104, 445], "optimize_qdq": [117, 458], "option": [491, 529, 549], "orchestr": [541, 579], "other": 552, "our": [497, 589], "overview": [498, 571, 593], "ox_util": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "packag": [163, 169, 176, 554, 556, 558, 559], "pad": 23, "paramet": [526, 570], "parser": [344, 345, 346, 347, 348, 349, 350], "pattern": [168, 169, 170, 171, 172, 292, 293, 294, 298, 580], "pattern_analyz": 166, "pattern_detector": 145, "pattern_lock": [178, 288], "per": 589, "perform": [547, 588], "ping": 570, "pip": [568, 569], "platform": [547, 588], "pledg": 497, "polici": [501, 592], "pool": 24, "post": [499, 541, 570, 583], "post_hostconst_convert": [83, 430], "post_quantized_op_cs": [84, 431], "postprocess": [217, 227], "pre": 555, "pre_optim": [65, 413], "precis": [514, 541, 542, 585], "prepar": [504, 526, 564, 565, 566, 588], "prerequisit": [537, 568, 569], "problem": 499, "process": 592, "processor": 537, "product": 593, "profil": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 526], "progress": [179, 567], "prune": [181, 290, 301, 541, 580, 582, 595], "prune_util": 299, "pruner": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 289, 300], "pruner_legaci": [284, 285, 286, 287, 288, 289], "pruning_recip": [291, 292, 293, 294], "pruning_v2": 295, "ptq": 595, "public": [502, 522, 581], "publish": [556, 559], "pull": 498, "pure": 529, "pypi": [502, 550, 563], "python": [500, 523, 534, 540, 544, 548, 549, 556, 559, 563, 582, 593], "pythonic_config": 188, "pytorch": [492, 524, 529, 531, 540, 565, 583, 584, 585, 590, 591, 595], "pytorch_dataload": [200, 242], "pytorch_prun": [296, 297, 298, 299, 300, 301, 302], "qat": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 595], "qdq": [92, 93, 94, 95, 109, 110, 111, 112, 113, 114, 115, 116, 117, 434, 435, 436, 437, 450, 451, 452, 453, 454, 455, 456, 457, 458, 595], "qlinear2qdq": 263, "quant": 589, "quant_api": 480, "quantiz": [29, 141, 303, 359, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 499, 502, 504, 505, 517, 521, 526, 528, 531, 534, 537, 539, 541, 542, 550, 561, 563, 564, 565, 566, 574, 575, 576, 582, 583, 584, 585, 586, 589, 595], "quantize_config": [101, 442], "quantize_graph": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "quantize_graph_bas": [118, 459], "quantize_graph_bn": [119, 460], "quantize_graph_common": [125, 466], "quantize_graph_concatv2": [120, 461], "quantize_graph_conv": [121, 462], "quantize_graph_for_intel_cpu": [122, 463], "quantize_graph_matmul": [123, 464], "quantize_graph_pool": [124, 465], "quantize_help": [102, 443], "quantize_lay": [103, 104, 105, 106, 107, 444, 445, 446, 447, 448], "quantize_layer_add": [105, 446], "quantize_layer_bas": [106, 447], "quantize_layer_bn": [107, 448], "quantize_wrapp": [108, 449], "queri": [503, 569, 574, 575, 576], "query_fw_cap": 504, "question": 532, "quick": [534, 549], "random": [312, 370, 592], "rang": 504, "react": 567, "recip": [539, 583], "recommend": 522, "reduc": 25, "refer": [521, 522, 580, 583, 586, 589], "reg": 182, "regular": 580, "releas": [530, 556, 559, 587], "remov": 569, "remove_training_nod": [66, 414], "rename_batch_norm": [67, 415], "report": 501, "request": [498, 542, 572], "requir": [537, 554, 558, 564, 565, 566, 574], "requisit": 555, "rerange_quantized_concat": [133, 471], "research": 563, "resiz": 26, "resourc": [569, 574, 575], "respons": [497, 570], "result": [348, 564, 566, 574, 575, 576], "retrain": 580, "retrain_fre": 180, "rnn_convert": [85, 432], "rule": [522, 583], "run": [504, 526, 562, 564, 565, 566, 567], "runtim": [507, 537, 583, 584, 595], "sa_optim": 161, "sagemak": 545, "sampl": [504, 534], "sampler": [201, 243], "scale_propag": [86, 433], "scaler": 380, "schedul": [183, 302, 304, 580], "scheme": 583, "scope": [497, 580], "screen": 570, "script": [526, 567], "search": [500, 561], "search_algorithm": 283, "section": [496, 596], "secur": [501, 529], "see": 526, "select": [502, 555], "self": 527, "servic": [569, 571, 574, 575, 576], "set": [522, 526, 547, 561], "setup": 562, "share_qdq_y_pattern": [95, 437], "shot": 579, "sigopt": [192, 233, 588, 592], "singl": 578, "size": 567, "smooth": 589, "smooth_quant": [30, 151], "smooth_quant_calibr": 126, "smooth_quant_scal": 127, "smoother": [340, 341, 379, 380], "smoothquant": 589, "softwar": [537, 542], "solut": [568, 569, 570, 574, 575, 576], "sourc": [537, 563, 565, 566, 568, 569], "space": 592, "spars": 580, "sparsiti": 580, "specif": [505, 524], "specifi": 583, "split": [27, 567], "split_shared_input": [68, 416], "standard": 497, "start": [499, 500, 502, 503, 520, 523, 524, 526, 527, 528, 529, 533, 534, 540, 542, 544, 545, 549, 555, 563, 567, 568, 569, 574, 575, 576, 578, 579, 580, 582, 583, 590, 594], "state": 569, "static": [499, 502, 583], "static_qu": 381, "statu": [498, 569, 570], "step": [498, 563, 564, 565, 566], "stop": [569, 574, 575, 576], "straight": 562, "strategi": [191, 192, 193, 232, 233, 234, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 518, 588, 592], "string": 522, "strip_equivalent_nod": [69, 417], "strip_unused_nod": [70, 418], "structur": 522, "studio": 545, "style": 582, "style_transfer_dataset": [210, 252], "submit": [569, 570, 574, 575, 576], "submodul": [1, 5, 17, 38, 62, 73, 81, 87, 92, 97, 98, 100, 103, 116, 131, 138, 139, 150, 157, 160, 163, 165, 169, 176, 186, 191, 209, 213, 216, 223, 232, 239, 251, 255, 258, 262, 267, 274, 280, 286, 292, 296, 309, 315, 320, 327, 331, 367, 373, 386, 410, 428, 434, 439, 441, 444, 457, 469, 476, 486], "subpackag": [5, 73, 97, 98, 100, 138, 163, 190, 214, 231, 256, 267, 291, 309, 320, 367, 439, 441], "suggest": 526, "summari": [505, 564], "superbench": 548, "support": [498, 499, 500, 503, 505, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 537, 540, 542, 543, 545, 546, 550, 551, 578, 579, 580, 582, 583, 584, 586, 589, 590, 591, 594], "switch_optim": [71, 419], "symbolic_trac": 146, "system": 537, "task": [569, 570, 572, 574, 575, 576], "task_id": 570, "templat": [378, 498], "tensor": [563, 589], "tensorboard": 590, "tensorflow": [33, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 524, 529, 531, 540, 583, 585, 590, 591, 595], "tensorflow_dataload": [202, 244], "tensorflow_model": 337, "tensorflow_pars": [349, 350], "tensorflow_profil": [356, 357, 358], "test": [562, 567], "tf2onnx": 264, "tf2onnx_convert": 128, "tf2onnx_util": 91, "tf_criteria": 184, "tf_util": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "through": [537, 589, 595], "tile_pattern": 294, "todo": 522, "token": [218, 259], "topic": 593, "torch": [476, 477, 478, 479, 480, 481, 508, 595], "torch2onnx": 265, "torch_load": 142, "torch_model": 338, "torch_util": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 228], "tpe": [193, 234, 592], "trademark": 538, "train": [482, 499, 519, 529, 541, 580, 583], "transform": [215, 216, 217, 218, 219, 257, 258, 259, 260, 535, 591], "transform_graph": [129, 130, 131, 132, 133, 467, 468, 469, 470, 471], "tune": [505, 583, 586, 589, 592], "tune_cfg": 504, "tuning_sampl": [316, 374], "tuning_spac": [317, 375], "tuning_struct": [318, 376], "turn": 585, "type": [505, 522, 580], "u": 555, "unary_op": 28, "uninstal": [554, 558], "unreleas": 560, "up": 562, "url": 570, "us": [505, 523, 540, 568, 569, 589], "usag": [500, 550, 561, 570, 589, 590, 592], "user": [524, 529, 535, 582, 586, 593, 594], "util": [2, 31, 134, 143, 147, 154, 159, 185, 187, 314, 315, 316, 317, 318, 319, 342, 354, 358, 372, 373, 374, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 508], "v": [522, 562], "v0": 552, "v1": 535, "valid": [534, 537, 589, 595], "variabl": 547, "vendor": 537, "version": 495, "vscode": 561, "vulner": 501, "wanda": [186, 187], "we": 544, "web": 567, "websocket": 570, "weight": [502, 564, 565, 566, 586], "weight_correct": 152, "weight_onli": [32, 480, 481], "weight_slim": 167, "weights_detail": 494, "welcom": 562, "what": [502, 544, 562, 568], "why": 568, "wip": 571, "wise": 584, "without": 583, "woq": [586, 595], "work": [503, 568, 583], "workflow": [525, 571], "x": 541, "xe": 537, "yaml": [500, 504, 524, 529, 533, 594], "you": 555, "your": 562, "zero": 593}})