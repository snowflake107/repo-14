Search.setIndex({"alltitles": {"1. Open": [[564, "open"]], "1. Python code + YAML": [[502, "python-code-yaml"]], "2. Python code only": [[502, "python-code-only"]], "2. Search": [[564, "search"]], "2018 - 2020 (4)": [[584, "id5"]], "2021 (15)": [[584, "id4"]], "2022 (35)": [[584, "id3"]], "2023 (25)": [[584, "id2"]], "2024 (3)": [[584, "id1"]], "3. Setting": [[564, "setting"]], "4. Icon": [[564, "icon"]], "5. optimization (quantization)": [[564, "optimization-quantization"]], "5.1 Enable": [[564, "enable"]], "5.2 Auto": [[564, "auto"]], "API Document Example": [[511, "api-document-example"]], "API List that Need to Implement": [[506, "api-list-that-need-to-implement"]], "API for TensorFlow": [[495, "api-for-tensorflow"]], "APIs": [[512, "apis"]], "AWQ": [[491, "awq"]], "AWS Amazon SageMaker Support": [[548, "aws-amazon-sagemaker-support"]], "Accuracy Aware Tuning": [[497, "accuracy-aware-tuning"], [586, "accuracy-aware-tuning"]], "Accuracy Criteria": [[595, "accuracy-criteria"]], "Accuracy-driven mixed precision": [[488, "accuracy-driven-mixed-precision"], [544, "accuracy-driven-mixed-precision"]], "Activations summary": [[567, "activations-summary"]], "Adaptor": [[505, "adaptor"], [508, "adaptor"]], "Adaptor Support Matrix": [[505, "adaptor-support-matrix"]], "Add node": [[572, "add-node"]], "Add quantize API according to tune_cfg": [[506, "add-quantize-api-according-to-tune-cfg"]], "Add query_fw_capability to Adaptor": [[506, "add-query-fw-capability-to-adaptor"]], "Additional Content": [[504, "additional-content"]], "Advanced Configuration": [[570, "advanced-configuration"]], "Advanced Topics": [[596, "advanced-topics"]], "Advanced Usage (Custom NAS)": [[502, "advanced-usage-custom-nas"]], "Algorithm: Auto-tuning of $\\alpha$.": [[592, "algorithm-auto-tuning-of-alpha"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[578, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[579, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "An end-to-end example: quantize a custom model with Neural Solution": [[577, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Analyzing the Bundle Size": [[570, "analyzing-the-bundle-size"]], "Analyzing the result of quantization": [[567, "analyzing-the-result-of-quantization"], [569, "analyzing-the-result-of-quantization"]], "Analyzing weight histograms": [[569, "analyzing-weight-histograms"]], "Appendix": [[533, "appendix"]], "Architecture": [[527, "architecture"], [538, "architecture"]], "Attributes": [[204, "attributes"], [246, "attributes"], [377, "attributes"]], "Attribution": [[499, "attribution"]], "Auto": [[595, "auto"]], "Auto-enable a feature": [[558, "auto-enable-a-feature"]], "Auto-tune the alpha for each layer/block": [[592, "auto-tune-the-alpha-for-each-layer-block"]], "Auto-tune the alpha for the entire model": [[592, "auto-tune-the-alpha-for-the-entire-model"]], "AutoRound": [[491, "autoround"]], "AutoTune": [[496, "autotune"]], "Automated releases with the Jupyter Releaser": [[559, "automated-releases-with-the-jupyter-releaser"], [562, "automated-releases-with-the-jupyter-releaser"]], "Autotune API": [[492, "autotune-api"]], "Available Scripts": [[570, "available-scripts"]], "Backend and Device": [[495, "backend-and-device"]], "Background": [[505, "background"], [524, "background"]], "Background Introduction": [[564, "background-introduction"]], "Base URL": [[573, "base-url"]], "Basic": [[595, "basic"]], "Basic NAS": [[502, "basic-nas"]], "Basic Usage": [[502, "basic-usage"]], "Bayesian": [[595, "bayesian"]], "Bench": [[551, "bench"]], "Benchmark": [[513, "benchmark"], [543, "benchmark"], [585, "benchmark"]], "Benchmark Support Matrix": [[522, "benchmark-support-matrix"]], "Benchmark diagnosis": [[528, "benchmark-diagnosis"]], "Benchmarking": [[522, "benchmarking"]], "Benefit of SigOpt Strategy": [[591, "benefit-of-sigopt-strategy"]], "BigDL Nano Support": [[549, "bigdl-nano-support"]], "Build Custom Dataloader with Python API": [[525, "build-custom-dataloader-with-python-api"]], "Build Custom Metric with Python API": [[542, "build-custom-metric-with-python-api"]], "Built-in transform/dataset/metric APIs": [[537, "built-in-transform-dataset-metric-apis"]], "Calculate the data range and generate quantized model": [[506, "calculate-the-data-range-and-generate-quantized-model"]], "Calibration Algorithms": [[523, "calibration-algorithms"]], "Calibration Algorithms in Quantization": [[523, "calibration-algorithms-in-quantization"]], "Capability": [[505, "capability"]], "Change Log": [[563, "change-log"]], "Changelog": [[556, "changelog"], [560, "changelog"]], "Citation": [[540, "citation"]], "Class definition diagram": [[574, "class-definition-diagram"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [99, "classes"], [101, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [136, "classes"], [140, "classes"], [143, "classes"], [144, "classes"], [147, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [187, "classes"], [188, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [214, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [256, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [265, "classes"], [267, "classes"], [270, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [297, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [323, "classes"], [327, "classes"], [329, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [442, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [456, "classes"], [457, "classes"], [459, "classes"], [460, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [481, "classes"], [483, "classes"], [484, "classes"]], "Client": [[580, "client"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[543, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Code Splitting": [[570, "code-splitting"]], "Comments": [[524, "comments"]], "Common Build Issues": [[534, "common-build-issues"]], "Common Problem": [[501, "common-problem"]], "Common Problems": [[492, "common-problems"]], "Common arguments": [[491, "common-arguments"]], "Communication": [[504, "communication"]], "Compression": [[514, "compression"]], "Config": [[515, "config"]], "Config Multiple Objectives": [[581, "config-multiple-objectives"]], "Config Single Objective": [[581, "config-single-objective"]], "Config dataloader in a yaml file": [[526, "config-dataloader-in-a-yaml-file"]], "Conservative Tuning": [[595, "conservative-tuning"]], "Contact": [[547, "contact"], [571, "contact"]], "Contents": [[574, "contents"]], "Contributing": [[557, "contributing"], [561, "contributing"]], "Contribution Guidelines": [[500, "contribution-guidelines"]], "Contributor Covenant Code of Conduct": [[499, "contributor-covenant-code-of-conduct"], [500, "contributor-covenant-code-of-conduct"]], "Create Pull Request": [[500, "create-pull-request"]], "Customize a New Tuning Strategy": [[595, "customize-a-new-tuning-strategy"]], "DataLoader": [[525, "dataloader"]], "Dataset": [[526, "dataset"]], "Define the Quantization Ability of the Specific Operator": [[507, "define-the-quantization-ability-of-the-specific-operator"]], "Deployment": [[570, "deployment"]], "Description": [[573, "description"], [573, "id1"], [573, "id4"], [573, "id8"], [573, "id12"], [573, "id15"], [573, "id18"], [573, "id21"], [573, "id24"]], "Design": [[527, "design"], [595, "design"], [595, "id1"], [595, "id3"], [595, "id5"], [595, "id7"], [595, "id9"], [595, "id11"], [595, "id13"], [595, "id15"], [595, "id17"], [595, "id19"], [595, "id21"]], "Design Doc for Optimization as a Service [WIP]": [[574, "design-doc-for-optimization-as-a-service-wip"]], "Design the framework YAML": [[506, "design-the-framework-yaml"]], "Details": [[501, "details"]], "Determining the alpha through auto-tuning": [[494, "determining-the-alpha-through-auto-tuning"], [592, "determining-the-alpha-through-auto-tuning"]], "Development install": [[557, "development-install"], [561, "development-install"]], "Development uninstall": [[557, "development-uninstall"], [561, "development-uninstall"]], "Diagnosis": [[528, "diagnosis"]], "Diagnosis Introduction": [[528, "diagnosis-introduction"]], "Diagnosis suggestions": [[528, "diagnosis-suggestions"]], "Distillation": [[529, "distillation"], [543, "distillation"], [585, "distillation"]], "Distillation Support Matrix": [[529, "distillation-support-matrix"]], "Distillation for Quantization": [[530, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[530, "distillation-for-quantization-support-matrix"]], "Distributed Training and Inference (Evaluation)": [[531, "distributed-training-and-inference-evaluation"]], "Distributed Tuning": [[595, "distributed-tuning"]], "Documentation": [[504, "documentation"]], "Download optimized model": [[577, "download-optimized-model"], [578, "download-optimized-model"]], "During quantization mixed precision": [[544, "during-quantization-mixed-precision"]], "Dynamic NAS": [[502, "dynamic-nas"]], "Dynamic Quantization": [[486, "dynamic-quantization"], [497, "dynamic-quantization"], [501, "dynamic-quantization"]], "Enable": [[551, "enable"]], "End-to-end examples": [[571, "end-to-end-examples"]], "Endpoints": [[573, "endpoints"]], "Enforcement": [[499, "enforcement"]], "Engineering": [[592, "engineering"]], "Environment Variables": [[550, "environment-variables"]], "Example": [[528, "example"], [542, "example"], [549, "example"], [553, "example"], [581, "example"]], "Example List": [[532, "example-list"]], "Example of Adding a New Backend Support": [[505, "example-of-adding-a-new-backend-support"]], "Examples": [[486, "examples"], [487, "examples"], [488, "examples"], [491, "examples"], [493, "examples"], [494, "examples"], [501, "examples"], [502, "examples"], [522, "examples"], [525, "examples"], [526, "examples"], [529, "examples"], [530, "examples"], [531, "examples"], [532, "examples"], [533, "examples"], [543, "examples"], [544, "examples"], [545, "examples"], [546, "examples"], [582, "examples"], [583, "examples"], [586, "examples"], [587, "examples"], [589, "examples"], [593, "examples"]], "Examples List": [[576, "examples-list"]], "Exceptions": [[139, "exceptions"], [463, "exceptions"]], "Exhaustive": [[595, "exhaustive"]], "Exit Policy": [[595, "exit-policy"]], "Explore the API": [[565, "explore-the-api"]], "Export": [[533, "export"]], "Export Compressed Model": [[589, "export-compressed-model"]], "Extensibility": [[574, "extensibility"]], "FP32 Model Export": [[533, "fp32-model-export"], [533, "id1"]], "FX": [[501, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[501, "fx-mode-support-matrix-in-neural-compressor"]], "Fallback setting example": [[528, "fallback-setting-example"]], "Features Supported": [[553, "features-supported"]], "Fixed Alpha": [[489, "fixed-alpha"]], "Folder structure": [[524, "folder-structure"]], "For SageMaker Notebook instance": [[548, "for-sagemaker-notebook-instance"]], "For SageMaker Studio": [[548, "for-sagemaker-studio"]], "Framework YAML Configuration Files": [[535, "framework-yaml-configuration-files"]], "Frequency Governers": [[550, "frequency-governers"]], "Frequently Asked Questions": [[534, "frequently-asked-questions"]], "Full Publications/Events (82)": [[584, "full-publications-events-82"]], "Functions": [[2, "functions"], [4, "functions"], [22, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [53, "functions"], [54, "functions"], [56, "functions"], [90, "functions"], [91, "functions"], [102, "functions"], [104, "functions"], [134, "functions"], [135, "functions"], [136, "functions"], [141, "functions"], [142, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [158, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [168, "functions"], [172, "functions"], [175, "functions"], [180, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [186, "functions"], [194, "functions"], [195, "functions"], [202, "functions"], [204, "functions"], [211, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [224, "functions"], [225, "functions"], [227, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [253, "functions"], [258, "functions"], [259, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [274, "functions"], [281, "functions"], [288, "functions"], [292, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [306, "functions"], [312, "functions"], [316, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [327, "functions"], [328, "functions"], [332, "functions"], [336, "functions"], [338, "functions"], [353, "functions"], [357, "functions"], [358, "functions"], [362, "functions"], [370, "functions"], [374, "functions"], [376, "functions"], [377, "functions"], [399, "functions"], [400, "functions"], [402, "functions"], [458, "functions"], [459, "functions"], [460, "functions"], [462, "functions"], [464, "functions"], [468, "functions"], [471, "functions"], [473, "functions"], [474, "functions"], [475, "functions"], [478, "functions"], [479, "functions"], [480, "functions"], [482, "functions"], [483, "functions"]], "GET /": [[573, "get"]], "GET /cluster": [[573, "get-cluster"]], "GET /description": [[573, "get-description"]], "GET /download/{task_id}": [[573, "get-download-task-id"]], "GET /ping": [[573, "get-ping"]], "GET /task/log/{task_id}": [[573, "get-task-log-task-id"]], "GET /task/status/{task_id}": [[573, "get-task-status-task-id"]], "GPTQ": [[491, "gptq"]], "Get Started": [[490, "get-started"], [491, "get-started"], [493, "get-started"], [501, "get-started"], [528, "get-started"], [571, "get-started"], [586, "get-started"]], "Get Started with Adaptor API": [[505, "get-started-with-adaptor-api"]], "Get Started with Benchmark API": [[522, "get-started-with-benchmark-api"]], "Get Started with DataLoader": [[525, "get-started-with-dataloader"]], "Get Started with Distillation API": [[529, "get-started-with-distillation-api"]], "Get Started with Distillation for Quantization API": [[530, "get-started-with-distillation-for-quantization-api"]], "Get Started with Distributed Training and Inference API": [[531, "get-started-with-distributed-training-and-inference-api"]], "Get Started with Metric": [[542, "get-started-with-metric"]], "Get Started with Microscaling Quantization API": [[487, "get-started-with-microscaling-quantization-api"], [546, "get-started-with-microscaling-quantization-api"]], "Get Started with Mixed Precision API": [[544, "get-started-with-mixed-precision-api"]], "Get Started with NAS API": [[502, "get-started-with-nas-api"]], "Get Started with Objective API": [[581, "get-started-with-objective-api"]], "Get Started with Orchestration API": [[582, "get-started-with-orchestration-api"]], "Get Started with Pruning API": [[583, "get-started-with-pruning-api"]], "Get Started with Pythonic API for Configurations": [[585, "get-started-with-pythonic-api-for-configurations"]], "Get Started with TensorBoard": [[593, "get-started-with-tensorboard"]], "Get Started with autotune API": [[488, "get-started-with-autotune-api"]], "Get start with Dataset API": [[526, "get-start-with-dataset-api"]], "Get started": [[572, "get-started"]], "Get started with Framework YAML Files": [[535, "get-started-with-framework-yaml-files"]], "Get started with User YAML Files": [[597, "get-started-with-user-yaml-files"]], "Get up and running straight away": [[565, "get-up-and-running-straight-away"]], "Getting Started": [[504, "getting-started"], [536, "getting-started"], [566, "getting-started"]], "Getting Started with Create React App": [[570, "getting-started-with-create-react-app"]], "Getting Started with Dynamic Quantization": [[486, "getting-started-with-dynamic-quantization"]], "Getting Started!": [[547, "getting-started"], [558, "getting-started"]], "Go further": [[565, "go-further"]], "HAWQ_V2": [[595, "hawq-v2"]], "HQQ": [[491, "hqq"]], "Hardware and Software requests for BF16": [[488, "hardware-and-software-requests-for-bf16"], [544, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[488, "hardware-and-software-requests-for-fp16"], [544, "hardware-and-software-requests-for-fp16"]], "Highlights": [[555, "highlights"]], "Horovodrun Execution": [[531, "horovodrun-execution"]], "How does Neural Solution Work?": [[571, "how-does-neural-solution-work"]], "How it Works": [[496, "how-it-works"]], "How to Add An Adaptor": [[506, "how-to-add-an-adaptor"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[507, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "How to do diagnosis": [[528, "how-to-do-diagnosis"]], "INC Coding Conventions": [[524, "inc-coding-conventions"]], "INT8 Model Export": [[533, "int8-model-export"], [533, "id2"]], "Implement ONNXRTAdaptor Class": [[505, "implement-onnxrtadaptor-class"]], "Imports": [[524, "imports"]], "Incompatible Changes": [[590, "incompatible-changes"]], "Incompatible changes between v1.2 and v1.1": [[537, "incompatible-changes-between-v1-2-and-v1-1"]], "Infrastructure of Intel\u00ae Neural Compressor": [[538, "infrastructure-of-intel-neural-compressor"]], "Innovations for Productivity": [[596, "innovations-for-productivity"]], "Inspect logs": [[572, "inspect-logs"]], "Install": [[557, "install"]], "Install Intel\u00ae Neural Compressor": [[528, "install-intel-neural-compressor"]], "Install MKL, OpenMP and JEMALLOC": [[550, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[550, "install-numa-controller"]], "Install Neural Solution": [[572, "install-neural-solution"]], "Install from AI Kit": [[539, "install-from-ai-kit"]], "Install from Binary": [[539, "install-from-binary"]], "Install from Source": [[539, "install-from-source"], [566, "install-from-source"]], "Install from pypi": [[504, "install-from-pypi"], [566, "install-from-pypi"]], "Installation": [[504, "installation"], [539, "installation"], [539, "id1"], [558, "installation"], [566, "installation"], [571, "installation"]], "Installation Guide": [[548, "installation-guide"]], "Intel CPU Platforms: Best Performance Setting": [[550, "intel-cpu-platforms-best-performance-setting"]], "Intel\u00ae Neural Compressor": [[504, "intel-neural-compressor"], [564, "intel-neural-compressor"]], "Intel\u00ae Neural Compressor Documentation": [[498, "intel-neural-compressor-documentation"], [599, "intel-neural-compressor-documentation"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[558, "intel-neural-compressor-as-jupyterlab-extension"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[539, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[539, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[539, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intermediate Layer Knowledge Distillation": [[529, "intermediate-layer-knowledge-distillation"]], "Introduction": [[486, "introduction"], [487, "introduction"], [488, "introduction"], [489, "introduction"], [490, "introduction"], [491, "introduction"], [492, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [497, "introduction"], [501, "introduction"], [502, "introduction"], [505, "introduction"], [506, "introduction"], [507, "introduction"], [522, "introduction"], [523, "introduction"], [525, "introduction"], [526, "introduction"], [529, "introduction"], [530, "introduction"], [531, "introduction"], [533, "introduction"], [535, "introduction"], [538, "introduction"], [542, "introduction"], [544, "introduction"], [545, "introduction"], [546, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [581, "introduction"], [582, "introduction"], [583, "introduction"], [585, "introduction"], [587, "introduction"], [589, "introduction"], [591, "introduction"], [592, "introduction"], [593, "introduction"], [594, "introduction"], [595, "introduction"], [597, "introduction"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[507, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Issue 1:": [[534, "issue-1"]], "Issue 2:": [[534, "issue-2"]], "Issue 3:": [[534, "issue-3"]], "Issue 4:": [[534, "issue-4"]], "Jupyter Lab Extension": [[547, "jupyter-lab-extension"]], "Knowledge Distillation": [[529, "knowledge-distillation"]], "Known Issues": [[590, "known-issues"]], "LLMs Quantization Recipes": [[541, "llms-quantization-recipes"]], "Large Language Model Pruning": [[583, "large-language-model-pruning"]], "Large Language Models Accuracy": [[541, "large-language-models-accuracy"]], "Large Language Models Recipes": [[541, "large-language-models-recipes"]], "Launcher Arguments (Optional)": [[552, "launcher-arguments-optional"]], "Layer Wise Quantization (LWQ)": [[587, "layer-wise-quantization-lwq"]], "Learn More": [[570, "learn-more"], [571, "learn-more"]], "Legal Information": [[540, "legal-information"]], "License": [[540, "license"]], "Load API": [[492, "load-api"]], "Logger": [[524, "logger"]], "MSE": [[595, "mse"]], "MSE_V2": [[595, "mse-v2"]], "MXNet": [[526, "mxnet"], [542, "mxnet"], [594, "mxnet"]], "Make changes": [[565, "make-changes"]], "Making a Progressive Web App": [[570, "making-a-progressive-web-app"]], "Making a new release of neural_compressor_ext_lab": [[559, "making-a-new-release-of-neural-compressor-ext-lab"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[562, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Manage resource": [[572, "manage-resource"], [577, "manage-resource"], [578, "manage-resource"]], "Manual release": [[559, "manual-release"], [562, "manual-release"]], "Matmul quantization example": [[497, "matmul-quantization-example"], [592, "matmul-quantization-example"]], "Method 1. Using pip": [[572, "method-1-using-pip"]], "Method 1. Using pip:": [[571, "method-1-using-pip"]], "Method 2. Building from source": [[572, "method-2-building-from-source"]], "Method 2. Building from source:": [[571, "method-2-building-from-source"]], "Metrics": [[542, "metrics"]], "Microscaling Quantization": [[487, "microscaling-quantization"], [546, "microscaling-quantization"]], "Mix Precision": [[516, "mix-precision"], [543, "mix-precision"]], "Mixed Precision": [[544, "mixed-precision"]], "Mixed Precision Support Matrix": [[488, "mixed-precision-support-matrix"], [544, "mixed-precision-support-matrix"]], "Model": [[517, "model"], [545, "model"], [567, "model"], [569, "model"]], "Model Examples": [[490, "model-examples"]], "Model Examples with PT2E": [[490, "model-examples-with-pt2e"]], "Model Quantization": [[543, "model-quantization"]], "Models Supported": [[553, "models-supported"]], "Modify script": [[528, "modify-script"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [163, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [471, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"]], "Multiple Objectives": [[581, "multiple-objectives"]], "NAS": [[585, "nas"]], "NAS Support Matrix": [[502, "nas-support-matrix"]], "NPM package": [[559, "npm-package"], [562, "npm-package"]], "Neural Architecture Search": [[502, "neural-architecture-search"]], "Neural Coder": [[547, "neural-coder"], [564, "neural-coder"], [564, "id1"]], "Neural Coder (Zero-code Optimization)": [[596, "neural-coder-zero-code-optimization"]], "Neural Coder Extension Usage": [[564, "neural-coder-extension-usage"]], "Neural Coder Extension in VSCode": [[564, "neural-coder-extension-in-vscode"]], "Neural Coder as Python API": [[551, "neural-coder-as-python-api"]], "Neural Coder for Quantization": [[553, "neural-coder-for-quantization"]], "Neural Compressor Configuration": [[591, "neural-compressor-configuration"]], "Neural Insights": [[566, "neural-insights"]], "Neural Network Pruning": [[583, "neural-network-pruning"]], "Neural Solution API": [[573, "neural-solution-api"]], "Node States": [[572, "node-states"]], "Note": [[501, "note"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[598, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[598, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Runtime": [[509, "onnx-runtime"]], "ONNX Runtime framework example": [[587, "onnx-runtime-framework-example"]], "ONNXRT": [[526, "onnxrt"], [542, "onnxrt"], [594, "onnxrt"]], "Objective": [[518, "objective"], [577, "objective"], [578, "objective"], [579, "objective"], [581, "objective"]], "Objective Support Matrix": [[581, "objective-support-matrix"]], "One-shot": [[582, "one-shot"]], "Open Neural Insights": [[569, "open-neural-insights"]], "Optimization Orchestration": [[582, "optimization-orchestration"]], "Option 1: Pure Yaml Configuration": [[531, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[531, "option-2-user-defined-training-function"]], "Or let us help you auto-select the best feature": [[558, "or-let-us-help-you-auto-select-the-best-feature"]], "Orchestration": [[543, "orchestration"]], "Orchestration Support Matrix": [[582, "orchestration-support-matrix"]], "Others": [[555, "others"]], "Our Pledge": [[499, "our-pledge"]], "Our Responsibilities": [[499, "our-responsibilities"]], "Our Standards": [[499, "our-standards"]], "Our enhancement:": [[592, "our-enhancement"]], "Overview": [[496, "overview"], [574, "overview"], [596, "overview"]], "POST /task/submit": [[573, "post-task-submit"]], "Package Contents": [[162, "package-contents"], [168, "package-contents"], [175, "package-contents"]], "Packaging the extension": [[557, "packaging-the-extension"], [561, "packaging-the-extension"]], "Parameter description": [[528, "parameter-description"]], "Parameters": [[573, "parameters"], [573, "id5"], [573, "id10"], [573, "id13"]], "Per-channel example": [[497, "per-channel-example"], [592, "per-channel-example"]], "Per-channel limitation": [[497, "per-channel-limitation"], [592, "per-channel-limitation"]], "Per-tensor & Per-channel": [[497, "per-tensor-per-channel"], [592, "per-tensor-per-channel"]], "Per-tensor example": [[497, "per-tensor-example"], [592, "per-tensor-example"]], "Performance": [[591, "performance"]], "Performance Comparison of Different Strategies": [[591, "performance-comparison-of-different-strategies"]], "Post Training Dynamic Quantization": [[501, "post-training-dynamic-quantization"], [586, "post-training-dynamic-quantization"]], "Post Training Quantization": [[586, "post-training-quantization"]], "Post Training Static Quantization": [[495, "post-training-static-quantization"], [501, "post-training-static-quantization"], [586, "post-training-static-quantization"]], "Post-training Quantization": [[543, "post-training-quantization"]], "Pre-requisites": [[558, "pre-requisites"]], "Preparation": [[567, "preparation"], [568, "preparation"], [569, "preparation"], [591, "preparation"]], "Prepare calibration model from fp32 graph": [[506, "prepare-calibration-model-from-fp32-graph"]], "Prepare dataset": [[528, "prepare-dataset"]], "Prepare the dataset": [[569, "prepare-the-dataset"]], "Prerequisites": [[539, "prerequisites"], [571, "prerequisites"], [572, "prerequisites"]], "Pruning": [[543, "pruning"], [583, "pruning"], [585, "pruning"]], "Pruning Criteria": [[583, "pruning-criteria"]], "Pruning Patterns": [[583, "pruning-patterns"]], "Pruning Schedules": [[583, "pruning-schedules"]], "Pruning Scope": [[583, "pruning-scope"]], "Pruning Support Matrix": [[583, "pruning-support-matrix"]], "Pruning Types": [[583, "pruning-types"]], "Pruning with Hyperparameter Optimization": [[583, "pruning-with-hyperparameter-optimization"]], "Public and Internal Interfaces": [[524, "public-and-internal-interfaces"]], "Publishing to conda-forge": [[559, "publishing-to-conda-forge"], [562, "publishing-to-conda-forge"]], "Pull Request Acceptance Criteria": [[500, "pull-request-acceptance-criteria"]], "Pull Request Checklist": [[500, "pull-request-checklist"]], "Pull Request Status Checks Overview": [[500, "pull-request-status-checks-overview"]], "Pull Request Template": [[500, "pull-request-template"]], "PyPI distribution:": [[553, "pypi-distribution"]], "PyTorch": [[526, "pytorch"], [542, "pytorch"], [588, "pytorch"]], "PyTorch Examples": [[593, "pytorch-examples"]], "PyTorch Examples:": [[531, "pytorch-examples"]], "PyTorch Mixed Precision": [[488, "pytorch-mixed-precision"]], "PyTorch Model": [[533, "pytorch-model"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[598, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[598, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[598, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Smooth Quantization": [[489, "pytorch-smooth-quantization"]], "PyTorch Static Quantization": [[490, "pytorch-static-quantization"]], "PyTorch TensorBoard": [[593, "pytorch-tensorboard"]], "PyTorch Weight Only Quantization": [[491, "pytorch-weight-only-quantization"]], "PyTorch framework example": [[587, "pytorch-framework-example"]], "Python API": [[547, "python-api"]], "Python Launcher": [[547, "python-launcher"], [552, "python-launcher"]], "Python package": [[559, "python-package"], [562, "python-package"]], "Python-based APIs": [[596, "python-based-apis"]], "Pythonic API for Framework Configurations": [[585, "pythonic-api-for-framework-configurations"], [585, "id2"]], "Pythonic API for User Configurations": [[585, "pythonic-api-for-user-configurations"], [585, "id1"]], "Pythonic Style Access for Configurations": [[585, "pythonic-style-access-for-configurations"]], "Pytorch": [[594, "pytorch"]], "Quantization": [[497, "quantization"], [519, "quantization"], [585, "quantization"], [586, "quantization"]], "Quantization APIs": [[492, "quantization-apis"]], "Quantization Approaches": [[495, "quantization-approaches"], [586, "quantization-approaches"]], "Quantization Aware Training": [[497, "quantization-aware-training"], [543, "quantization-aware-training"], [586, "quantization-aware-training"], [586, "id1"]], "Quantization Capability": [[589, "quantization-capability"]], "Quantization Fundamentals": [[497, "quantization-fundamentals"], [586, "quantization-fundamentals"], [592, "quantization-fundamentals"]], "Quantization Introduction": [[586, "quantization-introduction"]], "Quantization Scheme": [[495, "quantization-scheme"]], "Quantization Scheme in IPEX": [[497, "quantization-scheme-in-ipex"], [586, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[586, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[586, "quantization-scheme-in-onnx-runtime"]], "Quantization Scheme in PyTorch": [[497, "quantization-scheme-in-pytorch"], [586, "quantization-scheme-in-pytorch"]], "Quantization Scheme in TensorFlow": [[497, "quantization-scheme-in-tensorflow"], [586, "quantization-scheme-in-tensorflow"]], "Quantization Support Matrix": [[586, "quantization-support-matrix"]], "Quantization diagnosis": [[528, "quantization-diagnosis"]], "Quantization with Python API": [[536, "quantization-with-python-api"], [566, "quantization-with-python-api"]], "Quantization-Aware Training": [[501, "quantization-aware-training"]], "Query API": [[505, "query-api"]], "Query API Introduction": [[505, "query-api-introduction"]], "Query cluster": [[572, "query-cluster"]], "Query optimization result": [[577, "query-optimization-result"], [578, "query-optimization-result"], [579, "query-optimization-result"]], "Query task status": [[572, "query-task-status"]], "Quick Samples": [[536, "quick-samples"]], "Quick-Start": [[552, "quick-start"]], "RTN": [[491, "rtn"]], "Random": [[595, "random"]], "Recommend VS Code settings.json": [[524, "recommend-vs-code-settings-json"]], "Reference": [[487, "reference"], [491, "reference"], [497, "reference"], [523, "reference"], [524, "reference"], [546, "reference"], [583, "reference"], [586, "reference"], [589, "reference"], [592, "reference"]], "Regularization": [[583, "regularization"]], "Release": [[590, "release"]], "Release Data": [[532, "release-data"]], "Release Notes": [[590, "release-notes"]], "Remove node": [[572, "remove-node"]], "Report a Vulnerability": [[503, "report-a-vulnerability"]], "Requirements": [[557, "requirements"], [561, "requirements"], [567, "requirements"], [568, "requirements"], [569, "requirements"], [577, "requirements"]], "Research Collaborations": [[566, "research-collaborations"]], "Responses": [[573, "responses"], [573, "id3"], [573, "id7"], [573, "id11"], [573, "id14"], [573, "id17"], [573, "id20"], [573, "id23"], [573, "id26"]], "Retrain-free Pruning API": [[583, "retrain-free-pruning-api"]], "Rules": [[524, "rules"]], "Run benchmark script": [[528, "run-benchmark-script"]], "Run quantization script": [[528, "run-quantization-script"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[506, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Run tests": [[565, "run-tests"]], "Running the quantization": [[567, "running-the-quantization"], [568, "running-the-quantization"], [569, "running-the-quantization"]], "Saving and Loading": [[491, "saving-and-loading"]], "Scope": [[499, "scope"]], "Sections": [[498, "sections"], [599, "sections"]], "Security": [[531, "security"]], "Security Policy": [[503, "security-policy"]], "See profiling data": [[528, "see-profiling-data"]], "See quantization data": [[528, "see-quantization-data"]], "Selected Publications/Events": [[504, "selected-publications-events"]], "Self Distillation": [[529, "self-distillation"]], "Setup": [[565, "setup"]], "SigOpt": [[595, "sigopt"]], "SigOpt Platform": [[591, "sigopt-platform"]], "SigOpt Strategy": [[591, "sigopt-strategy"]], "Single Objective": [[581, "single-objective"]], "Smooth Quant": [[494, "smooth-quant"], [592, "smooth-quant"]], "Smooth Quantization": [[495, "smooth-quantization"], [497, "smooth-quantization"]], "SmoothQuant": [[592, "smoothquant"]], "SmoothQuant and Our Enhancement": [[592, "smoothquant-and-our-enhancement"]], "Source": [[568, "source"], [569, "source"]], "Sparse Model Deployment": [[583, "sparse-model-deployment"]], "Sparsity Decay Types": [[583, "sparsity-decay-types"]], "Specify Quantization Backend and Device": [[586, "specify-quantization-backend-and-device"]], "Specify Quantization Recipes": [[586, "specify-quantization-recipes"]], "Specify Quantization Rules": [[489, "specify-quantization-rules"], [490, "specify-quantization-rules"], [491, "specify-quantization-rules"], [493, "specify-quantization-rules"], [586, "specify-quantization-rules"]], "Start Jupyter Lab 3": [[548, "start-jupyter-lab-3"]], "Start service": [[572, "start-service"]], "Start the Neural Insights": [[566, "start-the-neural-insights"]], "Start the Neural Solution Service": [[577, "start-the-neural-solution-service"], [578, "start-the-neural-solution-service"], [579, "start-the-neural-solution-service"]], "Static Quantization": [[497, "static-quantization"]], "Static Quantization & Quantization Aware Training": [[501, "static-quantization-quantization-aware-training"]], "Static Quantization (Non-LLMs)": [[504, "static-quantization-non-llms"]], "Static Quantization with IPEX Backend": [[490, "static-quantization-with-ipex-backend"]], "Static Quantization with PT2E Backend": [[490, "static-quantization-with-pt2e-backend"]], "Step by Step Diagnosis Example": [[566, "step-by-step-diagnosis-example"]], "Step by step example how to debug accuracy with Neural Insights": [[567, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [569, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[568, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Step-by-Step guidelines": [[500, "step-by-step-guidelines"]], "Stop service": [[572, "stop-service"]], "Stop the service": [[577, "stop-the-service"], [578, "stop-the-service"], [579, "stop-the-service"]], "Strategy": [[520, "strategy"]], "Strategy Design": [[595, "strategy-design"]], "Strings": [[524, "strings"]], "Submit optimization task": [[577, "submit-optimization-task"], [578, "submit-optimization-task"], [579, "submit-optimization-task"]], "Submit task": [[572, "submit-task"]], "Submodules": [[1, "submodules"], [5, "submodules"], [17, "submodules"], [38, "submodules"], [62, "submodules"], [73, "submodules"], [81, "submodules"], [87, "submodules"], [92, "submodules"], [97, "submodules"], [98, "submodules"], [100, "submodules"], [103, "submodules"], [116, "submodules"], [131, "submodules"], [137, "submodules"], [138, "submodules"], [149, "submodules"], [156, "submodules"], [159, "submodules"], [162, "submodules"], [164, "submodules"], [168, "submodules"], [175, "submodules"], [185, "submodules"], [190, "submodules"], [208, "submodules"], [212, "submodules"], [215, "submodules"], [222, "submodules"], [231, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [257, "submodules"], [261, "submodules"], [266, "submodules"], [273, "submodules"], [279, "submodules"], [285, "submodules"], [291, "submodules"], [295, "submodules"], [308, "submodules"], [314, "submodules"], [319, "submodules"], [326, "submodules"], [330, "submodules"], [366, "submodules"], [372, "submodules"], [384, "submodules"], [408, "submodules"], [425, "submodules"], [430, "submodules"], [435, "submodules"], [443, "submodules"], [455, "submodules"], [461, "submodules"], [472, "submodules"], [476, "submodules"]], "Subpackages": [[5, "subpackages"], [73, "subpackages"], [97, "subpackages"], [98, "subpackages"], [100, "subpackages"], [137, "subpackages"], [162, "subpackages"], [189, "subpackages"], [213, "subpackages"], [230, "subpackages"], [255, "subpackages"], [266, "subpackages"], [290, "subpackages"], [308, "subpackages"], [319, "subpackages"], [366, "subpackages"], [435, "subpackages"], [476, "subpackages"]], "Summary": [[507, "summary"]], "SuperBench": [[551, "superbench"]], "Support": [[500, "support"]], "Support Matrix": [[495, "support-matrix"], [523, "support-matrix"], [549, "support-matrix"]], "Supported Built-in Metric Matrix": [[542, "supported-built-in-metric-matrix"]], "Supported Feature Matrix": [[528, "supported-feature-matrix"], [531, "supported-feature-matrix"], [535, "supported-feature-matrix"], [538, "supported-feature-matrix"], [585, "supported-feature-matrix"], [586, "supported-feature-matrix"], [593, "supported-feature-matrix"], [597, "supported-feature-matrix"]], "Supported Framework Dataloader Matrix": [[525, "supported-framework-dataloader-matrix"]], "Supported Framework Dataset Matrix": [[526, "supported-framework-dataset-matrix"]], "Supported Framework Matrix": [[489, "supported-framework-matrix"], [592, "supported-framework-matrix"]], "Supported Framework Model Matrix": [[533, "supported-framework-model-matrix"], [545, "supported-framework-model-matrix"], [546, "supported-framework-model-matrix"], [587, "supported-framework-model-matrix"], [589, "supported-framework-model-matrix"]], "Supported Matrix": [[491, "supported-matrix"], [492, "supported-matrix"]], "Supported Optimization Features": [[554, "supported-optimization-features"]], "Supported quantized ops": [[533, "supported-quantized-ops"]], "Symmetric & Asymmetric": [[497, "symmetric-asymmetric"]], "System Requirements": [[539, "system-requirements"]], "TEQ": [[491, "teq"]], "TODO Comments": [[524, "todo-comments"]], "TPE": [[595, "tpe"]], "Task request description": [[575, "task-request-description"]], "Tensor dump examples": [[566, "tensor-dump-examples"]], "TensorBoard": [[593, "tensorboard"]], "TensorFlow": [[495, "tensorflow"], [526, "tensorflow"], [542, "tensorflow"], [594, "tensorflow"]], "TensorFlow Examples": [[593, "tensorflow-examples"]], "TensorFlow Examples:": [[531, "tensorflow-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[598, "tensorflow-models-with-tensorflow-2-15-0"]], "TensorFlow Quantization": [[493, "tensorflow-quantization"]], "TensorFlow Tensorboard": [[593, "tensorflow-tensorboard"]], "Tensorflow": [[588, "tensorflow"]], "Tensorflow Model": [[533, "tensorflow-model"]], "Torch": [[492, "torch"]], "Torch Utils": [[510, "torch-utils"]], "Torch-like APIs": [[492, "torch-like-apis"]], "Trademarks": [[540, "trademarks"]], "Training": [[521, "training"]], "Training-aware pruning API": [[583, "training-aware-pruning-api"]], "Transform": [[594, "transform"]], "Transform Support List": [[594, "transform-support-list"]], "Tuning Algorithms": [[595, "tuning-algorithms"]], "Tuning Process": [[595, "tuning-process"]], "Tuning Space": [[595, "tuning-space"]], "Tuning Strategies": [[595, "tuning-strategies"]], "Turn OFF Auto Mixed Precision during Quantization": [[588, "turn-off-auto-mixed-precision-during-quantization"]], "Type Annotations": [[524, "type-annotations"]], "Uninstall": [[557, "uninstall"]], "Usage": [[489, "usage"], [491, "usage"], [494, "usage"], [553, "usage"], [573, "usage"], [573, "id2"], [573, "id6"], [573, "id9"], [573, "id16"], [573, "id19"], [573, "id22"], [573, "id25"], [592, "usage"], [593, "usage"], [593, "id1"], [595, "usage"], [595, "id2"], [595, "id4"], [595, "id6"], [595, "id8"], [595, "id10"], [595, "id12"], [595, "id14"], [595, "id16"], [595, "id18"], [595, "id20"], [595, "id22"]], "Usage Sample with IPEX": [[490, "usage-sample-with-ipex"]], "Usage Sample with PT2E": [[490, "usage-sample-with-pt2e"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[525, "use-intel-neural-compressor-dataloader-api"]], "Use Intel\u00ae Neural Compressor Metric API": [[542, "use-intel-neural-compressor-metric-api"]], "Use the New Data Type": [[507, "use-the-new-data-type"]], "User Code Example": [[589, "user-code-example"]], "User Guide": [[596, "user-guide"]], "User YAML Configuration Files": [[597, "user-yaml-configuration-files"]], "User code example": [[589, "id1"]], "User-facing APIs": [[537, "user-facing-apis"]], "User-specific dataset": [[526, "user-specific-dataset"]], "Using a Fixed alpha": [[494, "using-a-fixed-alpha"]], "Using a fixed alpha": [[592, "using-a-fixed-alpha"]], "Validated Hardware Environment": [[539, "validated-hardware-environment"]], "Validated Knowledge Distillation Examples": [[598, "validated-knowledge-distillation-examples"]], "Validated Models": [[489, "validated-models"], [536, "validated-models"], [592, "validated-models"], [598, "validated-models"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[598, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]], "Validated Pruning Examples": [[598, "validated-pruning-examples"]], "Validated Quantization Examples": [[598, "validated-quantization-examples"]], "Validated Software Environment": [[539, "validated-software-environment"]], "WOQ Algorithms Tuning": [[589, "woq-algorithms-tuning"]], "WebSocket /task/screen/{task_id}": [[573, "websocket-task-screen-task-id"]], "Weight Only Quantization": [[497, "weight-only-quantization"]], "Weight Only Quantization (WOQ)": [[589, "weight-only-quantization-woq"]], "Weight-Only Quantization (LLMs)": [[504, "weight-only-quantization-llms"]], "Weights summary": [[567, "weights-summary"]], "Welcome to your VS Code Extension": [[565, "welcome-to-your-vs-code-extension"]], "What do we offer?": [[547, "what-do-we-offer"]], "What\u2019s Neural Solution?": [[571, "what-s-neural-solution"]], "What\u2019s New": [[504, "what-s-new"]], "What\u2019s in the folder": [[565, "what-s-in-the-folder"]], "Why Neural Solution?": [[571, "why-neural-solution"]], "With Accuracy Aware Tuning": [[493, "with-accuracy-aware-tuning"]], "Without Accuracy Aware Tuning": [[493, "without-accuracy-aware-tuning"]], "Workflow": [[527, "workflow"]], "Workflow of OaaS": [[574, "workflow-of-oaas"]], "Working Flow": [[505, "working-flow"], [586, "working-flow"]], "Working with Autotune": [[496, "working-with-autotune"]], "Working with PyTorch Model": [[496, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[496, "working-with-tensorflow-model"]], "[Unreleased]": [[563, "unreleased"]], "block_mask": [[0, "module-block_mask"]], "neural_compressor": [[319, "module-neural_compressor"]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark"]], "neural_compressor.common.utils.logger": [[153, "module-neural_compressor.common.utils.logger"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[185, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[186, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.conf.pythonic_config": [[187, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[188, "module-neural_compressor.config"]], "neural_compressor.contrib": [[189, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[190, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[191, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[192, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data": [[213, "module-neural_compressor.data"]], "neural_compressor.data.dataloaders.base_dataloader": [[193, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[194, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[195, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[196, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[200, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets": [[208, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.bert_dataset": [[202, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[203, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[204, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[205, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters": [[212, "module-neural_compressor.data.filters"]], "neural_compressor.data.filters.coco_filter": [[210, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[211, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.transforms": [[215, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.imagenet_transform": [[214, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms.postprocess": [[216, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[217, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[218, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "neural_compressor.experimental.benchmark": [[219, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common": [[222, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.criterion": [[220, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[221, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common.metric": [[223, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[224, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[225, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[226, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[227, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[228, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[229, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor.metric": [[326, "module-neural_compressor.metric"]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1"]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision"]], "neural_compressor.model": [[330, "module-neural_compressor.model"]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model"]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[338, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.utils.onnx_model": [[341, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.profiling": [[342, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[343, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[346, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[347, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization"]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy"]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[435, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[436, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[437, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[455, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[453, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[454, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[456, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[457, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[458, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.data": [[459, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils.model_wrappers": [[460, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.torch.algorithms.layer_wise": [[461, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[462, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[463, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[464, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[465, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert"]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[466, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers"]], "neural_compressor.torch.algorithms.weight_only.modules": [[467, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.training": [[468, "module-neural_compressor.training"]], "neural_compressor.utils": [[476, "module-neural_compressor.utils"]], "neural_compressor.utils.collect_layer_histogram": [[469, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[470, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[471, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[472, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[473, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[474, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[475, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils.kl_divergence": [[477, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[478, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[479, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[480, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[481, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[482, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[483, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[484, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[485, "module-neural_compressor.version"]], "neural_compressor_ext_lab": [[557, "neural-compressor-ext-lab"]], "neural_compressor_ext_lab_alibaba": [[561, "neural-compressor-ext-lab-alibaba"]], "npm run build": [[570, "npm-run-build"]], "npm run build fails to minify": [[570, "npm-run-build-fails-to-minify"]], "npm run eject": [[570, "npm-run-eject"]], "npm start": [[570, "npm-start"]], "npm test": [[570, "npm-test"]], "v0.4": [[555, "v0-4"]], "}": [[146, "id3"]]}, "docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/mix_precision/half_precision_convert/index", "autoapi/neural_compressor/torch/algorithms/mix_precision/module_wrappers/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/mix_precision/half_precision_convert/index.rst", "autoapi/neural_compressor/torch/algorithms/mix_precision/module_wrappers/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "indexentries": {"_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran", false]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation._epoch_ran", false]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Accuracy", false]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.AccuracyCriterion", false]], "accuracycriterion (class in neural_compressor.config)": [[188, "neural_compressor.config.AccuracyCriterion", false]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.acq_max", false]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.acq_max", false]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator", false]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name", false]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.Algorithm", false]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.algorithm_registry", false]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.ALGORITHMS", false]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.AlgorithmScheduler", false]], "alias_param() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.alias_param", false]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.AlignImageChannelTransform", false]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform", false]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.alpha", false]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.amp_convert", false]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.append_attr", false]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip", false]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale", false]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.apply_inlining", false]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining", false]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal", false]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator", false]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error", false]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator", false]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr1", false]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr2", false]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr5", false]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.attribute1", false]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg", false]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.auto_copy", false]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[304, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[360, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[359, "neural_compressor.strategy.auto.AutoTuneStrategy", false]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize", false]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks", false]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[193, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.BaseDataLoader", false]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric", false]], "basemetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.BaseMetric", false]], "basemodel (class in neural_compressor.model.base_model)": [[329, "neural_compressor.model.base_model.BaseModel", false]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel", false]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern", false]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner", false]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning", false]], "basereg (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.BaseReg", false]], "basetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.BaseTransform", false]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.BaseTransform", false]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[286, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner", false]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS", false]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning", false]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.BasicTokenizer", false]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer", false]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[305, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy", false]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[361, "neural_compressor.strategy.basic.BasicTuneStrategy", false]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator", false]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.BatchSampler", false]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler", false]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.BatchSampler", false]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher", false]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy", false]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianTuneStrategy", false]], "benchmark (class in neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.Benchmark", false]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.benchmark_with_raw_cmd", false]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.BenchmarkConfig", false]], "benchmarkconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.BenchmarkConfig", false]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model", false]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_model", false]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score", false]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_score", false]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace", false]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[36, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[382, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper", false]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection", false]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[453, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection", false]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator", false]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator", false]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.BLEU", false]], "bleu (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.BLEU", false]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.bleu_tokenize", false]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.bleu_tokenize", false]], "block_mask": [[0, "module-block_mask", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size", false]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size", false]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler", false]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion", false]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.build_slave_faker_model", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.calculate_md5", false]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.calculate_md5", false]], "calculate_mse() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.calculate_mse", false]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max", false]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp", false]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.calib_model", false]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry", false]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector", false]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibData", false]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calibration", false]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[339, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator", false]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase", false]], "call_one() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.call_one", false]], "callbacks (class in neural_compressor.training)": [[468, "neural_compressor.training.CallBacks", false]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.CaptureOutputToFile", false]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.cast_tensor", false]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastONNXTransform", false]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform", false]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastPyTorchTransform", false]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform", false]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastTFTransform", false]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastTFTransform", false]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CenterCropTFTransform", false]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform", false]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CenterCropTransform", false]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform", false]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig", false]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_config", false]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config", false]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[194, "neural_compressor.data.dataloaders.dataloader.check_dataloader", false]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.check_integrity", false]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.check_integrity", false]], "check_key_exist() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.check_key_exist", false]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_key_validity", false]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.check_model", false]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[473, "neural_compressor.utils.export.qlinear2qdq.check_model", false]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version", false]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.checkpoint_session", false]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session", false]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.CIFAR10", false]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10", false]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.CIFAR100", false]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR100", false]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher", false]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF", false]], "classregister (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.ClassRegister", false]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper", false]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOEvalWrapper", false]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2", false]], "cocomapv2 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.COCOmAPv2", false]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCONpy", false]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy", false]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCORaw", false]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw", false]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset", false]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset", false]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper", false]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper", false]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.collate_preds", false]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds", false]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds", false]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds", false]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.collect_layer_inputs", false]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collect_weight_info", false]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase", false]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CollectTransform", false]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CollectTransform", false]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities", false]], "combine_histogram() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.combine_histogram", false]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.compare_label", false]], "compare_objects() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.compare_objects", false]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights", false]], "component (class in neural_compressor.experimental.component)": [[228, "neural_compressor.experimental.component.Component", false]], "composetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ComposeTransform", false]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ComposeTransform", false]], "compressionmanager (class in neural_compressor.training)": [[468, "neural_compressor.training.CompressionManager", false]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[268, "neural_compressor.experimental.metric.bleu_util.compute_bleu", false]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[321, "neural_compressor.metric.bleu_util.compute_bleu", false]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf", false]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.compute_sparsity", false]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator", false]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.conf", false]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.conf", false]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config", false]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config", false]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config", false]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config", false]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path", false]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path", false]], "config_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.config_instance", false]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers", false]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[363, "neural_compressor.strategy.conservative.ConservativeTuneStrategy", false]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def", false]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def", false]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert", false]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.convert_by_vocab", false]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab", false]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features", false]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx", false]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.convert_to_unicode", false]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[39, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[385, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[386, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[41, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[387, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[388, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[389, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator", false]], "cpuinfo (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.CpuInfo", false]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.create_data_example", false]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.create_dataloader", false]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.create_dataset", false]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.create_eval_func", false]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[353, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config", false]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool", false]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config", false]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.create_train_func", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion", false]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.criterion_registry", false]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.criterion_registry", false]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.Criterions", false]], "criterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.Criterions", false]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropResizeTransform", false]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform", false]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropToBoundingBox", false]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox", false]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio", false]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader", false]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[194, "neural_compressor.data.dataloaders.dataloader.DataLoader", false]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[221, "neural_compressor.experimental.common.dataloader.DataLoader", false]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap", false]], "dataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Dataset", false]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Dataset", false]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset", false]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.dataset", false]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.dataset_registry", false]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.dataset_registry", false]], "datasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Datasets", false]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Datasets", false]], "debug() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.debug", false]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[195, "neural_compressor.data.dataloaders.default_dataloader.default_collate", false]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate", false]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.default_collate", false]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[195, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign", false]], "dequantize() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.Dequantize", false]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data", false]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero", false]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dequantize_weight", false]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[37, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[383, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type", false]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device", false]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[390, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator", false]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.disable_random", false]], "distillation (class in neural_compressor.experimental.distillation)": [[260, "neural_compressor.experimental.distillation.Distillation", false]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks", false]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.DistillationConfig", false]], "distillationconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.DistillationConfig", false]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors", false]], "dotdict (class in neural_compressor.config)": [[188, "neural_compressor.config.DotDict", false]], "dotdict (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.DotDict", false]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model", false]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model", false]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.download_url", false]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.download_url", false]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dtype_to_name", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[205, "neural_compressor.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.DummyDataset", false]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.DummyDatasetV2", false]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dump_class_attrs", false]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dump_data_to_local", false]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dump_elapsed_time", false]], "dump_table() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dump_table", false]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.dump_table_to_csv", false]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export", false]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export", false]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS", false]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator", false]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step", false]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step", false]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ensure_list", false]], "equal_dicts() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.equal_dicts", false]], "error() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.error", false]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.estimator_session", false]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session", false]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency", false]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.eval_frequency", false]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.evaluate", false]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.evaluate", false]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score", false]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.exact_match_score", false]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.ExampleClass", false]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[307, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[364, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[392, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[478, "neural_compressor.utils.load_huggingface.export_compressed_model", false]], "exportconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.ExportConfig", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.extract_data_type", false]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.extract_data_type", false]], "f1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.F1", false]], "f1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.F1", false]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.f1_score", false]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.f1_score", false]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction", false]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[467, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction", false]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize", false]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase", false]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.FashionMNIST", false]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST", false]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[148, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection", false]], "fatal() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.fatal", false]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.fault_tolerant_file", false]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.fetch_module", false]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.Fetcher", false]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[393, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "filter (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.Filter", false]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.Filter", false]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.filter_registry", false]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.filter_registry", false]], "filters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.FILTERS", false]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.FILTERS", false]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.find_by_name", false]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[186, "neural_compressor.compression.pruner.wanda.utils.find_layers", false]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset", false]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.find_pareto_front", false]], "fit() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.fit", false]], "fit() (in module neural_compressor.mix_precision)": [[328, "neural_compressor.mix_precision.fit", false]], "fit() (in module neural_compressor.quantization)": [[358, "neural_compressor.quantization.fit", false]], "fit() (in module neural_compressor.training)": [[468, "neural_compressor.training.fit", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph", false]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator", false]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator", false]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16", false]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_float16", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[394, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "footprint (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Footprint", false]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.forward_wrapper", false]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.framework_datasets", false]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.framework_datasets", false]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[419, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[420, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer", false]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.frozen_pb_session", false]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session", false]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.FullTokenizer", false]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer", false]], "function1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function1", false]], "function2() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function2", false]], "function3() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function3", false]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.fuse", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[396, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[397, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[421, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[422, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[398, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator", false]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[423, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[437, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[447, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[438, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[448, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[439, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[436, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[446, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[440, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[441, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[450, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[442, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[451, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[405, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator", false]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator", false]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.gen_bar_updater", false]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater", false]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK", false]], "generaltopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.GeneralTopK", false]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer", false]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict", false]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict", false]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config", false]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config", false]], "generate_prefix() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.generate_prefix", false]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.generate_pruner_config", false]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[431, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generator1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.generator1", false]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers", false]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.get_activation", false]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[227, "neural_compressor.experimental.common.torch_utils.get_activation", false]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name", false]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.get_adaptor_name", false]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.get_algorithm", false]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_all_fp32_data", false]], "get_architecture() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_architecture", false]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_architecture", false]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes", false]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size", false]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_block_prefix", false]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_bounded_threads", false]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_bounded_threads", false]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children", false]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.get_children", false]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_core_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_core_ids", false]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_core_ids", false]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.get_criterion", false]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_depth", false]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth", false]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth", false]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous", false]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph", false]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_example_input", false]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_fallback_order", false]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.get_final_text", false]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_final_text", false]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name", false]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.get_func_from_config", false]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_graph_def", false]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def", false]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_hidden_states", false]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape", false]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names", false]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names", false]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_layers", false]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version", false]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.get_metrics", false]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[332, "neural_compressor.model.model.get_model_fwk_name", false]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape", false]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape", false]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[480, "neural_compressor.utils.neural_insights_utils.get_model_path", false]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.get_model_type", false]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type", false]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module", false]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.get_module", false]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_module_input_output", false]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32", false]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8", false]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children", false]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children", false]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_node_mapping", false]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.get_node_mapping", false]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.get_node_original_name", false]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_number_of_sockets", false]], "get_op_list() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_op_list", false]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name", false]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.get_pattern", false]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern", false]], "get_physical_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_physical_ids", false]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_physical_ids", false]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.get_postprocess", false]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[471, "neural_compressor.utils.create_obj_from_config.get_preprocess", false]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.get_pruner", false]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner", false]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output", false]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops", false]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops", false]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs", false]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg", false]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg_type", false]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.get_scheduler", false]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler", false]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema", false]], "get_size() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_size", false]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio", false]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf", false]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx", false]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name", false]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name", false]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name", false]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name", false]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_tensor_histogram", false]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node", false]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr", false]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr", false]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data", false]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape", false]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_tensors_info", false]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion", false]], "get_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads", false]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_threads", false]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads_per_core", false]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_threads_per_core", false]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_torch_version", false]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.get_torchvision_map", false]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map", false]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_tuning_history", false]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor", false]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale", false]], "get_weights_details() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.get_weights_details", false]], "global_state (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.GLOBAL_STATE", false]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step", false]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step", false]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator", false]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq", false]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize", false]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion", false]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[283, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner", false]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_def_session", false]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session", false]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization", false]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_session", false]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.graph_session", false]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer", false]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[434, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer", false]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[34, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter", false]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[381, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter", false]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[35, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib", false]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[406, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[395, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[418, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper", false]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[434, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper", false]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[454, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[407, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.GridSearcher", false]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso", false]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[284, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner", false]], "halfprecisionconverter (class in neural_compressor.torch.algorithms.mix_precision.half_precision_convert)": [[465, "neural_compressor.torch.algorithms.mix_precision.half_precision_convert.HalfPrecisionConverter", false]], "halfprecisionmodulewrapper (class in neural_compressor.torch.algorithms.mix_precision.module_wrappers)": [[466, "neural_compressor.torch.algorithms.mix_precision.module_wrappers.HalfPrecisionModuleWrapper", false]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top", false]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[365, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy", false]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks", false]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace", false]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector", false]], "hpoconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.HPOConfig", false]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ImageFolder", false]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ImageFolder", false]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw", false]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw", false]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.IndexFetcher", false]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher", false]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.IndexFetcher", false]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype", false]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.infer_shapes", false]], "info() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.info", false]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter", false]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[391, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.input2tuple", false]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.InputFeatures", false]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging", false]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[456, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging", false]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[409, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers", false]], "ipexmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.IPEXModel", false]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.is_B_transposed", false]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format", false]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format", false]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.is_fused_module", false]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global", false]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global", false]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[482, "neural_compressor.utils.pytorch.is_int8_model", false]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple", false]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized", false]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain", false]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format", false]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format", false]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.isiterable", false]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.IterableDataset", false]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.IterableDataset", false]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.IterableFetcher", false]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher", false]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.IterableFetcher", false]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.IterableSampler", false]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler", false]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.IterableSampler", false]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.IterativeScheduler", false]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler", false]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run", false]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run", false]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher", false]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.k", false]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.k", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers", false]], "keras (class in neural_compressor.config)": [[188, "neural_compressor.config.Keras", false]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.keras_session", false]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.keras_session", false]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern", false]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner", false]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner", false]], "kerasmodel (class in neural_compressor.model.keras_model)": [[331, "neural_compressor.model.keras_model.KerasModel", false]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel", false]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM", false]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[477, "neural_compressor.utils.kl_divergence.KL_Divergence", false]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator", false]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework", false]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework", false]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss", false]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss", false]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig", false]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.KnowledgeDistillationLossConfig", false]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.label_list", false]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.label_list", false]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[210, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[210, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.labels", false]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.labels", false]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.LabelShift", false]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift", false]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1", false]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2", false]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[469, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector", false]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant", false]], "lazyimport (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.LazyImport", false]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher", false]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers", false]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns", false]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression", false]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator", false]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load", false]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[462, "neural_compressor.torch.algorithms.layer_wise.load.load", false]], "load() (in module neural_compressor.utils.pytorch)": [[482, "neural_compressor.utils.pytorch.load", false]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.load_data_from_pkl", false]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model", false]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model", false]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.load_saved_model", false]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model", false]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor", false]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor", false]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard", false]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard", false]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.load_vocab", false]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.load_vocab", false]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[482, "neural_compressor.utils.pytorch.load_weight_only", false]], "log() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.log", false]], "logger (class in neural_compressor.common.utils.logger)": [[153, "neural_compressor.common.utils.logger.Logger", false]], "logger (class in neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.Logger", false]], "loss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Loss", false]], "loss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Loss", false]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler", false]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[18, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator", false]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M", false]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M", false]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M", false]], "mae (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MAE", false]], "mae (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MAE", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion", false]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner", false]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_dquant_node", false]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node", false]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_module", false]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model", false]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs", false]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape", false]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_quant_node", false]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph", false]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block", false]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype", false]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type", false]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype", false]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks", false]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks", false]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern", false]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator", false]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op", false]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[432, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metric (class in neural_compressor.experimental.common.metric)": [[223, "neural_compressor.experimental.common.metric.Metric", false]], "metric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Metric", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.metric_max_over_ground_truths", false]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.metric_registry", false]], "metric_registry() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.metric_registry", false]], "metrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.METRICS", false]], "metrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.METRICS", false]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[274, "neural_compressor.experimental.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[327, "neural_compressor.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[327, "neural_compressor.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[327, "neural_compressor.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[327, "neural_compressor.metric.metric.TensorflowMetrics.metrics", false]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions", false]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op", false]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator", false]], "miou (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.mIOU", false]], "miou (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.mIOU", false]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision", false]], "mixedprecisionconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.MixedPrecisionConfig", false]], "mnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MNIST", false]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST", false]], "mode (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.MODE", false]], "model (class in neural_compressor.experimental.common.model)": [[224, "neural_compressor.experimental.common.model.Model", false]], "model (class in neural_compressor.model.model)": [[332, "neural_compressor.model.model.Model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model", false]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.model", false]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.model", false]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model", false]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model", false]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim", false]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2", false]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha", false]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion", false]], "modelsize (class in neural_compressor.objective)": [[338, "neural_compressor.objective.ModelSize", false]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "module": [[0, "module-block_mask", false], [1, "module-neural_compressor.adaptor.mxnet_utils", false], [2, "module-neural_compressor.adaptor.mxnet_utils.util", false], [3, "module-neural_compressor.adaptor.ox_utils.calibration", false], [4, "module-neural_compressor.adaptor.ox_utils.calibrator", false], [5, "module-neural_compressor.adaptor.ox_utils", false], [6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false], [7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false], [8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false], [9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false], [10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false], [11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false], [12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false], [13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false], [14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false], [15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false], [16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false], [17, "module-neural_compressor.adaptor.ox_utils.operators", false], [18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false], [19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false], [20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false], [21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false], [22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false], [23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false], [24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false], [25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false], [26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false], [27, "module-neural_compressor.adaptor.ox_utils.operators.split", false], [28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false], [29, "module-neural_compressor.adaptor.ox_utils.quantizer", false], [30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false], [31, "module-neural_compressor.adaptor.ox_utils.util", false], [32, "module-neural_compressor.adaptor.ox_utils.weight_only", false], [33, "module-neural_compressor.adaptor.tensorflow", false], [34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false], [35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false], [36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false], [37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false], [39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [96, "module-neural_compressor.adaptor.tf_utils.graph_util", false], [97, "module-neural_compressor.adaptor.tf_utils", false], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false], [126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false], [127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false], [128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false], [134, "module-neural_compressor.adaptor.tf_utils.util", false], [135, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false], [136, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false], [137, "module-neural_compressor.adaptor.torch_utils", false], [138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false], [139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false], [140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false], [141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false], [142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false], [143, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false], [144, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false], [145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false], [146, "module-neural_compressor.adaptor.torch_utils.util", false], [147, "module-neural_compressor.algorithm.algorithm", false], [148, "module-neural_compressor.algorithm.fast_bias_correction", false], [149, "module-neural_compressor.algorithm", false], [150, "module-neural_compressor.algorithm.smooth_quant", false], [151, "module-neural_compressor.algorithm.weight_correction", false], [152, "module-neural_compressor.benchmark", false], [153, "module-neural_compressor.common.utils.logger", false], [154, "module-neural_compressor.compression.callbacks", false], [155, "module-neural_compressor.compression.distillation.criterions", false], [156, "module-neural_compressor.compression.distillation", false], [157, "module-neural_compressor.compression.distillation.optimizers", false], [158, "module-neural_compressor.compression.distillation.utility", false], [159, "module-neural_compressor.compression.hpo", false], [160, "module-neural_compressor.compression.hpo.sa_optimizer", false], [161, "module-neural_compressor.compression.pruner.criteria", false], [162, "module-neural_compressor.compression.pruner", false], [163, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false], [164, "module-neural_compressor.compression.pruner.model_slim", false], [165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false], [166, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false], [167, "module-neural_compressor.compression.pruner.patterns.base", false], [168, "module-neural_compressor.compression.pruner.patterns", false], [169, "module-neural_compressor.compression.pruner.patterns.mha", false], [170, "module-neural_compressor.compression.pruner.patterns.ninm", false], [171, "module-neural_compressor.compression.pruner.patterns.nxm", false], [172, "module-neural_compressor.compression.pruner.pruners.base", false], [173, "module-neural_compressor.compression.pruner.pruners.basic", false], [174, "module-neural_compressor.compression.pruner.pruners.block_mask", false], [175, "module-neural_compressor.compression.pruner.pruners", false], [176, "module-neural_compressor.compression.pruner.pruners.mha", false], [177, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false], [178, "module-neural_compressor.compression.pruner.pruners.progressive", false], [179, "module-neural_compressor.compression.pruner.pruners.retrain_free", false], [180, "module-neural_compressor.compression.pruner.pruning", false], [181, "module-neural_compressor.compression.pruner.regs", false], [182, "module-neural_compressor.compression.pruner.schedulers", false], [183, "module-neural_compressor.compression.pruner.tf_criteria", false], [184, "module-neural_compressor.compression.pruner.utils", false], [185, "module-neural_compressor.compression.pruner.wanda", false], [186, "module-neural_compressor.compression.pruner.wanda.utils", false], [187, "module-neural_compressor.conf.pythonic_config", false], [188, "module-neural_compressor.config", false], [189, "module-neural_compressor.contrib", false], [190, "module-neural_compressor.contrib.strategy", false], [191, "module-neural_compressor.contrib.strategy.sigopt", false], [192, "module-neural_compressor.contrib.strategy.tpe", false], [193, "module-neural_compressor.data.dataloaders.base_dataloader", false], [194, "module-neural_compressor.data.dataloaders.dataloader", false], [195, "module-neural_compressor.data.dataloaders.default_dataloader", false], [196, "module-neural_compressor.data.dataloaders.fetcher", false], [197, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false], [198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false], [199, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false], [200, "module-neural_compressor.data.dataloaders.sampler", false], [201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false], [202, "module-neural_compressor.data.datasets.bert_dataset", false], [203, "module-neural_compressor.data.datasets.coco_dataset", false], [204, "module-neural_compressor.data.datasets.dataset", false], [205, "module-neural_compressor.data.datasets.dummy_dataset", false], [206, "module-neural_compressor.data.datasets.dummy_dataset_v2", false], [207, "module-neural_compressor.data.datasets.imagenet_dataset", false], [208, "module-neural_compressor.data.datasets", false], [209, "module-neural_compressor.data.datasets.style_transfer_dataset", false], [210, "module-neural_compressor.data.filters.coco_filter", false], [211, "module-neural_compressor.data.filters.filter", false], [212, "module-neural_compressor.data.filters", false], [213, "module-neural_compressor.data", false], [214, "module-neural_compressor.data.transforms.imagenet_transform", false], [215, "module-neural_compressor.data.transforms", false], [216, "module-neural_compressor.data.transforms.postprocess", false], [217, "module-neural_compressor.data.transforms.tokenization", false], [218, "module-neural_compressor.data.transforms.transform", false], [219, "module-neural_compressor.experimental.benchmark", false], [220, "module-neural_compressor.experimental.common.criterion", false], [221, "module-neural_compressor.experimental.common.dataloader", false], [222, "module-neural_compressor.experimental.common", false], [223, "module-neural_compressor.experimental.common.metric", false], [224, "module-neural_compressor.experimental.common.model", false], [225, "module-neural_compressor.experimental.common.optimizer", false], [226, "module-neural_compressor.experimental.common.postprocess", false], [227, "module-neural_compressor.experimental.common.torch_utils", false], [228, "module-neural_compressor.experimental.component", false], [229, "module-neural_compressor.experimental.compression", false], [230, "module-neural_compressor.experimental.contrib", false], [231, "module-neural_compressor.experimental.contrib.strategy", false], [232, "module-neural_compressor.experimental.contrib.strategy.sigopt", false], [233, "module-neural_compressor.experimental.contrib.strategy.tpe", false], [234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false], [235, "module-neural_compressor.experimental.data.dataloaders.dataloader", false], [236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false], [237, "module-neural_compressor.experimental.data.dataloaders.fetcher", false], [238, "module-neural_compressor.experimental.data.dataloaders", false], [239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false], [240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false], [241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false], [242, "module-neural_compressor.experimental.data.dataloaders.sampler", false], [243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false], [244, "module-neural_compressor.experimental.data.datasets.bert_dataset", false], [245, "module-neural_compressor.experimental.data.datasets.coco_dataset", false], [246, "module-neural_compressor.experimental.data.datasets.dataset", false], [247, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false], [248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false], [249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false], [250, "module-neural_compressor.experimental.data.datasets", false], [251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false], [252, "module-neural_compressor.experimental.data.filters.coco_filter", false], [253, "module-neural_compressor.experimental.data.filters.filter", false], [254, "module-neural_compressor.experimental.data.filters", false], [255, "module-neural_compressor.experimental.data", false], [256, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false], [257, "module-neural_compressor.experimental.data.transforms", false], [258, "module-neural_compressor.experimental.data.transforms.tokenization", false], [259, "module-neural_compressor.experimental.data.transforms.transform", false], [260, "module-neural_compressor.experimental.distillation", false], [261, "module-neural_compressor.experimental.export", false], [262, "module-neural_compressor.experimental.export.qlinear2qdq", false], [263, "module-neural_compressor.experimental.export.tf2onnx", false], [264, "module-neural_compressor.experimental.export.torch2onnx", false], [265, "module-neural_compressor.experimental.graph_optimization", false], [266, "module-neural_compressor.experimental", false], [267, "module-neural_compressor.experimental.metric.bleu", false], [268, "module-neural_compressor.experimental.metric.bleu_util", false], [269, "module-neural_compressor.experimental.metric.coco_label_map", false], [270, "module-neural_compressor.experimental.metric.coco_tools", false], [271, "module-neural_compressor.experimental.metric.evaluate_squad", false], [272, "module-neural_compressor.experimental.metric.f1", false], [273, "module-neural_compressor.experimental.metric", false], [274, "module-neural_compressor.experimental.metric.metric", false], [275, "module-neural_compressor.experimental.mixed_precision", false], [276, "module-neural_compressor.experimental.model_conversion", false], [277, "module-neural_compressor.experimental.nas.basic_nas", false], [278, "module-neural_compressor.experimental.nas.dynas", false], [279, "module-neural_compressor.experimental.nas", false], [280, "module-neural_compressor.experimental.nas.nas", false], [281, "module-neural_compressor.experimental.nas.nas_utils", false], [282, "module-neural_compressor.experimental.nas.search_algorithms", false], [283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false], [284, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false], [285, "module-neural_compressor.experimental.pruner_legacy", false], [286, "module-neural_compressor.experimental.pruner_legacy.magnitude", false], [287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false], [288, "module-neural_compressor.experimental.pruner_legacy.pruner", false], [289, "module-neural_compressor.experimental.pruning", false], [290, "module-neural_compressor.experimental.pruning_recipes", false], [291, "module-neural_compressor.experimental.pruning_recipes.patterns", false], [292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false], [293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false], [294, "module-neural_compressor.experimental.pruning_v2", false], [295, "module-neural_compressor.experimental.pytorch_pruner", false], [296, "module-neural_compressor.experimental.pytorch_pruner.logger", false], [297, "module-neural_compressor.experimental.pytorch_pruner.patterns", false], [298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false], [299, "module-neural_compressor.experimental.pytorch_pruner.pruner", false], [300, "module-neural_compressor.experimental.pytorch_pruner.pruning", false], [301, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false], [302, "module-neural_compressor.experimental.quantization", false], [303, "module-neural_compressor.experimental.scheduler", false], [304, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false], [305, "module-neural_compressor.experimental.strategy.basic", false], [306, "module-neural_compressor.experimental.strategy.bayesian", false], [307, "module-neural_compressor.experimental.strategy.exhaustive", false], [308, "module-neural_compressor.experimental.strategy", false], [309, "module-neural_compressor.experimental.strategy.mse", false], [310, "module-neural_compressor.experimental.strategy.mse_v2", false], [311, "module-neural_compressor.experimental.strategy.random", false], [312, "module-neural_compressor.experimental.strategy.strategy", false], [313, "module-neural_compressor.experimental.strategy.utils.constant", false], [314, "module-neural_compressor.experimental.strategy.utils", false], [315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false], [316, "module-neural_compressor.experimental.strategy.utils.tuning_space", false], [317, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false], [318, "module-neural_compressor.experimental.strategy.utils.utility", false], [319, "module-neural_compressor", false], [320, "module-neural_compressor.metric.bleu", false], [321, "module-neural_compressor.metric.bleu_util", false], [322, "module-neural_compressor.metric.coco_label_map", false], [323, "module-neural_compressor.metric.coco_tools", false], [324, "module-neural_compressor.metric.evaluate_squad", false], [325, "module-neural_compressor.metric.f1", false], [326, "module-neural_compressor.metric", false], [327, "module-neural_compressor.metric.metric", false], [328, "module-neural_compressor.mix_precision", false], [329, "module-neural_compressor.model.base_model", false], [330, "module-neural_compressor.model", false], [331, "module-neural_compressor.model.keras_model", false], [332, "module-neural_compressor.model.model", false], [333, "module-neural_compressor.model.mxnet_model", false], [334, "module-neural_compressor.model.nets_factory", false], [335, "module-neural_compressor.model.onnx_model", false], [336, "module-neural_compressor.model.tensorflow_model", false], [337, "module-neural_compressor.model.torch_model", false], [338, "module-neural_compressor.objective", false], [339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator", false], [340, "module-neural_compressor.onnxrt.algorithms.smoother.core", false], [341, "module-neural_compressor.onnxrt.utils.onnx_model", false], [342, "module-neural_compressor.profiling", false], [343, "module-neural_compressor.profiling.parser.factory", false], [344, "module-neural_compressor.profiling.parser.onnx_parser.factory", false], [345, "module-neural_compressor.profiling.parser.onnx_parser.parser", false], [346, "module-neural_compressor.profiling.parser.parser", false], [347, "module-neural_compressor.profiling.parser.result", false], [348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false], [349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false], [350, "module-neural_compressor.profiling.profiler.factory", false], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false], [354, "module-neural_compressor.profiling.profiler.profiler", false], [355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false], [358, "module-neural_compressor.quantization", false], [359, "module-neural_compressor.strategy.auto", false], [360, "module-neural_compressor.strategy.auto_mixed_precision", false], [361, "module-neural_compressor.strategy.basic", false], [362, "module-neural_compressor.strategy.bayesian", false], [363, "module-neural_compressor.strategy.conservative", false], [364, "module-neural_compressor.strategy.exhaustive", false], [365, "module-neural_compressor.strategy.hawq_v2", false], [366, "module-neural_compressor.strategy", false], [367, "module-neural_compressor.strategy.mse", false], [368, "module-neural_compressor.strategy.mse_v2", false], [369, "module-neural_compressor.strategy.random", false], [370, "module-neural_compressor.strategy.strategy", false], [371, "module-neural_compressor.strategy.utils.constant", false], [372, "module-neural_compressor.strategy.utils", false], [373, "module-neural_compressor.strategy.utils.tuning_sampler", false], [374, "module-neural_compressor.strategy.utils.tuning_space", false], [375, "module-neural_compressor.strategy.utils.tuning_structs", false], [376, "module-neural_compressor.strategy.utils.utility", false], [377, "module-neural_compressor.template.api_doc_example", false], [378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false], [379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false], [380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false], [381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false], [382, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false], [383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false], [385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false], [386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false], [387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false], [388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false], [389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false], [390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false], [391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false], [392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false], [393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false], [395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false], [396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false], [397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false], [398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false], [399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false], [400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false], [401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false], [402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false], [403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false], [404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false], [406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false], [407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false], [408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false], [409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false], [410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false], [411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false], [412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false], [413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false], [414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false], [415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false], [416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false], [417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false], [418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false], [419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false], [420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false], [421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false], [423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false], [425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false], [426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false], [427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false], [428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false], [429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false], [430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false], [431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false], [432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [434, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false], [435, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false], [436, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false], [437, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false], [439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false], [440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false], [441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false], [442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false], [443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false], [444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false], [445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false], [446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false], [447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false], [448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false], [449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false], [450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false], [451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false], [452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false], [453, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false], [454, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false], [455, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false], [456, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false], [457, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false], [458, "module-neural_compressor.tensorflow.quantization.utils.utility", false], [459, "module-neural_compressor.tensorflow.utils.data", false], [460, "module-neural_compressor.tensorflow.utils.model_wrappers", false], [461, "module-neural_compressor.torch.algorithms.layer_wise", false], [462, "module-neural_compressor.torch.algorithms.layer_wise.load", false], [463, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false], [464, "module-neural_compressor.torch.algorithms.layer_wise.utils", false], [465, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert", false], [466, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers", false], [467, "module-neural_compressor.torch.algorithms.weight_only.modules", false], [468, "module-neural_compressor.training", false], [469, "module-neural_compressor.utils.collect_layer_histogram", false], [470, "module-neural_compressor.utils.constant", false], [471, "module-neural_compressor.utils.create_obj_from_config", false], [472, "module-neural_compressor.utils.export", false], [473, "module-neural_compressor.utils.export.qlinear2qdq", false], [474, "module-neural_compressor.utils.export.tf2onnx", false], [475, "module-neural_compressor.utils.export.torch2onnx", false], [476, "module-neural_compressor.utils", false], [477, "module-neural_compressor.utils.kl_divergence", false], [478, "module-neural_compressor.utils.load_huggingface", false], [479, "module-neural_compressor.utils.logger", false], [480, "module-neural_compressor.utils.neural_insights_utils", false], [481, "module-neural_compressor.utils.options", false], [482, "module-neural_compressor.utils.pytorch", false], [483, "module-neural_compressor.utils.utility", false], [484, "module-neural_compressor.utils.weights_details", false], [485, "module-neural_compressor.version", false]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.module_debug_level1", false]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules", false]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules", false]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.move_input_device", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[410, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "mse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MSE", false]], "mse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MSE", false]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[274, "neural_compressor.experimental.metric.metric.RMSE.mse", false]], "mse (neural_compressor.metric.metric.rmse attribute)": [[327, "neural_compressor.metric.metric.RMSE.mse", false]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.mse_metric_gap", false]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[310, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy", false]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[368, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy", false]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[309, "neural_compressor.experimental.strategy.mse.MSETuneStrategy", false]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[367, "neural_compressor.strategy.mse.MSETuneStrategy", false]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear", false]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[467, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear", false]], "multiobjective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.MultiObjective", false]], "mxnet (class in neural_compressor.config)": [[188, "neural_compressor.config.MXNet", false]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[197, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetDatasets", false]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets", false]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.MXNetFilters", false]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.MXNetFilters", false]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics", false]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MXNetMetrics", false]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetMNIST", false]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST", false]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[333, "neural_compressor.model.mxnet_model.MXNetModel", false]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetTransforms", false]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms", false]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetTranspose", false]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose", false]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N", false]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N", false]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N", false]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.NameCollector", false]], "nas (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NAS", false]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.nas_registry", false]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NASBase", false]], "nasconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.NASConfig", false]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device", false]], "neural_compressor": [[319, "module-neural_compressor", false]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils", false]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util", false]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils", false]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration", false]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator", false]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators", false]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split", false]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer", false]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util", false]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only", false]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow", false]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils", false]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util", false]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util", false]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils", false]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util", false]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm", false]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm", false]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction", false]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant", false]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction", false]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark", false]], "neural_compressor.common.utils.logger": [[153, "module-neural_compressor.common.utils.logger", false]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks", false]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation", false]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions", false]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers", false]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility", false]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo", false]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer", false]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner", false]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria", false]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim", false]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns", false]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base", false]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha", false]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm", false]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm", false]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners", false]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base", false]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic", false]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask", false]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha", false]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive", false]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free", false]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning", false]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs", false]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers", false]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria", false]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils", false]], "neural_compressor.compression.pruner.wanda": [[185, "module-neural_compressor.compression.pruner.wanda", false]], "neural_compressor.compression.pruner.wanda.utils": [[186, "module-neural_compressor.compression.pruner.wanda.utils", false]], "neural_compressor.conf.pythonic_config": [[187, "module-neural_compressor.conf.pythonic_config", false]], "neural_compressor.config": [[188, "module-neural_compressor.config", false]], "neural_compressor.contrib": [[189, "module-neural_compressor.contrib", false]], "neural_compressor.contrib.strategy": [[190, "module-neural_compressor.contrib.strategy", false]], "neural_compressor.contrib.strategy.sigopt": [[191, "module-neural_compressor.contrib.strategy.sigopt", false]], "neural_compressor.contrib.strategy.tpe": [[192, "module-neural_compressor.contrib.strategy.tpe", false]], "neural_compressor.data": [[213, "module-neural_compressor.data", false]], "neural_compressor.data.dataloaders.base_dataloader": [[193, "module-neural_compressor.data.dataloaders.base_dataloader", false]], "neural_compressor.data.dataloaders.dataloader": [[194, "module-neural_compressor.data.dataloaders.dataloader", false]], "neural_compressor.data.dataloaders.default_dataloader": [[195, "module-neural_compressor.data.dataloaders.default_dataloader", false]], "neural_compressor.data.dataloaders.fetcher": [[196, "module-neural_compressor.data.dataloaders.fetcher", false]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.data.dataloaders.sampler": [[200, "module-neural_compressor.data.dataloaders.sampler", false]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.data.datasets": [[208, "module-neural_compressor.data.datasets", false]], "neural_compressor.data.datasets.bert_dataset": [[202, "module-neural_compressor.data.datasets.bert_dataset", false]], "neural_compressor.data.datasets.coco_dataset": [[203, "module-neural_compressor.data.datasets.coco_dataset", false]], "neural_compressor.data.datasets.dataset": [[204, "module-neural_compressor.data.datasets.dataset", false]], "neural_compressor.data.datasets.dummy_dataset": [[205, "module-neural_compressor.data.datasets.dummy_dataset", false]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.data.datasets.dummy_dataset_v2", false]], "neural_compressor.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.data.datasets.imagenet_dataset", false]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.data.datasets.style_transfer_dataset", false]], "neural_compressor.data.filters": [[212, "module-neural_compressor.data.filters", false]], "neural_compressor.data.filters.coco_filter": [[210, "module-neural_compressor.data.filters.coco_filter", false]], "neural_compressor.data.filters.filter": [[211, "module-neural_compressor.data.filters.filter", false]], "neural_compressor.data.transforms": [[215, "module-neural_compressor.data.transforms", false]], "neural_compressor.data.transforms.imagenet_transform": [[214, "module-neural_compressor.data.transforms.imagenet_transform", false]], "neural_compressor.data.transforms.postprocess": [[216, "module-neural_compressor.data.transforms.postprocess", false]], "neural_compressor.data.transforms.tokenization": [[217, "module-neural_compressor.data.transforms.tokenization", false]], "neural_compressor.data.transforms.transform": [[218, "module-neural_compressor.data.transforms.transform", false]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental", false]], "neural_compressor.experimental.benchmark": [[219, "module-neural_compressor.experimental.benchmark", false]], "neural_compressor.experimental.common": [[222, "module-neural_compressor.experimental.common", false]], "neural_compressor.experimental.common.criterion": [[220, "module-neural_compressor.experimental.common.criterion", false]], "neural_compressor.experimental.common.dataloader": [[221, "module-neural_compressor.experimental.common.dataloader", false]], "neural_compressor.experimental.common.metric": [[223, "module-neural_compressor.experimental.common.metric", false]], "neural_compressor.experimental.common.model": [[224, "module-neural_compressor.experimental.common.model", false]], "neural_compressor.experimental.common.optimizer": [[225, "module-neural_compressor.experimental.common.optimizer", false]], "neural_compressor.experimental.common.postprocess": [[226, "module-neural_compressor.experimental.common.postprocess", false]], "neural_compressor.experimental.common.torch_utils": [[227, "module-neural_compressor.experimental.common.torch_utils", false]], "neural_compressor.experimental.component": [[228, "module-neural_compressor.experimental.component", false]], "neural_compressor.experimental.compression": [[229, "module-neural_compressor.experimental.compression", false]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib", false]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy", false]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt", false]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe", false]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data", false]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders", false]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader", false]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher", false]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler", false]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets", false]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset", false]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset", false]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters", false]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter", false]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter", false]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms", false]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization", false]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform", false]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation", false]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export", false]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq", false]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx", false]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx", false]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization", false]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric", false]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu", false]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util", false]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map", false]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools", false]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad", false]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1", false]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric", false]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision", false]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion", false]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas", false]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas", false]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas", false]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas", false]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils", false]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms", false]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy", false]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude", false]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner", false]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning", false]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes", false]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns", false]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2", false]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner", false]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger", false]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns", false]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner", false]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning", false]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization", false]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler", false]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy", false]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic", false]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian", false]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive", false]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse", false]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2", false]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random", false]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy", false]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils", false]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant", false]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space", false]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility", false]], "neural_compressor.metric": [[326, "module-neural_compressor.metric", false]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu", false]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util", false]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map", false]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools", false]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad", false]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1", false]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric", false]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision", false]], "neural_compressor.model": [[330, "module-neural_compressor.model", false]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model", false]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model", false]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model", false]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model", false]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory", false]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model", false]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model", false]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model", false]], "neural_compressor.objective": [[338, "module-neural_compressor.objective", false]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator", false]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.core", false]], "neural_compressor.onnxrt.utils.onnx_model": [[341, "module-neural_compressor.onnxrt.utils.onnx_model", false]], "neural_compressor.profiling": [[342, "module-neural_compressor.profiling", false]], "neural_compressor.profiling.parser.factory": [[343, "module-neural_compressor.profiling.parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, "module-neural_compressor.profiling.parser.onnx_parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, "module-neural_compressor.profiling.parser.onnx_parser.parser", false]], "neural_compressor.profiling.parser.parser": [[346, "module-neural_compressor.profiling.parser.parser", false]], "neural_compressor.profiling.parser.result": [[347, "module-neural_compressor.profiling.parser.result", false]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization", false]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy", false]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto", false]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision", false]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic", false]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian", false]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative", false]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive", false]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2", false]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse", false]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2", false]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random", false]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy", false]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils", false]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant", false]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler", false]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space", false]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs", false]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility", false]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example", false]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration", false]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler", false]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow", false]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_util", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[435, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[436, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[437, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[455, "module-neural_compressor.tensorflow.quantization.utils.transform_graph", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[453, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[454, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[456, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", false]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[457, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.tensorflow.quantization.utils.utility": [[458, "module-neural_compressor.tensorflow.quantization.utils.utility", false]], "neural_compressor.tensorflow.utils.data": [[459, "module-neural_compressor.tensorflow.utils.data", false]], "neural_compressor.tensorflow.utils.model_wrappers": [[460, "module-neural_compressor.tensorflow.utils.model_wrappers", false]], "neural_compressor.torch.algorithms.layer_wise": [[461, "module-neural_compressor.torch.algorithms.layer_wise", false]], "neural_compressor.torch.algorithms.layer_wise.load": [[462, "module-neural_compressor.torch.algorithms.layer_wise.load", false]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[463, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle", false]], "neural_compressor.torch.algorithms.layer_wise.utils": [[464, "module-neural_compressor.torch.algorithms.layer_wise.utils", false]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[465, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert", false]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[466, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers", false]], "neural_compressor.torch.algorithms.weight_only.modules": [[467, "module-neural_compressor.torch.algorithms.weight_only.modules", false]], "neural_compressor.training": [[468, "module-neural_compressor.training", false]], "neural_compressor.utils": [[476, "module-neural_compressor.utils", false]], "neural_compressor.utils.collect_layer_histogram": [[469, "module-neural_compressor.utils.collect_layer_histogram", false]], "neural_compressor.utils.constant": [[470, "module-neural_compressor.utils.constant", false]], "neural_compressor.utils.create_obj_from_config": [[471, "module-neural_compressor.utils.create_obj_from_config", false]], "neural_compressor.utils.export": [[472, "module-neural_compressor.utils.export", false]], "neural_compressor.utils.export.qlinear2qdq": [[473, "module-neural_compressor.utils.export.qlinear2qdq", false]], "neural_compressor.utils.export.tf2onnx": [[474, "module-neural_compressor.utils.export.tf2onnx", false]], "neural_compressor.utils.export.torch2onnx": [[475, "module-neural_compressor.utils.export.torch2onnx", false]], "neural_compressor.utils.kl_divergence": [[477, "module-neural_compressor.utils.kl_divergence", false]], "neural_compressor.utils.load_huggingface": [[478, "module-neural_compressor.utils.load_huggingface", false]], "neural_compressor.utils.logger": [[479, "module-neural_compressor.utils.logger", false]], "neural_compressor.utils.neural_insights_utils": [[480, "module-neural_compressor.utils.neural_insights_utils", false]], "neural_compressor.utils.options": [[481, "module-neural_compressor.utils.options", false]], "neural_compressor.utils.pytorch": [[482, "module-neural_compressor.utils.pytorch", false]], "neural_compressor.utils.utility": [[483, "module-neural_compressor.utils.utility", false]], "neural_compressor.utils.weights_details": [[484, "module-neural_compressor.utils.weights_details", false]], "neural_compressor.version": [[485, "module-neural_compressor.version", false]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator", false]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.normalize_answer", false]], "normalize_answer() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.normalize_answer", false]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.NormalizeTFTransform", false]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform", false]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.NormalizeTransform", false]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform", false]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_correct", false]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_sample", false]], "objective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Objective", false]], "objective_custom_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_custom_registry", false]], "objective_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_registry", false]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.OneshotScheduler", false]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler", false]], "onnx (class in neural_compressor.config)": [[188, "neural_compressor.config.ONNX", false]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq", false]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[473, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq", false]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph", false]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[335, "neural_compressor.model.onnx_model.ONNXModel", false]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[341, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel", false]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode", false]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema", false]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[345, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser", false]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.ONNXQlinear2QDQConfig", false]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxrt (class in neural_compressor.utils.options)": [[481, "neural_compressor.utils.options.onnxrt", false]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[3, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment", false]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE", false]], "onnxrtglue (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTGLUE", false]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics", false]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics", false]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[344, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory", false]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms", false]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms", false]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry", false]], "opentry (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.OpEntry", false]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.Operator", false]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[478, "neural_compressor.utils.load_huggingface.OptimizedModel", false]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[444, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.optimizer_registry", false]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.optimizer_registry", false]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.Optimizers", false]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.Optimizers", false]], "options (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.Options", false]], "options (class in neural_compressor.config)": [[188, "neural_compressor.config.Options", false]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[317, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig", false]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[375, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig", false]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.OpType", false]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict", false]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.OrderedDefaultDict", false]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant", false]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor", false]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform", false]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform", false]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator", false]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config", false]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear", false]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear_tf", false]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune", false]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.parse_saved_model", false]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model", false]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune", false]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune", false]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune_tf", false]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config", false]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types", false]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform", false]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform", false]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[343, "neural_compressor.profiling.parser.factory.ParserFactory", false]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.paser_cfgs", false]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern", false]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry", false]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path", false]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_path", false]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase", false]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[287, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner", false]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner", false]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA", false]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM", false]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM", false]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS", false]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns", false]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator", false]], "performance (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Performance", false]], "pickleerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError", false], [463, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError", false]], "picklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError", false], [463, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError", false]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator", false]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils", false]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[428, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[427, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[216, "neural_compressor.data.transforms.postprocess.Postprocess", false]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[226, "neural_compressor.experimental.common.postprocess.Postprocess", false]], "posttrainingquantconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.PostTrainingQuantConfig", false]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.pred_list", false]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.pred_list", false]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.predictions", false]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.predictions", false]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[411, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "prepare_compression() (in module neural_compressor.training)": [[468, "neural_compressor.training.prepare_compression", false]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader", false]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs", false]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model", false]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data", false]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.prepare_pruning", false]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.preprocess_user_cfg", false]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables", false]], "print_op_list() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.print_op_list", false]], "print_table() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.print_table", false]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_and_check_config", false]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config", false]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_config", false]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config", false]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_weight_config", false]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_yaml_config", false]], "profile() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.profile", false]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[354, "neural_compressor.profiling.profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler", false]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[350, "neural_compressor.profiling.profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[351, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[355, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory", false]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[346, "neural_compressor.profiling.parser.parser.ProfilingParser", false]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[347, "neural_compressor.profiling.parser.result.ProfilingResult", false]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.Pruner", false]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info", false]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info", false]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry", false]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners", false]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners", false]], "pruning (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.Pruning", false]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.Pruning", false]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency", false]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks", false]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion", false]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion", false]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler", false]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner", false]], "pytorch (class in neural_compressor.config)": [[188, "neural_compressor.config.PyTorch", false]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchBaseModel", false]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern", false]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner", false]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner", false]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner", false]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCriterions", false]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchCriterions", false]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss", false]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[199, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PyTorchDatasets", false]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets", false]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.PyTorchFilters", false]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.PyTorchFilters", false]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchFXModel", false]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss", false]], "pytorchloss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchLoss", false]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics", false]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchMetrics", false]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMNIST", false]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST", false]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchModel", false]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers", false]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers", false]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[177, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner", false]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM", false]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM", false]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[178, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner", false]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner", false]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss", false]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper", false]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchSGD", false]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.PyTorchSGD", false]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchTransforms", false]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms", false]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchTranspose", false]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose", false]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator", false]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator", false]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function", false]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator", false]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator", false]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator", false]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator", false]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator", false]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor", false]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator", false]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator", false]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator", false]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator", false]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator", false]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator", false]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry", false]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator", false]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator", false]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator", false]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator", false]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator", false]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data", false]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor", false]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantFormat", false]], "quantization (class in neural_compressor.experimental.quantization)": [[302, "neural_compressor.experimental.quantization.Quantization", false]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks", false]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.QuantizationAwareTrainingConfig", false]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.QuantizationConfig", false]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizationMode", false]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data", false]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel", false]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero", false]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_nparray", false]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model", false]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig", false]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer", false]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter", false]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValue", false]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType", false]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[445, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[449, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[452, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd", false]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase", false]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization", false]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[445, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[29, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer", false]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper", false]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase", false]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.QuantOptions", false]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantType", false]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.QuantType", false]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes", false]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomCropTransform", false]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform", false]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomHorizontalFlip", false]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip", false]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropTransform", false]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform", false]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher", false]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[311, "neural_compressor.experimental.strategy.random.RandomTuneStrategy", false]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[369, "neural_compressor.strategy.random.RandomTuneStrategy", false]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomVerticalFlip", false]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip", false]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.read_graph", false]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.read_graph", false]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.read_squad_examples", false]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.read_squad_examples", false]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs", false]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe", false]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher", false]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model", false]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model", false]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.record_output", false]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[227, "neural_compressor.experimental.common.torch_utils.record_output", false]], "recover() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.recover", false]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[482, "neural_compressor.utils.pytorch.recover_model_from_json", false]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator", false]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator", false]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg", false]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms", false]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.register_criterion", false]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.register_criterion", false]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.register_customer_metric", false]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[480, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload", false]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.register_pattern", false]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern", false]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.register_pruner", false]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners", false]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.register_pruning", false]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.register_reg", false]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.register_scheduler", false]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler", false]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator", false]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input", false]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[412, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[413, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[457, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleTFTransform", false]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform", false]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleTransform", false]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTransform", false]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default", false]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.reset_none_to_default", false]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeMXNetTransform", false]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform", false]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator", false]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizePytorchTransform", false]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform", false]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeTFTransform", false]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform", false]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeTransform", false]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTransform", false]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeWithRatio", false]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio", false]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion", false]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning", false]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type", false]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.reverted_data_type", false]], "rmse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.RMSE", false]], "rmse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.RMSE", false]], "roc (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ROC", false]], "roc (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ROC", false]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize", false]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.run_forward", false]], "run_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.run_instance", false]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sample", false]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sample", false]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.Sampler", false]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.Sampler", false]], "save() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.save", false]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[478, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream", false]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf", false]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.saved_model_session", false]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session", false]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[429, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler", false]], "scheduler (class in neural_compressor.experimental.scheduler)": [[303, "neural_compressor.experimental.scheduler.Scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler", false]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler", false]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores", false]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores", false]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results", false]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.SelfKnowledgeDistillationLossConfig", false]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher", false]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType", false]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[459, "neural_compressor.tensorflow.utils.data.SequentialSampler", false]], "set_all_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_all_env_var", false]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.set_all_env_var", false]], "set_backend() (in module neural_compressor.experimental.common.model)": [[224, "neural_compressor.experimental.common.model.set_backend", false]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution", false]], "set_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_env_var", false]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.set_env_var", false]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.set_module", false]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name", false]], "set_random_seed() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.set_random_seed", false]], "set_resume_from() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.set_resume_from", false]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.set_tensorboard", false]], "set_workspace() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.set_workspace", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[433, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "show_memory_info() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.show_memory_info", false]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[191, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[232, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.simple_inference", false]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar", false]], "singleton() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.singleton", false]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.slim_session", false]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.slim_session", false]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution", false]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[340, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother", false]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[150, "neural_compressor.algorithm.smooth_quant.SmoothQuant", false]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration", false]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[378, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration", false]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM", false]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[378, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM", false]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler", false]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[379, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler", false]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM", false]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[379, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM", false]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion", false]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion", false]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner", false]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner", false]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.SparseGPTPruning", false]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.split_shared_bias", false]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator", false]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[414, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "squadexample (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.SquadExample", false]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.SquadExample", false]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.SquadF1", false]], "squadf1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.SquadF1", false]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step", false]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph", false]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.static_quant_export", false]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.static_quant_export", false]], "statistics (class in neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.Statistics", false]], "str2array() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.str2array", false]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.strategy_registry", false]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.strategy_registry", false]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes", false]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes", false]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes", false]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes", false]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[415, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[416, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[209, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sum", false]], "sum (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sum", false]], "summary_benchmark() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.summary_benchmark", false]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[417, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re", false]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re", false]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers", false]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio", false]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets", false]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.TargetSpace", false]], "targetspace (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.TargetSpace", false]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector", false]], "tensorflow (class in neural_compressor.config)": [[188, "neural_compressor.config.TensorFlow", false]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Tensorflow", false]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam", false]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW", false]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW", false]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor", false]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor", false]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowBaseModel", false]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel", false]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel", false]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel", false]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP", false]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowCOCOMAP", false]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig", false]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter", false]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowCriterions", false]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.TensorflowCriterions", false]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss", false]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.TensorflowFilters", false]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.TensorflowFilters", false]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder", false]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper", false]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowLLMModel", false]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel", false]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP", false]], "tensorflowmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMAP", false]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics", false]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMetrics", false]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowModel", false]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers", false]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers", false]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[348, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory", false]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[349, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser", false]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowQATModel", false]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[128, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter", false]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorflowQuery", false]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel", false]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel", false]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD", false]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorFlowSGD", false]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale", false]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy", false]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK", false]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowTopK", false]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel", false]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowWrapFunction", false]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction", false]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant", false]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[467, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant", false]], "tf2onnxconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.TF2ONNXConfig", false]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper", false]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx", false]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[474, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx", false]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx", false]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[474, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx", false]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform", false]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.TfPruningCallback", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.TfPruningCallback", false]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[334, "neural_compressor.model.nets_factory.TFSlimNetsFactory", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform", false]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1", false]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16", false]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2", false]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2", false]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1", false]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase", false]], "time_limit() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.time_limit", false]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.to_numpy", false]], "toarray (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ToArray", false]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToArray", false]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ToNDArrayTransform", false]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform", false]], "torch2onnxconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.Torch2ONNXConfig", false]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx", false]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx", false]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx", false]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[475, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx", false]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[192, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy", false]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[233, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy", false]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph", false]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.transform_registry", false]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.transform_registry", false]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[144, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector", false]], "transforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TRANSFORMS", false], [218, "neural_compressor.data.transforms.transform.Transforms", false]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS", false], [259, "neural_compressor.experimental.data.transforms.transform.Transforms", false]], "transpose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.Transpose", false]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.Transpose", false]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.trt_env_setup", false]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.try_loading_keras", false]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras", false]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.TuneStrategy", false]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategy", false]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategyMeta", false]], "tuningcriterion (class in neural_compressor.config)": [[188, "neural_compressor.config.TuningCriterion", false]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem", false]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningItem", false]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[153, "neural_compressor.common.utils.logger.TuningLogger", false]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry", false]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace", false]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningSpace", false]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator", false]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator", false]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex", false]], "unicoderegex (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.UnicodeRegex", false]], "unpicklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError", false], [463, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError", false]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step", false]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module", false]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[464, "neural_compressor.torch.algorithms.layer_wise.utils.update_module", false]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[480, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload", false]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[480, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data", false]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.update_params", false]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.update_sq_scale", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output", false]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output", false]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_graph_node", false]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[460, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node", false]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.ValueInfo", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2", false]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.version1_eq_version2", false]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2", false]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.version1_gt_version2", false]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2", false]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.version1_gte_version2", false]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2", false]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.version1_lt_version2", false]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2", false]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[483, "neural_compressor.utils.utility.version1_lte_version2", false]], "warn() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.warn", false]], "warning() (in module neural_compressor.utils.logger)": [[479, "neural_compressor.utils.logger.warning", false]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[151, "neural_compressor.algorithm.weight_correction.WeightCorrection", false]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler", false]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.WeightPruningConfig", false]], "weightpruningconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.WeightPruningConfig", false]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[484, "neural_compressor.utils.weights_details.WeightsDetails", false]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[484, "neural_compressor.utils.weights_details.WeightsStatistics", false]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.whitespace_tokenize", false]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize", false]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer", false]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer", false]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric", false]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapMXNetMetric", false]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric", false]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapONNXRTMetric", false]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric", false]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapPyTorchMetric", false]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.write_graph", false]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[458, "neural_compressor.tensorflow.quantization.utils.utility.write_graph", false]]}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [319, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[149, 0, 0, "-", "algorithm"], [152, 0, 0, "-", "benchmark"], [188, 0, 0, "-", "config"], [189, 0, 0, "-", "contrib"], [213, 0, 0, "-", "data"], [266, 0, 0, "-", "experimental"], [326, 0, 0, "-", "metric"], [328, 0, 0, "-", "mix_precision"], [330, 0, 0, "-", "model"], [338, 0, 0, "-", "objective"], [342, 0, 0, "-", "profiling"], [358, 0, 0, "-", "quantization"], [366, 0, 0, "-", "strategy"], [468, 0, 0, "-", "training"], [476, 0, 0, "-", "utils"], [485, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "mxnet_utils"], [5, 0, 0, "-", "ox_utils"], [33, 0, 0, "-", "tensorflow"], [97, 0, 0, "-", "tf_utils"], [137, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.mxnet_utils": [[2, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, 1, 1, "", "CalibCollector"], [2, 1, 1, "", "CalibData"], [2, 1, 1, "", "CollectorBase"], [2, 1, 1, "", "DataIterLoader"], [2, 1, 1, "", "DataLoaderWrap"], [2, 1, 1, "", "NameCollector"], [2, 1, 1, "", "OpType"], [2, 1, 1, "", "TensorCollector"], [2, 2, 1, "", "amp_convert"], [2, 2, 1, "", "calib_model"], [2, 2, 1, "", "check_mx_version"], [2, 2, 1, "", "combine_capabilities"], [2, 2, 1, "", "create_data_example"], [2, 2, 1, "", "distribute_calib_tensors"], [2, 2, 1, "", "ensure_list"], [2, 2, 1, "", "fuse"], [2, 2, 1, "", "get_framework_name"], [2, 2, 1, "", "is_model_quantized"], [2, 2, 1, "", "isiterable"], [2, 2, 1, "", "make_module"], [2, 2, 1, "", "make_nc_model"], [2, 2, 1, "", "make_symbol_block"], [2, 2, 1, "", "ndarray_to_device"], [2, 2, 1, "", "parse_tune_config"], [2, 2, 1, "", "prepare_dataloader"], [2, 2, 1, "", "prepare_model"], [2, 2, 1, "", "prepare_model_data"], [2, 2, 1, "", "quantize_sym_model"], [2, 2, 1, "", "query_quantizable_nodes"], [2, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.ox_utils": [[3, 0, 0, "-", "calibration"], [4, 0, 0, "-", "calibrator"], [17, 0, 0, "-", "operators"], [29, 0, 0, "-", "quantizer"], [30, 0, 0, "-", "smooth_quant"], [31, 0, 0, "-", "util"], [32, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, 1, 1, "", "CalibratorBase"], [4, 1, 1, "", "HistogramCollector"], [4, 1, 1, "", "KLCalibrator"], [4, 1, 1, "", "MinMaxCalibrator"], [4, 1, 1, "", "PercentileCalibrator"], [4, 2, 1, "", "calib_registry"], [4, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[6, 0, 0, "-", "activation"], [7, 0, 0, "-", "argmax"], [8, 0, 0, "-", "attention"], [9, 0, 0, "-", "binary_op"], [10, 0, 0, "-", "concat"], [11, 0, 0, "-", "conv"], [12, 0, 0, "-", "direct_q8"], [13, 0, 0, "-", "embed_layernorm"], [14, 0, 0, "-", "gather"], [15, 0, 0, "-", "gavgpool"], [16, 0, 0, "-", "gemm"], [18, 0, 0, "-", "lstm"], [19, 0, 0, "-", "matmul"], [20, 0, 0, "-", "maxpool"], [21, 0, 0, "-", "norm"], [22, 0, 0, "-", "ops"], [23, 0, 0, "-", "pad"], [24, 0, 0, "-", "pooling"], [25, 0, 0, "-", "reduce"], [26, 0, 0, "-", "resize"], [27, 0, 0, "-", "split"], [28, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, 1, 1, "", "ActivationOperator"], [6, 1, 1, "", "Float16ActivationOperator"], [6, 1, 1, "", "QActivationOperator"], [6, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, 1, 1, "", "ArgMaxOperator"], [7, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, 1, 1, "", "AttentionOperator"], [8, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, 1, 1, "", "BinaryDirect8BitOperator"], [9, 1, 1, "", "BinaryOperator"], [9, 1, 1, "", "Float16BinaryOperator"], [9, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, 1, 1, "", "ConcatOperator"], [10, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, 1, 1, "", "ConvOperator"], [11, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, 1, 1, "", "Direct8BitOperator"], [12, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, 1, 1, "", "EmbedLayerNormalizationOperator"], [13, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, 1, 1, "", "GatherOperator"], [14, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, 1, 1, "", "GlobalAveragePoolOperator"], [15, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, 1, 1, "", "GemmOperator"], [16, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, 1, 1, "", "FusedMatMulOperator"], [19, 1, 1, "", "MatMulOperator"], [19, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, 1, 1, "", "MaxPoolOperator"], [20, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, 1, 1, "", "BatchNormalizationOperator"], [21, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, 1, 1, "", "Operator"], [22, 1, 1, "", "QOperator"], [22, 2, 1, "", "op_registry"], [22, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, 1, 1, "", "PadOperator"], [23, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, 1, 1, "", "PoolOperator"], [24, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, 1, 1, "", "ReduceMinMaxOperator"], [25, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, 1, 1, "", "QResizeOperator"], [26, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, 1, 1, "", "QSplitOperator"], [27, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, 1, 1, "", "UnaryDirect8BitOperator"], [28, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, 1, 1, "", "ORTSmoothQuant"], [30, 2, 1, "", "get_quant_dequant_output"], [30, 2, 1, "", "make_sub_graph"], [30, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[31, 1, 1, "", "QuantFormat"], [31, 1, 1, "", "QuantType"], [31, 1, 1, "", "QuantizationMode"], [31, 1, 1, "", "QuantizedInitializer"], [31, 1, 1, "", "QuantizedValue"], [31, 1, 1, "", "QuantizedValueType"], [31, 1, 1, "", "ValueInfo"], [31, 2, 1, "", "attribute_to_kwarg"], [31, 2, 1, "", "calculate_scale_zp"], [31, 2, 1, "", "cast_tensor"], [31, 2, 1, "", "collate_preds"], [31, 2, 1, "", "dequantize_data"], [31, 2, 1, "", "dequantize_data_with_scale_zero"], [31, 2, 1, "", "dtype_to_name"], [31, 2, 1, "", "find_by_name"], [31, 2, 1, "", "float_to_bfloat16"], [31, 2, 1, "", "float_to_float16"], [31, 2, 1, "", "get_node_original_name"], [31, 2, 1, "", "infer_shapes"], [31, 2, 1, "", "is_B_transposed"], [31, 2, 1, "", "make_dquant_node"], [31, 2, 1, "", "make_quant_node"], [31, 2, 1, "", "quantize_data"], [31, 2, 1, "", "quantize_data_per_channel"], [31, 2, 1, "", "quantize_data_with_scale_zero"], [31, 2, 1, "", "quantize_nparray"], [31, 2, 1, "", "remove_init_from_model_input"], [31, 2, 1, "", "simple_progress_bar"], [31, 2, 1, "", "split_shared_bias"], [31, 2, 1, "", "to_numpy"], [31, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, 2, 1, "", "apply_awq_clip"], [32, 2, 1, "", "apply_awq_scale"], [32, 2, 1, "", "awq_quantize"], [32, 2, 1, "", "get_blob_size"], [32, 2, 1, "", "get_weight_scale"], [32, 2, 1, "", "gptq"], [32, 2, 1, "", "gptq_quantize"], [32, 2, 1, "", "make_matmul_weight_only_node"], [32, 2, 1, "", "pad_tensor"], [32, 2, 1, "", "prepare_inputs"], [32, 2, 1, "", "qdq_tensor"], [32, 2, 1, "", "quant_tensor"], [32, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.tensorflow": [[33, 1, 1, "", "TensorFlowAdaptor"], [33, 1, 1, "", "TensorflowQuery"], [33, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[34, 0, 0, "-", "graph_converter"], [35, 0, 0, "-", "graph_converter_without_calib"], [73, 0, 0, "-", "graph_rewriter"], [96, 0, 0, "-", "graph_util"], [98, 0, 0, "-", "quantize_graph"], [125, 0, 0, "-", "quantize_graph_common"], [126, 0, 0, "-", "smooth_quant_calibration"], [127, 0, 0, "-", "smooth_quant_scaler"], [128, 0, 0, "-", "tf2onnx_converter"], [131, 0, 0, "-", "transform_graph"], [134, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[38, 0, 0, "-", "bf16"], [62, 0, 0, "-", "generic"], [72, 0, 0, "-", "graph_base"], [81, 0, 0, "-", "int8"], [87, 0, 0, "-", "onnx"], [92, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[36, 0, 0, "-", "bf16_convert"], [37, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[39, 0, 0, "-", "convert_add_to_biasadd"], [40, 0, 0, "-", "convert_layout"], [41, 0, 0, "-", "convert_leakyrelu"], [42, 0, 0, "-", "convert_nan_to_random"], [43, 0, 0, "-", "convert_placeholder_to_const"], [44, 0, 0, "-", "dilated_contraction"], [45, 0, 0, "-", "dummy_biasadd"], [46, 0, 0, "-", "expanddims_optimizer"], [47, 0, 0, "-", "fetch_weight_from_reshape"], [48, 0, 0, "-", "fold_batch_norm"], [49, 0, 0, "-", "fold_constant"], [50, 0, 0, "-", "fuse_biasadd_add"], [51, 0, 0, "-", "fuse_column_wise_mul"], [52, 0, 0, "-", "fuse_conv_with_math"], [53, 0, 0, "-", "fuse_decomposed_bn"], [54, 0, 0, "-", "fuse_decomposed_in"], [55, 0, 0, "-", "fuse_gelu"], [56, 0, 0, "-", "fuse_layer_norm"], [57, 0, 0, "-", "fuse_pad_with_conv"], [58, 0, 0, "-", "fuse_pad_with_fp32_conv"], [59, 0, 0, "-", "fuse_reshape_transpose"], [60, 0, 0, "-", "graph_cse_optimizer"], [61, 0, 0, "-", "grappler_pass"], [63, 0, 0, "-", "insert_print_node"], [64, 0, 0, "-", "move_squeeze_after_relu"], [65, 0, 0, "-", "pre_optimize"], [66, 0, 0, "-", "remove_training_nodes"], [67, 0, 0, "-", "rename_batch_norm"], [68, 0, 0, "-", "split_shared_input"], [69, 0, 0, "-", "strip_equivalent_nodes"], [70, 0, 0, "-", "strip_unused_nodes"], [71, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, 1, 1, "", "FuseDecomposedBNOptimizer"], [53, 2, 1, "", "bypass_reshape"], [53, 2, 1, "", "get_const_dim_count"], [53, 2, 1, "", "node_from_map"], [53, 2, 1, "", "node_name_from_input"], [53, 2, 1, "", "valid_reshape_inputs"], [53, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, 1, 1, "", "FuseDecomposedINOptimizer"], [54, 2, 1, "", "bypass_reshape"], [54, 2, 1, "", "get_const_dim_count"], [54, 2, 1, "", "node_from_map"], [54, 2, 1, "", "node_name_from_input"], [54, 2, 1, "", "valid_reshape_inputs"], [54, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, 1, 1, "", "FuseLayerNormOptimizer"], [56, 2, 1, "", "node_from_map"], [56, 2, 1, "", "node_name_from_input"], [56, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[74, 0, 0, "-", "freeze_fake_quant"], [75, 0, 0, "-", "freeze_value"], [76, 0, 0, "-", "freeze_value_without_calib"], [77, 0, 0, "-", "fuse_conv_redundant_dequantize"], [78, 0, 0, "-", "fuse_conv_requantize"], [79, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [80, 0, 0, "-", "fuse_matmul_requantize"], [82, 0, 0, "-", "meta_op_optimizer"], [83, 0, 0, "-", "post_hostconst_converter"], [84, 0, 0, "-", "post_quantized_op_cse"], [85, 0, 0, "-", "rnn_convert"], [86, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [80, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[88, 0, 0, "-", "onnx_graph"], [89, 0, 0, "-", "onnx_node"], [90, 0, 0, "-", "onnx_schema"], [91, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, 1, 1, "", "OnnxOpSchema"], [90, 2, 1, "", "get_max_supported_opset_version"], [90, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, 1, 1, "", "SeqType"], [91, 2, 1, "", "add_port_to_name"], [91, 2, 1, "", "are_shapes_equal"], [91, 2, 1, "", "assert_error"], [91, 2, 1, "", "compute_const_folding_using_tf"], [91, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [91, 2, 1, "", "find_opset"], [91, 2, 1, "", "get_index_from_strided_slice_of_shape"], [91, 2, 1, "", "get_subgraphs_from_onnx"], [91, 2, 1, "", "get_tensorflow_node_attr"], [91, 2, 1, "", "get_tensorflow_node_shape_attr"], [91, 2, 1, "", "get_tensorflow_tensor_data"], [91, 2, 1, "", "get_tensorflow_tensor_shape"], [91, 2, 1, "", "infer_onnx_shape_dtype"], [91, 2, 1, "", "initialize_name_counter"], [91, 2, 1, "", "is_list_or_tuple"], [91, 2, 1, "", "is_onnx_domain"], [91, 2, 1, "", "make_onnx_inputs_outputs"], [91, 2, 1, "", "make_onnx_shape"], [91, 2, 1, "", "map_numpy_to_onnx_dtype"], [91, 2, 1, "", "map_onnx_to_numpy_type"], [91, 2, 1, "", "map_tensorflow_dtype"], [91, 2, 1, "", "read_tensorflow_node_attrs"], [91, 2, 1, "", "save_protobuf"], [91, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[93, 0, 0, "-", "insert_qdq_pattern"], [94, 0, 0, "-", "merge_duplicated_qdq"], [95, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, 1, 1, "", "GraphAnalyzer"], [96, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[100, 0, 0, "-", "qat"], [116, 0, 0, "-", "qdq"], [118, 0, 0, "-", "quantize_graph_base"], [119, 0, 0, "-", "quantize_graph_bn"], [120, 0, 0, "-", "quantize_graph_concatv2"], [121, 0, 0, "-", "quantize_graph_conv"], [122, 0, 0, "-", "quantize_graph_for_intel_cpu"], [123, 0, 0, "-", "quantize_graph_matmul"], [124, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, 0, 0, "-", "fake_quantize"], [101, 0, 0, "-", "quantize_config"], [102, 0, 0, "-", "quantize_helper"], [103, 0, 0, "-", "quantize_layers"], [108, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, 1, 1, "", "FakeQuantize"], [99, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, 2, 1, "", "init_quantize_config"], [102, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[104, 0, 0, "-", "optimize_layer"], [105, 0, 0, "-", "quantize_layer_add"], [106, 0, 0, "-", "quantize_layer_base"], [107, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, 1, 1, "", "QuantizeWrapper"], [108, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[109, 0, 0, "-", "fuse_qdq_bn"], [110, 0, 0, "-", "fuse_qdq_concatv2"], [111, 0, 0, "-", "fuse_qdq_conv"], [112, 0, 0, "-", "fuse_qdq_deconv"], [113, 0, 0, "-", "fuse_qdq_in"], [114, 0, 0, "-", "fuse_qdq_matmul"], [115, 0, 0, "-", "fuse_qdq_pooling"], [117, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, 1, 1, "", "QuantizeGraphBase"], [118, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, 1, 1, "", "SmoothQuantCalibration"], [126, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, 1, 1, "", "SmoothQuantScaler"], [127, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[129, 0, 0, "-", "bias_correction"], [130, 0, 0, "-", "graph_transform_base"], [132, 0, 0, "-", "insert_logging"], [133, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[134, 2, 1, "", "apply_inlining"], [134, 2, 1, "", "collate_tf_preds"], [134, 2, 1, "", "construct_function_from_graph_def"], [134, 2, 1, "", "disable_random"], [134, 2, 1, "", "fix_ref_type_of_graph_def"], [134, 2, 1, "", "generate_feed_dict"], [134, 2, 1, "", "get_estimator_graph"], [134, 2, 1, "", "get_graph_def"], [134, 2, 1, "", "get_input_output_node_names"], [134, 2, 1, "", "get_model_input_shape"], [134, 2, 1, "", "get_tensor_by_name"], [134, 2, 1, "", "get_tensor_val_from_graph_node"], [134, 2, 1, "", "get_weight_from_input_tensor"], [134, 2, 1, "", "int8_node_name_reverse"], [134, 2, 1, "", "is_ckpt_format"], [134, 2, 1, "", "is_saved_model_format"], [134, 2, 1, "", "iterator_sess_run"], [134, 2, 1, "", "parse_saved_model"], [134, 2, 1, "", "read_graph"], [134, 2, 1, "", "reconstruct_saved_model"], [134, 2, 1, "", "strip_equivalent_nodes"], [134, 2, 1, "", "strip_unused_nodes"], [134, 2, 1, "", "tf_diagnosis_helper"], [134, 2, 1, "", "version1_eq_version2"], [134, 2, 1, "", "version1_gt_version2"], [134, 2, 1, "", "version1_gte_version2"], [134, 2, 1, "", "version1_lt_version2"], [134, 2, 1, "", "version1_lte_version2"], [134, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[135, 0, 0, "-", "bf16_convert"], [136, 0, 0, "-", "hawq_metric"], [138, 0, 0, "-", "layer_wise_quant"], [143, 0, 0, "-", "model_wrapper"], [144, 0, 0, "-", "pattern_detector"], [145, 0, 0, "-", "symbolic_trace"], [146, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, 1, 1, "", "BF16ModuleWrapper"], [135, 2, 1, "", "Convert"], [135, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, 1, 1, "", "HessianTrace"], [136, 1, 1, "", "Node_collector"], [136, 2, 1, "", "compare_weights"], [136, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[139, 0, 0, "-", "modified_pickle"], [140, 0, 0, "-", "quantize"], [141, 0, 0, "-", "torch_load"], [142, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, 3, 1, "", "PickleError"], [139, 3, 1, "", "PicklingError"], [139, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, 2, 1, "", "dowload_hf_model"], [142, 2, 1, "", "get_children"], [142, 2, 1, "", "get_module"], [142, 2, 1, "", "get_named_children"], [142, 2, 1, "", "get_super_module_by_name"], [142, 2, 1, "", "load_empty_model"], [142, 2, 1, "", "load_layer_wise_quantized_model"], [142, 2, 1, "", "load_tensor"], [142, 2, 1, "", "load_tensor_from_shard"], [142, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, 1, 1, "", "FakeAffineTensorQuantFunction"], [143, 1, 1, "", "MulLinear"], [143, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, 2, 1, "", "symbolic_trace"], [145, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[146, 2, 1, "", "append_attr"], [146, 2, 1, "", "auto_copy"], [146, 2, 1, "", "calculate_quant_min_max"], [146, 2, 1, "", "calibration"], [146, 2, 1, "", "check_cfg_and_qconfig"], [146, 2, 1, "", "collate_torch_preds"], [146, 2, 1, "", "collect_weight_info"], [146, 2, 1, "", "fetch_module"], [146, 2, 1, "", "forward_wrapper"], [146, 2, 1, "", "generate_activation_observer"], [146, 2, 1, "", "get_absorb_layers"], [146, 2, 1, "", "get_block_prefix"], [146, 2, 1, "", "get_depth"], [146, 2, 1, "", "get_dict_at_depth"], [146, 2, 1, "", "get_element_under_depth"], [146, 2, 1, "", "get_embedding_contiguous"], [146, 2, 1, "", "get_example_input"], [146, 2, 1, "", "get_fallback_order"], [146, 2, 1, "", "get_hidden_states"], [146, 2, 1, "", "get_module_input_output"], [146, 2, 1, "", "get_mse_order_per_fp32"], [146, 2, 1, "", "get_mse_order_per_int8"], [146, 2, 1, "", "get_op_type_by_name"], [146, 2, 1, "", "get_quantizable_ops_from_cfgs"], [146, 2, 1, "", "get_torch_version"], [146, 2, 1, "", "input2tuple"], [146, 2, 1, "", "is_fused_module"], [146, 2, 1, "", "match_datatype_pattern"], [146, 2, 1, "", "move_input_device"], [146, 2, 1, "", "paser_cfgs"], [146, 2, 1, "", "set_module"], [146, 2, 1, "", "simple_inference"], [146, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[147, 0, 0, "-", "algorithm"], [148, 0, 0, "-", "fast_bias_correction"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[147, 1, 1, "", "ALGORITHMS"], [147, 1, 1, "", "Algorithm"], [147, 1, 1, "", "AlgorithmScheduler"], [147, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[148, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[150, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[151, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[152, 2, 1, "", "benchmark_with_raw_cmd"], [152, 2, 1, "", "call_one"], [152, 2, 1, "", "config_instance"], [152, 2, 1, "", "fit"], [152, 2, 1, "", "generate_prefix"], [152, 2, 1, "", "get_architecture"], [152, 2, 1, "", "get_bounded_threads"], [152, 2, 1, "", "get_core_ids"], [152, 2, 1, "", "get_physical_ids"], [152, 2, 1, "", "get_threads"], [152, 2, 1, "", "get_threads_per_core"], [152, 2, 1, "", "profile"], [152, 2, 1, "", "run_instance"], [152, 2, 1, "", "set_all_env_var"], [152, 2, 1, "", "set_env_var"], [152, 2, 1, "", "summary_benchmark"]], "neural_compressor.common.utils": [[153, 0, 0, "-", "logger"]], "neural_compressor.common.utils.logger": [[153, 1, 1, "", "Logger"], [153, 1, 1, "", "TuningLogger"]], "neural_compressor.compression": [[154, 0, 0, "-", "callbacks"], [156, 0, 0, "-", "distillation"], [159, 0, 0, "-", "hpo"], [162, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[154, 1, 1, "", "BaseCallbacks"], [154, 1, 1, "", "DistillationCallbacks"], [154, 1, 1, "", "PruningCallbacks"], [154, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[154, 4, 1, "", "_epoch_ran"], [154, 4, 1, "", "best_model"], [154, 4, 1, "", "best_score"], [154, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[155, 0, 0, "-", "criterions"], [157, 0, 0, "-", "optimizers"], [158, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[155, 1, 1, "", "Criterions"], [155, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "KnowledgeDistillationFramework"], [155, 1, 1, "", "KnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchCriterions"], [155, 1, 1, "", "PyTorchCrossEntropyLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "SelfKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorFlowCrossEntropyLoss"], [155, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [155, 1, 1, "", "TensorflowCriterions"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[157, 1, 1, "", "Optimizers"], [157, 1, 1, "", "PyTorchOptimizers"], [157, 1, 1, "", "PyTorchSGD"], [157, 1, 1, "", "TensorFlowAdam"], [157, 1, 1, "", "TensorFlowAdamW"], [157, 1, 1, "", "TensorFlowSGD"], [157, 1, 1, "", "TensorflowOptimizers"], [157, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[158, 2, 1, "", "get_activation"], [158, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[160, 0, 0, "-", "sa_optimizer"]], "neural_compressor.compression.pruner": [[161, 0, 0, "-", "criteria"], [164, 0, 0, "-", "model_slim"], [168, 0, 0, "-", "patterns"], [162, 2, 1, "", "prepare_pruning"], [175, 0, 0, "-", "pruners"], [180, 0, 0, "-", "pruning"], [181, 0, 0, "-", "regs"], [162, 2, 1, "", "save"], [182, 0, 0, "-", "schedulers"], [183, 0, 0, "-", "tf_criteria"], [184, 0, 0, "-", "utils"], [185, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[161, 1, 1, "", "BlockMaskCriterion"], [161, 1, 1, "", "GradientCriterion"], [161, 1, 1, "", "MagnitudeCriterion"], [161, 1, 1, "", "PruningCriterion"], [161, 1, 1, "", "RetrainFreeCriterion"], [161, 1, 1, "", "SnipCriterion"], [161, 1, 1, "", "SnipMomentumCriterion"], [161, 2, 1, "", "get_criterion"], [161, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[163, 0, 0, "-", "auto_slim"], [165, 0, 0, "-", "pattern_analyzer"], [166, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, 2, 1, "", "generate_ffn2_pruning_config"], [163, 2, 1, "", "generate_mha_pruning_config"], [163, 2, 1, "", "model_slim"], [163, 2, 1, "", "model_slim_ffn2"], [163, 2, 1, "", "model_slim_mha"], [163, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, 1, 1, "", "ClassifierHeadSearcher"], [165, 1, 1, "", "ClassifierHeadSearcherTF"], [165, 1, 1, "", "JitBasicSearcher"], [165, 1, 1, "", "Linear2LinearSearcher"], [165, 1, 1, "", "RecipeSearcher"], [165, 1, 1, "", "SelfMHASearcher"], [165, 2, 1, "", "get_attributes"], [165, 2, 1, "", "get_common_module"], [165, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[165, 4, 1, "", "current_pattern"], [165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"], [165, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[165, 4, 1, "", "model"], [165, 4, 1, "", "recipe"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, 1, 1, "", "LinearCompression"], [166, 1, 1, "", "LinearCompressionIterator"], [166, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[166, 4, 1, "", "device"], [166, 4, 1, "", "layer_1"], [166, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[166, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[167, 0, 0, "-", "base"], [168, 2, 1, "", "get_pattern"], [169, 0, 0, "-", "mha"], [170, 0, 0, "-", "ninm"], [171, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[167, 1, 1, "", "BasePattern"], [167, 1, 1, "", "KerasBasePattern"], [167, 1, 1, "", "PytorchBasePattern"], [167, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[169, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[169, 4, 1, "", "M"], [169, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[170, 4, 1, "", "M"], [170, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, 1, 1, "", "KerasPatternNxM"], [171, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[172, 0, 0, "-", "base"], [173, 0, 0, "-", "basic"], [174, 0, 0, "-", "block_mask"], [175, 2, 1, "", "get_pruner"], [176, 0, 0, "-", "mha"], [175, 2, 1, "", "parse_valid_pruner_types"], [177, 0, 0, "-", "pattern_lock"], [178, 0, 0, "-", "progressive"], [179, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[172, 1, 1, "", "BasePruner"], [172, 1, 1, "", "KerasBasePruner"], [172, 1, 1, "", "PytorchBasePruner"], [172, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[173, 1, 1, "", "KerasBasicPruner"], [173, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[174, 4, 1, "", "criterion"], [174, 4, 1, "", "pattern"], [174, 4, 1, "", "reg"], [174, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[176, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[176, 4, 1, "", "head_masks"], [176, 4, 1, "", "linear_layers"], [176, 4, 1, "", "mha_compressions"], [176, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[179, 4, 1, "", "criterion"], [179, 4, 1, "", "pattern"], [179, 4, 1, "", "reg"], [179, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[180, 1, 1, "", "BasePruning"], [180, 1, 1, "", "BasicPruning"], [180, 1, 1, "", "RetrainFreePruning"], [180, 1, 1, "", "SparseGPTPruning"], [180, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[181, 1, 1, "", "BaseReg"], [181, 1, 1, "", "GroupLasso"], [181, 2, 1, "", "get_reg"], [181, 2, 1, "", "get_reg_type"], [181, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[181, 4, 1, "", "alpha"], [181, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[182, 1, 1, "", "IterativeScheduler"], [182, 1, 1, "", "OneshotScheduler"], [182, 1, 1, "", "PruningScheduler"], [182, 2, 1, "", "get_scheduler"], [182, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[182, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[183, 1, 1, "", "MagnitudeCriterion"], [183, 1, 1, "", "PruningCriterion"], [183, 2, 1, "", "get_tf_criterion"], [183, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[184, 2, 1, "", "check_config"], [184, 2, 1, "", "check_key_validity"], [184, 2, 1, "", "collect_layer_inputs"], [184, 2, 1, "", "generate_pruner_config"], [184, 2, 1, "", "get_layers"], [184, 2, 1, "", "get_sparsity_ratio"], [184, 2, 1, "", "get_sparsity_ratio_tf"], [184, 2, 1, "", "parse_last_linear"], [184, 2, 1, "", "parse_last_linear_tf"], [184, 2, 1, "", "parse_to_prune"], [184, 2, 1, "", "parse_to_prune_tf"], [184, 2, 1, "", "process_and_check_config"], [184, 2, 1, "", "process_config"], [184, 2, 1, "", "process_weight_config"], [184, 2, 1, "", "process_yaml_config"], [184, 2, 1, "", "reset_none_to_default"], [184, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[186, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.wanda.utils": [[186, 2, 1, "", "find_layers"]], "neural_compressor.conf": [[187, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.pythonic_config": [[187, 1, 1, "", "AccuracyCriterion"], [187, 1, 1, "", "BenchmarkConfig"], [187, 1, 1, "", "DistillationConfig"], [187, 1, 1, "", "KnowledgeDistillationLossConfig"], [187, 1, 1, "", "Options"], [187, 1, 1, "", "QuantizationConfig"], [187, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[188, 1, 1, "", "AccuracyCriterion"], [188, 1, 1, "", "BenchmarkConfig"], [188, 1, 1, "", "DistillationConfig"], [188, 1, 1, "", "DotDict"], [188, 1, 1, "", "ExportConfig"], [188, 1, 1, "", "HPOConfig"], [188, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [188, 1, 1, "", "Keras"], [188, 1, 1, "", "KnowledgeDistillationLossConfig"], [188, 1, 1, "", "MXNet"], [188, 1, 1, "", "MixedPrecisionConfig"], [188, 1, 1, "", "NASConfig"], [188, 1, 1, "", "ONNX"], [188, 1, 1, "", "ONNXQlinear2QDQConfig"], [188, 1, 1, "", "Options"], [188, 1, 1, "", "PostTrainingQuantConfig"], [188, 1, 1, "", "PyTorch"], [188, 1, 1, "", "QuantizationAwareTrainingConfig"], [188, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [188, 1, 1, "", "TF2ONNXConfig"], [188, 1, 1, "", "TensorFlow"], [188, 1, 1, "", "Torch2ONNXConfig"], [188, 1, 1, "", "TuningCriterion"], [188, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[190, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[191, 0, 0, "-", "sigopt"], [192, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[191, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[192, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[208, 0, 0, "-", "datasets"], [212, 0, 0, "-", "filters"], [215, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[193, 0, 0, "-", "base_dataloader"], [194, 0, 0, "-", "dataloader"], [195, 0, 0, "-", "default_dataloader"], [196, 0, 0, "-", "fetcher"], [197, 0, 0, "-", "mxnet_dataloader"], [198, 0, 0, "-", "onnxrt_dataloader"], [199, 0, 0, "-", "pytorch_dataloader"], [200, 0, 0, "-", "sampler"], [201, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[193, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[194, 1, 1, "", "DataLoader"], [194, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[195, 1, 1, "", "DefaultDataLoader"], [195, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[196, 1, 1, "", "Fetcher"], [196, 1, 1, "", "IndexFetcher"], [196, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, 1, 1, "", "ONNXRTBertDataLoader"], [198, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[200, 1, 1, "", "BatchSampler"], [200, 1, 1, "", "IterableSampler"], [200, 1, 1, "", "Sampler"], [200, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, 1, 1, "", "TFDataDataLoader"], [201, 1, 1, "", "TensorflowBertDataLoader"], [201, 1, 1, "", "TensorflowDataLoader"], [201, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[202, 0, 0, "-", "bert_dataset"], [203, 0, 0, "-", "coco_dataset"], [204, 0, 0, "-", "dataset"], [205, 0, 0, "-", "dummy_dataset"], [206, 0, 0, "-", "dummy_dataset_v2"], [207, 0, 0, "-", "imagenet_dataset"], [209, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[202, 1, 1, "", "InputFeatures"], [202, 1, 1, "", "ONNXRTBertDataset"], [202, 1, 1, "", "ParseDecodeBert"], [202, 1, 1, "", "PytorchBertDataset"], [202, 1, 1, "", "TensorflowBertDataset"], [202, 1, 1, "", "TensorflowModelZooBertDataset"], [202, 2, 1, "", "convert_examples_to_features"], [202, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[203, 1, 1, "", "COCONpy"], [203, 1, 1, "", "COCORaw"], [203, 1, 1, "", "COCORecordDataset"], [203, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[204, 1, 1, "", "CIFAR10"], [204, 1, 1, "", "CIFAR100"], [204, 1, 1, "", "Dataset"], [204, 1, 1, "", "Datasets"], [204, 1, 1, "", "FashionMNIST"], [204, 1, 1, "", "ImageFolder"], [204, 1, 1, "", "IterableDataset"], [204, 1, 1, "", "MNIST"], [204, 1, 1, "", "MXNetCIFAR10"], [204, 1, 1, "", "MXNetCIFAR100"], [204, 1, 1, "", "MXNetDatasets"], [204, 1, 1, "", "MXNetFashionMNIST"], [204, 1, 1, "", "MXNetImageFolder"], [204, 1, 1, "", "MXNetMNIST"], [204, 1, 1, "", "ONNXRTITDatasets"], [204, 1, 1, "", "ONNXRTQLDatasets"], [204, 1, 1, "", "PyTorchDatasets"], [204, 1, 1, "", "PytorchCIFAR10"], [204, 1, 1, "", "PytorchCIFAR100"], [204, 1, 1, "", "PytorchFashionMNIST"], [204, 1, 1, "", "PytorchMNIST"], [204, 1, 1, "", "PytorchMxnetWrapDataset"], [204, 1, 1, "", "PytorchMxnetWrapFunction"], [204, 1, 1, "", "Tensorflow"], [204, 1, 1, "", "TensorflowCIFAR10"], [204, 1, 1, "", "TensorflowCIFAR100"], [204, 1, 1, "", "TensorflowDatasets"], [204, 1, 1, "", "TensorflowFashionMNIST"], [204, 1, 1, "", "TensorflowImageRecord"], [204, 1, 1, "", "TensorflowMNIST"], [204, 1, 1, "", "TensorflowTFRecordDataset"], [204, 1, 1, "", "TensorflowVOCRecord"], [204, 2, 1, "", "calculate_md5"], [204, 2, 1, "", "check_integrity"], [204, 2, 1, "", "dataset_registry"], [204, 2, 1, "", "download_url"], [204, 5, 1, "", "framework_datasets"], [204, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[205, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, 1, 1, "", "DummyDataset"], [206, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[207, 1, 1, "", "ImagenetRaw"], [207, 1, 1, "", "MXNetImagenetRaw"], [207, 1, 1, "", "ONNXRTImagenetDataset"], [207, 1, 1, "", "PytorchImagenetRaw"], [207, 1, 1, "", "TensorflowImagenetDataset"], [207, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[210, 0, 0, "-", "coco_filter"], [211, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[210, 1, 1, "", "LabelBalanceCOCORawFilter"], [210, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[211, 1, 1, "", "FILTERS"], [211, 1, 1, "", "Filter"], [211, 1, 1, "", "MXNetFilters"], [211, 1, 1, "", "ONNXRTITFilters"], [211, 1, 1, "", "ONNXRTQLFilters"], [211, 1, 1, "", "PyTorchFilters"], [211, 1, 1, "", "TensorflowFilters"], [211, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[214, 0, 0, "-", "imagenet_transform"], [216, 0, 0, "-", "postprocess"], [217, 0, 0, "-", "tokenization"], [218, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[214, 1, 1, "", "BilinearImagenetTransform"], [214, 1, 1, "", "LabelShift"], [214, 1, 1, "", "ONNXResizeCropImagenetTransform"], [214, 1, 1, "", "OnnxBilinearImagenetTransform"], [214, 1, 1, "", "ParseDecodeImagenet"], [214, 1, 1, "", "ParseDecodeImagenetTransform"], [214, 1, 1, "", "QuantizedInput"], [214, 1, 1, "", "ResizeWithAspectRatio"], [214, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [214, 1, 1, "", "TensorflowShiftRescale"], [214, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[216, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[217, 1, 1, "", "BasicTokenizer"], [217, 1, 1, "", "FullTokenizer"], [217, 1, 1, "", "WordpieceTokenizer"], [217, 2, 1, "", "convert_by_vocab"], [217, 2, 1, "", "convert_to_unicode"], [217, 2, 1, "", "load_vocab"], [217, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[218, 1, 1, "", "AlignImageChannelTransform"], [218, 1, 1, "", "BaseTransform"], [218, 1, 1, "", "CastONNXTransform"], [218, 1, 1, "", "CastPyTorchTransform"], [218, 1, 1, "", "CastTFTransform"], [218, 1, 1, "", "CenterCropTFTransform"], [218, 1, 1, "", "CenterCropTransform"], [218, 1, 1, "", "CollectTransform"], [218, 1, 1, "", "ComposeTransform"], [218, 1, 1, "", "CropResizeTFTransform"], [218, 1, 1, "", "CropResizeTransform"], [218, 1, 1, "", "CropToBoundingBox"], [218, 1, 1, "", "InputFeatures"], [218, 1, 1, "", "MXNetCropResizeTransform"], [218, 1, 1, "", "MXNetCropToBoundingBox"], [218, 1, 1, "", "MXNetNormalizeTransform"], [218, 1, 1, "", "MXNetTransforms"], [218, 1, 1, "", "MXNetTranspose"], [218, 1, 1, "", "NormalizeTFTransform"], [218, 1, 1, "", "NormalizeTransform"], [218, 1, 1, "", "ONNXRTCropToBoundingBox"], [218, 1, 1, "", "ONNXRTITTransforms"], [218, 1, 1, "", "ONNXRTQLTransforms"], [218, 1, 1, "", "PaddedCenterCropTransform"], [218, 1, 1, "", "ParseDecodeVocTransform"], [218, 1, 1, "", "PyTorchAlignImageChannel"], [218, 1, 1, "", "PyTorchCropResizeTransform"], [218, 1, 1, "", "PyTorchNormalizeTransform"], [218, 1, 1, "", "PyTorchTransforms"], [218, 1, 1, "", "PyTorchTranspose"], [218, 1, 1, "", "PytorchMxnetTransform"], [218, 1, 1, "", "PytorchMxnetWrapFunction"], [218, 1, 1, "", "RandomCropTFTransform"], [218, 1, 1, "", "RandomCropTransform"], [218, 1, 1, "", "RandomHorizontalFlip"], [218, 1, 1, "", "RandomResizedCropMXNetTransform"], [218, 1, 1, "", "RandomResizedCropPytorchTransform"], [218, 1, 1, "", "RandomResizedCropTFTransform"], [218, 1, 1, "", "RandomResizedCropTransform"], [218, 1, 1, "", "RandomVerticalFlip"], [218, 1, 1, "", "RescaleKerasPretrainTransform"], [218, 1, 1, "", "RescaleTFTransform"], [218, 1, 1, "", "RescaleTransform"], [218, 1, 1, "", "ResizeMXNetTransform"], [218, 1, 1, "", "ResizePytorchTransform"], [218, 1, 1, "", "ResizeTFTransform"], [218, 1, 1, "", "ResizeTransform"], [218, 1, 1, "", "ResizeWithRatio"], [218, 1, 1, "", "SquadExample"], [218, 1, 1, "", "TFModelZooCollectTransform"], [218, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [218, 1, 1, "", "TFSquadV1PostTransform"], [218, 1, 1, "", "TRANSFORMS"], [218, 1, 1, "", "TensorflowCropToBoundingBox"], [218, 1, 1, "", "TensorflowRandomHorizontalFlip"], [218, 1, 1, "", "TensorflowRandomVerticalFlip"], [218, 1, 1, "", "TensorflowResizeWithRatio"], [218, 1, 1, "", "TensorflowTransform"], [218, 1, 1, "", "TensorflowTransforms"], [218, 1, 1, "", "TensorflowTranspose"], [218, 1, 1, "", "TensorflowWrapFunction"], [218, 1, 1, "", "ToArray"], [218, 1, 1, "", "ToNDArrayTransform"], [218, 1, 1, "", "Transforms"], [218, 1, 1, "", "Transpose"], [218, 2, 1, "", "convert_examples_to_features"], [218, 2, 1, "", "get_final_text"], [218, 2, 1, "", "get_torchvision_map"], [218, 2, 1, "", "read_squad_examples"], [218, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[219, 0, 0, "-", "benchmark"], [222, 0, 0, "-", "common"], [228, 0, 0, "-", "component"], [229, 0, 0, "-", "compression"], [230, 0, 0, "-", "contrib"], [255, 0, 0, "-", "data"], [260, 0, 0, "-", "distillation"], [261, 0, 0, "-", "export"], [265, 0, 0, "-", "graph_optimization"], [273, 0, 0, "-", "metric"], [275, 0, 0, "-", "mixed_precision"], [276, 0, 0, "-", "model_conversion"], [279, 0, 0, "-", "nas"], [285, 0, 0, "-", "pruner_legacy"], [289, 0, 0, "-", "pruning"], [290, 0, 0, "-", "pruning_recipes"], [294, 0, 0, "-", "pruning_v2"], [295, 0, 0, "-", "pytorch_pruner"], [302, 0, 0, "-", "quantization"], [303, 0, 0, "-", "scheduler"], [308, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[219, 1, 1, "", "Benchmark"], [219, 2, 1, "", "get_architecture"], [219, 2, 1, "", "get_bounded_threads"], [219, 2, 1, "", "get_core_ids"], [219, 2, 1, "", "get_physical_ids"], [219, 2, 1, "", "get_threads"], [219, 2, 1, "", "get_threads_per_core"], [219, 2, 1, "", "set_all_env_var"], [219, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[220, 0, 0, "-", "criterion"], [221, 0, 0, "-", "dataloader"], [223, 0, 0, "-", "metric"], [224, 0, 0, "-", "model"], [225, 0, 0, "-", "optimizer"], [226, 0, 0, "-", "postprocess"], [227, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[220, 1, 1, "", "Criterions"], [220, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [220, 1, 1, "", "KnowledgeDistillationFramework"], [220, 1, 1, "", "KnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchCriterions"], [220, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [220, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [220, 1, 1, "", "SelfKnowledgeDistillationLoss"], [220, 1, 1, "", "TensorflowCriterions"], [220, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [220, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[221, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[223, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[224, 1, 1, "", "Model"], [224, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[225, 1, 1, "", "Optimizers"], [225, 1, 1, "", "PyTorchOptimizers"], [225, 1, 1, "", "PyTorchSGD"], [225, 1, 1, "", "TensorFlowAdamW"], [225, 1, 1, "", "TensorFlowSGD"], [225, 1, 1, "", "TensorflowOptimizers"], [225, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[226, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[227, 2, 1, "", "get_activation"], [227, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[228, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[231, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[232, 0, 0, "-", "sigopt"], [233, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[238, 0, 0, "-", "dataloaders"], [250, 0, 0, "-", "datasets"], [254, 0, 0, "-", "filters"], [257, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, 1, 1, "", "DefaultDataLoader"], [236, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, 1, 1, "", "Fetcher"], [237, 1, 1, "", "IndexFetcher"], [237, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, 1, 1, "", "ONNXRTBertDataLoader"], [240, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, 1, 1, "", "BatchSampler"], [242, 1, 1, "", "IterableSampler"], [242, 1, 1, "", "Sampler"], [242, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, 1, 1, "", "TFDataDataLoader"], [243, 1, 1, "", "TensorflowBertDataLoader"], [243, 1, 1, "", "TensorflowDataLoader"], [243, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "ONNXRTBertDataset"], [244, 1, 1, "", "ParseDecodeBert"], [244, 1, 1, "", "PytorchBertDataset"], [244, 1, 1, "", "TensorflowBertDataset"], [244, 1, 1, "", "TensorflowModelZooBertDataset"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, 1, 1, "", "COCONpy"], [245, 1, 1, "", "COCORaw"], [245, 1, 1, "", "COCORecordDataset"], [245, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[246, 1, 1, "", "CIFAR10"], [246, 1, 1, "", "CIFAR100"], [246, 1, 1, "", "Dataset"], [246, 1, 1, "", "Datasets"], [246, 1, 1, "", "FashionMNIST"], [246, 1, 1, "", "ImageFolder"], [246, 1, 1, "", "IterableDataset"], [246, 1, 1, "", "MNIST"], [246, 1, 1, "", "MXNetCIFAR10"], [246, 1, 1, "", "MXNetCIFAR100"], [246, 1, 1, "", "MXNetDatasets"], [246, 1, 1, "", "MXNetFashionMNIST"], [246, 1, 1, "", "MXNetImageFolder"], [246, 1, 1, "", "MXNetMNIST"], [246, 1, 1, "", "ONNXRTITDatasets"], [246, 1, 1, "", "ONNXRTQLDatasets"], [246, 1, 1, "", "PyTorchDatasets"], [246, 1, 1, "", "PytorchCIFAR10"], [246, 1, 1, "", "PytorchCIFAR100"], [246, 1, 1, "", "PytorchFashionMNIST"], [246, 1, 1, "", "PytorchMNIST"], [246, 1, 1, "", "PytorchMxnetWrapDataset"], [246, 1, 1, "", "PytorchMxnetWrapFunction"], [246, 1, 1, "", "TensorflowCIFAR10"], [246, 1, 1, "", "TensorflowCIFAR100"], [246, 1, 1, "", "TensorflowDatasets"], [246, 1, 1, "", "TensorflowFashionMNIST"], [246, 1, 1, "", "TensorflowImageFolder"], [246, 1, 1, "", "TensorflowImageRecord"], [246, 1, 1, "", "TensorflowMNIST"], [246, 1, 1, "", "TensorflowTFRecordDataset"], [246, 1, 1, "", "TensorflowVOCRecord"], [246, 2, 1, "", "calculate_md5"], [246, 2, 1, "", "check_integrity"], [246, 2, 1, "", "dataset_registry"], [246, 2, 1, "", "download_url"], [246, 5, 1, "", "framework_datasets"], [246, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, 1, 1, "", "DummyDataset"], [248, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, 1, 1, "", "ImagenetRaw"], [249, 1, 1, "", "MXNetImagenetRaw"], [249, 1, 1, "", "ONNXRTImagenetDataset"], [249, 1, 1, "", "PytorchImagenetRaw"], [249, 1, 1, "", "TensorflowImagenetDataset"], [249, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, 1, 1, "", "LabelBalanceCOCORawFilter"], [252, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[253, 1, 1, "", "FILTERS"], [253, 1, 1, "", "Filter"], [253, 1, 1, "", "MXNetFilters"], [253, 1, 1, "", "ONNXRTITFilters"], [253, 1, 1, "", "ONNXRTQLFilters"], [253, 1, 1, "", "PyTorchFilters"], [253, 1, 1, "", "TensorflowFilters"], [253, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[256, 0, 0, "-", "imagenet_transform"], [258, 0, 0, "-", "tokenization"], [259, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, 1, 1, "", "BilinearImagenetTransform"], [256, 1, 1, "", "LabelShift"], [256, 1, 1, "", "ONNXResizeCropImagenetTransform"], [256, 1, 1, "", "OnnxBilinearImagenetTransform"], [256, 1, 1, "", "ParseDecodeImagenet"], [256, 1, 1, "", "ParseDecodeImagenetTransform"], [256, 1, 1, "", "QuantizedInput"], [256, 1, 1, "", "ResizeWithAspectRatio"], [256, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, 1, 1, "", "BasicTokenizer"], [258, 1, 1, "", "FullTokenizer"], [258, 1, 1, "", "WordpieceTokenizer"], [258, 2, 1, "", "convert_by_vocab"], [258, 2, 1, "", "convert_to_unicode"], [258, 2, 1, "", "load_vocab"], [258, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[259, 1, 1, "", "AlignImageChannelTransform"], [259, 1, 1, "", "BaseTransform"], [259, 1, 1, "", "CastONNXTransform"], [259, 1, 1, "", "CastPyTorchTransform"], [259, 1, 1, "", "CastTFTransform"], [259, 1, 1, "", "CenterCropTFTransform"], [259, 1, 1, "", "CenterCropTransform"], [259, 1, 1, "", "CollectTransform"], [259, 1, 1, "", "ComposeTransform"], [259, 1, 1, "", "CropResizeTFTransform"], [259, 1, 1, "", "CropResizeTransform"], [259, 1, 1, "", "CropToBoundingBox"], [259, 1, 1, "", "InputFeatures"], [259, 1, 1, "", "MXNetCropResizeTransform"], [259, 1, 1, "", "MXNetCropToBoundingBox"], [259, 1, 1, "", "MXNetNormalizeTransform"], [259, 1, 1, "", "MXNetTransforms"], [259, 1, 1, "", "MXNetTranspose"], [259, 1, 1, "", "NormalizeTFTransform"], [259, 1, 1, "", "NormalizeTransform"], [259, 1, 1, "", "ONNXRTCropToBoundingBox"], [259, 1, 1, "", "ONNXRTITTransforms"], [259, 1, 1, "", "ONNXRTQLTransforms"], [259, 1, 1, "", "PaddedCenterCropTransform"], [259, 1, 1, "", "ParseDecodeVocTransform"], [259, 1, 1, "", "PyTorchAlignImageChannel"], [259, 1, 1, "", "PyTorchCropResizeTransform"], [259, 1, 1, "", "PyTorchNormalizeTransform"], [259, 1, 1, "", "PyTorchTransforms"], [259, 1, 1, "", "PyTorchTranspose"], [259, 1, 1, "", "PytorchMxnetTransform"], [259, 1, 1, "", "PytorchMxnetWrapFunction"], [259, 1, 1, "", "RandomCropTFTransform"], [259, 1, 1, "", "RandomCropTransform"], [259, 1, 1, "", "RandomHorizontalFlip"], [259, 1, 1, "", "RandomResizedCropMXNetTransform"], [259, 1, 1, "", "RandomResizedCropPytorchTransform"], [259, 1, 1, "", "RandomResizedCropTFTransform"], [259, 1, 1, "", "RandomResizedCropTransform"], [259, 1, 1, "", "RandomVerticalFlip"], [259, 1, 1, "", "RescaleKerasPretrainTransform"], [259, 1, 1, "", "RescaleTFTransform"], [259, 1, 1, "", "RescaleTransform"], [259, 1, 1, "", "ResizeMXNetTransform"], [259, 1, 1, "", "ResizePytorchTransform"], [259, 1, 1, "", "ResizeTFTransform"], [259, 1, 1, "", "ResizeTransform"], [259, 1, 1, "", "ResizeWithRatio"], [259, 1, 1, "", "SquadExample"], [259, 1, 1, "", "TFModelZooCollectTransform"], [259, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [259, 1, 1, "", "TFSquadV1PostTransform"], [259, 1, 1, "", "TRANSFORMS"], [259, 1, 1, "", "TensorflowCropToBoundingBox"], [259, 1, 1, "", "TensorflowRandomHorizontalFlip"], [259, 1, 1, "", "TensorflowRandomVerticalFlip"], [259, 1, 1, "", "TensorflowResizeWithRatio"], [259, 1, 1, "", "TensorflowTransform"], [259, 1, 1, "", "TensorflowTransforms"], [259, 1, 1, "", "TensorflowTranspose"], [259, 1, 1, "", "TensorflowWrapFunction"], [259, 1, 1, "", "ToArray"], [259, 1, 1, "", "ToNDArrayTransform"], [259, 1, 1, "", "Transforms"], [259, 1, 1, "", "Transpose"], [259, 2, 1, "", "convert_examples_to_features"], [259, 2, 1, "", "get_final_text"], [259, 2, 1, "", "get_torchvision_map"], [259, 2, 1, "", "read_squad_examples"], [259, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[260, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[260, 4, 1, "", "_epoch_ran"], [260, 4, 1, "", "best_model"], [260, 4, 1, "", "best_score"], [260, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[262, 0, 0, "-", "qlinear2qdq"], [263, 0, 0, "-", "tf2onnx"], [264, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, 2, 1, "", "check_model"], [262, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, 2, 1, "", "tf_to_fp32_onnx"], [263, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, 2, 1, "", "dynamic_quant_export"], [264, 2, 1, "", "get_node_mapping"], [264, 2, 1, "", "get_quantizable_onnx_ops"], [264, 2, 1, "", "static_quant_export"], [264, 2, 1, "", "torch_to_fp32_onnx"], [264, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[265, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[267, 0, 0, "-", "bleu"], [268, 0, 0, "-", "bleu_util"], [269, 0, 0, "-", "coco_label_map"], [270, 0, 0, "-", "coco_tools"], [271, 0, 0, "-", "evaluate_squad"], [272, 0, 0, "-", "f1"], [274, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[267, 1, 1, "", "BLEU"], [267, 1, 1, "", "UnicodeRegex"], [267, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[267, 4, 1, "", "labels"], [267, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[267, 4, 1, "", "nondigit_punct_re"], [267, 4, 1, "", "punct_nondigit_re"], [267, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[268, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[270, 1, 1, "", "COCOEvalWrapper"], [270, 1, 1, "", "COCOWrapper"], [270, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [270, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [270, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[270, 4, 1, "", "dataset"], [270, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, 2, 1, "", "evaluate"], [271, 2, 1, "", "exact_match_score"], [271, 2, 1, "", "f1_score"], [271, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, 2, 1, "", "evaluate"], [272, 2, 1, "", "f1_score"], [272, 2, 1, "", "metric_max_over_ground_truths"], [272, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[274, 1, 1, "", "Accuracy"], [274, 1, 1, "", "BaseMetric"], [274, 1, 1, "", "COCOmAPv2"], [274, 1, 1, "", "F1"], [274, 1, 1, "", "GeneralTopK"], [274, 1, 1, "", "Loss"], [274, 1, 1, "", "MAE"], [274, 1, 1, "", "METRICS"], [274, 1, 1, "", "MSE"], [274, 1, 1, "", "MXNetMetrics"], [274, 1, 1, "", "ONNXRTGLUE"], [274, 1, 1, "", "ONNXRTITMetrics"], [274, 1, 1, "", "ONNXRTQLMetrics"], [274, 1, 1, "", "PyTorchLoss"], [274, 1, 1, "", "PyTorchMetrics"], [274, 1, 1, "", "RMSE"], [274, 1, 1, "", "ROC"], [274, 1, 1, "", "SquadF1"], [274, 1, 1, "", "TensorflowCOCOMAP"], [274, 1, 1, "", "TensorflowMAP"], [274, 1, 1, "", "TensorflowMetrics"], [274, 1, 1, "", "TensorflowTopK"], [274, 1, 1, "", "TensorflowVOCMAP"], [274, 1, 1, "", "WrapMXNetMetric"], [274, 1, 1, "", "WrapONNXRTMetric"], [274, 1, 1, "", "WrapPyTorchMetric"], [274, 1, 1, "", "mIOU"], [274, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"], [274, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[274, 4, 1, "", "k"], [274, 4, 1, "", "num_correct"], [274, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[274, 4, 1, "", "sample"], [274, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[274, 4, 1, "", "compare_label"], [274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[274, 4, 1, "", "compare_label"], [274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[274, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[274, 4, 1, "", "k"], [274, 4, 1, "", "num_correct"], [274, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[275, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[276, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[277, 0, 0, "-", "basic_nas"], [278, 0, 0, "-", "dynas"], [280, 0, 0, "-", "nas"], [281, 0, 0, "-", "nas_utils"], [282, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[277, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[278, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[280, 1, 1, "", "NAS"], [280, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[281, 2, 1, "", "create_search_space_pool"], [281, 2, 1, "", "find_pareto_front"], [281, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[282, 1, 1, "", "BayesianOptimizationSearcher"], [282, 1, 1, "", "GridSearcher"], [282, 1, 1, "", "RandomSearcher"], [282, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[283, 0, 0, "-", "gradient_sensitivity"], [284, 0, 0, "-", "group_lasso"], [286, 0, 0, "-", "magnitude"], [287, 0, 0, "-", "pattern_lock"], [288, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, 1, 1, "", "Pruner"], [288, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[289, 1, 1, "", "Pruning"], [289, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[289, 4, 1, "", "conf"], [289, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[291, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[292, 0, 0, "-", "pattern"], [293, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, 1, 1, "", "PATTERNS"], [292, 1, 1, "", "PatternBase"], [292, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[292, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, 1, 1, "", "TilePatternBase"], [293, 1, 1, "", "TilePattern_1x1"], [293, 1, 1, "", "TilePattern_1x16"], [293, 1, 1, "", "TilePattern_1x2"], [293, 1, 1, "", "TilePattern_2x2"], [293, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[294, 1, 1, "", "Pruning"], [294, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[294, 4, 1, "", "conf"], [294, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[296, 0, 0, "-", "logger"], [297, 0, 0, "-", "patterns"], [298, 0, 0, "-", "prune_utils"], [299, 0, 0, "-", "pruner"], [300, 0, 0, "-", "pruning"], [301, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, 1, 1, "", "Pattern"], [297, 1, 1, "", "PatternNInM"], [297, 1, 1, "", "PatternNxM"], [297, 2, 1, "", "get_pattern"], [297, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[297, 4, 1, "", "is_global"], [297, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[297, 4, 1, "", "M"], [297, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[297, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, 2, 1, "", "check_config"], [298, 2, 1, "", "parse_not_to_prune"], [298, 2, 1, "", "parse_to_prune"], [298, 2, 1, "", "process_and_check_config"], [298, 2, 1, "", "process_config"], [298, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, 1, 1, "", "MagnitudePruner"], [299, 1, 1, "", "PatternLockPruner"], [299, 1, 1, "", "Pruner"], [299, 1, 1, "", "SnipMomentumPruner"], [299, 1, 1, "", "SnipPruner"], [299, 2, 1, "", "get_pruner"], [299, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[299, 4, 1, "", "config"], [299, 4, 1, "", "current_sparsity_ratio"], [299, 4, 1, "", "end_step"], [299, 4, 1, "", "global_step"], [299, 4, 1, "", "masks"], [299, 4, 1, "", "max_sparsity_ratio_per_layer"], [299, 4, 1, "", "modules"], [299, 4, 1, "", "pattern"], [299, 4, 1, "", "scheduler"], [299, 4, 1, "", "scores"], [299, 4, 1, "", "start_step"], [299, 4, 1, "", "target_sparsity_ratio"], [299, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[300, 4, 1, "", "config_file_path"], [300, 4, 1, "", "model"], [300, 4, 1, "", "pruner_info"], [300, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, 1, 1, "", "IterativeScheduler"], [301, 1, 1, "", "OneshotScheduler"], [301, 1, 1, "", "Scheduler"], [301, 2, 1, "", "get_scheduler"], [301, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[301, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[302, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[303, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[304, 0, 0, "-", "auto_mixed_precision"], [305, 0, 0, "-", "basic"], [306, 0, 0, "-", "bayesian"], [307, 0, 0, "-", "exhaustive"], [309, 0, 0, "-", "mse"], [310, 0, 0, "-", "mse_v2"], [311, 0, 0, "-", "random"], [312, 0, 0, "-", "strategy"], [314, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[305, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[306, 1, 1, "", "BayesianOptimization"], [306, 1, 1, "", "BayesianTuneStrategy"], [306, 1, 1, "", "TargetSpace"], [306, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[307, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[309, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[310, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[311, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[312, 1, 1, "", "TuneStrategy"], [312, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[313, 0, 0, "-", "constant"], [315, 0, 0, "-", "tuning_sampler"], [316, 0, 0, "-", "tuning_space"], [317, 0, 0, "-", "tuning_structs"], [318, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, 1, 1, "", "FallbackTuningSampler"], [315, 1, 1, "", "ModelWiseTuningSampler"], [315, 1, 1, "", "OpTypeWiseTuningSampler"], [315, 1, 1, "", "OpWiseTuningSampler"], [315, 1, 1, "", "SmoothQuantSampler"], [315, 1, 1, "", "TuningOrder"], [315, 1, 1, "", "TuningSampler"], [315, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, 1, 1, "", "TuningItem"], [316, 1, 1, "", "TuningSpace"], [316, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [316, 2, 1, "", "pattern_to_internal"], [316, 2, 1, "", "pattern_to_path"], [316, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[318, 1, 1, "", "OrderedDefaultDict"], [318, 2, 1, "", "extract_data_type"], [318, 2, 1, "", "get_adaptor_name"], [318, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[320, 0, 0, "-", "bleu"], [321, 0, 0, "-", "bleu_util"], [322, 0, 0, "-", "coco_label_map"], [323, 0, 0, "-", "coco_tools"], [324, 0, 0, "-", "evaluate_squad"], [325, 0, 0, "-", "f1"], [327, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[320, 1, 1, "", "BLEU"], [320, 1, 1, "", "UnicodeRegex"], [320, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[320, 4, 1, "", "labels"], [320, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[320, 4, 1, "", "nondigit_punct_re"], [320, 4, 1, "", "punct_nondigit_re"], [320, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[321, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[323, 1, 1, "", "COCOEvalWrapper"], [323, 1, 1, "", "COCOWrapper"], [323, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [323, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [323, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[323, 4, 1, "", "dataset"], [323, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[324, 2, 1, "", "evaluate"], [324, 2, 1, "", "exact_match_score"], [324, 2, 1, "", "f1_score"], [324, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[325, 2, 1, "", "evaluate"], [325, 2, 1, "", "f1_score"], [325, 2, 1, "", "metric_max_over_ground_truths"], [325, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[327, 1, 1, "", "Accuracy"], [327, 1, 1, "", "BaseMetric"], [327, 1, 1, "", "COCOmAPv2"], [327, 1, 1, "", "F1"], [327, 1, 1, "", "GeneralTopK"], [327, 1, 1, "", "Loss"], [327, 1, 1, "", "MAE"], [327, 1, 1, "", "METRICS"], [327, 1, 1, "", "MSE"], [327, 1, 1, "", "MXNetMetrics"], [327, 1, 1, "", "Metric"], [327, 1, 1, "", "ONNXRTGLUE"], [327, 1, 1, "", "ONNXRTITMetrics"], [327, 1, 1, "", "ONNXRTQLMetrics"], [327, 1, 1, "", "PyTorchLoss"], [327, 1, 1, "", "PyTorchMetrics"], [327, 1, 1, "", "RMSE"], [327, 1, 1, "", "ROC"], [327, 1, 1, "", "SquadF1"], [327, 1, 1, "", "TensorflowCOCOMAP"], [327, 1, 1, "", "TensorflowMAP"], [327, 1, 1, "", "TensorflowMetrics"], [327, 1, 1, "", "TensorflowTopK"], [327, 1, 1, "", "TensorflowVOCMAP"], [327, 1, 1, "", "WrapMXNetMetric"], [327, 1, 1, "", "WrapONNXRTMetric"], [327, 1, 1, "", "WrapPyTorchMetric"], [327, 1, 1, "", "mIOU"], [327, 2, 1, "", "metric_registry"], [327, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"], [327, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[327, 4, 1, "", "k"], [327, 4, 1, "", "num_correct"], [327, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[327, 4, 1, "", "sample"], [327, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[327, 4, 1, "", "compare_label"], [327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[327, 4, 1, "", "compare_label"], [327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[327, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[327, 4, 1, "", "k"], [327, 4, 1, "", "num_correct"], [327, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[328, 2, 1, "", "fit"]], "neural_compressor.model": [[329, 0, 0, "-", "base_model"], [331, 0, 0, "-", "keras_model"], [332, 0, 0, "-", "model"], [333, 0, 0, "-", "mxnet_model"], [334, 0, 0, "-", "nets_factory"], [335, 0, 0, "-", "onnx_model"], [336, 0, 0, "-", "tensorflow_model"], [337, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[329, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[331, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[332, 1, 1, "", "Model"], [332, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[333, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[334, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[335, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[336, 1, 1, "", "TensorflowBaseModel"], [336, 1, 1, "", "TensorflowCheckpointModel"], [336, 1, 1, "", "TensorflowLLMModel"], [336, 1, 1, "", "TensorflowModel"], [336, 1, 1, "", "TensorflowQATModel"], [336, 1, 1, "", "TensorflowSavedModelModel"], [336, 2, 1, "", "checkpoint_session"], [336, 2, 1, "", "estimator_session"], [336, 2, 1, "", "frozen_pb_session"], [336, 2, 1, "", "get_model_type"], [336, 2, 1, "", "graph_def_session"], [336, 2, 1, "", "graph_session"], [336, 2, 1, "", "keras_session"], [336, 2, 1, "", "load_saved_model"], [336, 2, 1, "", "saved_model_session"], [336, 2, 1, "", "slim_session"], [336, 2, 1, "", "try_loading_keras"], [336, 2, 1, "", "validate_and_inference_input_output"], [336, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[337, 1, 1, "", "IPEXModel"], [337, 1, 1, "", "PyTorchBaseModel"], [337, 1, 1, "", "PyTorchFXModel"], [337, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[338, 1, 1, "", "Accuracy"], [338, 1, 1, "", "Footprint"], [338, 1, 1, "", "ModelSize"], [338, 1, 1, "", "MultiObjective"], [338, 1, 1, "", "Objective"], [338, 1, 1, "", "Performance"], [338, 2, 1, "", "objective_custom_registry"], [338, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt.algorithms.smoother": [[339, 0, 0, "-", "calibrator"], [340, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.utils": [[341, 0, 0, "-", "onnx_model"]], "neural_compressor.onnxrt.utils.onnx_model": [[341, 1, 1, "", "ONNXModel"]], "neural_compressor.profiling.parser": [[343, 0, 0, "-", "factory"], [346, 0, 0, "-", "parser"], [347, 0, 0, "-", "result"]], "neural_compressor.profiling.parser.factory": [[343, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[344, 0, 0, "-", "factory"], [345, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[346, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[347, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[348, 0, 0, "-", "factory"], [349, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[350, 0, 0, "-", "factory"], [354, 0, 0, "-", "profiler"]], "neural_compressor.profiling.profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[351, 0, 0, "-", "factory"], [352, 0, 0, "-", "profiler"], [353, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[354, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[355, 0, 0, "-", "factory"], [356, 0, 0, "-", "profiler"], [357, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, 2, 1, "", "create_tf_config"], [357, 2, 1, "", "delete_assign"], [357, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[358, 2, 1, "", "fit"]], "neural_compressor.strategy": [[359, 0, 0, "-", "auto"], [360, 0, 0, "-", "auto_mixed_precision"], [361, 0, 0, "-", "basic"], [362, 0, 0, "-", "bayesian"], [363, 0, 0, "-", "conservative"], [364, 0, 0, "-", "exhaustive"], [365, 0, 0, "-", "hawq_v2"], [367, 0, 0, "-", "mse"], [368, 0, 0, "-", "mse_v2"], [369, 0, 0, "-", "random"], [370, 0, 0, "-", "strategy"], [372, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[359, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[360, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[361, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[362, 1, 1, "", "BayesianOptimization"], [362, 1, 1, "", "BayesianTuneStrategy"], [362, 1, 1, "", "TargetSpace"], [362, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[363, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[364, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[365, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[367, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[368, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[369, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[370, 1, 1, "", "TuneStrategy"], [370, 1, 1, "", "TuneStrategyMeta"], [370, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[371, 0, 0, "-", "constant"], [373, 0, 0, "-", "tuning_sampler"], [374, 0, 0, "-", "tuning_space"], [375, 0, 0, "-", "tuning_structs"], [376, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, 1, 1, "", "BlockFallbackTuningSampler"], [373, 1, 1, "", "FallbackTuningSampler"], [373, 1, 1, "", "LowerBitsSampler"], [373, 1, 1, "", "ModelWiseTuningSampler"], [373, 1, 1, "", "OpTypeWiseTuningSampler"], [373, 1, 1, "", "OpWiseTuningSampler"], [373, 1, 1, "", "SmoothQuantSampler"], [373, 1, 1, "", "TuningOrder"], [373, 1, 1, "", "TuningSampler"], [373, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[374, 1, 1, "", "TuningItem"], [374, 1, 1, "", "TuningSpace"], [374, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [374, 2, 1, "", "pattern_to_internal"], [374, 2, 1, "", "pattern_to_path"], [374, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[375, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[376, 1, 1, "", "ClassRegister"], [376, 1, 1, "", "OrderedDefaultDict"], [376, 1, 1, "", "QuantOptions"], [376, 1, 1, "", "QuantType"], [376, 2, 1, "", "build_slave_faker_model"], [376, 2, 1, "", "extract_data_type"], [376, 2, 1, "", "get_adaptor_name"], [376, 2, 1, "", "preprocess_user_cfg"], [376, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[377, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[377, 1, 1, "", "ExampleClass"], [377, 4, 1, "", "attribute1"], [377, 2, 1, "", "function1"], [377, 2, 1, "", "function2"], [377, 2, 1, "", "function3"], [377, 2, 1, "", "generator1"], [377, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[377, 4, 1, "", "attr1"], [377, 4, 1, "", "attr2"], [377, 4, 1, "", "attr5"]], "neural_compressor.tensorflow.algorithms.smoother": [[378, 0, 0, "-", "calibration"], [379, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, 1, 1, "", "SmoothQuantCalibration"], [378, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, 1, 1, "", "SmoothQuantScaler"], [379, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[380, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, 1, 1, "", "TensorFlowAdaptor"], [380, 1, 1, "", "TensorFlowConfig"], [380, 1, 1, "", "TensorflowConfigConverter"], [380, 1, 1, "", "TensorflowQuery"], [380, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.quantization.utils": [[381, 0, 0, "-", "graph_converter"], [434, 0, 0, "-", "graph_util"], [435, 0, 0, "-", "quantize_graph"], [452, 0, 0, "-", "quantize_graph_common"], [455, 0, 0, "-", "transform_graph"], [458, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[384, 0, 0, "-", "bf16"], [408, 0, 0, "-", "generic"], [418, 0, 0, "-", "graph_base"], [425, 0, 0, "-", "int8"], [430, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[382, 0, 0, "-", "bf16_convert"], [383, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[382, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[383, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[385, 0, 0, "-", "convert_add_to_biasadd"], [386, 0, 0, "-", "convert_layout"], [387, 0, 0, "-", "convert_leakyrelu"], [388, 0, 0, "-", "convert_nan_to_random"], [389, 0, 0, "-", "convert_placeholder_to_const"], [390, 0, 0, "-", "dilated_contraction"], [391, 0, 0, "-", "dummy_biasadd"], [392, 0, 0, "-", "expanddims_optimizer"], [393, 0, 0, "-", "fetch_weight_from_reshape"], [394, 0, 0, "-", "fold_batch_norm"], [395, 0, 0, "-", "fold_constant"], [396, 0, 0, "-", "fuse_biasadd_add"], [397, 0, 0, "-", "fuse_column_wise_mul"], [398, 0, 0, "-", "fuse_conv_with_math"], [399, 0, 0, "-", "fuse_decomposed_bn"], [400, 0, 0, "-", "fuse_decomposed_in"], [401, 0, 0, "-", "fuse_gelu"], [402, 0, 0, "-", "fuse_layer_norm"], [403, 0, 0, "-", "fuse_pad_with_conv"], [404, 0, 0, "-", "fuse_pad_with_fp32_conv"], [405, 0, 0, "-", "fuse_reshape_transpose"], [406, 0, 0, "-", "graph_cse_optimizer"], [407, 0, 0, "-", "grappler_pass"], [409, 0, 0, "-", "insert_print_node"], [410, 0, 0, "-", "move_squeeze_after_relu"], [411, 0, 0, "-", "pre_optimize"], [412, 0, 0, "-", "remove_training_nodes"], [413, 0, 0, "-", "rename_batch_norm"], [414, 0, 0, "-", "split_shared_input"], [415, 0, 0, "-", "strip_equivalent_nodes"], [416, 0, 0, "-", "strip_unused_nodes"], [417, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[385, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[386, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[387, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[388, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[389, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[390, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[391, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[392, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[393, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[394, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[395, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[396, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[397, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[398, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[399, 1, 1, "", "FuseDecomposedBNOptimizer"], [399, 2, 1, "", "bypass_reshape"], [399, 2, 1, "", "get_const_dim_count"], [399, 2, 1, "", "node_from_map"], [399, 2, 1, "", "node_name_from_input"], [399, 2, 1, "", "valid_reshape_inputs"], [399, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[400, 1, 1, "", "FuseDecomposedINOptimizer"], [400, 2, 1, "", "bypass_reshape"], [400, 2, 1, "", "get_const_dim_count"], [400, 2, 1, "", "node_from_map"], [400, 2, 1, "", "node_name_from_input"], [400, 2, 1, "", "valid_reshape_inputs"], [400, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[401, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[402, 1, 1, "", "FuseLayerNormOptimizer"], [402, 2, 1, "", "node_from_map"], [402, 2, 1, "", "node_name_from_input"], [402, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[403, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[404, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[405, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[406, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[407, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[409, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[410, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[411, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[412, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[413, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[414, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[415, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[416, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[417, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[418, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[419, 0, 0, "-", "freeze_fake_quant"], [420, 0, 0, "-", "freeze_value"], [421, 0, 0, "-", "fuse_conv_redundant_dequantize"], [422, 0, 0, "-", "fuse_conv_requantize"], [423, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [424, 0, 0, "-", "fuse_matmul_requantize"], [426, 0, 0, "-", "meta_op_optimizer"], [427, 0, 0, "-", "post_hostconst_converter"], [428, 0, 0, "-", "post_quantized_op_cse"], [429, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[419, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[420, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[421, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[422, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[423, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[424, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [424, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [424, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [424, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[426, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[427, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[428, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[429, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[431, 0, 0, "-", "insert_qdq_pattern"], [432, 0, 0, "-", "merge_duplicated_qdq"], [433, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[431, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[432, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[433, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[434, 1, 1, "", "GraphAnalyzer"], [434, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[443, 0, 0, "-", "qdq"], [445, 0, 0, "-", "quantize_graph_base"], [446, 0, 0, "-", "quantize_graph_bn"], [447, 0, 0, "-", "quantize_graph_concatv2"], [448, 0, 0, "-", "quantize_graph_conv"], [449, 0, 0, "-", "quantize_graph_for_intel_cpu"], [450, 0, 0, "-", "quantize_graph_matmul"], [451, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[436, 0, 0, "-", "fuse_qdq_bn"], [437, 0, 0, "-", "fuse_qdq_concatv2"], [438, 0, 0, "-", "fuse_qdq_conv"], [439, 0, 0, "-", "fuse_qdq_deconv"], [440, 0, 0, "-", "fuse_qdq_in"], [441, 0, 0, "-", "fuse_qdq_matmul"], [442, 0, 0, "-", "fuse_qdq_pooling"], [444, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[436, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[437, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[438, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[439, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[440, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[441, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[442, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[444, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[445, 1, 1, "", "QuantizeGraphBase"], [445, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[446, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[447, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[448, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[449, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[450, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[451, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[452, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[453, 0, 0, "-", "bias_correction"], [454, 0, 0, "-", "graph_transform_base"], [456, 0, 0, "-", "insert_logging"], [457, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[453, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[454, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[456, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[457, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[458, 2, 1, "", "apply_inlining"], [458, 2, 1, "", "collate_tf_preds"], [458, 2, 1, "", "construct_function_from_graph_def"], [458, 2, 1, "", "fix_ref_type_of_graph_def"], [458, 2, 1, "", "generate_feed_dict"], [458, 2, 1, "", "get_graph_def"], [458, 2, 1, "", "get_input_output_node_names"], [458, 2, 1, "", "get_model_input_shape"], [458, 2, 1, "", "get_tensor_by_name"], [458, 2, 1, "", "is_ckpt_format"], [458, 2, 1, "", "is_saved_model_format"], [458, 2, 1, "", "iterator_sess_run"], [458, 2, 1, "", "parse_saved_model"], [458, 2, 1, "", "read_graph"], [458, 2, 1, "", "reconstruct_saved_model"], [458, 2, 1, "", "strip_equivalent_nodes"], [458, 2, 1, "", "strip_unused_nodes"], [458, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[459, 0, 0, "-", "data"], [460, 0, 0, "-", "model_wrappers"]], "neural_compressor.tensorflow.utils.data": [[459, 1, 1, "", "BaseDataLoader"], [459, 1, 1, "", "BatchSampler"], [459, 1, 1, "", "DummyDataset"], [459, 1, 1, "", "DummyDatasetV2"], [459, 1, 1, "", "IndexFetcher"], [459, 1, 1, "", "IterableFetcher"], [459, 1, 1, "", "IterableSampler"], [459, 1, 1, "", "SequentialSampler"], [459, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model_wrappers": [[460, 1, 1, "", "BaseModel"], [460, 1, 1, "", "KerasModel"], [460, 1, 1, "", "TensorflowBaseModel"], [460, 1, 1, "", "TensorflowCheckpointModel"], [460, 1, 1, "", "TensorflowLLMModel"], [460, 1, 1, "", "TensorflowModel"], [460, 1, 1, "", "TensorflowSavedModelModel"], [460, 2, 1, "", "checkpoint_session"], [460, 2, 1, "", "estimator_session"], [460, 2, 1, "", "frozen_pb_session"], [460, 2, 1, "", "get_model_type"], [460, 2, 1, "", "graph_def_session"], [460, 2, 1, "", "graph_session"], [460, 2, 1, "", "keras_session"], [460, 2, 1, "", "load_saved_model"], [460, 2, 1, "", "saved_model_session"], [460, 2, 1, "", "slim_session"], [460, 2, 1, "", "try_loading_keras"], [460, 2, 1, "", "validate_and_inference_input_output"], [460, 2, 1, "", "validate_graph_node"]], "neural_compressor.torch.algorithms": [[461, 0, 0, "-", "layer_wise"]], "neural_compressor.torch.algorithms.layer_wise": [[462, 0, 0, "-", "load"], [463, 0, 0, "-", "modified_pickle"], [464, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[462, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[463, 3, 1, "", "PickleError"], [463, 3, 1, "", "PicklingError"], [463, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[464, 2, 1, "", "dowload_hf_model"], [464, 2, 1, "", "get_children"], [464, 2, 1, "", "get_module"], [464, 2, 1, "", "get_named_children"], [464, 2, 1, "", "get_super_module_by_name"], [464, 2, 1, "", "load_empty_model"], [464, 2, 1, "", "load_layer_wise_quantized_model"], [464, 2, 1, "", "load_tensor"], [464, 2, 1, "", "load_tensor_from_shard"], [464, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.mix_precision": [[465, 0, 0, "-", "half_precision_convert"], [466, 0, 0, "-", "module_wrappers"]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[465, 1, 1, "", "HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[466, 1, 1, "", "HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.weight_only": [[467, 0, 0, "-", "modules"]], "neural_compressor.torch.algorithms.weight_only.modules": [[467, 1, 1, "", "FakeAffineTensorQuantFunction"], [467, 1, 1, "", "MulLinear"], [467, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.training": [[468, 1, 1, "", "CallBacks"], [468, 1, 1, "", "CompressionManager"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[469, 0, 0, "-", "collect_layer_histogram"], [470, 0, 0, "-", "constant"], [471, 0, 0, "-", "create_obj_from_config"], [472, 0, 0, "-", "export"], [477, 0, 0, "-", "kl_divergence"], [478, 0, 0, "-", "load_huggingface"], [479, 0, 0, "-", "logger"], [480, 0, 0, "-", "neural_insights_utils"], [481, 0, 0, "-", "options"], [482, 0, 0, "-", "pytorch"], [483, 0, 0, "-", "utility"], [484, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[469, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[471, 2, 1, "", "create_dataloader"], [471, 2, 1, "", "create_dataset"], [471, 2, 1, "", "create_eval_func"], [471, 2, 1, "", "create_train_func"], [471, 2, 1, "", "get_algorithm"], [471, 2, 1, "", "get_func_from_config"], [471, 2, 1, "", "get_metrics"], [471, 2, 1, "", "get_postprocess"], [471, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[473, 0, 0, "-", "qlinear2qdq"], [474, 0, 0, "-", "tf2onnx"], [475, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[473, 2, 1, "", "check_model"], [473, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[474, 2, 1, "", "tf_to_fp32_onnx"], [474, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[475, 2, 1, "", "dynamic_quant_export"], [475, 2, 1, "", "get_node_mapping"], [475, 2, 1, "", "get_quantizable_onnx_ops"], [475, 2, 1, "", "static_quant_export"], [475, 2, 1, "", "torch_to_fp32_onnx"], [475, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[477, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[478, 1, 1, "", "OptimizedModel"], [478, 2, 1, "", "export_compressed_model"], [478, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[479, 1, 1, "", "Logger"], [479, 2, 1, "", "debug"], [479, 2, 1, "", "error"], [479, 2, 1, "", "fatal"], [479, 2, 1, "", "info"], [479, 2, 1, "", "log"], [479, 2, 1, "", "warn"], [479, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[480, 2, 1, "", "get_model_path"], [480, 2, 1, "", "register_neural_insights_workload"], [480, 2, 1, "", "update_neural_insights_workload"], [480, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[481, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[482, 2, 1, "", "is_int8_model"], [482, 2, 1, "", "load"], [482, 2, 1, "", "load_weight_only"], [482, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[483, 1, 1, "", "CaptureOutputToFile"], [483, 1, 1, "", "CpuInfo"], [483, 2, 1, "", "Dequantize"], [483, 1, 1, "", "DotDict"], [483, 1, 1, "", "GLOBAL_STATE"], [483, 1, 1, "", "LazyImport"], [483, 1, 1, "", "MODE"], [483, 1, 1, "", "OpEntry"], [483, 1, 1, "", "Statistics"], [483, 2, 1, "", "alias_param"], [483, 2, 1, "", "calculate_mse"], [483, 2, 1, "", "check_key_exist"], [483, 2, 1, "", "combine_histogram"], [483, 2, 1, "", "compare_objects"], [483, 2, 1, "", "compute_sparsity"], [483, 2, 1, "", "dequantize_weight"], [483, 2, 1, "", "dump_class_attrs"], [483, 2, 1, "", "dump_data_to_local"], [483, 2, 1, "", "dump_elapsed_time"], [483, 2, 1, "", "dump_table"], [483, 2, 1, "", "dump_table_to_csv"], [483, 2, 1, "", "equal_dicts"], [483, 2, 1, "", "fault_tolerant_file"], [483, 2, 1, "", "get_all_fp32_data"], [483, 2, 1, "", "get_number_of_sockets"], [483, 2, 1, "", "get_op_list"], [483, 2, 1, "", "get_size"], [483, 2, 1, "", "get_tensor_histogram"], [483, 2, 1, "", "get_tensors_info"], [483, 2, 1, "", "get_tuning_history"], [483, 2, 1, "", "get_weights_details"], [483, 2, 1, "", "load_data_from_pkl"], [483, 2, 1, "", "mse_metric_gap"], [483, 2, 1, "", "print_op_list"], [483, 2, 1, "", "print_table"], [483, 2, 1, "", "recover"], [483, 2, 1, "", "set_random_seed"], [483, 2, 1, "", "set_resume_from"], [483, 2, 1, "", "set_tensorboard"], [483, 2, 1, "", "set_workspace"], [483, 2, 1, "", "show_memory_info"], [483, 2, 1, "", "singleton"], [483, 2, 1, "", "str2array"], [483, 2, 1, "", "time_limit"], [483, 2, 1, "", "version1_eq_version2"], [483, 2, 1, "", "version1_gt_version2"], [483, 2, 1, "", "version1_gte_version2"], [483, 2, 1, "", "version1_lt_version2"], [483, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[484, 1, 1, "", "WeightsDetails"], [484, 1, 1, "", "WeightsStatistics"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "terms": {"": [31, 32, 91, 129, 134, 141, 151, 165, 166, 167, 171, 172, 173, 174, 177, 179, 184, 186, 187, 188, 201, 204, 217, 218, 219, 221, 223, 243, 246, 258, 259, 272, 297, 299, 325, 327, 328, 332, 358, 453, 458, 462, 480, 483, 486, 488, 489, 490, 491, 493, 495, 497, 499, 500, 502, 506, 507, 524, 528, 529, 531, 533, 535, 538, 543, 544, 552, 555, 557, 561, 564, 567, 569, 572, 582, 583, 584, 585, 586, 589, 590, 591, 592, 595, 596, 597, 598], "0": [4, 31, 32, 40, 76, 91, 134, 140, 141, 146, 148, 150, 155, 161, 163, 184, 187, 188, 193, 195, 199, 201, 202, 205, 206, 209, 214, 218, 220, 221, 234, 236, 241, 243, 244, 247, 248, 251, 256, 259, 264, 265, 274, 281, 289, 294, 302, 327, 338, 358, 363, 377, 386, 458, 459, 462, 475, 478, 487, 488, 489, 491, 494, 496, 497, 501, 504, 524, 525, 526, 529, 531, 533, 534, 535, 539, 540, 541, 542, 543, 544, 546, 550, 552, 557, 561, 567, 577, 578, 583, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597], "00": [541, 598], "000": [204, 246, 504, 526], "0000": 545, "00000": [204, 246], "00001": [204, 246], "00003": [204, 246], "00004": [204, 246], "0001": [4, 187, 188, 529, 543, 585], "0003": 598, "0004": 543, "0005": 541, "0006": [541, 598], "0007": 598, "0008": [541, 598], "001": [204, 246, 497, 526, 531, 592, 597], "0014": 541, "0016": 541, "00173": 577, "002": 531, "0029": [497, 592, 598], "00296431384049356": [497, 592], "0030": 598, "0034": 541, "0036": [497, 592], "0040": 541, "0041": 541, "0043": 541, "0046": [541, 598], "0048": 598, "005": 589, "0052": 541, "0057": 541, "0058": [541, 598], "0059755356051027775": [497, 592], "0064": 541, "006533813662827015": [497, 592], "00774": 583, "0078": 541, "0081": 541, "0086": [497, 592], "00978": [491, 497, 589], "01": [32, 187, 188, 491, 543, 585, 589, 595, 597, 598], "01024": 577, "0106": 598, "0115": 598, "0116": 541, "0119": 598, "0121": 541, "0130": 598, "0141": 598, "017": 594, "01x": 598, "02": [188, 541, 598], "0213": 598, "0222": 541, "02340": [161, 299], "0262": 541, "027": 598, "02x": 598, "03": [504, 541, 598], "0356": 541, "03x": 598, "04": [504, 539, 598], "04191": 523, "0438": 598, "04x": 598, "05": [151, 188, 274, 327, 542, 592, 598], "0500": [497, 592], "05516": [491, 497], "0568": 541, "05754": 583, "05x": 598, "06": [541, 579, 597, 598], "0626": 598, "0698": [497, 592], "06x": 598, "07": [497, 541, 592, 597, 598], "0734": 598, "0737": [497, 592], "07x": 598, "08": [218, 259, 594, 598], "0806": [497, 592], "083": 598, "0837": 591, "08x": 598, "09": [541, 598], "0927": 598, "095": 593, "09656": 179, "099": [204, 246, 526], "0999": 598, "0_224_frozen": [536, 566, 577], "0f": 531, "0x": [141, 462], "0x2b0001b0": 598, "1": [4, 30, 31, 32, 41, 60, 75, 91, 95, 99, 132, 134, 141, 143, 146, 148, 150, 151, 152, 155, 161, 173, 174, 176, 187, 188, 193, 195, 199, 201, 202, 203, 205, 206, 209, 210, 214, 218, 219, 220, 221, 234, 236, 241, 243, 244, 245, 247, 248, 251, 252, 256, 259, 265, 270, 271, 272, 274, 289, 294, 299, 302, 303, 323, 324, 325, 327, 338, 340, 358, 376, 377, 387, 406, 420, 433, 456, 458, 459, 462, 467, 471, 478, 483, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 501, 504, 505, 507, 523, 525, 526, 528, 529, 533, 535, 536, 539, 541, 542, 544, 546, 548, 550, 566, 567, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597], "10": [187, 188, 204, 246, 306, 362, 496, 504, 522, 526, 533, 539, 543, 566, 567, 583, 585, 594, 595, 598], "100": [4, 152, 187, 188, 204, 246, 377, 495, 497, 522, 526, 531, 537, 539, 543, 569, 585, 586, 594, 595, 597, 598], "1000": [543, 573, 597], "10000": [306, 362, 583], "10004": [488, 491, 492, 501, 502, 505, 525, 529, 530, 531, 535, 538, 544, 546, 582, 585, 587, 589, 597], "10005": [546, 587], "10006": [529, 530], "10016": [497, 592], "100x": [491, 497, 589], "101": [202, 244, 274, 327, 497, 542, 573, 592, 598], "10163": 598, "1024": [132, 204, 246, 456, 550], "10271": [487, 546], "10281": [487, 546], "103": [594, 598], "10339": 598, "104": 598, "10438": [491, 497, 589, 592], "1052": 598, "10537": [487, 546], "1058": 598, "1077": 598, "10833": [218, 259], "1095": 598, "10k": [532, 536], "11": [488, 497, 539, 542, 544, 566, 592, 595, 598], "112": 547, "1120": 598, "1129": 598, "1137": 598, "1139": 598, "1142": 598, "116": 594, "1161": 598, "1165": 598, "117": 598, "118": 598, "1186": 598, "119": [497, 592], "12": [541, 566, 598], "120": [497, 592], "1209": 598, "123": [204, 246, 526, 594], "1244": 598, "124m": [489, 592], "1253": 598, "125m": [489, 504, 592], "126": 598, "1262": 598, "1268": 598, "127": [205, 206, 247, 248, 459, 497, 526, 586, 592], "1276": 598, "128": [4, 32, 146, 202, 205, 206, 218, 244, 247, 248, 259, 459, 491, 496, 497, 526, 543, 586, 589, 594, 598], "1280": 598, "1284": 598, "12b": 541, "12x": 598, "13": [497, 534, 539, 566, 590, 592, 598], "1324": 598, "13325": [491, 497, 589, 592], "135": 598, "136": 598, "1365": [218, 259, 594], "1367": 598, "137": 598, "1374": 598, "1381": [497, 592], "1383": 598, "139": [497, 592, 598], "13b": [489, 541, 592, 598], "13x": 598, "14": [188, 263, 264, 474, 475, 504, 533, 539, 541, 579, 598], "1406": 598, "142": 598, "14314": [491, 497, 589], "1451": 598, "1495": 598, "1498": 598, "14x": 598, "15": [134, 458, 535, 539, 578], "151": 577, "1510": [497, 592], "1512": 598, "1514": 598, "1515": 598, "1517": 598, "152": 598, "155": 598, "1556": 598, "1583": [497, 592], "1587": 598, "15x": 598, "16": [488, 526, 539, 577, 589, 598], "1601": [497, 592], "161": 598, "162": [497, 592, 598], "1658": 598, "16599": [497, 592], "1661": 598, "1666": 598, "16x": 598, "16x16gb": 598, "17": [539, 577], "170": 598, "1713": 598, "172": [497, 592, 598], "1720": 598, "173": 598, "17323": [491, 497, 589], "174": 598, "1742": [497, 592], "1747": 598, "1749": [497, 592], "175": 598, "17509": [497, 592], "1751": [497, 592], "176": 598, "177": [272, 325, 598], "178": 598, "179": 598, "17x": 598, "18": [539, 541, 584, 598], "1809": 523, "1810": [161, 299], "1838": 598, "184": 598, "18518": 136, "18529": 136, "186": 598, "1862": 598, "1889": 598, "1890": [497, 592], "18x": 598, "19": [597, 598], "192": [497, 592], "1920": 598, "192795": 524, "195": 598, "1951": 598, "1956": 598, "1971": 598, "1978": [187, 188], "1981": 598, "1983354538679123": [497, 592], "1989": 598, "19x": 598, "1_11_capabl": 507, "1b7": [489, 541, 592], "1e": [151, 497, 592, 597], "1s4c14ins1bsthroughput": 598, "1x": 598, "1x1": [293, 529, 543, 583], "1x16": 293, "1x2": [293, 497, 592], "1xchannel": [187, 188, 583], "2": [30, 31, 32, 40, 60, 91, 95, 141, 148, 150, 152, 167, 173, 174, 187, 188, 203, 219, 245, 270, 272, 274, 299, 306, 323, 325, 327, 338, 340, 362, 377, 386, 406, 433, 462, 483, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 501, 504, 505, 523, 525, 526, 528, 529, 535, 538, 539, 540, 541, 542, 544, 546, 568, 574, 575, 577, 578, 579, 581, 583, 584, 586, 587, 589, 590, 591, 592, 594, 595, 596], "20": [218, 259, 569, 572, 577, 578, 579, 583, 594, 597, 598], "200": [217, 258, 491, 501, 573, 595], "2000": 543, "2001": [202, 244], "201": 598, "2011": 523, "2012": [204, 246], "2017": 523, "2018": 523, "2019": 583, "2020": [136, 487, 546], "2021": 583, "20210514": 598, "2022": [187, 188, 491, 497, 540, 583, 589, 592], "2023": [487, 491, 497, 504, 546, 579, 583, 589, 592], "2024": [504, 598], "2043": [202, 244], "2048": [4, 483, 491, 504, 589], "206": 598, "207": [497, 592, 598], "2080": 598, "2083": 598, "20b": [541, 598], "21": [274, 327, 497, 541, 552, 553, 575, 578, 579, 584, 592, 598], "21020": [497, 592], "2111": 583, "212": 598, "213": 598, "2132": 591, "214": 598, "215": 598, "2169": 598, "217": 598, "2198": 598, "21x": 598, "22": [539, 541, 598], "2204": 179, "2209": [491, 497, 589, 592, 598], "2210": [491, 497, 589], "2211": [491, 497, 589, 592], "2213": 598, "222": 598, "2220": [497, 592], "2222": [572, 577, 578, 579], "22222": [572, 577, 578, 579], "223": 598, "2232": 598, "224": [188, 214, 256, 504, 526, 531, 533, 536, 543, 547, 566, 594, 597], "22444": [497, 592], "225": [214, 256, 543, 598], "2287": 598, "229": [214, 256, 543], "23": [541, 598], "230": 598, "2301": 583, "2305": [491, 497, 589], "2306": [491, 497, 589], "2309": [491, 497], "2310": [487, 546], "234": 598, "235": 598, "2365": 598, "2384": 598, "23f1": 598, "23x": 598, "24": [583, 595, 598], "24101": 583, "24116": 583, "2420": [497, 592], "244": 598, "249": 598, "25": [541, 583, 598], "250": [502, 583], "2504": 598, "2538": 598, "255": [497, 586, 592], "256": [209, 214, 251, 256, 526, 531, 543, 594], "256gb": 598, "2570": [497, 592], "2584": 598, "25x": 598, "26": [541, 598], "2630": 598, "26f1": 598, "26x": 598, "27": [534, 541, 598], "2788": 598, "2793": 598, "2799": 598, "27x": 598, "28": [202, 203, 207, 244, 245, 249, 526, 598], "2805": 598, "281": 598, "282": 598, "2862": 598, "2897": 598, "28x": 598, "29": [541, 598], "2970": [497, 592], "298": 598, "2989": 567, "2991": [497, 592], "29x": 598, "2d": [56, 402, 497, 592], "2gb": [336, 460], "2x": [532, 538], "2x1": [583, 598], "2x2": [293, 497, 592], "2xlarg": 598, "3": [30, 32, 134, 141, 174, 188, 204, 218, 246, 259, 270, 323, 377, 458, 462, 483, 487, 488, 490, 491, 493, 495, 496, 497, 501, 502, 504, 523, 524, 525, 526, 529, 531, 533, 535, 536, 539, 542, 543, 544, 546, 547, 551, 555, 557, 561, 566, 571, 572, 574, 575, 577, 581, 583, 585, 586, 589, 590, 591, 592, 594, 595, 598], "30": [218, 259, 532, 536, 538, 594, 598], "300": [526, 583], "3000": 570, "302": 598, "303": 598, "3067": 598, "30b": [489, 541, 592, 598], "30x": 598, "31": [31, 541, 598], "312": 598, "3121": 598, "3162": 578, "31x": 598, "32": [32, 163, 376, 487, 488, 495, 496, 531, 537, 546, 589, 598], "320": 598, "3242": 598, "3253": [497, 592], "329": 598, "32accuraci": 598, "32x": 598, "33": [136, 487, 541, 546, 598], "3333": [572, 577, 578, 579], "33333": [572, 577, 578, 579], "3377": 598, "338174d13706855fc6924cec7b3a8ae8": 566, "3388": 598, "339": 598, "33x": 598, "34": [504, 541, 579, 598], "3429": 598, "344": 598, "3445": 598, "3463": 598, "349": 598, "34f1": 598, "34x": 598, "35": [541, 583, 598], "350m": [489, 592], "354": [489, 592], "3542": [489, 592], "358": 598, "35x": 598, "36": 598, "365": 598, "3686": 598, "36x": 598, "37": 598, "373": 598, "374": 598, "3740": [497, 592], "375": 598, "3757": [489, 592], "377": 598, "379": [489, 592], "38": 598, "3804": [489, 592], "381": 583, "3815": [497, 592], "382": 598, "384": [218, 259, 594], "3845": [497, 592], "3850": [497, 592], "385297635664756e": [497, 592], "3852e": [497, 592], "3887": [489, 592], "39": 598, "390": 598, "391": 598, "3911": [497, 592], "3924": [497, 592], "393": 598, "3930": [489, 592], "3947": [489, 592], "395": 598, "3950": 598, "396": 598, "399": 598, "3a14": 598, "3b": [489, 541, 592], "3d": [56, 402, 497, 584, 592], "3dgan": 584, "3rd": [488, 497, 544, 584, 586, 588], "4": [32, 40, 143, 146, 152, 167, 176, 187, 188, 211, 214, 218, 253, 256, 259, 267, 268, 270, 320, 321, 323, 376, 377, 386, 467, 486, 487, 489, 490, 491, 497, 499, 504, 505, 507, 522, 531, 532, 535, 538, 539, 542, 543, 546, 552, 572, 574, 578, 583, 586, 589, 592, 594, 595, 598], "40": [597, 598], "400": 573, "4019": 598, "404": [573, 583, 598], "405": 598, "4055": [497, 592], "406": [543, 598], "4096": 598, "40b": 541, "41": 598, "4124": 598, "4149": [489, 592], "4172": [489, 592], "4193": 598, "42": [188, 282, 491, 598], "420": 538, "4202": 598, "4208": 598, "4227": 598, "4237": 598, "4259": 598, "4271": 598, "42x": 598, "43": 598, "4312": 598, "4319": 598, "434": 598, "4351": 598, "43x": 598, "44": 598, "440": 598, "4413": 598, "4430": 598, "4469": 591, "448": 598, "449": 598, "45": [501, 541, 598], "4516": [489, 592], "4533": [489, 592], "4542": 598, "456": 543, "46": [541, 598], "4607": 598, "4628": 598, "4634": [489, 592], "4697": 598, "46x": 598, "47": [541, 598], "471": 598, "4728": 598, "4731": 598, "4734": [497, 592], "4741": [497, 592], "4743": [497, 592], "4789": 598, "47x": 598, "48": [497, 592, 598], "4800": 598, "4828": [489, 592], "484": [377, 598], "485": 543, "4895": 598, "4899": 598, "48x": 598, "49": [541, 598], "4906": [489, 592], "4907": 598, "4916": 598, "4923": 598, "4936": [489, 592], "494": 598, "4954": 598, "497": 598, "4973": 598, "4980": [489, 592], "4984": 598, "4f": 524, "4th": [488, 497, 541, 584, 586], "4x": [176, 497, 502, 586], "4x1": [167, 187, 188, 293, 543, 583, 598], "5": [140, 150, 155, 187, 188, 206, 214, 220, 248, 256, 274, 327, 358, 489, 491, 494, 497, 505, 526, 533, 535, 539, 542, 543, 569, 574, 577, 578, 583, 585, 586, 589, 592, 594, 595, 597, 598], "50": [272, 325, 497, 502, 506, 569, 583, 592, 598], "500": [555, 573], "5000": 566, "5018": [489, 592], "504": 598, "5040": [497, 592], "5045": 598, "5048": [489, 592], "5049": 598, "5053": 598, "5057": [489, 592], "5058": 598, "5084": 598, "5098": 598, "50x": 598, "51": [541, 598], "511": 598, "512": [488, 491], "5142": 598, "517": 598, "5177": 598, "518": [489, 592], "5185": [489, 592], "52": [541, 598], "5228": 598, "525": 598, "5282": 598, "52f1": 598, "53": [541, 598], "530": 598, "5328": 598, "533": 598, "534": 598, "535": 598, "5359": 598, "5369": 598, "5398": 598, "54": [597, 598], "5419": 598, "5436": [489, 592], "5443": [489, 592, 598], "5444": [497, 592], "5477": 598, "548": 598, "549": 598, "5494": 598, "54accuraci": 598, "55": [541, 579, 598], "5514": 598, "5523": 598, "5525": 598, "5540": 598, "5552": [489, 592], "5555": [497, 592], "5593": [489, 592, 598], "55x": 598, "56": 598, "5603": 598, "5604": 598, "560m": [489, 592], "5617": 598, "5637": 598, "5642": 598, "5655": 598, "566": 598, "567": 598, "5682": 598, "56be4db0acb8001400a502ec": [272, 325], "57": [497, 541, 592, 598], "570": 598, "5711": 598, "5714": 598, "5716": 598, "5718": 598, "5732": 598, "5738": 598, "5742": [489, 592], "5752": 598, "5764": [489, 592, 598], "5765": 598, "577": 598, "5771": 598, "5777": 598, "5789": [489, 592], "5799": 598, "57x": 598, "58": [541, 578, 598], "5814": 598, "5819": 598, "582": 598, "5823": 598, "5826": [497, 592], "5834": 598, "584": 598, "5841": 598, "5843": 598, "5871": 598, "588": 598, "5881": 598, "5898": 598, "5899": 598, "58x": 598, "59": [497, 541, 592, 598], "5911": 598, "5933": 598, "5934": 598, "5951": 598, "5972": [497, 592, 598], "5977": [489, 592], "598": 598, "5991": 598, "5997": 598, "59f1": 598, "59x": 598, "5b": [489, 592], "5x": 584, "6": [187, 188, 487, 489, 491, 494, 497, 535, 546, 586, 592, 595, 598], "60": [541, 598], "600": [543, 598], "6002": 598, "6004": 598, "6018": 598, "6029": 598, "6038": [497, 592], "6053": 598, "6057": 598, "6059": 598, "6094": 598, "60x": 598, "61": [541, 598], "611": 598, "6123": 598, "613": 598, "6134": 598, "6136": 598, "614": 598, "615": 598, "6154": 598, "6181": 598, "6187": 598, "619": 598, "6195": 598, "61accuraci": 598, "61x": 598, "62": [541, 598], "6224": 598, "623": 598, "6239": 598, "624": 598, "6247": [489, 592], "6261": 598, "6266": 598, "6297": [489, 592], "62x": 598, "63": [541, 583, 598], "6301": 598, "6312": 598, "635": 598, "636": 598, "6360": 598, "6361": 598, "6365": [489, 592], "637690492221736e": [497, 592], "6376e": [497, 592], "6377": 598, "6379": 598, "6390": 598, "6392": [489, 592], "6393": 598, "6396": 598, "6399": 598, "63x": 598, "64": [218, 259, 488, 496, 497, 502, 541, 589, 592, 594, 598], "6401": 598, "6404": [489, 592], "6409": 598, "6410": 598, "6433": 598, "6434": 598, "6437": [489, 592, 598], "6438": 598, "6439": 598, "6448": 598, "6455": 598, "6456": 598, "6472": 598, "6473": 598, "6474": 598, "648": 598, "6481": [497, 592], "6483": 598, "6484": 598, "6488": [578, 598], "6491": 598, "6496": 598, "6497": 598, "6499": [489, 592], "64x": 598, "65": 598, "6504": 598, "6505": 598, "6506": [497, 592], "6509": 598, "6519": 598, "652": 598, "6527": 598, "6532": 598, "6535": 598, "6542": [489, 592], "65421": 524, "6543": 598, "655": [489, 592, 598], "6559": 598, "6569": [489, 592], "6571": 598, "6575": 598, "6579": 598, "6582": 598, "659": 598, "6594": 598, "6598": 598, "65b": [489, 592], "65x": 598, "66": [541, 567, 598], "6604": 598, "6612": 598, "6614": 598, "6621": [489, 592], "6622": 598, "663": 598, "6654": 598, "6661": 598, "6669": 598, "6678": 598, "6685": 598, "6687": 598, "6693": 598, "66b": [489, 592], "66x": 598, "67": [541, 598], "6709": 598, "6713": 598, "6718": [489, 592], "6719": 598, "6724": 598, "6726": 598, "6735": [489, 592], "6739": 598, "6740": [489, 592, 598], "6742": 598, "6746": 598, "6748": 598, "6756": 598, "6769": [489, 592, 598], "678": 598, "679": 598, "67x": 598, "68": [541, 594, 598], "6803": 598, "6804": [489, 592, 598], "6814": [489, 592], "6820": 598, "6821": [489, 497, 592], "6824": 598, "6827": 598, "6829": 598, "6831": [489, 592, 598], "6832": 598, "6835": [497, 592], "6836": [497, 592], "6837": [497, 592], "6839": [497, 592], "684": 598, "6845": 598, "6848": [497, 592], "685": 598, "6854": 598, "6857": 598, "6859": 598, "6861": 598, "6862": 598, "6864": 598, "6866": [489, 592, 598], "6872": [489, 592], "6876": 598, "6878": 598, "6883": [497, 592], "6885": 598, "6887": 598, "689": 598, "6890": 598, "6895": [489, 592], "69": [541, 598], "6902": 598, "6911": 598, "6918": 598, "693": 598, "6953": [489, 592, 598], "6961": 598, "6977": 598, "6982": 598, "6994": 592, "6ap0": 598, "6b": [489, 541, 568, 592, 598], "6f": 531, "7": [30, 152, 187, 188, 338, 489, 491, 494, 497, 507, 522, 534, 535, 543, 583, 586, 590, 592, 595, 598], "70": [541, 598], "7002": 598, "7006": 598, "7009": 598, "7018": 598, "7022": 598, "7024": 598, "7025": 598, "7030": 598, "7031": 598, "7032": 598, "7034": 598, "7056": 598, "7058": [592, 598], "707": 598, "7075": 598, "7077": 598, "7080": 598, "7088": 598, "70b": [541, 598], "70x": 598, "71": [541, 598], "7103": 598, "7105": 598, "7106": 598, "7107": 598, "7111": 598, "712": 598, "7122": 598, "7128": [489, 592], "714": 598, "7143": [489, 592], "7149": [489, 592], "715": 598, "7153": 598, "7174": [497, 592], "718": 598, "7186": 598, "7190": 598, "7198": 598, "71x": 598, "72": [497, 541, 592, 598], "7203": 598, "722": 598, "7221": [489, 592], "7233": 598, "7240": 598, "7243": 598, "7244": 598, "7246": 598, "7247": 598, "7268": 598, "7269": 598, "727": 598, "7273": 598, "7277": 598, "728": 598, "7283": 598, "7285": 598, "72x": 598, "73": [541, 598], "7312": 598, "732": 598, "7322": 598, "7323": 598, "7326": [489, 592], "733": 598, "7332": 592, "7334": 598, "7335": 592, "7337": 598, "734": 598, "7350": 598, "7353": 598, "7357": [489, 592], "7361": [489, 592, 598], "7392": [592, 598], "7398": [489, 592], "7399": 598, "73x": 598, "74": [541, 598], "7415": 598, "7432": 598, "7440": [497, 592], "7442": 598, "7443": 598, "7448": 598, "7451": [497, 592], "7476": 598, "7486": 598, "7495": 591, "7497": 598, "74x": 598, "75": [541, 583, 598], "7502": 567, "7518": 598, "7519": 598, "753": 598, "754": 488, "7541": 598, "7543": 598, "756": 598, "7566": 598, "7568": 598, "7572": 598, "7589": [497, 592], "7590": [489, 592], "7596": 598, "75x": 598, "76": [541, 598], "7602cd63d4c849e7a686a8165a77f69d": [577, 578], "7608": [497, 592], "7615": [592, 598], "7616": 598, "7617": 598, "7622": 598, "7627": [489, 592, 598], "7628": 598, "7632": 592, "7633": 598, "7634": 598, "767": 598, "7675": 598, "7677": [592, 598], "7682": 598, "7699": 598, "76x": 598, "77": [541, 598], "770": 598, "7704": 598, "7706": 598, "7715": 598, "7742": 598, "774m": [489, 592], "7753": 598, "7758": 598, "7759": [489, 592, 598], "776": 593, "7764": 598, "7772": [497, 592], "778": 598, "7797": 598, "77x": 598, "78": [541, 594, 598], "780": 598, "7807": 598, "7813": 598, "7824": 598, "7828": 598, "7829": 598, "783": 598, "7835": 598, "7836": 598, "784": 598, "7840": [489, 592], "7845": 598, "7851": 598, "7856": 598, "7873": 598, "7878": 598, "7894": 598, "7895": 583, "79": [541, 593, 598], "790": 598, "7905": 598, "7908": [489, 592], "7911": 598, "7927": 598, "7941": 598, "7957": [489, 592], "7964": 598, "7965": 598, "79x": 598, "7b": [489, 541, 592, 598], "7b1": [489, 592, 598], "8": [99, 141, 187, 188, 217, 258, 462, 486, 487, 489, 491, 497, 501, 506, 523, 524, 535, 539, 546, 571, 572, 583, 584, 589, 592, 595, 598], "80": [534, 541, 587, 593, 598], "800": [218, 259, 594], "8000": [572, 577, 578, 579], "8001": [2, 469, 572, 577, 578, 579], "801": 583, "8018": 598, "8025": 598, "8044": 598, "8047": 598, "805": 589, "8058": 598, "8074": 598, "8080": 566, "8084": 598, "8096": 598, "81": [541, 598], "8146": 598, "8178": 598, "82": [541, 598], "8207": [497, 592], "8213": [577, 598], "822": 598, "8235": 598, "8246": [497, 592], "8256": 598, "8259": 598, "8266": 591, "8291": 591, "8294": 591, "8298": [497, 592], "8299": 591, "82x": 598, "83": [497, 591, 592, 598], "8314": 598, "8363": 598, "8371": 598, "8372": 591, "8382": 598, "83x": 598, "84": [497, 541, 592, 598], "841": 598, "8411": 598, "8480": 598, "84x": 598, "85": [497, 591, 592, 598], "8539": 598, "85x": 598, "86": [541, 598], "8617": 577, "8626": 598, "863": 598, "8684": 598, "86x": 598, "87": [214, 256, 598], "875": [214, 256, 594], "8763": [497, 592], "8768": [497, 592], "8780": 598, "8782": 598, "87f1": 598, "88": [534, 591, 598], "8809": 598, "8814": 598, "8816": 598, "8863": 598, "88x": 598, "89": [497, 541, 592, 598], "893": 598, "8981": 567, "8984": 598, "89x": 598, "8ghz": 598, "8x1": [187, 188], "9": [161, 187, 188, 489, 501, 539, 543, 583, 585, 592, 595, 597, 598], "90": [187, 188, 541, 587, 597, 598], "9000000000": 550, "9048": 598, "9049": 567, "9091": 598, "90f1": 598, "91": [497, 589, 592, 598], "9125": 598, "9163": 598, "91x": 598, "92": [541, 598], "921": 598, "925": 598, "927": 598, "93": [497, 541, 592, 598], "9301": [497, 592], "9308": [497, 592], "9317": 598, "9324": 598, "9359": 598, "93x": 598, "94": [594, 598], "9403": 598, "9411": 598, "94x": 598, "95": [76, 274, 327, 541, 542, 598], "951": 598, "9522": 598, "9527": [306, 362, 543, 597], "953": 598, "95top1": 598, "95x": 598, "96": 598, "9631": 567, "9635": 598, "97": [543, 598], "9702": 598, "98": [187, 188, 543, 583, 585, 598], "9860": [497, 592], "9892": 598, "99": [4, 541, 598], "9902": [541, 598], "9905": 541, "9906": 598, "9909": 598, "9910": 541, "9916": 598, "9917": 598, "9918": 541, "9919": 598, "9921": 598, "9922": 598, "9930": 541, "9931": 598, "9932": [541, 598], "9933": [541, 598], "9934": 598, "9935": 598, "9936": 541, "9937": [541, 598], "9938": 541, "9941": 598, "9942": [541, 598], "9944": 598, "9945": 598, "9947": 598, "9950": 598, "9951": 598, "9952": 598, "9953": 598, "9957": [541, 598], "9958": [541, 598], "9961": 598, "9962": 598, "9963": 598, "9964": 541, "9965": 541, "9967": 598, "9971": 598, "9972": 541, "9978": [541, 598], "9979": [541, 598], "9983": 598, "9984": 598, "9987": 541, "9989": 541, "999": [4, 597], "9990": 541, "9991": 541, "9994": [541, 598], "9995": 541, "9997": 541, "9998": 598, "99ccff": 595, "99x": 598, "A": [4, 41, 60, 61, 89, 102, 126, 127, 134, 139, 146, 153, 154, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 204, 218, 221, 223, 224, 246, 259, 260, 267, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 320, 323, 324, 325, 327, 328, 332, 336, 362, 378, 379, 387, 406, 407, 458, 460, 463, 468, 483, 489, 491, 492, 497, 500, 504, 506, 524, 525, 526, 532, 535, 541, 542, 543, 545, 557, 558, 561, 564, 572, 583, 584, 586, 589, 592, 594, 595, 597], "And": [56, 402, 495, 497, 500, 501, 522, 524, 543, 550, 592], "As": [491, 497, 501, 506, 525, 529, 542, 543, 558, 569, 583, 589, 595], "At": [487, 500, 506, 546, 570, 574, 595], "Being": 499, "But": 569, "By": [141, 165, 187, 188, 267, 320, 462, 491, 506, 507, 542, 545, 557, 558, 561, 583, 584, 589, 595], "For": [30, 32, 146, 150, 165, 166, 169, 170, 180, 188, 204, 218, 246, 259, 271, 272, 274, 297, 300, 324, 325, 327, 328, 340, 358, 489, 492, 493, 494, 497, 499, 501, 503, 505, 507, 529, 530, 531, 533, 535, 538, 547, 549, 550, 552, 555, 566, 567, 572, 583, 588, 589, 592, 593, 595, 597, 598], "IT": [204, 211, 246, 253, 584], "If": [53, 54, 56, 60, 141, 152, 187, 188, 191, 192, 204, 218, 232, 233, 246, 259, 298, 328, 358, 377, 399, 400, 402, 406, 462, 468, 492, 495, 497, 500, 501, 506, 522, 524, 525, 526, 531, 539, 540, 542, 543, 550, 558, 559, 562, 564, 570, 575, 581, 583, 586, 589, 591, 592, 593, 594, 595], "In": [154, 169, 170, 171, 176, 177, 178, 181, 188, 201, 228, 243, 270, 297, 299, 323, 338, 491, 492, 495, 497, 499, 501, 502, 504, 505, 506, 525, 526, 528, 529, 530, 531, 542, 543, 554, 557, 558, 561, 567, 568, 569, 570, 577, 578, 579, 581, 582, 583, 586, 588, 589, 591, 592, 593, 594, 595, 596], "It": [40, 141, 153, 154, 158, 167, 191, 192, 227, 232, 233, 272, 274, 281, 297, 302, 309, 325, 327, 328, 358, 363, 367, 386, 462, 468, 487, 490, 491, 492, 493, 495, 496, 497, 505, 506, 507, 523, 528, 529, 543, 546, 550, 553, 558, 564, 565, 566, 567, 569, 570, 572, 583, 586, 589, 590, 591, 595, 597], "Its": [506, 523, 583], "NOT": [202, 244, 535], "No": [500, 524, 534, 543, 572, 573, 584], "Not": [315, 316, 373, 374, 483, 502, 524], "ON": 588, "Of": 525, "On": [497, 586, 598], "One": [492, 507, 524, 526, 531, 538, 569, 583, 584, 595], "TO": [531, 549, 569], "The": [4, 22, 40, 60, 99, 105, 107, 126, 134, 141, 146, 147, 152, 154, 155, 157, 161, 165, 167, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 202, 203, 204, 205, 206, 210, 211, 218, 220, 223, 225, 228, 232, 233, 234, 244, 245, 246, 247, 248, 252, 253, 259, 260, 265, 267, 268, 269, 271, 272, 274, 276, 277, 278, 280, 281, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 316, 318, 320, 321, 322, 324, 325, 327, 328, 336, 338, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 376, 377, 378, 386, 406, 458, 459, 460, 462, 468, 469, 471, 477, 478, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 499, 501, 502, 505, 506, 507, 508, 510, 514, 517, 520, 522, 523, 524, 525, 526, 528, 529, 531, 533, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 549, 550, 552, 555, 557, 558, 559, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598], "Their": 471, "Then": [270, 323, 497, 506, 528, 557, 559, 561, 562, 569, 592, 595], "There": [101, 303, 305, 359, 361, 486, 490, 494, 497, 524, 528, 529, 535, 538, 543, 547, 569, 571, 572, 589, 592, 595, 597], "These": [506, 538, 567], "To": [31, 270, 323, 338, 487, 488, 489, 490, 491, 494, 496, 497, 500, 504, 506, 507, 524, 526, 528, 531, 544, 546, 548, 551, 557, 559, 561, 562, 566, 570, 583, 585, 588, 589, 590, 592, 595, 597], "Will": [129, 453, 529, 538], "With": [82, 338, 426, 495, 497, 501, 505, 507, 525, 543, 552, 557, 561, 565, 571, 581, 583, 584, 586, 591, 592, 595, 598], "_": [191, 192, 232, 233, 358, 488, 489, 491, 492, 495, 497, 501, 502, 504, 505, 506, 523, 528, 529, 531, 533, 535, 543, 544, 545, 547, 553, 557, 559, 561, 562, 569, 572, 573, 581, 583, 586, 589, 590, 591, 592, 593, 595, 597], "__all__": 524, "__call__": [211, 253], "__class__": 338, "__getitem__": [200, 204, 218, 242, 246, 259, 525, 526, 543], "__init__": [505, 524, 525, 526, 542, 595], "__iter__": [200, 204, 242, 246, 525, 526, 543], "__len__": [200, 204, 242, 246, 526], "__name__": 338, "__version__": [2, 139, 463, 524], "_acc": 593, "_add_observer_": 593, "_description_": [135, 492], "_epoch_ran": [154, 260], "_generate_dataload": [193, 234, 459], "_inductor": [486, 490], "_lossandgradi": 524, "_observer_forward_hook": 593, "_post_eval_hook": 593, "_pre_eval_hook": 593, "_propagate_qconfig_help": 146, "_quantiz": [264, 475], "_quantizedconv": [77, 421], "_quantizeddeconv": [77, 421], "_quantizedfusedbatchnorm": [109, 436], "_quantizedmatmul": [79, 80, 423, 424], "_recordingobserv": 593, "_saved_model": [134, 458], "_type_": [146, 478], "_use_new_zipfile_seri": 162, "a100cuda": 598, "aarch64": 522, "ab": [31, 161, 179, 299, 495, 497, 583, 586, 592], "abbrevi": 188, "abc": [99, 272, 325, 505, 593, 595], "abcadaptor": 505, "abctunestrategi": 595, "abil": [487, 505, 506, 526, 535, 546, 592], "abl": [191, 192, 232, 233, 328, 358, 468, 495, 497, 555, 564, 586], "abound": 584, "about": [161, 183, 483, 499, 524, 525, 543, 569, 570, 583, 588, 595, 596, 598], "abov": [40, 386, 489, 490, 491, 493, 497, 505, 506, 507, 529, 566, 567, 569, 572, 583, 586, 592, 595], "absolut": [161, 187, 188, 274, 327, 487, 497, 542, 543, 546, 583, 586, 595], "absorb": [146, 150, 491, 589], "absorb_pair": 32, "absorb_to_lay": 146, "absorbed_1": 146, "absorpt": 146, "abstract": [72, 154, 218, 259, 260, 265, 302, 418, 505, 507, 537], "abus": 499, "ac": [306, 362], "acc": [488, 493, 502, 541, 574, 583, 593, 598], "acc_delta": 555, "acceler": [163, 489, 491, 494, 497, 504, 529, 543, 547, 555, 564, 567, 571, 583, 584, 588, 589, 592, 595], "accelerator_execution_tim": 347, "accept": [187, 188, 377, 496, 499, 522, 524, 525, 566, 589], "access": [53, 54, 56, 188, 399, 400, 402, 478, 483, 559, 562, 566], "accommod": [506, 507], "accompani": [540, 595], "accord": [2, 108, 146, 152, 187, 188, 202, 203, 204, 218, 244, 245, 246, 259, 309, 365, 367, 471, 495, 496, 497, 502, 505, 526, 531, 567, 572, 577, 578, 579, 583, 588, 592, 594, 595], "accordingli": [529, 555, 592], "account": [499, 591, 595], "accumul": [315, 373, 487, 491, 546, 595], "accur": [30, 150, 340, 490, 491, 497, 583, 589, 592], "accuraci": [32, 152, 184, 187, 188, 191, 192, 232, 233, 260, 265, 274, 289, 294, 302, 327, 328, 338, 358, 363, 377, 468, 480, 487, 489, 490, 491, 495, 496, 501, 504, 506, 507, 523, 525, 526, 528, 530, 531, 532, 533, 542, 543, 546, 555, 564, 566, 573, 574, 577, 578, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 596, 597, 598], "accuracy_criterion": [187, 188, 338, 543, 568, 581, 585, 595, 597], "accuracy_level": 32, "accuracycriterion": [187, 188, 543, 595], "accuracyspars": 598, "achiev": [265, 302, 489, 490, 491, 492, 493, 496, 497, 533, 541, 543, 567, 582, 583, 584, 586, 592, 593, 595], "acq": [306, 362], "acq_max": [306, 362], "acquir": 547, "acquisit": [306, 362], "across": [265, 275, 302, 328, 487, 496, 527, 543, 546, 571, 574, 583, 587, 592, 595], "act": [184, 200, 242, 459, 491, 499], "act_algo": 490, "act_dtyp": [487, 489, 490, 493, 546], "act_fn": 166, "act_granular": 493, "act_sym": [490, 493, 495, 496], "action": [499, 559, 562], "activ": [17, 32, 127, 146, 158, 187, 188, 227, 316, 374, 376, 379, 486, 489, 490, 491, 494, 495, 497, 505, 506, 507, 523, 528, 530, 535, 543, 565, 566, 569, 577, 578, 579, 585, 586, 589, 592, 593, 597], "activation_max": 483, "activation_min": 483, "activation_min_max": 483, "activation_post_process": 593, "activationoper": 6, "activations_t": 567, "actord": [32, 491, 589], "actual": [274, 327, 490, 531], "ad": [178, 202, 244, 267, 306, 320, 362, 486, 488, 491, 506, 507, 528, 544, 547, 552, 555, 559, 562, 572, 583, 589, 593], "adadelta": 531, "adam": [157, 597], "adamw": [157, 225], "adapt": [487, 499, 506, 526, 546, 555, 584], "adaptor": [154, 187, 188, 318, 376, 380, 471, 504, 507, 538, 587, 588, 590, 592, 593, 596], "adaptor_registri": 505, "add": [31, 39, 50, 95, 105, 134, 157, 184, 187, 188, 202, 204, 225, 244, 246, 298, 316, 374, 385, 396, 433, 458, 483, 489, 500, 501, 504, 507, 525, 526, 531, 533, 535, 542, 543, 559, 562, 566, 567, 574, 577, 578, 591, 592, 593, 595, 596], "add_graph": 593, "add_histogram": 593, "add_modul": 593, "add_origin_loss": [155, 188, 220], "add_port_to_nam": 91, "add_qdq_pair_to_weight": [29, 187, 188, 586], "add_relu": 533, "addit": [146, 188, 468, 491, 506, 507, 529, 558, 566, 572, 589, 590, 595], "addition": [491, 507, 531, 583, 595], "addn": 535, "address": [204, 246, 488, 496, 499, 524, 544, 566, 569, 572, 584], "addv2": [39, 55, 385, 401, 535], "adher": 500, "adjust": [497, 555, 586, 592], "admin_github_token": [559, 562], "adopt": [497, 500, 547, 583, 584, 592], "advanc": [136, 187, 188, 487, 488, 491, 493, 495, 497, 499, 504, 506, 512, 541, 546, 583, 586, 589, 597], "advantag": [564, 583, 585, 595], "afc": [272, 325], "affect": [497, 592], "affin": [143, 467, 586], "aforement": 543, "after": [2, 64, 134, 146, 163, 167, 172, 174, 179, 187, 188, 202, 214, 218, 221, 244, 256, 259, 299, 363, 377, 410, 458, 478, 483, 486, 490, 491, 494, 497, 502, 504, 506, 526, 528, 529, 530, 533, 538, 542, 543, 557, 558, 561, 565, 569, 581, 582, 583, 586, 588, 589, 591, 592, 593, 594, 595], "ag": 499, "again": [204, 246, 526, 567, 569, 588], "against": [268, 321], "agent": 502, "aggress": 595, "agnost": [492, 529], "agnostic_mod": [270, 323], "agre": 500, "ai": [487, 504, 546, 547, 584, 588, 596], "aid": 527, "aim": [496, 502, 504, 541, 547, 583, 592, 595, 596], "ajanthan": 583, "al": [136, 487, 491, 497, 523, 546, 589, 592], "albert": [553, 598], "alemb": 534, "alexnet": [553, 598], "algo": [380, 471], "algo_nam": 524, "algorithm": [2, 32, 146, 188, 267, 274, 282, 319, 320, 327, 471, 477, 491, 492, 495, 496, 497, 502, 504, 505, 506, 507, 524, 529, 530, 535, 538, 541, 553, 558, 583, 586, 593, 597], "algorithm_entri": 524, "algorithm_registri": 147, "algorithm_typ": 147, "algorithmschedul": 147, "alia": [479, 483, 549, 554], "alias": [483, 524], "alias_param": 483, "alibaba": [504, 554, 561, 562, 584], "align": [218, 259, 499, 589, 594], "alignimagechannel": 594, "alignimagechanneltransform": [218, 259], "alistarh": 583, "aliv": 572, "all": [2, 4, 22, 32, 49, 83, 141, 142, 146, 147, 149, 152, 154, 157, 162, 167, 175, 184, 187, 188, 193, 194, 200, 204, 211, 218, 219, 225, 228, 234, 242, 246, 253, 259, 264, 267, 270, 272, 274, 281, 288, 292, 293, 297, 303, 312, 315, 320, 323, 325, 327, 329, 338, 370, 376, 395, 427, 459, 460, 462, 464, 471, 475, 483, 489, 492, 495, 496, 497, 499, 500, 504, 505, 506, 507, 524, 525, 526, 531, 535, 539, 543, 547, 555, 558, 559, 562, 563, 564, 565, 566, 569, 570, 572, 573, 577, 578, 579, 582, 583, 584, 586, 588, 589, 592, 594, 595], "allbalanc": 598, "allenai": [271, 272, 324, 325], "allevi": 592, "alloc": 574, "allow": [146, 306, 362, 488, 490, 491, 496, 529, 531, 542, 543, 544, 566, 571, 583, 585, 589, 592, 595, 597], "along": [491, 539, 583, 589], "alpha": [127, 140, 143, 150, 161, 181, 379, 467, 497, 524, 586, 595], "alpha_list": 373, "alpha_max": 592, "alpha_min": 592, "alpha_step": 592, "alreadi": [141, 152, 204, 217, 219, 246, 258, 462, 488, 492, 505, 526, 538, 559, 562, 566, 575, 595], "also": [139, 166, 201, 204, 218, 243, 246, 259, 267, 320, 327, 338, 358, 463, 491, 492, 493, 494, 497, 500, 502, 505, 506, 507, 525, 528, 532, 536, 538, 542, 543, 547, 552, 557, 558, 561, 564, 565, 566, 569, 570, 581, 583, 584, 586, 588, 589, 592, 595], "altern": [141, 187, 188, 358, 462], "although": [201, 243, 591], "alwai": [223, 270, 323, 327, 358, 496, 528, 542, 543, 569, 589], "amax": [487, 546], "amazon": [504, 547, 555], "amd": [504, 539, 598], "amodio": 565, "among": [274, 327, 487, 497, 546, 558, 592], "amount": [4, 494, 592], "amp": [2, 547, 554, 573, 589], "amp_cfg": 2, "amp_convert": 2, "amx": 584, "an": [2, 53, 54, 56, 91, 127, 129, 134, 136, 139, 141, 146, 151, 158, 172, 187, 188, 196, 200, 204, 218, 222, 227, 237, 242, 246, 259, 266, 267, 271, 272, 280, 281, 303, 319, 320, 324, 325, 328, 353, 357, 358, 377, 379, 399, 400, 402, 453, 458, 462, 463, 468, 483, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 501, 502, 504, 505, 507, 523, 525, 526, 527, 528, 533, 541, 542, 543, 544, 546, 547, 551, 552, 555, 564, 567, 568, 569, 572, 575, 581, 583, 584, 586, 589, 591, 592, 593, 594, 595], "anaconda": [539, 571, 572], "analysi": [487, 546, 547, 564, 583, 591], "analyt": [539, 584, 596], "analyz": [96, 165, 336, 434, 460, 591, 592, 593], "andrew": 523, "ani": [136, 141, 270, 272, 315, 323, 325, 353, 357, 373, 377, 462, 480, 483, 492, 495, 499, 504, 507, 524, 531, 547, 552, 565, 566, 570, 571, 583, 591, 595], "ann": 502, "anneal": 160, "anno_dir": [203, 245, 526], "anno_path": [274, 327, 542], "annot": [203, 245, 270, 323, 377, 506, 507, 526, 542, 583, 595], "announc": 555, "anoth": [218, 259, 267, 276, 320, 483, 528, 529, 557, 561, 594, 595], "answer": [218, 259, 271, 272, 324, 325, 499, 569, 583, 594, 598], "answer_start": [272, 325], "answeringsquad": 598, "ap": 542, "ap0": 598, "apach": [4, 540], "api": [56, 61, 96, 229, 265, 270, 302, 315, 316, 323, 327, 358, 373, 374, 377, 402, 407, 434, 483, 489, 491, 496, 497, 501, 504, 508, 510, 514, 517, 520, 528, 533, 538, 539, 543, 549, 553, 554, 555, 571, 572, 576, 590, 591, 595, 599], "api_typ": [572, 577, 578, 579], "appear": [141, 462, 499, 558, 564, 566], "append": [146, 303, 306, 362, 501, 530, 543, 582], "append_attr": 146, "append_task": 574, "appl": 595, "appli": [32, 99, 112, 113, 114, 117, 119, 123, 134, 143, 154, 176, 178, 228, 268, 321, 439, 440, 441, 444, 446, 450, 458, 467, 487, 490, 494, 495, 496, 497, 499, 506, 507, 543, 546, 547, 549, 555, 564, 568, 569, 574, 582, 583, 586, 588, 591, 592, 595, 596, 597], "applianc": 584, "applic": [214, 256, 491, 493, 497, 507, 533, 547, 564, 566, 572, 573, 577, 578, 584, 589, 592, 593, 594, 596], "apply_awq_clip": 32, "apply_awq_scal": 32, "apply_inlin": [134, 458], "appoint": 499, "approach": [187, 188, 277, 278, 280, 490, 497, 501, 502, 504, 523, 526, 529, 538, 543, 552, 564, 567, 575, 577, 578, 579, 583, 584, 585, 587, 589, 595, 597], "appropri": [490, 496, 497, 499, 523, 592], "approv": 500, "approx": [491, 497, 589], "approxim": [267, 268, 320, 321, 491, 506, 542, 589], "appu": 491, "apr": [504, 584], "apt": [534, 539, 550, 558], "ar": [53, 54, 91, 141, 146, 167, 172, 173, 174, 179, 187, 188, 202, 218, 244, 259, 270, 274, 281, 297, 298, 299, 303, 305, 306, 323, 327, 359, 361, 362, 376, 377, 399, 400, 462, 471, 482, 483, 486, 487, 488, 490, 491, 492, 494, 495, 497, 499, 500, 501, 502, 505, 506, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 550, 552, 555, 558, 564, 566, 567, 569, 570, 571, 572, 575, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "arang": 592, "arbitrari": [141, 462, 492, 543, 582], "arcfac": 598, "architectur": [152, 219, 277, 280, 488, 491, 497, 504, 522, 529, 543, 571, 583, 584, 589, 596], "archiv": 575, "arctic": 539, "are_shapes_equ": 91, "area": [218, 259, 270, 323, 487, 542, 546, 594], "aren": 570, "arg": [2, 40, 91, 146, 202, 203, 204, 244, 245, 246, 297, 306, 362, 377, 386, 465, 478, 479, 487, 491, 492, 526, 531, 543, 546, 553, 583, 586, 589, 592, 593, 594], "argmax": 17, "argmaxoper": 7, "argpars": 564, "argu": 524, "argument": [141, 188, 377, 462, 492, 495, 496, 502, 528, 568, 569, 572, 575, 577, 578, 579, 589], "ariel": 583, "aris": 585, "arithmet": 535, "arm": [504, 538, 539, 598], "around": 91, "arr": [31, 483], "arrai": [4, 31, 32, 134, 141, 218, 259, 270, 281, 323, 462, 483, 594], "arrang": [173, 174, 179, 203, 204, 207, 245, 246, 249, 526, 583], "art": 583, "articl": [271, 272, 324, 325], "artifici": 502, "arxiv": [161, 179, 299, 487, 491, 497, 504, 523, 546, 583, 584, 589, 592], "as_text": 91, "ascend": 567, "ascii": [141, 462], "asd932_": [204, 246, 526], "ask": [504, 539], "aspect": [214, 218, 256, 259, 594], "asplo": 584, "assert_error": 91, "assertionerror": [162, 168, 175, 184, 297, 298, 299, 328], "assign": [270, 323, 483, 531, 585, 595], "assist": [153, 590], "associ": [134, 141, 270, 323, 462], "assum": [217, 258, 270, 281, 323, 505, 535, 564], "asterisk": [489, 592], "asym": [30, 31, 32, 143, 146, 467, 507, 535, 589, 597], "asymmetr": [495, 507, 586, 589, 595], "atom": 540, "att": [271, 272, 324, 325], "attach": [497, 529, 543, 592], "attack": 499, "attempt": 595, "attent": [17, 144, 163, 165, 176, 187, 188, 202, 244, 499, 529, 583], "attention_ffn_nam": 176, "attention_mask": [202, 244, 543], "attentionoper": 8, "attr": [91, 134, 165, 458], "attr1": 377, "attr2": 377, "attr5": 377, "attribut": [31, 69, 90, 91, 134, 146, 165, 176, 188, 415, 483, 505, 525, 535, 537, 543, 585, 597], "attribute1": 377, "attribute_to_kwarg": 31, "attributeerror": [139, 377, 463], "aug": 584, "augment": 3, "author": 540, "auto": [146, 163, 165, 187, 188, 304, 360, 366, 483, 489, 491, 492, 501, 523, 547, 550, 552, 554, 555, 583, 586, 589], "auto_alpha_arg": 592, "auto_config": 583, "auto_copi": 146, "auto_input_output": [134, 458], "auto_merg": 31, "auto_mixed_precis": [308, 366], "auto_qu": 553, "auto_round": 504, "auto_slim": 164, "autocast": 547, "autom": [502, 547, 564, 565, 584, 592], "automat": [163, 165, 166, 187, 188, 204, 207, 214, 246, 249, 256, 265, 275, 302, 492, 495, 501, 504, 522, 526, 538, 543, 544, 547, 549, 552, 553, 555, 557, 558, 559, 561, 562, 564, 571, 574, 582, 583, 586, 592, 594, 595], "automixedprecisiontunestrategi": [304, 360], "automodel": 504, "automodelforcausallm": [142, 464], "automodelforsequenceclassif": 543, "autonumb": [506, 507], "autoround": [492, 497, 504, 541], "autoroundconfig": 491, "autotoken": [504, 543], "autotrack": [126, 134, 378, 458], "autotun": [493, 494, 495, 497, 524], "autotunestrategi": 359, "aux": 2, "auxiliari": 476, "avail": [180, 187, 188, 332, 488, 491, 492, 504, 508, 510, 514, 517, 520, 524, 532, 534, 536, 538, 557, 561, 566, 571, 572, 573, 577, 578, 579, 583, 595, 598], "averag": [32, 271, 272, 274, 324, 325, 327, 491, 542, 543, 589, 595, 598], "averagepool": 24, "avg": 586, "avgpool": [115, 124, 442, 451, 535], "avoid": [91, 141, 146, 202, 244, 462, 501, 524, 593], "avx": 488, "avx512": [488, 497, 544, 586], "avx512_bf16": [488, 544], "avx512_fp16": 488, "aw": [547, 555, 574, 584, 598], "awai": 525, "awar": [32, 136, 154, 188, 228, 276, 297, 365, 468, 491, 492, 496, 505, 506, 507, 523, 530, 531, 533, 538, 564, 574, 582, 584, 589, 595], "awq": [32, 492, 497, 587, 589], "awq_arg": 589, "awq_g32asym": 589, "awq_quant": 32, "awqconfig": 491, "ax": [188, 264, 475], "axi": [31, 188], "azur": [500, 504, 584], "b": [31, 60, 202, 244, 406, 483, 491, 497, 500, 523, 526, 542, 583, 589, 592, 595], "b1": [60, 406], "b16": [37, 383], "b_dataload": [152, 187, 188, 522, 543], "b_filter": 2, "b_func": [152, 522], "babel": 570, "back": [141, 146, 218, 224, 259, 462, 528, 564, 570], "backbon": 591, "backend": [3, 29, 30, 150, 157, 187, 188, 189, 190, 194, 195, 198, 202, 203, 205, 206, 207, 208, 209, 213, 215, 218, 224, 225, 230, 231, 235, 236, 238, 240, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 310, 328, 329, 330, 332, 368, 488, 491, 492, 501, 507, 528, 531, 537, 538, 543, 544, 553, 572, 577, 578, 579, 585, 589, 594, 595, 597], "background_thread": 550, "backward": [468, 497, 529, 530, 531, 543, 582, 583, 586, 590], "badri": 491, "baichuan": 541, "baichuan2": 541, "balanc": [210, 252, 487, 489, 491, 495, 497, 546, 589, 592], "ban": 499, "bandit": 500, "bandwidth": [488, 491, 497, 543, 544, 589], "bar": [31, 204, 246, 564, 584], "bare": 534, "bart": 598, "base": [2, 4, 22, 33, 72, 91, 102, 106, 108, 118, 130, 136, 139, 144, 146, 147, 154, 161, 168, 175, 181, 183, 188, 193, 196, 200, 202, 204, 211, 218, 228, 234, 237, 242, 244, 246, 253, 259, 274, 280, 282, 288, 289, 292, 294, 299, 309, 312, 316, 327, 329, 336, 337, 338, 367, 370, 374, 380, 418, 445, 454, 459, 460, 463, 486, 488, 489, 491, 492, 496, 497, 502, 504, 505, 506, 507, 524, 526, 530, 531, 535, 543, 544, 552, 553, 555, 564, 567, 572, 575, 578, 579, 583, 584, 586, 589, 591, 592, 593, 595, 598], "base_dataload": 238, "base_dir": 31, "base_model": 330, "base_tun": [493, 495], "basecallback": 154, "baseconfig": [492, 495, 524], "basedataload": [193, 197, 199, 234, 239, 241, 459], "basedatalod": [193, 234, 459], "baselin": [471, 496, 591, 592, 593], "baseline_acc_0": 593, "baseline_accuraci": 480, "baseline_model": [495, 496], "basemetr": [274, 327, 358], "basemodel": [329, 460, 495], "basepattern": [167, 169, 171], "baseprun": [172, 177, 179, 180], "basereg": 181, "basetransform": [218, 259], "bash": [504, 569, 593], "basi": 583, "basic": [165, 167, 175, 187, 188, 217, 258, 277, 297, 308, 312, 315, 366, 370, 373, 468, 487, 538, 539, 543, 546, 566, 585, 591], "basic_magnitud": [585, 597], "basic_na": 279, "basicmagnitudeprun": 286, "basicna": 277, "basicprun": [178, 180], "basictoken": [217, 258], "basictunestrategi": [305, 361], "batch": [2, 146, 193, 195, 196, 200, 201, 221, 234, 236, 237, 242, 243, 459, 468, 491, 525, 529, 530, 543, 582, 583, 586, 592, 594, 595, 598], "batch_idx": 531, "batch_sampl": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525], "batch_siz": [188, 193, 195, 199, 200, 201, 202, 203, 221, 234, 236, 241, 242, 243, 244, 245, 264, 459, 475, 502, 525, 526, 531, 533, 537, 543, 547, 586], "batchmatmul": [114, 441], "batchmatmulv2": [114, 441], "batchnorm": [21, 48, 53, 107, 394, 399, 501, 592], "batchnormalizationoper": 21, "batchsampl": [200, 242, 459], "batchtospacend": [44, 390], "bayesian": [188, 282, 308, 366, 502, 583, 585], "bayesianoptim": [306, 362], "bayesianoptimizationsearch": 282, "bayesiantunestrategi": [306, 362], "bbox": [270, 323, 501, 542], "bboxes_labels_scor": 501, "bc": [550, 558], "bdf0bd1b2cc14bc19bce12d4f9b333c7": 572, "bdist_wheel": [559, 562], "beam": [267, 320, 542], "becaus": [141, 171, 176, 218, 259, 297, 462, 494, 497, 501, 569, 586, 592, 594, 595], "becom": [491, 497, 505, 533, 583, 589], "been": [4, 141, 162, 168, 175, 267, 297, 299, 320, 462, 488, 491, 495, 497, 502, 507, 524, 529, 543, 544, 564, 589, 592], "befor": [93, 95, 150, 167, 172, 174, 179, 180, 182, 187, 188, 202, 244, 297, 299, 301, 431, 433, 491, 497, 500, 507, 525, 526, 529, 530, 531, 534, 535, 543, 559, 562, 568, 569, 586, 589, 591, 593, 595], "begin": [102, 173, 174, 179, 299, 490, 524, 525, 529, 530, 543, 583, 595], "behavior": [141, 462, 499, 505, 506, 507, 535, 545, 589, 593, 595, 597], "being": [136, 270, 323, 507, 572], "beit": 598, "belong": [204, 246, 332, 586], "below": [41, 52, 60, 187, 188, 303, 327, 358, 387, 398, 406, 487, 489, 491, 492, 495, 496, 497, 500, 501, 504, 505, 506, 507, 525, 528, 529, 531, 537, 542, 546, 547, 549, 557, 558, 561, 564, 567, 572, 581, 582, 583, 585, 586, 589, 591, 592, 593, 595, 596], "bench": 547, "bench_config": 551, "bench_featur": 551, "benchmark": [187, 188, 221, 266, 303, 319, 338, 483, 504, 512, 545, 547, 551, 555, 558, 564, 567, 595, 596, 597, 598], "benchmark_with_raw_cmd": 152, "benchmarkconf": 543, "benchmarkconfig": [152, 187, 188, 522, 528, 543], "benefici": 523, "benefit": 582, "berkeleyvis": 528, "bert": [165, 188, 198, 201, 202, 218, 240, 243, 244, 259, 504, 526, 529, 542, 544, 552, 575, 578, 579, 583, 594, 598], "bert_dataset": [208, 250], "bertattent": 165, "besid": [491, 497, 505, 529, 569, 589], "best": [154, 218, 259, 260, 265, 302, 309, 367, 491, 492, 493, 494, 496, 499, 502, 504, 524, 539, 547, 553, 564, 570, 581, 586, 589, 592, 594, 595], "best_configur": 482, "best_model": [154, 260, 482, 488, 493, 494, 495, 496, 589], "best_model_weight": 482, "best_scor": [154, 260], "beta": 161, "beta_1": 597, "beta_2": 597, "better": [82, 187, 188, 191, 192, 232, 233, 281, 328, 358, 426, 468, 488, 491, 497, 524, 530, 542, 544, 583, 584, 586, 589, 591, 592, 595], "between": [4, 30, 129, 151, 178, 187, 188, 218, 259, 271, 274, 324, 327, 353, 357, 453, 483, 487, 491, 492, 495, 497, 501, 505, 506, 507, 523, 528, 529, 538, 542, 543, 546, 555, 586, 589, 590, 591, 592, 594, 595], "bf16": [32, 73, 135, 187, 188, 316, 374, 465, 466, 505, 506, 535, 543, 549, 554, 558, 564, 588, 595, 598], "bf16_convert": [38, 137, 384], "bf16_op": [34, 36, 93, 381, 382, 431, 506, 588], "bf16_symbolic_trac": 135, "bf16convert": [36, 382, 588], "bf16modul": 135, "bf16modulewrapp": 135, "bf16wrapper": 588, "bfloat16": [31, 488, 544, 547, 555, 588], "bi": [271, 272, 324, 325], "bia": [129, 187, 188, 453, 589, 593], "bias_correct": [131, 455], "biasadd": [39, 45, 50, 52, 95, 385, 391, 396, 398, 433, 535], "biascorrect": [129, 453], "bibtex": 540, "bicub": [218, 259, 594], "big": [136, 491, 528, 589], "bigdl": [554, 555], "bigger": 569, "bigscienc": [489, 541, 592, 598], "bilibili": 584, "bilinear": [214, 218, 256, 259, 594], "bilinearimagenet": [594, 597], "bilinearimagenettransform": [214, 256], "bilingu": [267, 320], "billion": 583, "bilstm": 598, "bin": [4, 141, 142, 462, 464, 483, 534], "binari": [9, 134, 274, 327, 458, 534, 542, 559, 562, 590], "binary_op": 17, "binarydirect8bitoper": 9, "binaryoper": 9, "bind": [152, 219], "bind_al": 593, "bio": 598, "bit": [30, 32, 146, 187, 188, 376, 486, 487, 488, 491, 497, 504, 507, 523, 530, 544, 546, 584, 586, 589, 592], "bita": [487, 546], "bitnami": 584, "bitwidth": 486, "bk3": 4, "black": 595, "black_nod": 3, "blade": 554, "blank": 558, "blendcnn": 598, "bleu": [268, 273, 321, 326, 542, 583], "bleu_hook": [268, 321], "bleu_scor": [268, 321], "bleu_token": [267, 320], "bleu_util": [273, 326], "blob": [4, 136, 169, 170, 267, 268, 271, 272, 297, 320, 321, 324, 325, 327, 358, 543, 553, 575, 578, 579], "blob_siz": 32, "block": [0, 32, 144, 146, 161, 171, 174, 179, 184, 297, 338, 377, 487, 491, 538, 546, 581, 583, 589, 595], "block_list": 146, "block_mask": [161, 175], "block_num": 146, "block_pattern": 144, "block_prefix": 146, "block_siz": [171, 297, 589], "blockfallbacktuningsampl": 373, "blockmaskcriterion": 161, "blocksiz": [32, 487, 546], "blockwis": 592, "blockwise_over_matmul_gemm_conv": 184, "blog": [491, 504, 584], "bloom": [489, 497, 504, 541, 583, 592, 598], "bloomz": [489, 592, 598], "blue": 587, "bmm": [491, 497, 589], "bn": 598, "bnb": [491, 589], "bo": 188, "bodi": 499, "bool": [2, 30, 31, 32, 127, 134, 141, 145, 146, 167, 187, 188, 202, 204, 214, 218, 244, 246, 256, 259, 264, 268, 274, 297, 315, 321, 327, 373, 377, 379, 458, 462, 475, 478, 482, 483, 491, 492, 525, 526, 542, 575, 585, 594], "bool_val": 91, "boolean": 2, "boost": [488, 504, 544, 548, 564, 583, 584], "booster": 530, "bootstrap": 570, "border": 594, "bot": [559, 562], "both": [134, 188, 458, 490, 491, 493, 497, 499, 502, 505, 530, 543, 548, 567, 569, 571, 583, 585, 586, 589, 592, 595], "bottleneck": [491, 497, 589], "bottom": 569, "boudoukh": 583, "bound": [60, 152, 218, 259, 270, 306, 323, 362, 406, 542, 594], "boundari": [218, 259, 594], "bowl": [272, 325], "box": [218, 259, 270, 274, 323, 327, 501, 542, 547, 558, 564, 593, 594, 595], "branch": [134, 458, 500], "brand": 540, "break": [95, 433, 531, 543], "breakdown": 572, "breakpoint": 565, "breakthrough": [487, 546], "breviti": [267, 268, 320, 321, 542], "bridg": [505, 506, 538], "briefli": [497, 543, 592], "bright": 594, "bring": [265, 302, 497, 558, 571, 592], "broad": [504, 538, 553, 596], "broadcast": [218, 259, 531, 594], "broadcast_optimizer_st": 531, "broadcast_paramet": 531, "bronco": [272, 325], "brought": [497, 545, 548, 555, 586], "browser": [557, 561, 566, 570], "buffer": [141, 462], "bug": [500, 504], "build": [2, 30, 32, 101, 147, 148, 150, 151, 277, 280, 331, 333, 335, 336, 337, 341, 460, 495, 505, 506, 507, 539, 545, 557, 559, 561, 562, 565, 584, 595], "build_slave_faker_model": 376, "build_torch_model": 488, "built": [61, 157, 176, 189, 190, 194, 198, 202, 203, 208, 210, 212, 213, 214, 215, 218, 223, 225, 230, 231, 235, 238, 240, 244, 245, 250, 252, 254, 255, 256, 257, 259, 303, 327, 330, 338, 358, 407, 468, 496, 502, 505, 526, 531, 543, 557, 561, 581, 586, 591, 594, 595, 597], "builtin": [141, 462, 531], "bundl": 565, "busi": 584, "button": [500, 538, 558, 564], "bypass_reshap": [53, 54, 399, 400], "byte": [141, 462], "byte_arrai": [141, 462], "bytesio": [141, 462], "c": [4, 60, 204, 246, 406, 483, 491, 497, 526, 534, 589, 595], "c1": [60, 406], "c1c2": [60, 406], "c2": [60, 406], "c6a": 598, "c6g": 598, "c6i": 598, "c_": 589, "cach": [202, 244, 491, 497, 534, 586, 589], "cache_dir": [142, 464], "cache_kl": 2, "cache_minmax": 2, "caff": 528, "caffe_ilsvrc12": 528, "caffenet": 598, "calcul": [31, 46, 146, 161, 169, 184, 188, 205, 206, 247, 248, 271, 272, 297, 299, 309, 324, 325, 367, 392, 459, 469, 483, 489, 491, 495, 497, 523, 526, 542, 543, 555, 567, 581, 583, 586, 589, 591, 592, 595, 597], "calculate_md5": [204, 246], "calculate_ms": 483, "calculate_quant_min_max": 146, "calculate_scale_zp": 31, "calib": [146, 506], "calib_cfg": 2, "calib_data": [2, 140], "calib_dataload": [221, 303, 358, 493, 494, 495, 496, 501, 504, 525, 526, 528, 536, 537, 542, 543, 566, 567, 586, 587, 588, 589], "calib_dataset": 567, "calib_func": [34, 146, 358, 381, 588], "calib_iter": [495, 506], "calib_method": 4, "calib_model": 2, "calib_registri": 4, "calib_tensor": 2, "calibcollector": 2, "calibdata": 2, "calibr": [2, 5, 32, 35, 75, 76, 126, 146, 152, 187, 188, 191, 192, 232, 233, 265, 302, 340, 358, 420, 477, 490, 491, 492, 495, 497, 505, 507, 526, 537, 538, 583, 586, 589, 595, 596, 597], "calibration_data": [85, 93, 431], "calibration_sampling_s": [187, 188, 543, 569], "calibrationdataread": [339, 340], "calibratorbas": 4, "call": [2, 30, 141, 147, 165, 173, 174, 179, 270, 299, 323, 340, 462, 495, 497, 501, 502, 505, 525, 537, 553, 555, 565, 583, 586, 592, 593, 594], "call_on": 152, "callabl": [141, 187, 188, 272, 325, 462, 468, 492, 495, 524, 525], "callback": [289, 294, 468, 471, 501, 543, 582, 583, 586], "callbacks_list": 468, "camembert": 598, "can": [30, 31, 32, 129, 136, 141, 151, 165, 166, 167, 172, 180, 182, 187, 188, 191, 192, 201, 204, 218, 219, 221, 232, 233, 243, 246, 259, 270, 272, 274, 297, 299, 301, 323, 325, 327, 328, 338, 340, 358, 453, 462, 468, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 502, 504, 505, 506, 507, 522, 524, 525, 526, 528, 529, 530, 531, 533, 535, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 557, 558, 559, 561, 562, 564, 565, 567, 569, 570, 571, 572, 574, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598], "cannot": [270, 323, 491, 501, 524, 534, 589, 593], "cap": 504, "cap_s8_1_11": 507, "cap_s8_1_11_conv1d": 507, "capabl": [2, 33, 316, 374, 380, 488, 491, 497, 506, 507, 522, 535, 543, 544, 555, 566, 571, 583, 585, 586, 595, 597], "capac": [491, 497, 589, 591], "captur": [483, 490, 491], "captureoutputtofil": 483, "card": 583, "carri": 583, "cascad": 539, "case": [31, 56, 60, 141, 152, 188, 201, 217, 218, 219, 243, 258, 259, 265, 289, 294, 302, 338, 402, 406, 462, 491, 495, 497, 507, 524, 525, 529, 530, 531, 535, 537, 542, 548, 552, 564, 565, 566, 569, 575, 578, 579, 581, 583, 584, 586, 589, 590, 592, 594, 596, 597, 598], "cast": [31, 37, 383, 588, 594], "cast_tensor": 31, "castonnxtransform": [218, 259], "castpytorchtransform": [218, 259], "casttftransform": [218, 259], "cat": [501, 533, 550, 577, 578, 579], "categor": 542, "categori": [204, 246, 269, 322, 522, 526, 554], "category_id_set": [270, 323], "caus": [184, 491, 497, 506, 525, 548, 567, 569, 583, 589], "causal": 583, "cce5ff": 595, "cd": [528, 531, 539, 566, 568, 569, 571, 572, 577, 578, 579], "cdf419910f9b4d2a8320d0e420ac1d0a": 578, "cdot": [497, 592], "ce": [155, 187, 188, 220, 543, 597], "cell": 558, "center": [218, 259, 503, 504, 539, 594, 595], "centercrop": 594, "centercroptftransform": [218, 259], "centercroptransform": [218, 259], "cento": [539, 598], "central_fract": [214, 256, 594], "cern": 584, "cert": 566, "certain": [141, 186, 462, 496, 591], "certif": [500, 566], "cfg": [57, 58, 146, 316, 374, 403, 404, 471, 506, 507], "cfg_filter": 471, "cfg_from_fil": 483, "cfg_preprocess": 471, "cg": [528, 569, 593], "challeng": [487, 546, 587], "chang": [30, 82, 129, 151, 173, 174, 176, 177, 179, 182, 187, 188, 299, 301, 340, 365, 426, 453, 483, 492, 500, 506, 525, 531, 534, 540, 543, 547, 557, 558, 561, 564, 570, 583, 593, 594, 595], "changelog": [559, 562, 563], "channel": [30, 31, 32, 129, 150, 151, 163, 166, 171, 187, 188, 214, 218, 256, 259, 297, 340, 453, 478, 487, 489, 491, 504, 505, 507, 538, 539, 546, 547, 549, 554, 569, 583, 589, 594, 598], "channel_axi": [99, 148, 151], "channels_last": [214, 256, 547], "channelx1": [187, 188, 583], "chapter": 506, "characterist": 499, "chart": [497, 569, 586, 591, 593], "chat": [489, 541, 592, 598], "chatbot": [487, 546, 584], "chatglm2": 541, "chatglm3": 541, "check": [2, 32, 53, 54, 91, 134, 146, 184, 194, 204, 246, 262, 298, 399, 400, 458, 473, 482, 483, 495, 504, 528, 531, 539, 548, 550, 552, 559, 562, 563, 567, 570, 573, 574, 590], "check_cfg_and_qconfig": 146, "check_config": [184, 298], "check_dataload": 194, "check_integr": [204, 246], "check_key_exist": 483, "check_key_valid": 184, "check_model": [262, 473], "check_mx_vers": 2, "checknumer": [66, 412], "checkout": 500, "checkpoint": [141, 336, 460, 462, 482, 545], "checkpoint_dir": 482, "checkpoint_sess": [336, 460], "checksum": [204, 246], "chees": 524, "cheeseshopaddress": 524, "chen": 540, "cheng": [491, 497], "child": [60, 142, 406, 464, 593], "children": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 142, 464], "chines": 584, "choic": [202, 244, 491, 495, 497, 505, 526, 542, 570, 592], "choos": [204, 246, 478, 492, 497, 538, 552, 584, 590, 592, 595, 597], "chosen": [506, 523], "chunk": [218, 259, 594], "chunk_siz": [204, 246], "ci": 500, "cifar": [204, 246, 526, 598], "cifar10": [204, 246, 526], "cifar100": [204, 246, 526], "circumst": [499, 585], "ckpt": [134, 328, 336, 358, 458, 460, 598], "cl": [142, 147, 155, 157, 167, 172, 180, 181, 182, 204, 211, 218, 220, 225, 246, 253, 259, 281, 288, 292, 297, 299, 301, 312, 327, 338, 370, 464, 483, 524], "claim": 540, "clamp_": [497, 592], "clarifi": 499, "clase": 288, "class": [102, 139, 146, 162, 168, 175, 208, 250, 281, 328, 358, 463, 491, 492, 493, 495, 496, 501, 502, 506, 524, 525, 526, 529, 542, 543, 555, 581, 582, 586, 590, 593, 595, 597], "class_1": [204, 246, 526], "class_n": [204, 246, 526], "classdef": 595, "classdiagram": 574, "classic": [492, 595], "classif": [180, 202, 218, 244, 259, 274, 300, 327, 529, 533, 542, 553, 567, 575, 578, 579, 583, 584], "classifi": [165, 184, 202, 244, 274, 327, 526, 529], "classificationmnli": 598, "classificationmrpc": 598, "classificationqnli": 598, "classificationqqp": 598, "classificationsst": 598, "classifierheadsearch": 165, "classifierheadsearchertf": 165, "classregist": 376, "clean": [217, 258, 543], "clear": [200, 242, 505, 535, 542, 543], "cli": 567, "click": [538, 547, 548, 555, 558, 564, 569, 584, 593], "client": [566, 572, 579], "clip": [32, 491, 497, 589, 592], "clip_grad_norm_": 543, "clm": 583, "clone": [500, 528, 539, 557, 561, 566, 568, 569, 571, 572], "close": [129, 151, 453, 523, 573], "closur": 573, "cloud": [487, 500, 504, 546, 574, 584], "cluster": [574, 577, 578, 595], "cmd": 152, "cnn": 598, "cnt": 543, "co": 583, "coarsest": [497, 592], "coco": [203, 210, 245, 252, 270, 274, 323, 327, 542, 583], "coco_dataset": [208, 250], "coco_filt": [212, 254], "coco_label_map": [273, 326], "coco_tool": [273, 326], "cocoev": [270, 323], "cocoevalwrapp": [270, 323], "cocomap": 542, "cocomapv2": [274, 327, 542], "coconpi": [203, 245, 526], "cocoraw": [203, 245, 526], "cocorecord": 526, "cocorecorddataset": [203, 245], "cocowrapp": [270, 323], "code": [141, 165, 191, 192, 219, 232, 233, 276, 300, 303, 358, 462, 468, 491, 493, 501, 504, 505, 506, 507, 526, 529, 530, 531, 537, 538, 540, 542, 547, 549, 551, 552, 553, 555, 558, 564, 568, 569, 571, 572, 573, 581, 582, 583, 584, 585, 586, 591, 592, 593, 594], "codec": [141, 462], "codenam": [488, 541, 544], "coder": [504, 538, 548, 549, 552, 555, 558, 571, 575, 584], "coeff": 181, "coeffici": [41, 181, 387, 583], "cola": [202, 244, 526, 542, 598], "collabor": [500, 504, 549, 555], "collat": [134, 146, 458], "collate_fn": [193, 195, 196, 199, 201, 221, 234, 236, 237, 241, 243, 459, 525, 526], "collate_pr": 31, "collate_result": 146, "collate_tf_pr": [134, 458], "collate_torch_pr": 146, "collctor": 4, "collect": [2, 4, 31, 146, 216, 218, 221, 223, 224, 226, 259, 272, 274, 325, 327, 469, 483, 495, 497, 506, 586, 593, 595], "collect_layer_histogram": 476, "collect_layer_input": 184, "collect_weight_info": 146, "collector": [2, 136, 469], "collectorbas": 2, "collecttransform": [218, 259], "color": [583, 587], "colorjitt": 594, "column": [483, 491, 497, 589, 592], "column_map": 483, "columnwis": [51, 397], "com": [4, 136, 169, 170, 180, 202, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 499, 524, 526, 528, 536, 539, 540, 543, 547, 553, 566, 568, 569, 571, 572, 575, 578, 579, 590, 591, 598], "comb": 530, "combin": [2, 146, 187, 188, 191, 192, 214, 228, 232, 233, 256, 328, 358, 468, 483, 491, 494, 501, 505, 538, 543, 582, 584, 586, 588, 589, 594, 595], "combine_cap": 2, "combine_histogram": 483, "come": [141, 462, 487, 541, 546, 595], "command": [152, 219, 468, 528, 531, 547, 549, 552, 557, 561, 565, 566, 568, 569, 570, 572], "comment": [139, 463, 491, 499, 506, 526, 542, 543, 589, 594], "commentsbalancedor": 598, "commit": [492, 495, 499, 500], "common": [125, 139, 141, 188, 216, 266, 276, 280, 281, 282, 452, 462, 463, 471, 489, 493, 494, 495, 499, 524, 526, 530, 531, 533, 537, 539, 543, 586, 592], "commonli": [572, 583], "commun": [499, 566], "comoress": 478, "compact": [529, 543, 550, 583], "compar": [136, 274, 327, 483, 487, 490, 491, 496, 497, 530, 542, 546, 567, 583, 586, 589, 591, 593, 595], "compare_kei": 483, "compare_label": [274, 327, 358, 542], "compare_object": 483, "compare_weight": 136, "comparison": [483, 589, 590, 593], "compat": [134, 336, 458, 460, 500, 531, 545, 559, 562, 564, 583, 590], "compatible_format": [139, 463], "compil": [267, 320, 486, 490, 543], "complaint": 499, "complement": [488, 583], "complet": [316, 374, 505, 506, 583, 586, 595, 597, 598], "complex": [488, 524, 543, 544, 583], "complextfmap": 524, "compli": 595, "compon": [154, 260, 266, 303, 496, 501, 524, 528, 531, 539, 540, 547, 564, 572, 582, 583], "compos": [218, 259, 471, 594], "composableconfig": 524, "composetransform": [218, 259], "comprehens": [492, 495, 543, 596], "compress": [266, 289, 294, 319, 338, 468, 478, 485, 489, 491, 492, 494, 496, 497, 504, 512, 529, 538, 543, 564, 566, 581, 582, 583, 584, 586, 592, 596, 598], "compressed_model": 589, "compression_dim": [478, 589], "compression_dtyp": [478, 589], "compression_manag": [187, 188, 468, 501, 529, 530, 543, 582, 583, 586], "compressionmanag": 468, "compressor": [2, 152, 154, 157, 169, 170, 180, 187, 188, 214, 215, 218, 219, 222, 225, 228, 256, 257, 259, 261, 266, 273, 274, 276, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 342, 358, 366, 372, 472, 480, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 500, 502, 505, 506, 507, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 546, 547, 548, 552, 554, 555, 557, 559, 561, 562, 563, 566, 567, 568, 569, 571, 572, 579, 581, 582, 583, 584, 586, 589, 590, 592, 593, 594, 595, 596, 597, 598], "comput": [31, 32, 91, 136, 146, 267, 268, 271, 272, 274, 320, 321, 324, 325, 327, 468, 483, 487, 488, 490, 491, 497, 523, 525, 530, 533, 542, 543, 544, 546, 547, 558, 567, 583, 584, 586, 589, 592, 595], "compute_bleu": [268, 321], "compute_const_folding_using_tf": 91, "compute_error": 136, "compute_spars": 483, "computemetr": [270, 323], "concat": [17, 133, 457], "concat_gener": [218, 259], "concatoper": 10, "concatv2": [110, 120, 133, 437, 447, 457, 535], "concentr": 569, "concept": [537, 591, 596], "conclud": 502, "concret": [134, 458, 595], "conda": [534, 550, 558, 577, 578, 579, 590], "conda_env": [572, 577, 578, 579], "conda_prefix": 550, "condit": [71, 202, 203, 204, 218, 244, 245, 246, 259, 305, 359, 361, 417, 496, 526, 540, 594, 595], "conduct": [501, 543, 552, 564, 595, 596], "conf": [147, 152, 154, 188, 191, 192, 219, 232, 233, 276, 283, 284, 286, 287, 288, 289, 294, 304, 305, 306, 307, 309, 310, 311, 312, 316, 328, 338, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 377, 468, 501, 502, 504, 507, 522, 529, 536, 537, 543, 544, 545, 566, 568, 569, 582, 586, 587, 588, 589, 591, 592, 595], "conf_fnam": 277, "conf_fname_or_obj": [219, 228, 260, 265, 275, 276, 277, 278, 280, 289, 294, 302], "confer": [136, 497, 583, 592], "confid": 146, "confidence_batch": [146, 595], "confidenti": [499, 566], "config": [2, 32, 101, 102, 104, 108, 146, 152, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 191, 192, 202, 232, 233, 244, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 316, 317, 319, 328, 353, 357, 374, 375, 376, 377, 380, 468, 471, 482, 483, 486, 488, 490, 491, 492, 493, 502, 504, 506, 507, 512, 522, 524, 525, 528, 529, 530, 531, 533, 536, 538, 542, 543, 544, 545, 566, 567, 582, 583, 585, 586, 588, 589, 591, 593, 595], "config_file_path": [180, 300], "config_inst": 152, "config_quantizable_lay": 104, "config_set": [488, 493, 494, 495, 496], "configproto": 357, "configs_map": 465, "configur": [2, 104, 135, 146, 152, 184, 187, 188, 191, 192, 194, 204, 207, 219, 224, 232, 233, 246, 249, 260, 264, 265, 276, 277, 278, 280, 289, 294, 298, 302, 303, 309, 327, 328, 338, 358, 367, 376, 468, 470, 471, 475, 481, 482, 496, 501, 502, 505, 506, 526, 528, 543, 551, 565, 572, 577, 578, 579, 581, 583, 586, 589, 590, 592, 594, 595, 598], "confirm": 506, "conflict": [91, 524, 534], "connect": [161, 299, 564, 566, 573, 583, 591], "consecut": [163, 165, 166, 583], "conserv": [187, 188, 366], "conservativetunestrategi": 363, "consid": [32, 134, 274, 327, 458, 499, 523, 524, 529, 565, 595], "consider": [494, 592], "consist": [42, 49, 388, 395, 491, 500, 501, 524, 572, 592, 595], "consol": [565, 570], "consolid": 539, "const": [42, 43, 49, 50, 53, 54, 56, 68, 84, 388, 389, 395, 396, 399, 400, 402, 414, 428], "const_node_valu": 91, "constant": [91, 264, 306, 314, 362, 372, 475, 476, 524, 525, 535, 567, 594], "constant_valu": [218, 259], "constfold": 535, "constrain": 587, "constraint": [187, 188, 265, 302, 543, 583, 591, 595, 597], "construct": [141, 202, 205, 206, 209, 216, 221, 223, 224, 226, 244, 247, 248, 251, 327, 332, 336, 376, 459, 460, 462, 471, 496, 499, 506, 507, 526, 531, 583, 595], "construct_function_from_graph_def": [134, 458], "consum": [496, 525], "consumpt": [487, 497, 546, 592], "contact": [499, 590, 591], "contain": [2, 53, 54, 56, 60, 125, 134, 136, 141, 146, 152, 154, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 191, 192, 202, 203, 204, 232, 233, 244, 245, 246, 260, 264, 265, 270, 271, 272, 276, 289, 292, 294, 297, 298, 299, 300, 301, 302, 323, 324, 325, 328, 358, 399, 400, 402, 406, 452, 458, 462, 468, 471, 475, 482, 491, 495, 504, 523, 526, 529, 538, 542, 565, 572, 577, 578, 579, 583, 589, 593, 595, 596], "container_id": 504, "content": [526, 572, 573, 577, 578, 579], "content_fold": [209, 251, 526], "context": [2, 483, 491, 497, 585, 589], "contextu": 583, "contigu": 146, "continu": [170, 270, 297, 323, 502, 541, 543, 565, 583, 596], "contract": [44, 390], "contrast": [167, 297, 594], "contrib": [4, 266, 319], "contribut": [499, 504, 583], "control": [147, 187, 188, 501, 543, 570, 583, 595], "conv": [17, 44, 48, 52, 57, 58, 59, 78, 95, 150, 187, 188, 390, 394, 398, 403, 404, 405, 422, 433, 501, 506, 507, 543, 583, 585, 586, 595], "conv0": [528, 569, 593], "conv1": [187, 188, 493, 586, 597], "conv1d": [186, 507], "conv1d_relu": 533, "conv2d": [39, 45, 46, 47, 51, 52, 57, 111, 121, 129, 385, 391, 392, 393, 397, 398, 403, 438, 448, 453, 506, 507, 528, 533, 535, 569, 592, 593, 595], "conv2d_config": 493, "conv2d_relu": 533, "conv2dbackpropinput": [112, 439], "conv3d": [57, 111, 403, 438], "conv3dbackpropinputv2": [112, 439], "conveni": [492, 543, 571], "convent": [204, 246, 270, 323, 487, 500, 529, 546], "convers": [40, 41, 188, 276, 386, 387, 488, 489, 497, 500, 505, 506, 543, 544, 586, 588, 592], "convert": [2, 31, 34, 35, 36, 39, 40, 41, 42, 43, 52, 60, 72, 85, 86, 88, 89, 90, 91, 117, 122, 126, 128, 135, 146, 165, 187, 188, 202, 214, 217, 218, 244, 256, 258, 259, 263, 270, 276, 298, 316, 323, 374, 377, 378, 380, 381, 382, 385, 386, 387, 388, 389, 398, 406, 418, 429, 444, 449, 465, 474, 486, 487, 488, 489, 490, 491, 492, 494, 497, 501, 506, 543, 544, 549, 586, 588, 589, 592, 594, 595], "convert_add_to_biasadd": [62, 408], "convert_bf16": 506, "convert_by_vocab": [217, 258], "convert_examples_to_featur": [202, 218, 244, 259], "convert_layout": [62, 408], "convert_leakyrelu": [62, 408], "convert_nan_to_random": [62, 408], "convert_placeholder_to_const": [62, 408], "convert_tensorflow_tensor_to_onnx": 91, "convert_to_unicod": [217, 258], "convertaddtobiasaddoptim": [39, 385], "converted_model": [188, 328, 543, 544], "convertlayoutoptim": [40, 386], "convertleakyreluoptim": [41, 387], "convertnantorandom": [42, 388], "convertplaceholdertoconst": [43, 389], "convolut": [529, 584], "convoper": 11, "cooper": [488, 539, 544, 584], "coordin": [218, 259, 306, 362, 571, 594, 595], "copi": [188, 298, 483, 525, 570], "copyreg": [139, 463], "copyright": [500, 540], "core": [152, 187, 188, 219, 500, 522, 540, 557, 561, 572, 598], "core_id": [152, 219], "core_list": 152, "cores_per_inst": [152, 187, 188, 522, 543, 585], "corner": [218, 259, 500, 505, 507, 594], "corpor": 540, "correct": [129, 151, 184, 187, 188, 270, 271, 272, 274, 298, 323, 324, 325, 327, 453, 499, 547], "correctli": 570, "correspond": [4, 136, 165, 176, 187, 188, 202, 244, 267, 270, 274, 320, 323, 327, 471, 483, 492, 497, 505, 535, 543, 583, 585, 586, 591, 595], "cost": [487, 491, 497, 546, 586, 589], "could": [141, 150, 167, 191, 192, 204, 232, 233, 246, 303, 328, 358, 462, 468, 488, 490, 491, 493, 495, 497, 499, 501, 530, 543, 582, 583, 586, 589, 592, 596], "couldn": 570, "count": [2, 491, 497, 502, 526, 589], "counter": 91, "coupl": [201, 243], "cover": [500, 533, 537, 584], "coverag": 500, "cpu": [77, 78, 79, 80, 140, 141, 146, 187, 188, 421, 422, 423, 424, 462, 466, 478, 483, 488, 490, 495, 504, 506, 522, 523, 538, 543, 544, 547, 549, 555, 564, 572, 584, 585, 586, 587, 588, 589, 593], "cpu_execution_tim": 347, "cpuexecutionprovid": [3, 29, 30, 32, 339, 340, 544, 586], "cpufreq": [524, 550], "cpuinfo": 483, "craft": [487, 546], "crbug": 524, "creat": [2, 4, 91, 139, 187, 188, 193, 202, 204, 221, 234, 244, 246, 270, 280, 281, 316, 323, 353, 357, 374, 376, 377, 459, 463, 471, 497, 499, 502, 505, 526, 545, 557, 559, 561, 562, 565, 577, 578, 579, 583, 586, 591, 593, 595, 596], "create_data_exampl": 2, "create_dataload": 471, "create_dataset": 471, "create_eval_func": 471, "create_obj_from_config": 476, "create_onnx_config": 353, "create_search_space_pool": 281, "create_tf_config": 357, "create_train_func": 471, "criteria": [162, 187, 188, 265, 289, 294, 297, 299, 302, 496, 501, 564, 592], "criterion": [136, 154, 156, 157, 161, 167, 172, 173, 174, 176, 179, 183, 187, 188, 222, 225, 529, 530, 543, 583, 586, 592, 595, 597], "criterion_class": [161, 183], "criterion_conf": [187, 188], "criterion_registri": [155, 220], "criterion_typ": [155, 220], "critet": [155, 220], "critic": [176, 495, 499], "crop": [214, 218, 256, 259, 526, 594], "crop_pad": [218, 259], "crop_ratio": [209, 251, 526], "cropres": 594, "cropresizetftransform": [218, 259], "cropresizetransform": [218, 259], "croptoboundingbox": [218, 259, 594], "cross": [157, 225, 274, 327, 537, 595], "crossentropyloss": [155, 187, 188, 529, 543], "crowd": [270, 323], "crt": 566, "crucial": [490, 583], "cs412": 4, "cse": [60, 84, 406, 428], "csv": [483, 502, 567, 568], "ctrl": 565, "ctx": 2, "cube": [187, 188, 583], "cuda": [141, 184, 462, 544, 547, 549, 583, 586], "cudaexecutionprovid": [544, 586], "curat": 570, "curl": [572, 573, 577, 578], "current": [2, 56, 90, 161, 162, 165, 168, 172, 175, 187, 188, 276, 283, 284, 286, 287, 288, 297, 299, 306, 310, 362, 368, 402, 483, 490, 492, 496, 501, 502, 505, 507, 523, 524, 531, 535, 543, 547, 551, 564, 572, 581, 583, 586, 589, 592, 595], "current_it": 593, "current_pattern": 165, "current_sparsity_ratio": [172, 299], "curv": 542, "custom": [101, 139, 146, 152, 188, 303, 327, 338, 463, 482, 492, 496, 497, 522, 529, 530, 547, 570, 571, 572, 576, 578, 579, 583, 584, 589, 591], "custom_metr": 537, "custom_models_optim": 577, "custom_tune_config": [488, 493, 494, 495, 496], "customis": [525, 526, 542], "customized_msg": 483, "cut": [559, 562], "cv": [187, 188, 490, 492, 495, 583], "cv2": [214, 256], "cvf": [497, 592], "cycl": 502, "d": [60, 146, 406, 529, 537, 565, 567, 573, 583], "d1": [60, 406, 483], "d2": 483, "d3e10a49326449fb9d0d62f2bfc1cb43": 579, "d_": [187, 188], "d_conf": [187, 188, 530, 543, 582], "dai": 595, "daili": 564, "dampen": 32, "darvish": [487, 546], "data": [2, 30, 31, 32, 42, 91, 126, 134, 136, 141, 146, 150, 165, 187, 188, 191, 192, 219, 221, 232, 233, 264, 266, 306, 316, 318, 319, 328, 340, 352, 356, 358, 362, 374, 376, 378, 388, 458, 462, 468, 471, 475, 480, 483, 486, 487, 488, 490, 491, 492, 495, 497, 504, 505, 523, 525, 526, 531, 535, 536, 539, 542, 543, 544, 546, 566, 567, 569, 572, 577, 578, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596], "data_dir": [202, 244, 526], "data_format": [204, 214, 246, 256], "data_it": [2, 165], "data_load": [34, 35, 381, 505], "data_path": [207, 249, 526], "data_sourc": [200, 242, 471], "data_typ": [318, 376], "data_x": 2, "databas": [204, 246, 572], "databrick": [489, 541, 592, 598], "datafunc": [204, 246], "dataiterload": 2, "dataload": [2, 3, 30, 32, 126, 127, 136, 146, 152, 162, 163, 165, 180, 184, 191, 192, 202, 213, 222, 232, 233, 244, 255, 260, 289, 294, 303, 339, 340, 352, 356, 358, 378, 379, 459, 468, 471, 495, 501, 504, 505, 506, 528, 529, 530, 531, 536, 537, 543, 544, 566, 567, 582, 583, 586, 587, 588, 589, 592, 593, 594, 596, 597], "dataloader_cfg": 471, "dataloaderwrap": 2, "dataset": [126, 127, 146, 180, 191, 192, 193, 195, 196, 199, 200, 201, 213, 221, 232, 233, 234, 236, 237, 241, 242, 243, 255, 270, 271, 272, 274, 303, 323, 324, 325, 327, 328, 358, 378, 379, 459, 468, 471, 489, 491, 493, 494, 495, 497, 502, 504, 505, 506, 525, 531, 536, 542, 543, 552, 566, 567, 577, 583, 586, 589, 590, 592, 595, 597, 598], "dataset_config_nam": 568, "dataset_format": [204, 246], "dataset_loc": [528, 569, 577, 593], "dataset_nam": 568, "dataset_path": 502, "dataset_registri": [204, 246], "dataset_typ": [204, 246], "datatyp": [91, 146, 588, 595, 598], "date": [491, 589], "datetim": [187, 188], "db": [572, 574], "dbaeumer": 565, "dbox": 501, "dco": 500, "ddr5": 598, "de": 502, "deal": 468, "debug": [377, 479, 528, 557, 561, 565, 595, 596], "debug_stripp": 535, "dec": 584, "decapoda": 598, "decid": [102, 187, 188, 268, 299, 321, 495, 505, 506, 543, 586, 590, 595], "decim": 483, "decis": [524, 542], "declar": [524, 565], "decod": [141, 214, 256, 267, 320, 462, 542, 594], "decode_singl": 501, "decodeimag": 594, "decompos": [53, 54, 399, 400], "decor": [4, 22, 53, 54, 56, 134, 147, 157, 167, 172, 180, 182, 218, 225, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 399, 400, 402, 483, 501, 502, 505, 595], "decorator_metr": [274, 327], "decreas": [84, 428, 569, 583], "dedic": [187, 188], "dedicated_qdq_pair": [29, 187, 188, 586], "deem": 499, "deep": [487, 488, 495, 497, 504, 505, 506, 525, 538, 539, 543, 544, 546, 547, 549, 552, 553, 555, 558, 564, 584, 586, 595, 596], "deep_get": 338, "deep_set": 338, "deepcopi": 188, "deepen": 584, "deeper": 529, "deepest": 529, "deepst": 188, "def": [53, 54, 56, 191, 192, 232, 233, 358, 377, 399, 400, 402, 468, 488, 489, 492, 493, 495, 496, 497, 501, 505, 524, 525, 526, 529, 530, 531, 542, 543, 586, 592, 593, 595], "default": [4, 32, 83, 134, 141, 146, 184, 187, 188, 191, 192, 195, 202, 203, 204, 214, 218, 232, 233, 236, 244, 245, 246, 256, 259, 263, 264, 267, 276, 298, 318, 320, 327, 336, 376, 427, 458, 460, 462, 471, 474, 475, 478, 483, 487, 488, 489, 491, 492, 495, 496, 501, 505, 524, 525, 526, 535, 538, 542, 543, 544, 546, 552, 555, 557, 561, 569, 572, 577, 578, 579, 581, 583, 585, 586, 588, 589, 591, 592, 594, 595, 597], "default_alpha": 592, "default_col": [195, 236, 459], "default_config": 184, "default_dataload": 238, "default_dtyp": [316, 374], "default_opset_vers": 128, "default_sampl": 496, "default_workspac": [187, 188], "defaultdataload": [195, 201, 236, 243], "defin": [72, 136, 165, 167, 172, 173, 174, 179, 180, 181, 182, 187, 188, 191, 192, 232, 233, 277, 278, 280, 281, 282, 289, 294, 297, 298, 299, 301, 328, 358, 418, 468, 482, 493, 495, 496, 497, 499, 502, 505, 506, 525, 526, 529, 530, 535, 538, 542, 543, 565, 582, 583, 586, 589, 591, 592, 593, 595, 597], "definit": [134, 143, 196, 200, 237, 242, 458, 467], "degrad": [530, 583, 595], "delet": [569, 583], "delete_assign": 357, "delight": 555, "deliv": [491, 543, 584, 590], "delta": 555, "demand": [491, 497, 589], "demo": 543, "democrat": [549, 584], "demonstr": [487, 496, 504, 532, 546, 547, 577, 578, 579, 593], "denot": [497, 592], "dens": [165, 182, 187, 188, 301, 567, 583, 598], "dense_shap": [206, 248, 526], "densenet": 598, "densiti": 595, "denver": [272, 325], "depend": [2, 191, 192, 219, 232, 233, 328, 358, 468, 500, 534, 535, 570, 585, 586, 595], "deploi": [491, 496, 497, 500, 529, 543, 570, 574, 589, 595], "deploy": [492, 527, 547, 564, 584, 587, 592], "deprec": [524, 559, 562, 590, 594], "depth": [146, 529, 588], "depthwiseconv2dn": [51, 57, 111, 121, 397, 403, 438, 448, 535], "dequant": [30, 31, 32, 37, 74, 77, 78, 79, 80, 82, 136, 146, 383, 419, 421, 422, 423, 424, 426, 483, 497, 501, 506, 592, 593], "dequantize_cast_optim": [38, 384], "dequantize_data": 31, "dequantize_data_with_scale_zero": 31, "dequantize_per_channel": [497, 592], "dequantize_tensor": 483, "dequantize_weight": 483, "dequantizecastoptim": [37, 383], "dequantizelinear": 31, "deriv": [154, 161, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 260, 297, 299, 301], "derogatori": 499, "desc": 543, "descend": 567, "descent": [165, 491, 497, 504, 584], "describ": [505, 507, 524, 528, 535, 566, 593], "descript": [2, 118, 377, 445, 489, 501, 506, 507, 525, 572, 576, 592], "deseri": [141, 462], "design": [154, 201, 223, 228, 243, 327, 363, 490, 492, 495, 502, 504, 543, 552, 555, 583, 586, 596], "desir": [188, 214, 218, 256, 259, 489, 506, 507, 583, 592, 594], "despit": 496, "dest": 91, "destin": [134, 262, 276, 458, 473], "detach": [497, 592], "detail": [30, 150, 165, 218, 259, 340, 483, 484, 488, 489, 492, 493, 494, 495, 497, 499, 504, 506, 507, 523, 524, 529, 535, 536, 537, 541, 542, 543, 544, 547, 555, 564, 572, 573, 583, 589, 590, 591, 592, 593, 595, 596], "detect": [144, 146, 165, 187, 188, 270, 274, 323, 327, 332, 492, 500, 501, 547, 554, 555, 583, 595], "detection_box": [270, 323, 543, 597], "detection_boxes_list": [270, 323], "detection_class": [270, 323, 543, 597], "detection_classes_list": [270, 323], "detection_mask": [270, 323], "detection_scor": [270, 323, 543, 597], "detection_scores_list": [270, 323], "detection_typ": [270, 323], "detectionboxes_precis": [274, 327], "detectioncoco": 598, "detections_list": [270, 323], "detector": 144, "determin": [161, 167, 172, 183, 187, 188, 477, 486, 490, 496, 499, 501, 523, 583, 586], "determinist": 543, "dettmer": [491, 497, 589], "dev": [534, 557, 561], "develop": [136, 338, 487, 488, 500, 501, 524, 539, 543, 544, 546, 547, 553, 564, 570, 583, 584, 588, 591], "deviat": [218, 259, 528, 594], "devic": [2, 65, 75, 76, 77, 78, 79, 80, 83, 93, 117, 122, 133, 140, 141, 146, 162, 165, 166, 180, 184, 187, 188, 411, 420, 421, 422, 423, 424, 427, 431, 444, 449, 457, 462, 466, 478, 488, 491, 492, 497, 504, 506, 525, 529, 543, 544, 547, 550, 555, 564, 583, 585, 587, 589], "device_id": [141, 462], "devop": 500, "df": 91, "diag": 32, "diagnos": 528, "diagnosi": [134, 187, 188, 543, 567, 568, 569, 584, 590, 596], "diagnosis_help": 505, "diagnost": 566, "diagon": [32, 491, 589], "diagram": [506, 507, 528, 595], "dict": [2, 32, 102, 134, 135, 136, 141, 146, 147, 152, 157, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 201, 219, 225, 232, 233, 243, 262, 264, 269, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 309, 315, 318, 322, 323, 324, 325, 327, 328, 336, 358, 373, 376, 377, 380, 458, 460, 462, 465, 468, 469, 471, 473, 475, 482, 483, 491, 492, 493, 501, 506, 524, 533, 542, 583, 585, 586, 592, 593, 595], "dictionari": [53, 54, 56, 134, 135, 136, 141, 146, 186, 187, 188, 217, 258, 270, 277, 280, 282, 323, 399, 400, 402, 462, 483], "diff": 564, "differ": [129, 147, 151, 155, 176, 187, 188, 196, 204, 218, 220, 237, 246, 259, 265, 274, 280, 282, 291, 302, 327, 336, 338, 453, 460, 477, 491, 495, 497, 499, 501, 502, 506, 525, 526, 528, 529, 531, 532, 537, 538, 542, 543, 545, 557, 561, 566, 569, 572, 581, 583, 586, 589, 592, 593, 594, 595], "difficult": [489, 494, 496, 497, 505, 592], "difficulti": [489, 494, 497, 592], "diffus": [504, 584], "digit": [267, 320, 483, 584], "dilat": [44, 390], "dilated_contract": [62, 408], "dilatedcontract": [44, 390], "dim": [218, 259, 491, 497, 592, 594], "dimens": [53, 54, 91, 195, 218, 236, 259, 399, 400, 459, 491, 526, 529, 589, 594], "dir": [146, 202, 244, 478, 482, 526, 534, 537], "direct": [86, 171, 297, 429, 492, 583], "direct8bit": 12, "direct8bitoper": 12, "direct_q8": 17, "directli": [163, 187, 188, 201, 243, 270, 274, 298, 323, 327, 493, 504, 542, 543, 551, 583, 585, 586, 593], "directori": [187, 188, 203, 204, 245, 246, 336, 460, 478, 480, 482, 483, 526, 531, 534, 557, 559, 561, 562, 568, 570, 593], "dirty_decay_m": 550, "disabl": [134, 187, 188, 499, 564, 569, 588, 589, 592], "disable_al": [187, 188, 585], "disable_random": 134, "disappear": 593, "disc": 554, "discard": 525, "discord": 504, "discourag": 583, "discov": [523, 593], "discret": [4, 595], "discrimin": 598, "discuss": [492, 504], "dispatch": [506, 538, 571, 574], "dispatch_task": 574, "dispers": [528, 567], "displai": [187, 188, 315, 316, 373, 374, 483, 564, 567], "dist": [559, 562], "distanc": [483, 529], "distil": [154, 187, 188, 220, 227, 228, 266, 504, 532, 536, 538, 582, 596, 597], "distil_loss": [187, 188, 543], "distil_loss_conf": 529, "distilbert": [202, 244, 526, 544, 584, 598], "distillation_conf": [154, 260], "distillation_criterion": [530, 543, 582], "distillationcallback": 154, "distillationconfig": [187, 188, 468, 529, 530, 543, 582], "distilroberta": 598, "distinct": [487, 546], "distort": 506, "distribut": [2, 4, 129, 151, 187, 188, 193, 195, 196, 199, 200, 201, 221, 234, 236, 237, 241, 242, 243, 453, 459, 477, 491, 495, 497, 504, 506, 525, 529, 539, 559, 562, 566, 569, 577, 584, 586, 589, 590, 592, 596, 598], "distribute_calib_tensor": 2, "distributedoptim": 531, "distributedsampl": 531, "distutil": 534, "div_": [497, 592], "dive": [535, 596], "diverg": [4, 469, 477, 507, 523, 529, 595], "divid": [497, 525, 574, 592, 595], "divis": 32, "dl": [265, 275, 289, 294, 302, 328, 528, 537, 551, 564, 584, 598], "dlabel": 501, "dlrm": [274, 327], "dmlexecutionprovid": 586, "dnnl_primitive_cache_capac": 550, "dnnlexecutionprovid": [544, 586], "do": [154, 180, 187, 188, 201, 202, 243, 244, 260, 264, 267, 270, 300, 320, 323, 475, 482, 499, 506, 524, 526, 531, 535, 538, 542, 543, 559, 562, 583, 588, 590, 592, 595], "do_blockwis": 592, "do_constant_fold": [264, 475], "do_ev": [552, 553, 568, 575, 578, 579], "do_lower_cas": [202, 217, 218, 244, 258, 259, 526, 594], "do_train": 568, "doc": [169, 170, 187, 188, 297, 315, 316, 327, 358, 373, 374, 377, 483, 542, 543, 559, 562, 570], "doc_span_index": [218, 259], "doc_strid": [218, 259, 594], "doc_token": [218, 259], "docker": 504, "docstr": [188, 377], "docstyl": 500, "document": [218, 259, 377, 488, 493, 494, 497, 506, 507, 512, 531, 541, 544, 549, 559, 562, 563, 570, 571, 573, 583, 590, 594, 596], "doe": [267, 320, 376, 490, 491, 524, 525, 526, 542, 543, 589, 590, 594], "doesn": [141, 218, 259, 462, 488, 495, 505, 531, 543, 544, 565, 597], "dolli": [489, 541, 583, 592, 598], "domain": [90, 91, 187, 188, 583, 595], "don": [129, 151, 167, 187, 188, 453, 489, 490, 501, 570, 583, 595], "done": [497, 501, 529, 530, 548, 564, 573, 577, 578, 583, 586], "dong": 136, "dot": [488, 497, 544, 586], "dotdict": [184, 188, 338, 483], "doubl": [491, 584], "dowload_hf_model": [142, 464], "down": 558, "download": [142, 204, 246, 464, 526, 528, 539, 569, 575, 590], "download_url": [204, 246], "downstream": 583, "dq": [93, 95, 117, 431, 433, 444, 486, 490, 492, 497, 592], "draft": [559, 562], "draw": [525, 591, 595], "drive": 507, "driven": [338, 504, 543, 564, 581, 593], "drop": [184, 270, 298, 323, 488, 489, 491, 497, 500, 543, 544, 558, 583, 589, 592, 598], "drop_last": [196, 200, 237, 242, 459], "dropdown": 565, "dry_run": 531, "dscore": 501, "dtype": [31, 32, 88, 91, 187, 188, 205, 206, 214, 218, 247, 248, 256, 259, 459, 466, 478, 488, 491, 497, 504, 506, 507, 526, 528, 533, 535, 547, 569, 585, 586, 589, 592, 593, 594, 597], "dtype_map": 31, "dtype_to_nam": 31, "duc": 598, "due": [497, 507, 533, 583, 586, 592, 593], "dummi": [45, 165, 205, 206, 247, 248, 274, 327, 391, 459, 495, 504, 526, 536, 542, 543, 566], "dummy_biasadd": [62, 408], "dummy_dataset": [208, 250], "dummy_dataset_v2": [208, 250], "dummy_v2": [206, 248, 459, 526], "dummydataset": [205, 206, 247, 248, 459, 495], "dummydatasetv2": 459, "dump": [3, 139, 146, 152, 264, 339, 463, 475, 483, 495, 497, 500, 569, 586, 590, 593], "dump_class_attr": 483, "dump_data_to_loc": 483, "dump_elapsed_tim": [483, 505], "dump_fp32": [132, 456], "dump_op_typ": 3, "dump_tabl": 483, "dump_table_to_csv": 483, "dump_tim": 593, "duplic": [84, 94, 306, 362, 428, 432], "durat": [528, 573, 577, 578, 591], "dure": [2, 139, 141, 167, 171, 182, 187, 188, 297, 301, 338, 462, 463, 483, 489, 490, 492, 495, 497, 506, 528, 543, 545, 571, 581, 582, 583, 586, 592, 593, 597], "dyna": [188, 279, 502, 538, 585], "dynam": [141, 188, 193, 234, 264, 316, 374, 459, 462, 475, 491, 492, 505, 525, 529, 533, 538, 543, 547, 552, 553, 554, 555, 558, 564, 584, 595, 598], "dynamic_ax": [188, 264, 475, 533], "dynamic_length": [202, 244, 526], "dynamic_quant_export": [264, 475], "dynamicquantconfig": 486, "dynamo": [490, 492], "e": [141, 167, 187, 188, 462, 491, 497, 499, 500, 504, 529, 532, 536, 547, 552, 553, 557, 561, 583, 589, 592, 595], "e16": 500, "e2m1": [487, 491, 546, 589], "e2m3": [487, 546], "e3m2": [487, 546], "e4m3": [487, 546], "e5m2": [487, 546], "e8m0": [487, 546], "each": [127, 134, 136, 141, 146, 184, 187, 188, 200, 204, 207, 214, 218, 242, 246, 249, 256, 259, 268, 270, 271, 272, 309, 321, 323, 324, 325, 367, 379, 459, 462, 483, 491, 494, 497, 500, 505, 506, 507, 524, 526, 528, 529, 530, 535, 543, 549, 555, 558, 564, 572, 574, 581, 583, 587, 589, 591, 593, 594, 595, 596], "eager": [180, 300, 357, 486, 490, 491, 492, 504, 531, 538, 586, 588, 593], "earli": [187, 188, 497, 543, 586, 595, 597], "eas": [492, 495, 539, 549, 584], "easi": [202, 244, 302, 490, 492, 495, 533, 543, 567, 571, 584, 586, 589, 591], "easier": [557, 561, 564, 566, 584], "easili": [338, 496, 497, 505, 548, 552, 564, 581, 592], "echo": 550, "econom": 499, "ecosystem": [504, 584], "edg": 594, "edit": 499, "edouard": [497, 592], "edu": [4, 204, 246, 526], "educ": 499, "effect": [179, 490, 491, 505, 583, 584], "effici": [30, 150, 340, 490, 491, 497, 502, 504, 523, 525, 529, 547, 572, 582, 583, 584, 589, 592, 595], "efficientnet": 598, "efficientnet_b0": 598, "efficientnet_b3": 598, "effort": 543, "effortlessli": 571, "eg": [146, 204, 246, 526, 585], "eightbit": 593, "einop": 567, "either": [141, 188, 270, 323, 462, 490, 495, 496, 497, 548, 552, 572, 582, 585, 586], "elaps": 483, "electra": 598, "electron": 499, "elem_typ": 91, "element": [32, 169, 170, 184, 200, 242, 270, 297, 323, 459, 483, 487, 491, 497, 526, 538, 542, 546, 583, 589, 592], "elementwise_over_al": 184, "elementwise_over_matmul_gemm_conv": 184, "eleutherai": [489, 504, 541, 568, 592, 598], "elia": [491, 497, 589], "elimin": [52, 398, 571], "els": [2, 134, 188, 200, 242, 338, 458, 480, 552, 589, 593], "em": 598, "email": 504, "embed": [146, 523, 583], "embed_layernorm": 17, "embed_out": 583, "embedlayernorm": 13, "embedlayernormalizationoper": 13, "emerg": [487, 546, 592], "emnlp": [504, 584], "emot": 598, "empathi": 499, "empir": [129, 151, 453], "empow": [487, 546], "empti": [142, 187, 188, 464, 492, 550, 587], "emsp": 583, "emul": [492, 497, 543, 586], "en": 502, "enabl": [32, 95, 136, 172, 187, 188, 299, 433, 488, 490, 491, 506, 507, 531, 544, 547, 549, 552, 553, 555, 566, 568, 569, 571, 574, 583, 584, 592, 595], "enable_act": 136, "enable_al": [187, 188], "enable_auto_scal": [32, 589], "enable_bas": [187, 188], "enable_eager_execut": 531, "enable_extend": [187, 188], "enable_full_rang": [478, 587, 589], "enable_mse_search": [32, 589], "encapsul": [96, 191, 192, 232, 233, 328, 358, 434, 468, 545], "encod": [141, 270, 323, 462, 567, 594], "encodejp": 594, "encount": 525, "encrypt": 566, "end": [134, 172, 173, 174, 179, 187, 188, 202, 217, 218, 244, 258, 259, 299, 305, 359, 361, 458, 505, 506, 507, 529, 530, 535, 539, 543, 558, 574, 581, 583, 589, 593, 594, 595], "end_epoch": [543, 585, 597], "end_posit": [218, 259], "end_step": [172, 187, 188, 299, 543, 583, 585], "endlessli": 595, "energi": [487, 546], "english": 583, "enhanc": [523, 547, 583, 584, 588], "enjoi": [548, 552, 555], "enough": [495, 497, 586], "ensp": [526, 594], "ensur": [2, 218, 259, 306, 362, 490, 493, 531, 586, 594], "ensure_list": 2, "enter": [558, 564, 572], "entir": [358, 468, 489, 494, 501, 506, 507, 523, 571, 583], "entranc": [65, 194, 411], "entri": [53, 54, 56, 136, 157, 225, 265, 303, 399, 400, 402, 483, 492, 524, 540], "entropi": [187, 188, 523, 595], "enum": 2, "enumer": [281, 468, 487, 505, 529, 530, 531, 543, 546, 582, 583, 593], "env": [152, 219, 534, 577, 578, 579], "env_var": [152, 219], "environ": [31, 152, 219, 492, 499, 504, 522, 557, 561, 564, 572, 575, 577, 578, 579, 595], "eoferror": [139, 463], "ep": [4, 151, 544], "epoch": [154, 173, 174, 179, 260, 299, 468, 525, 529, 530, 531, 543, 582, 583, 597], "epsilon": 597, "equal": [91, 129, 134, 151, 377, 453, 483, 487, 546, 583, 589], "equal_dict": 483, "equat": [31, 272, 274, 325, 327, 497, 586, 592], "equival": [69, 415, 487, 489, 491, 494, 497, 504, 546, 584, 589, 592], "erf": [55, 401], "error": [32, 91, 136, 141, 274, 309, 327, 367, 462, 479, 491, 497, 528, 542, 548, 569, 570, 573, 589, 592, 595], "error_msg": 91, "eslint": [565, 570], "essenti": [523, 534], "estim": [134, 274, 327, 336, 460, 595], "estimator_sess": [336, 460], "et": [136, 487, 491, 497, 523, 546, 589, 592], "etc": [152, 154, 217, 258, 260, 265, 272, 289, 294, 302, 325, 328, 358, 482, 504, 529, 538, 566, 570, 583, 591, 595], "ethnic": 499, "euclidean": [483, 529], "eural_compressor": 338, "eval": [501, 524, 525, 528, 547, 586, 593], "eval_acc_fn": [488, 493, 495], "eval_arg": [488, 492, 493, 495], "eval_dataload": [152, 187, 188, 191, 192, 232, 233, 303, 304, 305, 306, 307, 309, 310, 311, 312, 328, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 468, 522, 537, 542, 543, 566, 586, 587, 595], "eval_dataset": 567, "eval_fn": [488, 492, 493, 494, 495, 496], "eval_fn_wrapp": 494, "eval_frequ": [154, 260], "eval_func": [126, 191, 192, 232, 233, 303, 304, 305, 306, 307, 309, 310, 311, 312, 328, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 377, 378, 468, 501, 525, 526, 528, 529, 530, 531, 543, 567, 586, 587, 588, 589, 595, 597], "eval_metr": [191, 192, 328, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 468, 542, 566, 586], "eval_result": 524, "evalu": [152, 154, 167, 187, 191, 192, 202, 219, 232, 233, 244, 260, 267, 270, 271, 272, 274, 276, 320, 323, 324, 325, 327, 328, 338, 358, 468, 471, 492, 494, 495, 496, 497, 502, 505, 506, 524, 526, 529, 530, 537, 538, 541, 542, 543, 544, 547, 553, 555, 558, 564, 581, 583, 586, 591, 592, 593, 595, 597], "evaluate_squad": [273, 326], "evaluation_result": 531, "evaluation_time_cost": 531, "even": [497, 587, 589, 592], "evenli": 525, "event": [499, 593], "ever": 570, "everi": [53, 54, 56, 167, 170, 172, 187, 188, 297, 299, 399, 400, 402, 491, 505, 525, 552, 557, 561, 587, 589, 595], "everyon": 499, "everyth": [184, 298, 552], "evid": 567, "evolutionari": 502, "exact": [271, 324], "exact_match_scor": [271, 324], "exactli": [531, 548], "exampl": [2, 32, 136, 141, 146, 152, 165, 166, 180, 187, 188, 202, 203, 204, 214, 218, 244, 245, 246, 256, 259, 270, 271, 272, 274, 300, 323, 324, 325, 327, 328, 338, 358, 376, 377, 462, 468, 482, 483, 489, 495, 496, 499, 504, 506, 507, 512, 537, 538, 547, 550, 551, 552, 555, 572, 575, 588, 590, 594, 595, 596, 599], "example_gener": 377, "example_index": [218, 259], "example_inp": 146, "example_input": [146, 187, 188, 264, 475, 482, 486, 489, 490, 491, 492, 533], "exampleclass": 377, "exce": [218, 259, 589, 594], "exceed": [336, 460], "excel": [497, 589], "except": [141, 377, 462, 483, 524, 570, 586, 587], "exchang": 533, "exclud": [187, 188, 505, 523, 588], "excluded_op_nam": [57, 58, 187, 188, 403, 404, 543, 583], "excluded_precis": [187, 188, 588], "exec": 504, "execut": [30, 31, 40, 141, 152, 172, 173, 174, 187, 188, 299, 303, 305, 357, 358, 359, 361, 386, 462, 468, 471, 482, 483, 490, 491, 497, 528, 529, 530, 543, 544, 549, 550, 557, 558, 564, 565, 566, 567, 571, 574, 582, 583, 586, 589, 591, 595, 598], "executionprovid": 598, "exemplifi": 583, "exhaust": [188, 282, 308, 366, 585], "exhaustivetunestrategi": [307, 364], "exist": [40, 152, 219, 336, 386, 460, 483, 488, 492, 533, 542, 551, 595], "exit": [187, 188, 305, 359, 361, 496, 543, 572, 577, 578, 579, 597], "exit_polici": [543, 597], "exp": [187, 188, 487, 543, 546, 583], "expanddim": [46, 392], "expanddims_optim": [62, 408], "expanddimsoptim": [46, 392], "expect": [204, 246, 491, 493, 497, 499, 500, 534, 541, 564, 586, 589, 595], "expens": [529, 543, 595], "experi": [495, 499, 547, 569, 591, 592, 595], "experiment": [319, 502, 526, 530, 531, 533, 539, 543, 583, 585, 586, 590, 594], "explain": [497, 507, 528, 592], "explicit": 499, "explicitli": [187, 188, 490, 537, 583], "explor": [487, 505, 546], "explos": [487, 546], "expon": [487, 546], "exporsingleimagedetectionboxestococo": [270, 323], "export": [87, 188, 266, 270, 323, 476, 486, 490, 504, 536, 550, 565, 567, 593, 596], "export_compressed_model": [478, 589], "exportconfig": 188, "exportdetectionstococo": [270, 323], "exported_model": [486, 490], "exportgroundtruthtococo": [270, 323], "exportsingleimagedetectionboxestococo": [270, 323], "exportsingleimagedetectionmaskstococo": [270, 323], "exportsingleimagedetectionstococo": [270, 323], "exportsingleimagegroundtruthtococo": [270, 323], "expos": 566, "express": [267, 320, 499], "ext": [557, 559, 561, 562, 563], "extend": [492, 506, 507], "extend_engin": [96, 434], "extens": [139, 141, 462, 463, 483, 488, 489, 490, 492, 497, 502, 504, 505, 524, 535, 538, 539, 541, 543, 544, 545, 548, 553, 554, 555, 559, 562, 563, 567, 583, 584, 586, 589, 592, 595, 596, 597], "extern": 566, "extra": [141, 272, 325, 462, 491, 543, 589], "extra_opset": 88, "extract": [53, 54, 56, 134, 165, 204, 246, 318, 376, 399, 400, 402, 526], "extract_data_typ": [318, 376], "extran": 524, "extrem": 523, "f": [141, 162, 462, 491, 497, 524, 529, 531, 586, 589, 592], "f1": [271, 273, 274, 324, 326, 327, 531, 542, 543, 567, 591, 598], "f1_score": [271, 272, 324, 325], "f5": 565, "face": [142, 464, 499, 504, 512, 547, 551, 571, 573, 584, 590, 598], "facebook": [489, 541, 570, 592, 598], "facil": [141, 462], "facilit": [524, 547], "fact": [497, 586], "factor": [4, 127, 379, 486, 489, 491, 495, 497, 589, 592, 598], "factori": 334, "fail": [141, 462, 501, 525, 533, 573], "failur": [500, 501], "fair": 499, "faith": 499, "fake": [30, 32, 99, 143, 150, 340, 376, 467, 491, 497, 543, 586, 589, 592], "fake_qu": [34, 74, 93, 117, 122, 381, 419, 431, 444, 449], "fake_quant": 100, "fakeaffinetensorquantfunct": [143, 467], "fakequ": [74, 419], "fakequant": 99, "fakequantizebas": 99, "falcon": [489, 504, 541, 583, 592, 598], "fall": [141, 146, 462, 487, 546], "fallback": [146, 188, 309, 310, 365, 367, 368, 488, 489, 490, 533, 544, 567, 588, 595], "fallback_list": 29, "fallback_ord": 146, "fallbacktuningsampl": [315, 373], "fals": [2, 3, 29, 30, 31, 32, 33, 34, 35, 57, 58, 75, 78, 85, 88, 89, 91, 99, 117, 122, 129, 132, 133, 134, 140, 141, 145, 146, 152, 155, 158, 187, 188, 193, 195, 199, 201, 202, 204, 214, 218, 219, 220, 221, 227, 234, 236, 241, 243, 244, 246, 256, 259, 270, 274, 323, 327, 338, 358, 377, 380, 381, 403, 404, 420, 422, 444, 449, 453, 456, 457, 458, 459, 462, 471, 478, 482, 483, 489, 491, 493, 495, 496, 505, 506, 525, 526, 535, 542, 543, 557, 561, 567, 575, 578, 579, 585, 586, 589, 592, 593, 594, 595, 597], "familiar": 596, "famou": [491, 497, 589], "faq": [499, 504], "far": 492, "fashionmnist": [204, 246, 526], "fast": [179, 187, 188, 491, 495, 583, 584, 589], "fast_bias_correct": [149, 187, 188, 586], "fastapi": 580, "fastbiascorrect": [148, 151], "faster": [525, 527, 533, 584, 595, 598], "fatal": 479, "father": [142, 165, 464], "fault": 500, "fault_tolerant_fil": 483, "fbgemm": [488, 544, 586], "fc": [146, 188, 583], "fc1": [146, 490], "fc2": [32, 146], "feasibl": [187, 188], "featur": [187, 188, 202, 203, 214, 218, 244, 245, 256, 259, 488, 493, 497, 500, 504, 522, 525, 527, 529, 543, 544, 545, 547, 551, 552, 555, 564, 566, 570, 583, 584, 590, 594], "feb": 584, "fed": 595, "feed": [134, 201, 243, 458, 529, 583], "feed_dict": [134, 201, 243, 458], "feedstock": [559, 562], "feedward": 176, "feel": [566, 570], "fefin": [192, 233], "feng": 540, "ferplu": 598, "fetch": [47, 146, 149, 196, 237, 393, 459, 506, 526, 577, 578, 579], "fetch_modul": 146, "fetch_weight_from_reshap": [62, 408], "fetcher": 238, "fetchweightfromreshapeoptim": [47, 393], "few": [583, 584, 592, 595], "ffffff": 595, "ffn": [144, 176], "ffn2_sparsiti": [163, 583], "ffn_modul": 176, "ffn_name": 176, "field": [187, 188, 204, 246, 270, 323, 487, 501, 505, 507, 531, 543, 546, 591, 595, 597], "field_nam": 483, "figur": [502, 557, 558, 561, 587], "file": [91, 134, 139, 141, 142, 146, 149, 158, 180, 184, 187, 188, 191, 192, 202, 203, 204, 207, 217, 218, 224, 227, 232, 233, 244, 245, 246, 249, 258, 259, 260, 265, 270, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 323, 328, 338, 345, 346, 349, 358, 458, 462, 463, 464, 482, 483, 491, 500, 502, 505, 506, 507, 531, 534, 537, 540, 542, 543, 545, 550, 559, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 577, 578, 579, 581, 585, 586, 589, 593, 594], "file_lik": [141, 462], "file_typ": 483, "filenam": [204, 246, 483, 526, 570], "filepath": [141, 462, 483, 524], "fill": [564, 591, 594, 595], "filter": [2, 202, 203, 204, 205, 206, 207, 209, 213, 244, 245, 246, 247, 248, 249, 251, 255, 459, 483, 507, 526, 538, 583, 593], "filter_registri": [211, 253], "filter_typ": [211, 253], "final": [141, 165, 172, 184, 299, 462, 490, 497, 506, 543, 550, 581, 583, 586, 590, 595], "find": [31, 53, 54, 56, 91, 134, 186, 274, 281, 306, 327, 362, 399, 400, 402, 458, 483, 496, 505, 528, 541, 550, 557, 561, 564, 565, 567, 569, 583, 589, 591, 592, 593, 595], "find_by_nam": 31, "find_lay": 186, "find_opset": 91, "find_pareto_front": 281, "fine": [178, 202, 244, 492, 524, 526, 550, 583, 584, 586], "finer": [497, 592, 595], "finest": [497, 592], "finetun": [491, 497, 567, 583, 589], "finish": [558, 574], "firewal": 566, "first": [129, 141, 146, 151, 166, 187, 188, 202, 244, 270, 316, 323, 363, 374, 453, 462, 483, 487, 488, 491, 497, 501, 502, 504, 505, 506, 507, 526, 528, 539, 544, 546, 549, 558, 559, 562, 565, 567, 568, 569, 585, 586, 588, 589, 591, 592, 593, 595, 597], "first_conv_or_matmul_quant": [187, 188, 586], "first_n": [132, 456], "fit": [152, 167, 187, 188, 306, 328, 358, 362, 377, 468, 501, 504, 522, 525, 526, 528, 531, 536, 537, 542, 543, 544, 545, 566, 567, 583, 586, 587, 588, 589], "fit_with_raw_cmd": 152, "fix": [134, 177, 179, 202, 244, 299, 458, 491, 525, 526, 551, 583, 586, 589, 595], "fix_ref_type_of_graph_def": [134, 458], "flag": [187, 188, 268, 321, 528], "flan": 583, "flatten_static_graph": 165, "flex": [504, 539], "flexibl": [265, 289, 294, 302, 491, 495, 504, 529, 571, 583, 589], "flip": [214, 218, 256, 259, 594], "float": [4, 31, 32, 126, 127, 136, 167, 172, 181, 184, 187, 188, 202, 214, 244, 256, 268, 270, 271, 272, 299, 321, 323, 324, 325, 373, 377, 378, 379, 480, 483, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 524, 526, 542, 546, 585, 586, 592, 594], "float16": [6, 9, 31, 466, 478, 491, 526, 589], "float16activationoper": 6, "float16binaryoper": 9, "float32": [205, 206, 218, 247, 248, 259, 270, 323, 459, 478, 491, 497, 505, 522, 526, 543, 586, 589, 592, 594], "float_dict": 136, "float_model": [136, 504], "float_to_bfloat16": 31, "float_to_float16": 31, "floatfunct": 501, "floor": [487, 546], "flop": [491, 497, 589], "flow": [271, 272, 324, 325, 497, 501, 502, 543], "flowchart": 595, "focu": [523, 595], "focus": [487, 491, 495, 499, 505, 546], "fold": [48, 49, 146, 264, 394, 395, 475, 489, 491, 535, 589, 592], "fold_batch_norm": [62, 408], "fold_const": [62, 408], "foldbatchnormnodesoptim": [48, 394], "folder": [134, 204, 209, 246, 251, 328, 358, 458, 482, 491, 492, 526, 552, 557, 561, 570, 577, 578, 579, 589, 593], "follow": [74, 96, 166, 204, 246, 267, 270, 320, 323, 419, 434, 487, 488, 489, 494, 497, 499, 500, 501, 502, 504, 505, 506, 507, 524, 525, 526, 529, 530, 531, 535, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 557, 561, 566, 568, 569, 572, 577, 582, 583, 585, 586, 589, 592, 593, 595], "footprint": [187, 188, 265, 289, 294, 302, 338, 530, 543, 581, 583, 585, 587], "forc": 588, "forfeit": 566, "forg": 534, "fork": [500, 559, 562], "form": [272, 325, 528, 529, 564], "format": [6, 31, 40, 134, 146, 187, 188, 202, 203, 204, 244, 245, 246, 264, 270, 276, 316, 323, 374, 377, 380, 386, 458, 475, 478, 487, 488, 490, 495, 497, 504, 506, 507, 524, 526, 531, 533, 542, 543, 544, 545, 546, 547, 569, 572, 584, 586, 589, 590], "format_vers": [139, 463], "formerli": 539, "formul": 543, "formula": [497, 583, 592], "forpytorch": 539, "fortensorflow": 539, "fortieth": 583, "forward": [2, 146, 184, 491, 497, 506, 543, 566, 583, 585, 586, 589, 592, 593], "forward_wrapp": 146, "foster": 499, "found": [154, 260, 488, 504, 524, 529, 541, 544, 552, 569, 573, 592, 595, 598], "foundat": 584, "four": [486, 490, 496, 574, 593, 598], "fp1": [497, 592], "fp16": [32, 188, 316, 374, 465, 466, 497, 586], "fp2": [497, 592], "fp32": [29, 30, 32, 65, 117, 122, 129, 146, 151, 187, 188, 191, 192, 232, 233, 263, 264, 274, 309, 316, 327, 363, 367, 374, 411, 444, 449, 453, 471, 474, 475, 478, 482, 483, 488, 489, 490, 491, 493, 495, 497, 500, 505, 507, 528, 535, 536, 541, 542, 543, 544, 554, 566, 567, 568, 569, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598], "fp32_acc": 555, "fp32_baselin": [471, 505], "fp32_graph": [129, 453], "fp32_model": [134, 136, 146, 264, 475, 483, 489, 490, 494, 495, 505, 587, 589], "fp32_model_path": 587, "fp32_onnx_config": 533, "fp32_onnx_path": [264, 475], "fp32_op": [34, 36, 93, 381, 382, 431], "fp32_tensor": 483, "fp4": [487, 491, 504, 546, 589], "fp6": [487, 546], "fp8": [487, 492, 504, 546, 584], "fpath": [204, 246], "frac": [487, 497, 528, 546, 592], "fraction": [214, 256, 594], "fragment": 505, "framework": [2, 152, 155, 157, 162, 168, 172, 175, 179, 180, 189, 190, 194, 195, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 218, 220, 221, 225, 230, 231, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 259, 265, 274, 275, 302, 310, 316, 327, 328, 329, 330, 332, 368, 374, 471, 488, 490, 495, 496, 497, 504, 505, 507, 523, 524, 528, 531, 532, 536, 537, 538, 539, 542, 543, 544, 566, 567, 583, 584, 586, 590, 593, 594, 595, 596, 597, 598], "framework_dataset": [204, 246], "framework_nam": 524, "framework_specific_info": [33, 380, 505], "frantar": [491, 497, 583, 589], "free": [30, 150, 179, 191, 192, 232, 233, 340, 358, 489, 494, 497, 499, 553, 558, 566, 574, 581, 591, 592], "freez": [74, 75, 76, 134, 419, 420, 458, 486, 490, 547, 583], "freeze_fake_qu": [81, 425], "freeze_valu": [81, 425], "freeze_value_without_calib": 81, "freezefakequantopoptim": [74, 419], "freezevaluetransform": [75, 420], "freezevaluewithoutcalibtransform": 76, "frequenc": [154, 172, 187, 188, 260, 299, 543, 583, 597], "frequent": 539, "friendli": [487, 497, 535, 543, 546, 584, 592, 596, 597], "from": [2, 31, 47, 53, 54, 56, 91, 134, 141, 142, 146, 152, 154, 155, 161, 162, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 196, 199, 202, 203, 204, 205, 206, 207, 209, 214, 220, 221, 224, 232, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 260, 262, 263, 264, 267, 270, 271, 272, 276, 281, 297, 298, 299, 301, 316, 318, 320, 323, 324, 325, 328, 336, 338, 358, 374, 376, 377, 393, 399, 400, 402, 458, 459, 460, 462, 464, 468, 471, 473, 474, 475, 478, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 505, 507, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 538, 541, 542, 544, 545, 546, 547, 551, 552, 553, 555, 565, 567, 569, 570, 574, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "from_dict": 493, "from_logit": 597, "from_pretrain": [478, 504, 543], "front": [281, 502], "frontend": [559, 562, 572, 579], "frontend_grpc": 572, "frozen": [328, 336, 358, 460, 545], "frozen_func": [134, 458], "frozen_pb_sess": [336, 460], "fuel": [487, 546], "full": [31, 202, 203, 204, 244, 245, 246, 478, 483, 491, 504, 523, 526, 528, 534, 540, 565, 570, 583, 589, 590], "fulli": [303, 493, 543, 572, 586, 592], "fulltoken": [217, 258], "fun": 377, "func": [134, 146, 458, 483, 586, 597], "func_dict": 471, "function": [125, 126, 139, 153, 173, 174, 179, 187, 188, 191, 192, 203, 232, 233, 245, 277, 280, 289, 294, 340, 378, 452, 463, 476, 488, 490, 491, 492, 495, 497, 500, 501, 502, 505, 506, 507, 522, 525, 529, 530, 533, 537, 538, 541, 542, 543, 544, 555, 565, 571, 572, 583, 586, 589, 590, 591, 592, 593, 595, 596], "function1": 377, "function2": 377, "function3": 377, "fundament": [493, 494, 523, 543], "funnel": 598, "funsd": [567, 598], "further": [56, 188, 402, 488, 497, 499, 504, 544, 545, 547, 549, 558, 564, 586], "fuse": [2, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 77, 78, 79, 80, 82, 117, 122, 145, 146, 150, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 421, 422, 423, 424, 426, 444, 449, 501, 592, 593], "fuse_biasadd_add": [62, 408], "fuse_column_wise_mul": [62, 408], "fuse_conv_redundant_dequant": [81, 425], "fuse_conv_requant": [81, 425], "fuse_conv_with_math": [62, 408], "fuse_decomposed_bn": [62, 408], "fuse_decomposed_in": [62, 408], "fuse_gelu": [62, 408], "fuse_layer_norm": [62, 408], "fuse_matmul_redundant_dequant": [81, 425], "fuse_matmul_requant": [81, 425], "fuse_pad_with_conv": [62, 408], "fuse_pad_with_fp32_conv": [62, 408], "fuse_qdq_bn": [116, 443], "fuse_qdq_concatv2": [116, 443], "fuse_qdq_conv": [116, 443], "fuse_qdq_deconv": [116, 443], "fuse_qdq_in": [116, 443], "fuse_qdq_matmul": [116, 443], "fuse_qdq_pool": [116, 443], "fuse_reshape_transpos": [62, 408], "fusebiasaddandaddoptim": [50, 396], "fusecolumnwisemuloptim": [51, 397], "fuseconvredundantdequantizetransform": [77, 421], "fuseconvrequantizetransform": [78, 422], "fuseconvwithmathoptim": [52, 398], "fusedbatchnorm": [67, 413], "fusedbatchnormv2": [67, 413], "fusedbatchnormv3": [109, 119, 436, 446], "fusedbatcnormv3": [56, 402], "fusedecomposedbnoptim": [53, 399], "fusedecomposedinoptim": [54, 400], "fusedinstancenorm": [113, 440], "fusedmatmul": 19, "fusedmatmuloper": 19, "fusegeluoptim": [55, 401], "fuselayernormoptim": [56, 402], "fusematmulredundantdequantizetransform": [79, 423], "fusematmulrequantizedequantizenewapitransform": [80, 424], "fusematmulrequantizedequantizetransform": [80, 424], "fusematmulrequantizenewapitransform": [80, 424], "fusematmulrequantizetransform": [80, 424], "fusenodestartwithconcatv2": [110, 120, 437, 447], "fusenodestartwithconv2d": [111, 121, 438, 448], "fusenodestartwithdeconv2d": [112, 439], "fusenodestartwithfusedbatchnormv3": [109, 119, 436, 446], "fusenodestartwithfusedinstancenorm": [113, 440], "fusenodestartwithmatmul": [114, 123, 441, 450], "fusenodestartwithpool": [115, 124, 442, 451], "fusepadwithconv2doptim": [57, 403], "fusepadwithfp32conv2doptim": [58, 404], "fusetransposereshapeoptim": [59, 405], "fusion": [45, 47, 56, 64, 95, 112, 113, 114, 117, 118, 119, 123, 391, 393, 402, 410, 433, 439, 440, 441, 444, 445, 446, 450, 494, 501, 505, 535], "futur": [150, 191, 192, 221, 232, 233, 492, 538, 541, 543, 555, 577, 578, 579, 596], "fvcore": 567, "fw": 506, "fwk": 332, "fwk_name": 524, "fx": [146, 187, 310, 368, 486, 488, 490, 538, 544, 553, 554, 568, 584, 586, 588], "fx_model": 146, "fx_sub_module_list": 135, "fx_white_list": 146, "g": [91, 141, 167, 187, 188, 462, 491, 497, 500, 529, 532, 536, 547, 552, 583, 589, 590, 592, 595], "gain": [558, 582, 584], "gan": 584, "gap": [491, 528, 545], "gather": [2, 17, 187, 188, 297], "gatheroper": 14, "gaudi": 504, "gaudi2": 504, "gauid2": 504, "gaussian": [306, 362, 595], "gavgpool": 17, "gcc": 598, "gcp": [574, 584], "gelu": [55, 401], "gemm": [17, 187, 188], "gemm_to_matmul": [187, 188, 586], "gemmoper": 16, "gen": [488, 497, 541, 544, 584, 586, 588], "gen_bar_updat": [204, 246], "gender": 499, "gener": [2, 34, 35, 73, 108, 134, 146, 152, 165, 184, 191, 192, 193, 201, 204, 205, 206, 207, 218, 232, 233, 234, 243, 246, 247, 248, 249, 259, 267, 275, 306, 320, 328, 354, 358, 362, 377, 381, 458, 459, 468, 487, 488, 489, 491, 492, 493, 497, 500, 501, 505, 507, 525, 529, 542, 543, 544, 546, 547, 552, 557, 559, 561, 562, 564, 566, 567, 581, 583, 584, 586, 588, 589, 592, 593, 594, 595], "generaltopk": [274, 327], "generate_activation_observ": 146, "generate_feed_dict": [134, 458], "generate_ffn2_pruning_config": 163, "generate_mha_pruning_config": 163, "generate_prefix": 152, "generate_pruner_config": 184, "generategraphwithqdqpattern": [93, 431], "generator1": 377, "geomean": 538, "gestalt": 584, "get": [2, 30, 31, 32, 53, 54, 56, 90, 91, 134, 142, 146, 152, 157, 158, 161, 162, 163, 165, 168, 175, 181, 182, 183, 184, 188, 196, 218, 219, 225, 227, 237, 259, 264, 297, 299, 301, 309, 316, 318, 327, 336, 358, 367, 374, 376, 399, 400, 402, 458, 459, 460, 464, 471, 475, 478, 480, 483, 489, 492, 497, 506, 523, 534, 538, 539, 541, 543, 550, 567, 569, 577, 578, 584, 589, 592, 595, 596, 599], "get_absorb_lay": 146, "get_activ": [158, 227], "get_adaptor_nam": [318, 376], "get_algorithm": 471, "get_all_config_set_from_config_registri": 524, "get_all_fp32_data": 483, "get_all_pending_task": 574, "get_architectur": [152, 219], "get_attribut": 165, "get_blob_s": 32, "get_block_prefix": 146, "get_bounded_thread": [152, 219], "get_children": [142, 464], "get_common_modul": 165, "get_const_dim_count": [53, 54, 399, 400], "get_core_id": [152, 219], "get_criterion": 161, "get_dataload": 504, "get_depth": 146, "get_dict_at_depth": 146, "get_element_under_depth": 146, "get_embedding_contigu": 146, "get_estimator_graph": 134, "get_example_input": 146, "get_fallback_ord": 146, "get_final_text": [218, 259], "get_framework_nam": 2, "get_func_from_config": 471, "get_graph_def": [134, 458], "get_hidden_st": 146, "get_index_from_strided_slice_of_shap": 91, "get_input_output_node_nam": [134, 458], "get_lay": 184, "get_max_supported_opset_vers": 90, "get_metr": 471, "get_model_fwk_nam": 332, "get_model_input_shap": [134, 458], "get_model_path": 480, "get_model_typ": [336, 460], "get_modul": [142, 464], "get_module_input_output": 146, "get_mse_order_per_fp32": 146, "get_mse_order_per_int8": 146, "get_named_children": [142, 464], "get_node_map": [264, 475], "get_node_original_nam": 31, "get_node_statu": 574, "get_number_of_socket": 483, "get_observer_dict": 593, "get_op_list": 483, "get_op_type_by_nam": 146, "get_pattern": [168, 297], "get_physical_id": [152, 219], "get_postprocess": 471, "get_preprocess": 471, "get_prun": [175, 299], "get_quant_dequant_output": 30, "get_quantizable_onnx_op": [264, 475], "get_quantizable_ops_from_cfg": 146, "get_reg": 181, "get_reg_typ": 181, "get_schedul": [182, 301], "get_schema": 90, "get_siz": 483, "get_sparsity_ratio": 184, "get_sparsity_ratio_tf": 184, "get_statu": 574, "get_subgraphs_from_onnx": 91, "get_super_module_by_nam": [142, 464], "get_tensor_by_nam": [134, 458], "get_tensor_histogram": 483, "get_tensor_val_from_graph_nod": 134, "get_tensor_valu": 593, "get_tensorflow_node_attr": 91, "get_tensorflow_node_shape_attr": 91, "get_tensorflow_tensor_data": 91, "get_tensorflow_tensor_shap": 91, "get_tensors_info": 483, "get_tf_criterion": 183, "get_thread": [152, 219], "get_threads_per_cor": [152, 219], "get_torch_vers": 146, "get_torchvision_map": [218, 259], "get_tuning_histori": 483, "get_weight_from_input_tensor": 134, "get_weight_scal": 32, "get_weights_detail": 483, "get_woq_tuning_config": 496, "getenv": 524, "getmtim": 567, "gholami": 583, "gigant": [489, 494, 592], "git": [500, 528, 534, 539, 566, 568, 569, 571, 572], "github": [4, 136, 169, 170, 180, 202, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 491, 500, 504, 526, 528, 532, 539, 540, 543, 553, 559, 562, 566, 568, 569, 570, 571, 572, 575, 578, 579, 590], "give": [506, 564, 595], "given": [2, 4, 31, 53, 54, 56, 90, 91, 102, 134, 142, 146, 186, 218, 259, 270, 323, 358, 399, 400, 402, 464, 492, 496, 502, 507, 583, 592, 594], "glob": 567, "global": [101, 167, 187, 188, 283, 284, 286, 287, 288, 297, 376, 483, 491, 493, 501, 543, 583, 585, 595], "global_config": [184, 283, 284, 286, 287, 288], "global_st": 483, "global_step": [172, 299], "globalaveragepool": 15, "globalaveragepooloper": 15, "glue": [267, 274, 320, 327, 526, 542, 543, 553], "gluon": [2, 328, 358, 545], "glx": 534, "go": [535, 559, 562, 570, 585, 589, 594], "goal": [152, 260, 265, 289, 294, 302, 328, 358, 496, 497, 506, 525, 582, 586, 595], "good": [493, 499, 586, 595], "googl": [488, 504, 524, 544, 584], "googleapi": [536, 566, 569], "googlenet": 598, "got": [134, 458, 506, 534, 593], "governor": 550, "gp": [306, 362], "gpt": [489, 504, 541, 568, 583, 592, 598], "gptq": [32, 492, 497, 524, 541, 587, 589], "gptq_arg": 589, "gptq_config": 589, "gptq_config_path": 589, "gptq_g128asym": 589, "gptq_g32asym": 589, "gptq_g32asym_disable_last_matmul": 589, "gptq_quantiz": 32, "gptqconfig": [491, 496], "gptqw4g128asym": 598, "gptqw4g128sym": 598, "gptqw4g32asym": 598, "gptqw4g32sym": 598, "gpu": [75, 76, 83, 141, 187, 188, 420, 427, 462, 491, 495, 504, 522, 538, 543, 544, 549, 555, 564, 585, 586, 587], "gracefulli": 499, "grad": [174, 179], "gradient": [161, 283, 491, 497, 504, 538, 543, 583, 584, 598], "gradient_accumulation_step": 543, "gradient_sensit": 285, "gradientcriterion": 161, "gradientsensitivityprun": 283, "gradual": [182, 301, 583], "grain": [178, 492, 583, 584, 595], "gram": [268, 321], "granular": [487, 497, 505, 506, 507, 535, 538, 546, 550, 586, 592, 597], "graph": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 116, 118, 122, 125, 128, 129, 131, 132, 133, 134, 165, 201, 243, 265, 329, 336, 357, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 443, 445, 449, 452, 453, 455, 456, 457, 458, 460, 486, 490, 497, 501, 505, 526, 529, 531, 537, 545, 547, 566, 569, 586, 587, 588, 593], "graph_bas": 73, "graph_convert": 97, "graph_converter_without_calib": 97, "graph_cse_optim": [62, 408], "graph_def": [40, 126, 127, 134, 263, 328, 336, 357, 358, 378, 379, 386, 458, 460, 474], "graph_def_sess": [336, 460], "graph_nam": 88, "graph_node_name_map": 134, "graph_optim": 266, "graph_optimization_conf": 265, "graph_optimization_level": [187, 188, 585, 586], "graph_output": 91, "graph_rewrit": 97, "graph_sess": [336, 460], "graph_transform_bas": [131, 455], "graph_util": 97, "graphanalyz": [96, 434], "graphconvert": [34, 381], "graphconverterwithoutcalib": 35, "graphcseoptim": [60, 406], "graphdef": [60, 134, 336, 357, 406, 458, 460, 545], "graphfoldconstantoptim": [49, 395], "graphmodul": [146, 501, 588], "graphrewriterbas": [72, 418], "graphrewriterhelp": [96, 434], "graphtransform": [130, 454], "graphtransformbas": [130, 454], "grappler": [61, 407, 535], "grappler_optim": 535, "grappler_pass": [62, 408], "grappleroptim": [61, 407], "great": 547, "greater": [134, 483, 495, 577, 583, 595], "greatest": 595, "greatli": [491, 587, 589], "grei": 587, "grid": [188, 282, 502, 583], "gridsearch": 282, "ground": [271, 272, 324, 325], "ground_truth": [271, 272, 324, 325], "groundtruth": [187, 188, 270, 323], "groundtruth_box": [270, 323], "groundtruth_boxes_list": [270, 323], "groundtruth_class": [270, 323], "groundtruth_classes_list": [270, 323], "groundtruth_dict": [270, 323], "groundtruth_is_crowd": [270, 323], "groundtruth_mask": [270, 323], "group": [32, 181, 284, 491, 497, 504, 538, 583, 589, 593, 594, 595, 598], "group_dim": 589, "group_lasso": 285, "group_norm": 533, "group_siz": [32, 143, 146, 376, 467, 491, 496, 589], "grouplasso": 181, "grouplassoprun": 284, "groupnorm": 592, "grow": [491, 497, 589], "grown": 583, "growth": [487, 488, 543, 544, 546, 583], "grpc": [571, 572, 576, 577, 578, 580], "grpc_api_port": [572, 577, 578, 579], "gt": [489, 491, 526, 592, 594], "guangxuan": [491, 497, 589, 592], "guarante": [187, 188, 543], "guess_output_rank": 31, "gui": [528, 538, 569, 583], "guid": [202, 244, 495, 501, 504, 524, 526, 529, 539, 547, 555, 564, 599], "guidelin": [503, 504], "gz": [204, 246, 526, 528, 559, 562], "h": [32, 187, 188, 218, 259, 531, 572, 573, 577, 578, 579, 594], "h384": 598, "h5": 545, "ha": [53, 54, 56, 60, 141, 171, 172, 219, 267, 297, 299, 320, 377, 399, 400, 402, 406, 462, 488, 493, 495, 497, 500, 502, 505, 506, 507, 525, 533, 538, 543, 544, 550, 564, 569, 570, 572, 575, 583, 585, 586, 588, 591, 592, 595], "habana": 504, "habana_visible_devic": 504, "habanalab": 504, "hack": [267, 320], "haihao": [540, 583], "half": [465, 466, 488, 491, 544, 555], "halfprecisionconvert": 465, "halfprecisionmodulewrapp": 466, "hand": [492, 495, 502], "handl": [47, 134, 150, 153, 393, 458, 479, 501, 503, 524, 525, 572, 592], "handler": [483, 595], "hanj": 4, "hanwen": 540, "happen": 528, "harass": 499, "hard": [188, 525, 528], "hardswish": 533, "hardtanh": 592, "hardwar": [487, 490, 504, 505, 529, 538, 543, 546, 564, 583, 584, 585], "harm": 499, "harmon": [272, 274, 325, 327], "has_zp": 32, "hash": [570, 573], "hassoun": 583, "hat": 598, "hatch": 562, "have": [4, 60, 69, 127, 134, 141, 162, 166, 168, 175, 200, 221, 242, 267, 270, 297, 299, 320, 323, 327, 358, 376, 377, 379, 406, 415, 458, 462, 487, 488, 489, 491, 496, 497, 499, 500, 506, 507, 524, 525, 526, 528, 531, 535, 540, 542, 543, 544, 546, 547, 564, 567, 570, 572, 577, 578, 579, 581, 583, 586, 587, 589, 592, 595, 596], "haven": 583, "hawq": [136, 365, 595], "hawq_metr": 137, "hawq_top": 136, "hawq_v2": [188, 366], "hawq_v2_loss": 595, "hawq_v2tunestrategi": 365, "hbm": 539, "he": 505, "head": [163, 165, 169, 176, 184, 491, 583], "head_mask": 176, "header": [483, 534], "headless": 558, "health": 573, "healthi": 573, "heavi": [491, 530], "height": [171, 214, 218, 256, 259, 297, 531, 594, 597], "hellaswag": 598, "hello": 565, "helloworld": [526, 544, 594], "help": [146, 158, 227, 276, 496, 497, 524, 541, 545, 547, 553, 564, 572, 577, 578, 579, 589, 595, 596], "helper": [31, 96, 102, 134, 146, 202, 203, 204, 217, 244, 245, 246, 258, 262, 263, 264, 336, 434, 458, 460, 473, 474, 475, 481], "henc": 585, "here": [270, 323, 377, 489, 490, 494, 495, 497, 506, 526, 531, 532, 533, 535, 536, 541, 542, 552, 559, 562, 564, 567, 570, 572, 586, 590, 591, 592, 598], "herebi": 592, "herlper": [125, 452], "hesit": 583, "hessian": [32, 136, 365, 491, 589, 595], "hessian_trac": 136, "hessiantrac": 136, "heterogen": 584, "heurist": [547, 564], "hf": [142, 464, 541, 592, 598], "hf_model": [572, 576, 578, 579], "hf_models_grpc": [576, 579], "hicham": 491, "hidden": [166, 171, 297, 505], "high": [31, 205, 206, 247, 248, 459, 495, 526, 528, 539, 569, 584, 595], "higher": [187, 188, 191, 192, 232, 233, 281, 328, 358, 468, 497, 501, 528, 529, 533, 542, 567, 583, 586, 589, 591], "higher_is_bett": [187, 188, 327, 358, 595, 597], "highest": [569, 575, 595], "highli": [491, 584, 589], "highlight": 501, "hint": 483, "histogram": [4, 469, 483, 566, 593], "histogramcollector": 4, "histori": [187, 188, 482, 483, 564, 568, 595], "history_cfg": 482, "hoc": [267, 320], "hold": [270, 306, 323, 362, 526], "holder": [209, 251, 526], "home": 550, "hook": [136, 154, 158, 176, 227, 228, 289, 294, 471, 529, 530, 543, 583, 592, 593], "hope": 533, "horizont": [218, 259, 594], "horovod": 531, "host": [504, 531, 572, 574, 577, 578, 579], "host1": [572, 577, 578], "host2": [572, 577, 578], "host_ip": 573, "hostconst": [83, 427], "hostfil": [572, 574, 577, 578, 579], "hostnam": 572, "hour": 595, "hous": 572, "hover": 564, "how": [32, 141, 154, 161, 167, 173, 174, 179, 187, 188, 218, 259, 260, 297, 462, 490, 491, 492, 493, 494, 495, 497, 500, 501, 503, 505, 525, 526, 529, 530, 531, 537, 542, 543, 558, 559, 562, 563, 564, 566, 577, 578, 579, 583, 584, 586, 592, 594, 595, 596, 597], "howev": [141, 462, 491, 497, 570, 583, 589, 592], "howpublish": 540, "hpo": [191, 232, 583], "hpoconfig": 188, "hqq": 492, "hqqconfig": 491, "ht": 598, "html": [501, 504, 506, 523, 531, 538, 559, 562, 565, 567, 573, 577, 586], "htmllabel": 595, "http": [4, 136, 161, 169, 170, 179, 180, 202, 204, 244, 246, 267, 268, 270, 271, 272, 297, 299, 300, 320, 321, 323, 324, 325, 327, 358, 491, 501, 526, 528, 536, 539, 540, 543, 553, 559, 562, 566, 568, 569, 570, 571, 572, 575, 577, 578, 579, 583, 590], "hub": [142, 464, 504, 532, 536, 555], "hue": 594, "hug": [142, 464, 504, 571, 584], "huge": [530, 569, 583, 587], "huggingfac": [165, 176, 202, 244, 478, 487, 526, 532, 536, 546, 552, 553, 554, 555, 575, 576, 578, 579, 592, 598], "huggingface_model": [180, 300, 568], "human": 595, "hvd": [274, 327, 531], "hybirdblock": [328, 358], "hybridblock": 545, "hyper": [159, 491, 597], "hyperparamet": [187, 188, 315, 497, 591, 592, 595], "hypjudi": 567, "i": [2, 31, 32, 34, 35, 37, 40, 41, 46, 50, 56, 68, 71, 91, 118, 129, 134, 136, 139, 141, 145, 146, 151, 152, 154, 157, 158, 161, 165, 166, 172, 177, 178, 179, 180, 181, 183, 184, 187, 188, 191, 192, 193, 200, 201, 202, 203, 204, 205, 206, 209, 211, 214, 218, 219, 221, 225, 227, 228, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 256, 259, 267, 270, 272, 274, 276, 281, 289, 294, 298, 299, 303, 310, 320, 323, 325, 327, 328, 338, 345, 346, 349, 358, 363, 368, 376, 377, 381, 383, 386, 387, 392, 396, 402, 414, 417, 445, 453, 458, 459, 462, 463, 468, 478, 482, 483, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 514, 517, 520, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 557, 558, 559, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598], "ia": 529, "ic": [539, 584], "id": [152, 217, 219, 258, 267, 269, 270, 271, 272, 320, 322, 323, 324, 325, 504, 542, 572, 573, 577, 578, 579, 591, 595], "idea": [497, 504, 566, 583, 592, 595], "ident": [60, 66, 166, 406, 412, 499, 529], "identifi": [53, 54, 56, 141, 270, 323, 336, 399, 400, 402, 460, 462, 496, 572, 583, 589], "idx": [281, 526], "idx1": [204, 246, 526], "idx3": [204, 246, 526], "ieee": [136, 488, 497, 544, 592], "ignor": [483, 491, 497, 523, 526, 589, 592, 595], "ignore_attr": 483, "ignore_kei": 483, "ii": 595, "illinoi": 4, "illustr": [506, 507, 530, 595], "ilsvr2012": 528, "ilsvrc2012": 502, "imag": [203, 204, 207, 209, 214, 218, 245, 246, 249, 251, 256, 259, 270, 323, 497, 504, 526, 531, 533, 583, 585, 592, 593, 594, 598], "image_format": [209, 251, 526], "image_height": [270, 323], "image_id": [270, 323, 542], "image_list": [207, 249, 526], "image_nam": 526, "image_recognit": [528, 569, 593], "image_tensor": [543, 597], "image_width": [270, 323], "imageclassifi": [204, 246], "imagefold": [204, 246, 526, 531, 543], "imagenet": [204, 207, 214, 246, 249, 256, 493, 502, 528, 543, 553, 569, 583, 593, 594, 597, 598], "imagenet_dataset": [208, 250], "imagenet_transform": [215, 257], "imagenetraw": [207, 249, 526], "imagerecord": [526, 531, 597], "imageri": 499, "img": 504, "img1": [207, 249, 526], "img2": [207, 249, 526], "img_dir": [203, 245, 526], "img_raw": 569, "imgx": [207, 249, 526], "iml": 584, "immedi": [557, 561, 583], "impact": [365, 583, 590, 595], "imper": 501, "implement": [96, 129, 133, 141, 191, 192, 197, 200, 201, 202, 204, 232, 233, 239, 242, 243, 244, 246, 267, 320, 328, 338, 358, 365, 434, 453, 457, 462, 468, 491, 507, 525, 526, 542, 543, 555, 565, 583, 586, 589, 590, 593, 595, 597], "implicitli": [141, 462], "import": [134, 152, 187, 188, 276, 328, 338, 358, 377, 458, 468, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 502, 504, 507, 522, 525, 526, 528, 529, 530, 531, 533, 536, 542, 543, 544, 545, 546, 547, 551, 553, 566, 567, 575, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596], "importerror": [139, 463, 534], "improv": [178, 490, 491, 497, 500, 523, 524, 543, 547, 564, 565, 567, 583, 584, 586, 588, 589, 595, 596, 598], "in_graph": [134, 458], "in_graph_is_binari": [134, 458], "in_mp": 31, "inappropri": 499, "inc": [218, 259, 495, 496, 499, 504, 506, 541, 547, 554, 564, 566, 571, 584, 585, 590, 595], "inc_auto": 554, "inc_model": [533, 545], "incdataset": 567, "incept": [569, 598], "inception_v3": [569, 593], "inceptionv3": 593, "inceptionv3_dump_tensor": 593, "inceptionv3_fp32_pretrained_model": [569, 593], "incid": 499, "incit": [489, 592], "includ": [139, 155, 161, 165, 167, 181, 183, 187, 188, 202, 204, 211, 218, 220, 244, 246, 253, 259, 265, 275, 297, 302, 377, 463, 483, 491, 492, 495, 496, 499, 505, 506, 507, 525, 526, 528, 539, 540, 541, 542, 543, 547, 550, 553, 558, 570, 574, 577, 578, 579, 583, 586, 588, 589, 593, 595], "include_lay": 469, "include_nod": 2, "include_tensors_kl": 2, "include_tensors_minmax": 2, "inclus": 499, "incom": 574, "incompat": 534, "incorpor": [491, 506, 507, 530, 583, 595], "incorrect": [141, 462], "increas": [187, 188, 487, 491, 527, 538, 546, 547, 564, 569, 589, 595], "increasingli": 583, "increment": 595, "incub": 4, "incur": [487, 546], "independ": [176, 353, 357, 507], "index": [53, 54, 56, 91, 152, 184, 188, 196, 200, 204, 237, 242, 246, 281, 399, 400, 402, 459, 483, 497, 526, 542, 565, 569, 589, 592], "indexdataset": [200, 242], "indexerror": [139, 463], "indexfetch": [196, 237, 459], "indic": [141, 154, 187, 188, 196, 200, 202, 237, 242, 244, 260, 270, 281, 323, 459, 462, 495, 501, 525, 534, 567, 572, 593], "individu": [127, 167, 297, 353, 357, 379, 497, 499, 572, 583, 592], "industri": [542, 584], "infer": [2, 31, 91, 126, 146, 165, 265, 302, 336, 338, 358, 378, 460, 468, 488, 489, 490, 491, 494, 495, 497, 504, 505, 506, 523, 529, 530, 543, 544, 564, 581, 583, 584, 586, 589, 592, 593, 595], "infer_onnx_shape_dtyp": 91, "infer_shap": 31, "inferenc": [487, 546], "influenc": [146, 583], "info": [31, 146, 169, 170, 184, 216, 221, 226, 297, 332, 478, 479, 483, 501, 524, 528, 545, 574, 579], "inform": [2, 136, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 221, 223, 224, 232, 233, 297, 299, 300, 301, 303, 327, 339, 483, 487, 489, 491, 495, 499, 500, 503, 504, 505, 506, 507, 508, 510, 514, 517, 520, 523, 524, 529, 535, 543, 545, 546, 559, 562, 565, 566, 569, 570, 572, 573, 577, 578, 583, 588, 589, 590, 592, 593, 597, 598, 599], "infrastructur": 527, "ingest": [270, 323], "inherit": [154, 155, 177, 178, 182, 187, 199, 218, 220, 228, 241, 259, 299, 301, 502, 505, 506, 526], "init": [1, 5, 30, 149, 156, 162, 164, 185, 526, 542, 595], "init_quantize_config": 102, "initi": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 30, 31, 32, 91, 102, 134, 141, 155, 172, 191, 192, 199, 202, 220, 232, 233, 241, 244, 298, 299, 316, 358, 374, 458, 462, 468, 495, 497, 502, 507, 526, 542, 563, 583, 586, 592, 595], "initial_op_tuning_cfg": [315, 373], "initial_spars": [585, 597], "initial_tuning_cfg_with_quant_mod": [316, 374], "initialize_name_count": 91, "inject": [45, 391, 543], "injectdummybiasaddoptim": [45, 391], "inlin": [134, 458, 547, 552, 555], "inner": 502, "innov": [504, 555, 584], "inplac": [30, 340, 492], "input": [2, 3, 30, 31, 32, 40, 46, 50, 53, 54, 56, 57, 58, 60, 68, 69, 71, 72, 91, 95, 96, 102, 108, 127, 134, 135, 143, 145, 146, 150, 165, 166, 184, 187, 188, 191, 192, 202, 203, 204, 206, 214, 217, 218, 223, 232, 233, 244, 245, 246, 248, 256, 258, 259, 262, 263, 264, 327, 328, 332, 336, 340, 358, 379, 386, 392, 396, 399, 400, 402, 403, 404, 406, 414, 415, 417, 418, 433, 434, 458, 459, 460, 467, 468, 473, 474, 475, 478, 480, 482, 483, 486, 490, 491, 492, 497, 502, 505, 506, 522, 523, 525, 526, 528, 529, 530, 531, 533, 535, 537, 542, 543, 544, 545, 547, 552, 583, 585, 586, 589, 592, 593, 594, 597], "input2tupl": 146, "input_data": [30, 525], "input_desc": 2, "input_dtyp": 91, "input_fil": [218, 259], "input_fn": [134, 336, 460], "input_func": 146, "input_graph": [117, 122, 129, 354, 357, 444, 449, 453, 505], "input_graph_def": [53, 54, 56, 399, 400, 402], "input_id": [202, 218, 244, 259, 543], "input_mask": [218, 259, 543], "input_model": [289, 294, 545, 567, 568, 569, 593], "input_model_tensor": 483, "input_nam": [53, 54, 88, 128, 188, 263, 264, 336, 399, 400, 460, 474, 475, 533], "input_name_to_nod": [262, 473], "input_node_map": [53, 54, 399, 400], "input_node_nam": [70, 117, 122, 134, 416, 444, 449, 458], "input_output_nam": [61, 407], "input_pb": [130, 132, 133, 454, 456, 457], "input_scal": [143, 467], "input_shap": [91, 206, 248, 459, 526], "input_tensor": [134, 336, 458, 460], "input_tensor_data": 484, "input_tensor_ids_op_nam": 146, "input_tensor_nam": [134, 336, 458, 460], "input_valu": 146, "inputbatch": [218, 259], "inputfeatur": [202, 218, 244, 259], "inputs_as_nchw": [128, 263, 474], "insecur": [141, 462, 566], "insert": [63, 91, 93, 95, 99, 132, 150, 409, 431, 433, 456, 490, 491, 492, 494, 497, 501, 506, 525, 538, 543, 547, 583, 586, 588, 589, 592, 593], "insert_log": [131, 455], "insert_newlin": 483, "insert_print_nod": [62, 408], "insert_qdq_pattern": [92, 430], "insertlog": [132, 456], "insertprintminmaxnod": [63, 409], "inset": 543, "insid": [270, 323, 529, 530, 565, 583, 587, 595], "insight": [188, 480, 504, 528, 584, 590, 595, 596], "inspect": [590, 593], "inspect_result": 568, "inspect_sav": 568, "inspect_tensor": 505, "inspect_typ": 505, "inspir": [491, 589], "instal": [495, 531, 534, 536, 547, 549, 552, 555, 559, 562, 564, 565, 567, 568, 569, 599], "instanc": [101, 102, 152, 187, 188, 191, 192, 219, 232, 233, 271, 272, 274, 277, 280, 283, 284, 286, 287, 288, 306, 318, 324, 325, 327, 328, 358, 362, 376, 468, 480, 483, 491, 499, 500, 501, 505, 522, 543, 549, 555, 589, 595, 597, 598], "instance_norm": 533, "instancenorm": [54, 400, 592], "instances_val2017": [203, 245, 526], "instanti": 582, "instead": [188, 201, 243, 483, 490, 550, 552, 555, 570, 583, 589], "institut": [204, 246], "instruct": [488, 489, 497, 506, 507, 529, 539, 544, 559, 562, 566, 567, 568, 569, 583, 584, 585, 586, 592, 598], "instrument": 593, "insult": 499, "int": [2, 4, 30, 31, 32, 91, 126, 134, 144, 146, 163, 187, 188, 201, 202, 203, 214, 218, 243, 244, 245, 256, 259, 263, 264, 268, 270, 274, 281, 321, 323, 327, 339, 347, 353, 357, 376, 377, 378, 458, 474, 475, 478, 483, 491, 495, 504, 524, 525, 526, 542, 543, 575, 585, 589, 594], "int32": [478, 491, 526, 589], "int4": [497, 504, 541, 586, 598], "int64": 526, "int8": [6, 7, 31, 32, 73, 109, 110, 111, 117, 119, 120, 121, 122, 129, 134, 151, 152, 187, 188, 214, 256, 262, 263, 264, 316, 318, 374, 376, 436, 437, 438, 444, 446, 447, 448, 449, 453, 473, 474, 475, 482, 483, 487, 489, 491, 492, 493, 495, 497, 500, 501, 504, 505, 506, 507, 522, 526, 530, 535, 541, 543, 544, 546, 549, 552, 554, 555, 558, 564, 567, 569, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597], "int8_acc": 555, "int8_conv_config": 506, "int8_model": [263, 264, 474, 475, 505], "int8_model_path": 587, "int8_node_name_revers": 134, "int8_onnx_config": [188, 533], "int8_sequ": [34, 381], "int_label": 542, "int_max": 31, "integ": [154, 171, 172, 187, 188, 260, 270, 274, 281, 297, 299, 323, 327, 377, 489, 491, 494, 497, 505, 507, 523, 586, 589, 592, 595], "integerop": 598, "integr": [134, 155, 220, 458, 492, 495, 497, 505, 543, 565, 566, 571, 589], "intel": [157, 169, 170, 180, 222, 225, 261, 266, 273, 274, 297, 300, 308, 314, 319, 326, 327, 342, 358, 366, 372, 472, 485, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 502, 503, 505, 506, 507, 523, 526, 527, 529, 530, 532, 533, 535, 536, 540, 541, 544, 545, 547, 552, 554, 555, 566, 567, 568, 569, 571, 572, 581, 582, 583, 584, 586, 588, 589, 590, 592, 593, 595, 596, 597, 598], "intel_extension_for_pytorch": 490, "intel_extension_for_transform": 554, "intelcaff": 584, "intellig": 584, "intelon": 584, "inteltensorflow": [207, 209, 249, 251], "intend": 500, "inter": [187, 188], "inter_area": [214, 256], "inter_num_of_thread": [187, 188, 353, 357, 543, 585], "inter_pol": [214, 256], "interact": [570, 591], "interest": [499, 504, 566, 593], "interfac": [72, 99, 265, 289, 294, 302, 303, 418, 471, 488, 490, 492, 495, 497, 538, 543, 555, 573, 586, 590], "interleav": [203, 245, 526], "intermedi": [31, 136, 155, 187, 188, 220, 497, 501, 538, 586], "intermediatelayersknowledgedistillationloss": [155, 220], "intermediatelayersknowledgedistillationlossconfig": [188, 529], "intern": [136, 200, 242, 316, 374, 459, 525, 526, 542, 583], "internal_pattern": [316, 374], "internet": [204, 246, 526, 566], "interpol": [178, 218, 259, 542, 583, 594], "intersect": [274, 327, 505, 542], "interv": [178, 583], "intra": [187, 188], "intra_num_of_thread": [187, 188, 353, 357, 543, 585], "introduc": [60, 406, 491, 497, 505, 506, 507, 535, 543, 586, 589, 590, 592, 596], "introduct": 596, "intuit": [491, 497, 589, 592], "inturn": 542, "inuput": 31, "invalid_lay": 167, "invent": [497, 586], "invers": [491, 589], "investig": [499, 524, 569], "invok": [270, 323, 506], "involv": 490, "io": [2, 141, 462, 491, 570], "iou": [274, 327], "iou_thr": [270, 274, 323, 327, 542], "iou_typ": [270, 323], "ip": 572, "ipc": 504, "ipex": [146, 187, 188, 482, 488, 489, 538, 541, 543, 544, 549, 553, 554, 592], "ipex_config": 146, "ipex_config_path": 146, "ipexmodel": 337, "ir_vers": 30, "is_asymmetr": 506, "is_b_transpos": 31, "is_ckpt_format": [134, 458], "is_contigu": 292, "is_fused_modul": 146, "is_glob": [167, 297], "is_imposs": [218, 259], "is_int8_model": 482, "is_large_model": 31, "is_list_or_tupl": 91, "is_measur": 338, "is_model_quant": 2, "is_onnx_domain": 91, "is_perchannel": 506, "is_qat": 145, "is_quant": 593, "is_saved_model_format": [134, 458], "is_subgraph": 88, "isa": [488, 555], "isiter": 2, "isn": [53, 54, 56, 399, 400, 402], "issu": [497, 499, 500, 503, 504, 539, 567, 569, 586, 593], "item": [31, 184, 187, 188, 217, 258, 298, 316, 374, 497, 523, 531, 583, 592, 595], "item_list": 31, "item_typ": [316, 374], "itemstyl": 595, "iter": [2, 3, 91, 126, 134, 146, 152, 166, 172, 179, 182, 187, 188, 191, 192, 196, 200, 204, 205, 221, 232, 233, 237, 242, 246, 247, 299, 301, 328, 339, 358, 378, 458, 459, 468, 471, 491, 495, 496, 501, 502, 505, 522, 525, 526, 543, 583, 585, 586, 592, 593, 595, 597], "iter_bar": 543, "iter_op": [134, 458], "iterabledataset": [200, 204, 242, 246], "iterablefetch": [196, 237, 459], "iterablesampl": [200, 242, 459], "iteration_list": 505, "iterativeschedul": [182, 301], "iterator_sess_run": [134, 458], "itex": [33, 95, 187, 188, 263, 380, 433, 474, 495, 544, 586, 592], "itex_mod": [33, 34, 75, 93, 117, 122, 380, 381, 420, 431, 444, 449], "itex_qdq_mod": [57, 58, 403, 404], "itrex": [187, 188, 489, 592], "its": [31, 46, 82, 134, 136, 165, 174, 177, 179, 184, 188, 198, 204, 218, 240, 246, 259, 262, 268, 269, 299, 306, 321, 322, 362, 392, 426, 473, 491, 496, 497, 499, 526, 529, 540, 542, 544, 555, 557, 561, 564, 565, 583, 589, 591, 594, 595], "itself": [552, 583], "j": [489, 497, 504, 541, 568, 583, 592, 598], "jan": 584, "jason": 592, "jbla": 32, "jeffrei": 523, "jemalloc": 558, "ji": [491, 497, 589], "jit": [165, 187, 490, 547, 549, 554, 592, 593], "jitbasicsearch": 165, "jitter": 594, "jlpm": [557, 561], "join": [504, 567, 572, 577, 578], "joint": 584, "jonathanhuang": [270, 323], "journei": 584, "jpeg": 594, "jpg": [203, 207, 209, 245, 249, 251, 504, 526], "json": [146, 203, 218, 245, 259, 482, 491, 526, 545, 565, 572, 573, 577, 578, 579, 589, 594], "json_file_path": 482, "juli": 584, "jun": 584, "june": [504, 584], "jupyt": [555, 557, 558, 561], "jupyterlab": [504, 547, 553, 555, 557, 561, 596], "just": [83, 193, 216, 218, 221, 223, 224, 226, 234, 259, 338, 427, 459, 490, 495, 497, 502, 543, 554, 558, 564, 572, 582, 586, 592, 594, 595], "k": [274, 327, 358, 542, 566, 583], "k_block": 32, "kd": 529, "keep": [141, 176, 184, 298, 363, 462, 501, 505, 524, 563, 564, 590], "keep_mask_lay": 167, "keepdim": [497, 592], "kei": [134, 136, 141, 142, 165, 176, 184, 187, 188, 281, 298, 336, 377, 460, 462, 464, 469, 471, 483, 491, 497, 504, 506, 566, 567, 573, 584, 589, 593, 595], "kept": [171, 297], "kera": [56, 102, 157, 165, 184, 188, 204, 211, 225, 246, 253, 331, 336, 402, 460, 493, 495, 506, 525, 531, 545, 554, 555], "keras_amp": 554, "keras_inc": 554, "keras_model": 330, "keras_sess": [336, 460], "kerasbasepattern": 167, "kerasbaseprun": 172, "kerasbasicprun": 173, "kerasmodel": [331, 460], "keraspatternnxm": 171, "kernel": [32, 150, 187, 188, 491, 505, 506, 595], "keutzer": 583, "key_layer_nam": 176, "keynot": 584, "keyword": [141, 188, 462], "kim": 583, "kind": [146, 543], "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 584, "kl": [2, 4, 187, 188, 469, 477, 506, 507, 523, 535, 543, 595, 597], "kl_diverg": 476, "klcalibr": 4, "kmp_affin": 550, "kmp_blocktim": 550, "know": [221, 524, 531, 590], "knowledg": [154, 155, 187, 188, 220, 260, 494, 530, 532, 536, 538, 543, 545, 597], "knowledgedistillationframework": [155, 220], "knowledgedistillationloss": [155, 220, 543, 597], "knowledgedistillationlossconfig": [187, 188, 529, 530, 543, 582], "known": [141, 221, 306, 362, 462, 487, 543, 546, 583, 586, 593, 595], "kriz": [204, 246, 526], "kullback": [507, 529], "kwarg": [3, 31, 91, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 123, 142, 146, 163, 187, 188, 204, 216, 218, 223, 226, 246, 259, 315, 317, 327, 328, 329, 331, 333, 335, 336, 337, 339, 341, 358, 373, 375, 377, 436, 437, 438, 439, 440, 441, 442, 445, 446, 448, 450, 460, 464, 465, 468, 478, 479, 482, 483, 525], "kwon": 583, "l": [491, 523, 529, 593, 595], "l1": 188, "l12": 598, "l2": [188, 583], "l6": 598, "l954": [267, 320], "l983": [267, 320], "lab": [557, 558, 559, 561, 562], "label": [187, 188, 191, 192, 202, 204, 205, 206, 207, 210, 214, 218, 223, 232, 233, 244, 246, 247, 248, 249, 252, 256, 259, 267, 269, 274, 320, 322, 327, 328, 358, 459, 468, 495, 501, 525, 526, 528, 542, 543, 586, 594], "label_fil": [202, 218, 244, 259, 526, 594], "label_list": [202, 244, 274, 327], "label_map": 542, "label_path": 528, "label_shap": [206, 248, 459, 526], "label_shift": [214, 256, 594], "labelbal": 526, "labelbalancecocorawfilt": [210, 252], "labelbalancecocorecordfilt": [210, 252], "labelshift": [214, 256, 594], "labextens": [557, 558, 561], "lack": [525, 534], "lake": [488, 539, 544, 584], "lambada": [489, 592], "lambada_openai": [541, 598], "lambda": [141, 462, 587], "lamini": [489, 583, 592], "land": 584, "languag": [30, 150, 267, 320, 340, 487, 489, 491, 492, 494, 495, 497, 499, 504, 533, 546, 568, 584, 587, 589, 592], "laplacian": 491, "larei": 583, "larg": [30, 31, 150, 340, 487, 489, 491, 492, 494, 495, 497, 504, 525, 529, 543, 546, 584, 587, 589, 592, 598], "larger": [491, 497, 506, 583, 589, 592], "lasso": [181, 284, 538, 583], "lassounbalanc": 598, "last": [146, 161, 184, 187, 188, 488, 489, 491, 525, 544, 547, 549, 554, 558, 586, 589, 592], "last_batch": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525], "last_conv_or_matmul_quant": [187, 188, 586], "latenc": [591, 595], "later": [141, 150, 462, 486, 488, 524, 571, 572, 593], "latest": [492, 504, 539, 584, 590], "latin1": [141, 462], "launch": [544, 565, 570], "launch_task": 574, "launcher": [502, 504, 529, 530, 555, 596], "layer": [33, 102, 103, 104, 105, 107, 108, 138, 140, 142, 150, 155, 158, 163, 165, 166, 167, 171, 176, 184, 186, 187, 188, 220, 227, 297, 298, 380, 461, 464, 469, 471, 483, 489, 490, 491, 497, 504, 505, 506, 507, 530, 538, 567, 583, 589, 590, 596], "layer1": [165, 187, 188, 543, 583, 586], "layer2": [165, 543, 583, 586], "layer3": [543, 583], "layer_1": 166, "layer_2": 166, "layer_idx": 184, "layer_input": 184, "layer_map": [155, 188, 220, 529], "layer_nam": [188, 583], "layer_norm": 533, "layer_tensor": 469, "layer_wis": [482, 587], "layer_wise_qu": [137, 188, 587], "layerhistogramcollector": 469, "layernorm": [56, 402, 497, 592], "layerwisequ": 140, "layout": [40, 386], "layoutlmv2": 598, "layoutlmv3": [567, 598], "lazi": 483, "lazyimport": 483, "ld_preload": 550, "lead": [187, 188, 488, 491, 495, 497, 524, 529, 543, 544, 569, 583, 589, 592], "leadership": 499, "leaf": 593, "leaky_relu": 533, "leakyrelu": [41, 387, 592], "learn": [487, 488, 491, 495, 497, 504, 505, 506, 525, 526, 533, 537, 538, 539, 543, 544, 546, 547, 549, 552, 553, 555, 558, 559, 562, 564, 583, 584, 586, 592, 593, 595, 596], "learning_r": [187, 188, 543, 585, 597], "least": [180, 300, 500, 543, 583, 595], "leav": [102, 558], "lee": 583, "left": [214, 218, 256, 259, 497, 558, 564, 592, 594], "legaci": 285, "legal": [504, 599], "leibler": [507, 529], "len": [136, 188, 218, 259, 526, 531, 594], "length": [176, 187, 188, 202, 218, 244, 259, 270, 323, 491, 497, 526, 542, 584, 586, 589, 594], "less": [41, 134, 146, 187, 188, 387, 483, 522, 529, 543, 571, 583], "let": [507, 535, 552, 583, 585, 597], "level": [32, 165, 363, 377, 479, 487, 497, 499, 546, 574, 592, 595], "levelwis": 165, "leverag": [61, 407, 478, 486, 490, 493, 496, 497, 502, 504, 529, 533, 547, 564, 582, 586, 589, 595], "lib": 550, "libgl": 534, "libgl1": 534, "libglib2": 534, "libiomp5": 550, "libjemalloc": 550, "librari": [166, 222, 266, 319, 353, 485, 488, 495, 504, 539, 543, 544, 549, 558, 564, 584, 586], "licens": 500, "lie": [502, 523], "lieu": [557, 561], "light": 530, "lightn": [504, 554], "lightweight": 583, "like": [60, 82, 84, 134, 141, 165, 184, 188, 191, 192, 193, 204, 232, 233, 234, 246, 265, 274, 299, 302, 303, 327, 336, 358, 406, 426, 428, 458, 459, 460, 462, 468, 491, 495, 497, 500, 501, 502, 505, 506, 528, 529, 530, 538, 552, 567, 569, 582, 583, 586, 589, 590, 592, 595], "limit": [139, 306, 362, 463, 483, 487, 491, 492, 495, 504, 528, 529, 541, 546, 586, 589, 590, 593], "lin": [491, 497, 589], "line": [506, 524, 531, 538, 547, 552, 553, 572, 593], "linear": [31, 143, 146, 150, 163, 165, 166, 171, 176, 184, 186, 187, 188, 297, 467, 489, 490, 491, 497, 501, 529, 533, 543, 583, 589, 592, 595], "linear2linearsearch": 165, "linear_lay": 176, "linear_pattern": 166, "linearcompress": 166, "linearcompressioniter": 166, "linearli": 31, "link": [187, 188, 202, 244, 327, 358, 492, 523, 526, 533, 557, 561, 564, 589, 598], "linkedin": 584, "lint": 570, "linux": [522, 534, 558, 564], "list": [2, 30, 31, 32, 40, 91, 126, 134, 135, 136, 144, 146, 152, 165, 166, 171, 176, 180, 184, 186, 187, 188, 191, 192, 196, 202, 214, 218, 219, 232, 233, 237, 244, 256, 259, 263, 264, 267, 268, 270, 271, 272, 274, 281, 289, 294, 297, 300, 315, 320, 321, 323, 324, 325, 327, 328, 336, 339, 340, 345, 346, 349, 358, 373, 377, 378, 386, 458, 460, 468, 469, 474, 475, 483, 489, 494, 495, 501, 504, 505, 526, 533, 535, 539, 541, 543, 547, 552, 554, 557, 558, 561, 569, 572, 574, 575, 581, 583, 585, 586, 588, 592, 593, 595], "listen": 566, "liter": 377, "llama": [489, 504, 541, 583, 584, 587, 589, 592, 598], "llama2": 504, "llamanorm": 592, "llm": [126, 127, 378, 379, 487, 489, 490, 491, 494, 497, 546, 583, 584, 587, 589, 592], "llm_weight_minmax": [93, 431], "lm": [491, 583], "lm_head": [491, 583, 589], "lm_head_config": 491, "ln": 534, "load": [134, 139, 141, 142, 202, 217, 218, 244, 258, 259, 328, 336, 358, 458, 460, 463, 464, 482, 483, 495, 506, 525, 557, 561, 565, 567, 585, 586, 587, 592], "load_and_cache_exampl": [202, 244], "load_data_from_pkl": 483, "load_empty_model": [142, 464, 587], "load_huggingfac": [476, 543], "load_layer_wise_quantized_model": [142, 464], "load_saved_model": [336, 460], "load_state_dict": [141, 462], "load_tensor": [142, 464], "load_tensor_from_shard": [142, 464], "load_vocab": [217, 258], "load_weight_onli": 482, "loadannot": [270, 323], "loaded_model": 491, "loader": [2, 126, 191, 192, 232, 233, 328, 358, 378, 468, 478, 525, 586], "loc": [141, 462], "local": [167, 187, 188, 297, 483, 491, 493, 557, 561, 566, 573, 574, 583, 591], "local_config": [184, 187, 188, 283, 284, 286, 287, 288], "local_config_fil": [33, 380], "localhost": [570, 572, 577, 578], "locat": [141, 147, 184, 218, 259, 462, 490, 495, 531, 550, 557, 561, 564, 572, 586, 590, 594, 597], "lock": [177, 287, 288, 538, 582, 583], "log": [132, 152, 153, 165, 345, 346, 349, 456, 479, 501, 555, 577, 578, 579, 591, 593, 595], "log2": [487, 546], "log_fil": [152, 352, 356], "log_interv": 531, "logdir_spec": 593, "logger": [295, 469, 476, 483], "logic": [492, 597], "login": [504, 559, 562, 591], "logit": 529, "loglevel": 595, "logo": 540, "long": [218, 259, 491, 524, 534, 589, 594], "long_str": 524, "longer": [202, 218, 244, 259, 526, 594], "longest": [218, 259, 594], "look": [134, 176, 494, 505, 507, 535, 542, 566, 567, 569, 592, 597], "lookup": 165, "loop": [468, 501, 502, 506, 507, 535, 574, 591, 595], "loss": [30, 155, 187, 188, 220, 265, 274, 289, 294, 302, 327, 468, 488, 490, 491, 495, 497, 523, 528, 529, 530, 531, 532, 541, 542, 543, 544, 555, 567, 569, 582, 583, 584, 586, 589, 592, 595, 597], "loss_func": [162, 180], "loss_sum": 543, "loss_typ": [155, 187, 188, 220, 543, 597], "loss_weight": [155, 187, 188, 220, 543, 597], "lossi": [497, 586], "lot": [497, 501, 569, 592], "low": [31, 191, 192, 205, 206, 232, 233, 247, 248, 265, 275, 302, 328, 459, 488, 491, 496, 497, 505, 506, 522, 523, 526, 531, 543, 544, 569, 584, 586, 589, 592, 595], "low_memory_usag": 188, "lower": [217, 218, 258, 259, 272, 325, 363, 486, 487, 490, 495, 497, 530, 546, 583, 584, 586, 592, 594, 595], "lowerbitssampl": 373, "lowercas": [202, 244, 526], "lowest": [583, 595], "lpot": [584, 590], "lr": [187, 188, 491, 529, 531, 543], "lr_schedul": [543, 583], "lstm": 17, "lstmoper": 18, "lt": [502, 526], "lvwerra": 598, "m": [31, 136, 169, 170, 187, 188, 297, 500, 529, 539, 547, 549, 552, 555, 559, 562, 572, 583, 598], "mac": [502, 565], "machin": [267, 320, 491, 533, 539, 550, 564, 566, 572, 584, 592, 593], "maco": 539, "made": [365, 497, 505, 586, 590, 595], "mae": [274, 327, 542], "magnitud": [161, 183, 187, 188, 274, 285, 327, 538, 583], "magnitude_progress": [187, 188], "magnitudecriterion": [161, 183], "magnitudeprun": 299, "mahonei": 583, "mai": [4, 134, 139, 141, 283, 284, 286, 287, 288, 377, 458, 462, 463, 488, 491, 494, 497, 499, 500, 506, 523, 524, 528, 533, 534, 540, 544, 557, 561, 567, 570, 572, 584, 586, 589, 592, 595], "mail": 499, "main": [4, 157, 176, 180, 225, 300, 491, 492, 493, 495, 497, 501, 525, 528, 531, 543, 551, 553, 565, 574, 583, 586, 589], "mainli": [154, 182, 228, 301, 497, 504, 543, 583, 586], "mainstream": [504, 596], "maintain": [274, 327, 490, 491, 495, 497, 499, 500, 524, 545, 547, 559, 562, 566, 571, 572, 583, 589, 590], "mainten": 505, "major": [497, 537, 569, 586, 592], "make": [31, 91, 129, 151, 167, 172, 180, 182, 200, 242, 297, 299, 301, 453, 483, 489, 491, 494, 497, 499, 505, 506, 522, 524, 525, 535, 542, 543, 552, 557, 561, 564, 566, 583, 586, 587, 588, 589, 591, 592, 595], "make_dquant_nod": 31, "make_matmul_weight_only_nod": 32, "make_modul": 2, "make_nam": 91, "make_nc_model": 2, "make_nod": 31, "make_onnx_inputs_output": 91, "make_onnx_shap": 91, "make_quant_nod": 31, "make_sub_graph": 30, "make_symbol_block": 2, "makeiter": [134, 458], "malici": [141, 462], "malloc_conf": 550, "manag": [468, 471, 543, 547, 548, 558], "mandatori": [191, 192, 232, 233, 358, 543, 597], "mani": [32, 327, 358, 491, 495, 497, 524, 525, 539, 589, 595, 597], "manifest": 565, "manipul": [88, 89], "manner": [525, 529, 545], "manual": [204, 246, 526, 547, 553, 555, 558, 572, 577, 578, 579, 583], "mao": 523, "map": [2, 31, 91, 134, 141, 146, 188, 218, 259, 262, 264, 265, 269, 271, 272, 274, 289, 294, 299, 302, 322, 324, 325, 327, 462, 473, 475, 491, 497, 524, 526, 531, 542, 543, 557, 561, 569, 583, 586, 589], "map_kei": [274, 327], "map_loc": [141, 462], "map_numpy_to_onnx_dtyp": 91, "map_onnx_to_numpy_typ": 91, "map_point": [270, 274, 323, 327, 542], "map_tensorflow_dtyp": 91, "mar": 584, "mark": 523, "market": 564, "marketplac": [504, 565, 584], "mask": [0, 161, 167, 169, 172, 174, 178, 179, 202, 244, 270, 299, 323, 583, 598], "mask_padding_with_zero": [202, 244], "mask_shap": [292, 293], "massiv": 583, "master": [4, 169, 170, 180, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 543, 595], "match": [64, 88, 141, 165, 270, 271, 323, 324, 410, 462, 490, 504, 529, 565, 589], "match_datatype_pattern": 146, "matcher": 565, "math": [52, 398, 497, 586], "mathemat": [489, 494, 497, 592], "matmul": [17, 32, 39, 45, 51, 59, 80, 95, 114, 123, 171, 187, 188, 297, 385, 391, 397, 405, 424, 433, 441, 450, 535, 567, 589, 595], "matmul_weight_only_nod": 32, "matmulfpq4": 32, "matmulnbit": 32, "matmuloper": 19, "matric": [497, 592], "matrix": [32, 327, 358, 494, 497, 504, 555, 596], "matter": [200, 242, 588], "max": [31, 90, 129, 151, 187, 188, 218, 259, 271, 272, 306, 324, 325, 362, 453, 483, 487, 491, 495, 497, 504, 528, 539, 543, 546, 567, 569, 583, 586, 589, 592, 594, 595], "max_answer_length": [218, 259, 594], "max_column": 567, "max_dim": [218, 259, 594], "max_filter_tensor": 483, "max_grad_norm": 543, "max_inclusive_opset_vers": 90, "max_input_chars_per_word": [217, 258], "max_length": [202, 244], "max_min_data": [75, 76, 420], "max_num_class": [270, 323], "max_ord": [268, 321], "max_output": 501, "max_query_length": [218, 259, 594], "max_row": 567, "max_seq_length": [202, 218, 244, 259, 526, 594], "max_sparsity_ratio_per_lay": [299, 585], "max_sparsity_ratio_per_op": [167, 172, 187, 188, 543, 583], "max_trial": [187, 188, 488, 496, 543, 595], "maxim": [543, 583, 595], "maximum": [41, 167, 172, 187, 188, 202, 218, 244, 259, 268, 299, 306, 321, 336, 362, 387, 460, 491, 497, 507, 523, 526, 528, 543, 583, 586, 592, 594], "maxpool": [17, 115, 124, 442, 451, 535], "maxpooloper": 20, "mbzuai": [489, 592], "mckinstri": 523, "md": [169, 170, 187, 188, 297, 327, 358], "md5": [204, 246], "mean": [30, 32, 167, 176, 187, 188, 214, 218, 256, 259, 272, 274, 297, 309, 325, 327, 340, 367, 491, 493, 497, 501, 506, 507, 525, 528, 531, 535, 542, 543, 550, 569, 583, 586, 587, 589, 592, 594, 595, 597, 598], "mean_valu": [214, 256, 594], "meaning": [543, 582], "meanwhil": 587, "measur": [134, 219, 328, 458, 477, 491, 495, 497, 502, 505, 522, 528, 529, 542, 543, 589, 593, 595], "mechan": [139, 161, 463, 583, 591, 596], "media": [499, 584], "median": [126, 378], "medium": 584, "meet": [188, 194, 303, 305, 359, 361, 491, 493, 495, 496, 497, 501, 506, 581, 584, 585, 586, 589, 593, 595], "mem": 491, "member": [499, 505], "memomeri": 140, "memori": [60, 146, 265, 289, 294, 302, 338, 406, 483, 487, 488, 489, 491, 494, 497, 523, 525, 530, 543, 544, 546, 547, 581, 583, 586, 587, 589, 592, 595, 598], "memory_format": 547, "mention": [491, 497, 583, 589], "merg": [94, 195, 236, 316, 374, 432, 459, 559, 562, 593, 595], "merge_duplicated_qdq": [92, 430], "mergeduplicatedqdqoptim": [94, 432], "mesa": 534, "messag": [91, 132, 456, 500, 572, 573, 577, 578, 579, 595], "met": [496, 497, 502, 535, 586, 593], "meta": [82, 426, 504, 541, 584, 598], "meta_op_optim": [81, 425], "metaclass": 370, "metadata": [141, 462], "metadata_thp": 550, "metagraphdef": [336, 460], "metainfochangingmemopoptim": [82, 426], "metal": 534, "metaop": [82, 426], "method": [32, 127, 129, 139, 141, 146, 181, 187, 188, 196, 200, 201, 202, 204, 211, 218, 221, 237, 242, 243, 244, 246, 253, 259, 280, 281, 282, 316, 374, 376, 379, 453, 462, 463, 471, 476, 478, 479, 491, 492, 493, 495, 497, 501, 502, 504, 523, 524, 525, 526, 528, 529, 530, 542, 543, 582, 583, 586, 588, 589, 592, 594, 595], "meticul": [487, 546], "metric": [154, 187, 188, 191, 192, 222, 232, 233, 260, 265, 266, 281, 289, 294, 302, 303, 319, 328, 358, 468, 471, 494, 502, 505, 506, 526, 528, 531, 543, 544, 566, 586, 591, 592, 593, 595, 596, 597, 598], "metric_cl": [223, 327, 358, 543], "metric_criterion": 338, "metric_fn": [271, 272, 324, 325], "metric_max_over_ground_truth": [271, 272, 324, 325], "metric_registri": [274, 327], "metric_typ": [274, 327], "metric_weight": 338, "mha": [168, 175, 583], "mha_compress": 176, "mha_head_s": 176, "mha_modul": 176, "mha_nam": 176, "mha_scor": 176, "mha_spars": [163, 583], "mhacompress": 176, "microcod": 598, "microsoft": [4, 487, 504, 505, 546], "middl": [497, 570, 592], "migacz": 523, "might": [184, 488, 501, 524, 566, 595], "migrat": [489, 494, 497, 592, 596], "mimic": [497, 586], "min": [129, 151, 188, 453, 483, 487, 491, 495, 497, 528, 546, 567, 569, 583, 586, 589, 592, 594, 595], "min_dim": [218, 259, 594], "min_filter_tensor": 483, "min_sparsity_ratio_per_op": [167, 187, 188, 543, 583], "min_train_sampl": 188, "mini": 598, "minilm": [584, 598], "minim": [129, 151, 306, 362, 453, 490, 491, 495, 497, 506, 507, 523, 529, 532, 542, 543, 557, 561, 583, 586, 595], "minimum": [167, 187, 188, 487, 507, 523, 528, 543, 546, 555, 583, 592, 595], "minmax": [2, 4, 490, 491, 506, 507, 523, 535, 586, 597], "minmax_file_path": 483, "minmaxcalibr": 4, "miou": [274, 327], "misc": [139, 463, 540], "miss": [497, 583, 586], "mistral": 541, "mistralai": 541, "mitig": [491, 589], "mix": [135, 187, 188, 304, 316, 328, 360, 374, 504, 505, 512, 538, 547, 553, 554, 555, 596], "mix_precis": [188, 319, 377, 543, 544], "mixed_precis": [266, 328, 543], "mixed_precision_model": 135, "mixedprecis": [188, 275, 543], "mixedprecisionconfig": [188, 328, 377, 543, 544], "mixprecisionconfig": 488, "mkl": 558, "ml": 584, "mla": [505, 544, 586], "mleffici": 584, "mlp": 583, "mlperf": [584, 598], "mm": 598, "mnist": [204, 246, 526, 531], "mnli": [202, 244, 526, 542, 598], "mobil": [529, 543, 598], "mobilebert": [202, 244, 526, 529], "mobilenet": [533, 591, 598], "mobilenet_v1": 597, "mobilenet_v1_1": [536, 566, 577], "mobilenetv2": 598, "mobilenetv3": 502, "mobiusml": 491, "mode": [29, 30, 31, 96, 141, 211, 253, 270, 316, 323, 336, 340, 374, 434, 460, 462, 480, 482, 483, 491, 492, 505, 506, 528, 538, 557, 561, 569, 570, 586, 588, 589, 595], "model": [2, 3, 4, 17, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102, 104, 126, 127, 128, 134, 135, 136, 140, 141, 142, 144, 145, 146, 150, 152, 154, 162, 163, 165, 172, 173, 174, 177, 179, 180, 182, 184, 187, 188, 191, 192, 198, 201, 202, 204, 218, 219, 222, 223, 232, 233, 240, 243, 244, 246, 259, 260, 262, 263, 264, 265, 266, 274, 275, 276, 277, 280, 283, 284, 286, 287, 288, 289, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 319, 327, 328, 338, 339, 340, 341, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 458, 460, 462, 464, 468, 473, 474, 475, 478, 480, 482, 483, 485, 486, 487, 488, 491, 492, 493, 494, 495, 497, 500, 501, 502, 504, 505, 507, 512, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 537, 538, 540, 542, 544, 547, 552, 554, 555, 558, 564, 566, 571, 573, 574, 575, 576, 581, 582, 584, 586, 590, 591, 593, 594, 595, 596, 597], "model_build": [277, 280], "model_convers": 266, "model_loss": 595, "model_nam": [102, 187, 188, 504], "model_name_or_path": [202, 244, 526, 543, 552, 553, 568, 575, 578, 579, 587], "model_origin": [188, 358, 588], "model_path": [126, 134, 378, 458, 491, 528, 577], "model_proto": 91, "model_slim": [162, 176], "model_slim_ffn2": 163, "model_slim_mha": 163, "model_summari": 568, "model_typ": [202, 244, 483, 526], "model_wis": [543, 597], "model_wrapp": [3, 137], "modelconvers": 276, "modelproto": [32, 262, 328, 340, 473, 545], "models": [187, 188, 338, 543, 581, 585], "modelwisetuningsampl": [315, 373], "modern": [491, 497, 549, 589], "modif": [500, 505, 535, 552, 571], "modifi": [176, 204, 246, 357, 376, 501, 507, 531, 535, 568, 569, 583, 597], "modified_pickl": [138, 461], "modul": [137, 138, 162, 168, 175, 279, 285, 295, 296, 461, 488, 491, 492, 496, 501, 524, 525, 529, 538, 542, 543, 545, 583, 585, 588, 589, 593, 596], "module_debug_level1": 377, "module_hook_config": 146, "module_nam": [142, 161, 162, 172, 173, 174, 175, 177, 178, 179, 181, 183, 299, 464, 483], "module_name_list": 146, "module_node_map": [264, 475], "momentum": [161, 299, 538, 543, 583, 597], "momentumbalanc": 598, "momentumunbalanc": 598, "monitor": [492, 572, 577, 578, 579], "more": [30, 134, 150, 169, 170, 218, 259, 297, 340, 458, 487, 488, 489, 491, 492, 495, 497, 502, 503, 504, 506, 523, 524, 526, 529, 531, 533, 536, 538, 539, 541, 543, 544, 546, 547, 555, 559, 562, 567, 572, 581, 582, 583, 588, 589, 592, 595, 596, 598], "moreoev": 299, "mosaicml": [489, 592, 598], "mose": [267, 320], "mosesdecod": [267, 320], "mosh": 583, "most": [187, 188, 274, 327, 488, 491, 495, 497, 528, 543, 544, 583, 586, 589, 592, 595, 598], "mostli": 524, "move": [64, 141, 410, 462, 491, 497, 501, 570, 585, 589, 590], "move_input_devic": 146, "move_squeeze_after_relu": [62, 408], "movesqueezeafterreluoptim": [64, 410], "mpi": [571, 572, 595], "mpirun": [574, 595], "mpt": [489, 583, 592, 598], "mrpc": [202, 244, 274, 327, 526, 542, 552, 575, 578, 579, 583, 595, 598], "mscoco": [270, 323], "mse": [32, 146, 187, 188, 274, 308, 327, 358, 366, 483, 491, 497, 528, 542, 569, 585, 589, 590], "mse_metric_gap": 483, "mse_v2": [188, 308, 366], "mse_v2tunestrategi": [310, 368], "mseloss": [497, 592], "msetunestrategi": [309, 367], "msfp": [487, 546], "msft": 584, "msg": [479, 573, 577, 578], "mt": 598, "mteval": [267, 320], "mu": 528, "much": [154, 161, 187, 188, 218, 259, 260, 497, 529, 558, 592, 594], "mul": [41, 51, 52, 55, 150, 387, 397, 398, 401, 491, 533, 589, 592], "mullinear": [143, 467], "multi": [152, 163, 165, 176, 270, 323, 327, 358, 502, 525, 526, 538, 543, 581, 583, 586, 595], "multi_object": 581, "multiclass": 542, "multilabel": 542, "multilingu": 598, "multiobject": 338, "multipl": [157, 163, 189, 190, 194, 195, 202, 203, 205, 206, 207, 208, 209, 213, 215, 218, 225, 230, 231, 235, 236, 238, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 328, 329, 330, 332, 338, 495, 522, 526, 533, 543, 571, 574, 582, 583, 591, 592, 595], "multipli": [4, 187, 188, 486, 487, 491, 546, 589], "must": [218, 259, 270, 323, 500, 501, 506, 522, 525, 539, 586, 594], "muzzy_decay_m": 550, "mx": [2, 487, 492, 546], "mxfp4": [487, 546], "mxfp6": [487, 546], "mxfp8": [487, 546], "mxint8": [487, 546], "mxnet": [1, 2, 4, 188, 197, 201, 204, 207, 211, 218, 239, 243, 246, 249, 253, 259, 265, 274, 302, 327, 328, 333, 358, 500, 504, 505, 506, 523, 525, 532, 535, 538, 543, 544, 545, 585, 595, 597], "mxnet_dataload": 238, "mxnet_model": 330, "mxnetcifar10": [204, 246], "mxnetcifar100": [204, 246], "mxnetcropresizetransform": [218, 259], "mxnetcroptoboundingbox": [218, 259], "mxnetdataload": [197, 239], "mxnetdataset": [204, 246], "mxnetfashionmnist": [204, 246], "mxnetfilt": [211, 253], "mxnetimagefold": [204, 246], "mxnetimagenetraw": [207, 249], "mxnetmetr": [274, 327], "mxnetmnist": [204, 246], "mxnetmodel": 333, "mxnetnormalizetransform": [218, 259], "mxnettransform": [218, 259], "mxnettranspos": [218, 259], "mxquantconfig": [487, 546], "my": 500, "my_model": 547, "mydataload": [493, 495, 496], "n": [169, 170, 187, 188, 203, 218, 245, 259, 268, 297, 321, 377, 491, 497, 507, 524, 526, 528, 529, 541, 572, 583, 586, 592, 594], "n_best_siz": [218, 259, 594], "n_bit": [497, 592], "n_block": 589, "n_gpu": 543, "n_iter": [306, 362], "n_metric": 281, "n_pareto_point": 281, "n_point": 281, "n_sampl": [32, 146], "n_warmup": [306, 362], "na": [188, 266, 332, 538, 598], "name": [2, 31, 40, 53, 54, 56, 90, 91, 96, 102, 126, 134, 135, 136, 141, 142, 145, 146, 147, 152, 158, 161, 165, 167, 172, 175, 176, 180, 181, 182, 183, 184, 186, 187, 188, 202, 203, 204, 207, 211, 216, 218, 219, 223, 226, 227, 244, 245, 246, 249, 253, 259, 262, 263, 264, 269, 274, 292, 297, 299, 301, 316, 318, 322, 327, 332, 336, 338, 358, 374, 376, 378, 386, 399, 400, 402, 434, 458, 460, 462, 464, 469, 471, 473, 474, 475, 480, 483, 487, 490, 491, 493, 500, 501, 507, 524, 526, 528, 531, 533, 535, 540, 542, 543, 545, 546, 550, 557, 561, 565, 566, 572, 583, 586, 590, 591, 593, 595, 597, 598], "namecollector": 2, "named_children": 593, "named_paramet": 531, "namespac": 524, "namhoon": 583, "nan": [42, 388], "nano": [554, 555], "nano_": 554, "nano_bf16": 549, "nano_bf16_channels_last": 549, "nano_bf16_ipex": 549, "nano_bf16_ipex_channels_last": 549, "nano_fp32_channels_last": 549, "nano_fp32_ipex": 549, "nano_fp32_ipex_channels_last": 549, "nano_gpu_to_cpu": 549, "nano_int8": 549, "nano_jit_bf16": 549, "nano_jit_bf16_channels_last": 549, "nano_jit_bf16_ipex": 549, "nano_jit_bf16_ipex_channels_last": 549, "nano_jit_fp32": 549, "nano_jit_fp32_channels_last": 549, "nano_jit_fp32_ipex": 549, "nano_jit_fp32_ipex_channels_last": 549, "nano_onnxruntime_fp32": 549, "nano_onnxruntime_int8_qlinear": 549, "nano_openvino_fp32": 549, "nano_openvino_int8": 549, "narrow": [487, 546], "narrow_rang": 99, "nas_method": 281, "nas_registri": 281, "nas_util": 279, "nasbas": [280, 502], "nasconfig": [188, 278, 280, 502], "nation": [204, 246, 499], "nativ": 507, "natur": [267, 320, 491, 533], "nbest_predict": [218, 259, 594], "nbsp": [595, 598], "nc": [591, 595], "nc_inception_v3": 569, "nc_inceptionv3": 593, "nc_model": [2, 289, 294], "nc_resnet50_v1": 531, "nc_workspac": [187, 188, 567, 568], "nchw": [40, 214, 386], "ncmodel": 2, "ndarrai": [2, 30, 31, 53, 54, 56, 218, 259, 399, 400, 402, 469, 534, 594], "ndarray_to_devic": 2, "nearest": [165, 218, 259, 491, 492, 497, 589, 594], "nearst": 32, "necessari": [31, 180, 499, 502, 506, 545, 565, 583, 591, 595], "necessarili": [139, 463], "need": [2, 30, 91, 95, 152, 165, 180, 188, 191, 192, 193, 200, 201, 204, 211, 218, 221, 223, 224, 232, 233, 234, 242, 243, 246, 253, 259, 264, 303, 309, 327, 328, 338, 340, 358, 367, 433, 459, 468, 475, 482, 483, 491, 494, 496, 497, 501, 505, 524, 525, 526, 528, 529, 531, 538, 543, 547, 549, 550, 553, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 571, 575, 577, 583, 585, 586, 587, 588, 589, 590, 592, 594, 595, 597], "neither": 586, "neo": [504, 598], "neox": [541, 598], "nepoch": 543, "nest": 146, "nesterov": [543, 597], "net": [334, 504], "netflix": 584, "nets_factori": 330, "network": [136, 161, 167, 168, 299, 365, 487, 497, 502, 523, 529, 530, 533, 543, 546, 566, 584, 586, 592, 595], "neural": [2, 136, 152, 154, 157, 167, 168, 169, 170, 180, 187, 188, 214, 215, 218, 219, 222, 225, 228, 256, 257, 259, 261, 266, 273, 274, 276, 289, 294, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 342, 358, 365, 366, 372, 472, 480, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 500, 505, 506, 507, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 546, 548, 549, 552, 554, 555, 557, 559, 561, 562, 563, 575, 581, 582, 584, 586, 589, 590, 592, 593, 594, 595, 597, 598], "neural_cod": [547, 549, 551, 552, 553, 555], "neural_compressor": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 502, 504, 507, 522, 524, 525, 526, 528, 529, 530, 531, 533, 536, 537, 542, 543, 544, 545, 546, 566, 567, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 594, 595, 597], "neural_insight": [566, 568, 569], "neural_insights_util": 476, "neural_solut": [571, 572, 577, 578, 579], "neurip": 584, "neuron": 583, "never": [141, 462, 595], "nevertheless": [487, 546], "new": [2, 4, 32, 134, 152, 193, 204, 218, 219, 234, 246, 259, 298, 338, 458, 459, 488, 489, 490, 491, 497, 500, 506, 531, 543, 544, 558, 564, 565, 566, 567, 573, 574, 577, 578, 583, 584, 586, 589, 590, 591, 594, 596, 597], "new_api": [34, 35, 57, 58, 63, 65, 78, 85, 117, 122, 129, 381, 403, 404, 409, 411, 422, 444, 449, 453], "new_dtyp": 31, "new_func": [134, 458], "new_graph_def": [134, 458], "new_init": 32, "new_metr": 542, "new_modul": [142, 146, 464], "new_quantized_nam": 31, "newapi": [80, 424], "newdataload": 525, "newli": [543, 583], "newlin": [272, 325, 483], "newmetr": 542, "next": [46, 196, 237, 377, 392, 459, 491, 497, 502, 506, 507, 525, 585, 589, 595], "next_annotation_id": [270, 323], "next_tune_cfg": 595, "nextplatform": 584, "nf4": [491, 504, 589], "nfl": [272, 325], "ngram": [267, 320, 542], "nhwc": [40, 214, 386], "ni_workload_nam": 188, "nightli": 539, "ninm": 168, "nll_loss": 531, "nlp": [180, 187, 188, 300, 492, 495, 497, 552, 568, 583, 586], "nn": [142, 143, 146, 165, 166, 176, 186, 187, 188, 264, 328, 358, 464, 467, 475, 478, 482, 491, 492, 497, 501, 529, 543, 545, 589, 592, 593], "nncf": 136, "no_absorb_lay": 146, "no_grad": 547, "node": [2, 30, 31, 32, 36, 40, 41, 42, 43, 46, 48, 50, 53, 54, 56, 60, 63, 66, 68, 69, 70, 84, 88, 89, 91, 96, 118, 126, 134, 165, 262, 264, 336, 357, 378, 382, 386, 387, 388, 389, 392, 394, 396, 399, 400, 402, 406, 409, 412, 414, 415, 416, 428, 434, 445, 458, 460, 473, 475, 505, 528, 531, 567, 571, 574, 577, 578, 579, 587, 593, 595, 598], "node1": [531, 577, 578], "node2": [531, 577, 578], "node_collector": 136, "node_def": [53, 54, 56, 399, 400, 402], "node_from_map": [53, 54, 56, 399, 400, 402], "node_list": 574, "node_map": [53, 54, 56, 399, 400, 402], "node_modul": 565, "node_nam": [53, 54, 56, 134, 336, 347, 399, 400, 402, 460, 506], "node_name_from_input": [53, 54, 56, 399, 400, 402], "node_name_list": [132, 456], "node_op": 506, "nodedef": [53, 54, 56, 399, 400, 402], "nodej": [557, 561], "non": [4, 298, 483, 491, 501, 528, 589, 595], "nondigit_punct_r": [267, 320], "none": [2, 29, 31, 32, 33, 34, 35, 49, 75, 88, 90, 91, 96, 102, 128, 134, 136, 140, 141, 142, 143, 146, 152, 154, 155, 161, 162, 163, 165, 169, 180, 184, 187, 188, 191, 192, 193, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 214, 218, 219, 220, 221, 228, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 260, 263, 264, 265, 270, 274, 275, 276, 277, 280, 289, 294, 298, 302, 304, 305, 306, 307, 309, 310, 311, 312, 316, 323, 327, 328, 338, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 377, 380, 381, 395, 420, 434, 458, 459, 462, 464, 467, 468, 469, 471, 474, 475, 478, 480, 482, 483, 487, 491, 492, 495, 504, 505, 506, 525, 526, 542, 546, 567, 586, 589, 593, 594, 595], "nor": 586, "norm": [17, 491], "normal": [4, 21, 218, 259, 272, 325, 491, 497, 543, 573, 581, 589, 592, 594], "normalfloat": [491, 589], "normalizationoper": 21, "normalize_answ": [272, 325], "normalizetftransform": [218, 259], "normalizetransform": [218, 259], "notabl": 563, "notat": [188, 483], "note": [41, 139, 171, 270, 310, 323, 368, 387, 463, 486, 489, 490, 491, 494, 497, 502, 504, 506, 507, 524, 525, 528, 531, 533, 535, 539, 541, 543, 549, 552, 557, 561, 564, 566, 570, 572, 574, 583, 586, 589, 592, 593, 595, 596, 597], "notebook": 596, "noteworthi": 523, "noth": [270, 323, 595], "notic": [129, 151, 219, 453, 488, 491, 540, 544, 567, 590], "notif": 574, "nov": 584, "novel": [530, 547, 558, 564], "now": [187, 188, 218, 259, 501, 502, 507, 526, 531, 555, 585, 594, 595], "np": [31, 218, 259, 306, 362, 531, 574, 592, 594, 595], "np_dtype": 91, "npm": [557, 558, 561], "npm_token": [559, 562], "npu": [188, 586], "npy": [203, 245, 526], "npy_dir": [203, 245, 526], "npz": [204, 246, 526], "nr": 91, "ns_workspac": [572, 577, 578, 579], "nsampl": 589, "nsdf3": [204, 246, 526], "nsga2": 502, "nuanc": 491, "num": 483, "num_bin": [2, 4, 469], "num_bit": [32, 99, 143, 146, 467, 497, 592], "num_class": [274, 327], "num_cor": [202, 203, 207, 244, 245, 249, 526], "num_correct": [274, 327], "num_detect": [270, 274, 323, 327, 542, 543, 597], "num_ev": 502, "num_gt_box": [270, 323], "num_of_inst": [152, 187, 188, 522, 543, 585], "num_of_process": 531, "num_quantized_bin": 4, "num_replica": 531, "num_sampl": [274, 327], "num_train_epoch": [543, 583], "num_work": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525, 543, 586], "numactl": [152, 534, 550, 558], "number": [4, 32, 53, 54, 91, 126, 146, 163, 169, 170, 187, 188, 200, 203, 214, 218, 242, 245, 256, 259, 271, 272, 274, 297, 306, 324, 325, 327, 353, 357, 362, 377, 378, 399, 400, 459, 471, 483, 486, 491, 496, 497, 522, 525, 526, 531, 542, 572, 574, 583, 586, 589, 591, 592, 594, 595], "number_of_process": 595, "number_of_socket": [577, 578], "number_of_thread": [577, 578], "numer": [188, 274, 327, 487, 488, 491, 495, 507, 544, 546, 584, 586, 589], "numpi": [30, 31, 53, 54, 56, 91, 134, 218, 259, 270, 281, 323, 399, 400, 402, 534, 592, 594], "nvidia": [504, 523, 538, 539, 598], "nweight": 567, "nxm": [168, 178, 187, 188, 293, 297, 583], "o": [141, 377, 462, 524, 539, 549, 567], "o0": [363, 595], "o1": 595, "oaa": 573, "obj": [2, 91, 162, 184, 201, 243, 260, 265, 276, 277, 278, 280, 289, 294, 298, 302, 328, 338, 358, 468, 471, 483], "obj1": 483, "obj2": 483, "obj_cl": 338, "obj_criterion": 338, "obj_weight": 338, "object": [2, 30, 31, 32, 60, 72, 91, 102, 118, 134, 135, 136, 139, 141, 145, 146, 152, 154, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 202, 203, 204, 218, 219, 221, 232, 233, 234, 244, 245, 246, 259, 260, 265, 270, 278, 280, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 302, 306, 319, 323, 327, 328, 336, 337, 353, 357, 358, 362, 376, 406, 418, 445, 458, 459, 460, 462, 463, 465, 468, 471, 482, 483, 490, 495, 501, 502, 506, 512, 522, 524, 525, 526, 534, 542, 543, 545, 582, 583, 585, 586, 594, 595, 596, 598], "object_detect": [187, 188, 270, 323], "objective_cfg": 338, "objective_cl": 338, "objective_custom_registri": 338, "objective_registri": 338, "oblig": [499, 570], "observ": [146, 486, 490, 491, 492, 507, 589, 591, 593, 595], "observer_dict": 593, "obstacl": [487, 546], "obtain": [163, 165, 174, 179, 181, 184, 298, 497, 501, 506, 572, 583, 591, 592, 595], "occupi": [487, 546], "occur": 490, "ocp": [487, 546], "oct": 584, "ofa_mbv3_d234_e346_k357_w1": 502, "off": [4, 53, 54, 56, 399, 400, 402, 491, 497, 500, 589], "offens": 499, "offer": [487, 495, 526, 546], "offici": [134, 267, 271, 272, 320, 324, 325, 458, 499, 592], "offlin": [483, 489, 494, 495, 497, 499, 543, 586, 592], "offset_height": [218, 259, 594], "offset_width": [218, 259, 594], "ofir": 583, "often": [184, 491, 525, 529, 569, 582, 583], "old": [483, 489, 543, 590], "old_hist": 483, "oliv": [504, 584], "omit": 589, "ompi_mca_btl_vader_single_copy_mechan": 504, "on_after_compute_loss": [468, 529, 530, 543, 582], "on_after_optimizer_step": [543, 583], "on_before_optimizer_step": [468, 529, 530, 543, 582, 583], "on_epoch_begin": [468, 471, 529, 530, 543, 582], "on_epoch_end": [468, 471, 529, 530, 543, 582], "on_step_begin": [468, 471, 529, 530, 543, 582, 583], "on_step_end": [468, 471, 529, 530, 543, 582], "on_train_begin": [468, 501, 529, 530, 543, 582, 583, 586], "on_train_end": [468, 529, 530, 543, 582, 583, 586], "onc": [134, 141, 157, 182, 225, 301, 305, 359, 361, 458, 462, 506, 507, 525, 564, 570, 583, 584, 595, 598], "one": [32, 95, 96, 101, 141, 146, 152, 167, 171, 176, 179, 180, 182, 218, 228, 259, 267, 270, 274, 276, 297, 300, 301, 320, 323, 327, 433, 434, 462, 488, 491, 492, 495, 496, 497, 502, 505, 523, 529, 530, 531, 535, 538, 539, 542, 543, 544, 547, 548, 552, 553, 555, 557, 558, 561, 564, 565, 566, 569, 570, 571, 572, 574, 581, 582, 583, 585, 586, 587, 589, 590, 592, 594, 595], "oneapi": [539, 584, 596], "onednn": [495, 544, 586], "ones": [141, 270, 323, 462, 583], "oneshotschedul": [182, 301], "onli": [30, 32, 40, 49, 56, 72, 95, 101, 129, 141, 150, 151, 152, 157, 162, 168, 175, 187, 188, 202, 219, 221, 225, 244, 264, 276, 297, 299, 310, 340, 358, 368, 376, 377, 386, 395, 402, 418, 433, 453, 462, 475, 483, 488, 492, 496, 505, 506, 507, 522, 523, 524, 525, 528, 529, 531, 534, 535, 541, 543, 544, 552, 565, 583, 584, 585, 586, 587, 592, 593, 595, 596, 597], "onlin": [491, 499, 591], "onnx": [3, 4, 17, 29, 31, 32, 73, 128, 150, 187, 188, 198, 240, 262, 263, 264, 328, 335, 340, 341, 353, 473, 474, 475, 481, 500, 504, 505, 506, 508, 525, 528, 532, 533, 535, 536, 538, 544, 545, 546, 549, 554, 555, 567, 584, 585, 589, 590, 592, 595], "onnx_graph": 87, "onnx_inc_dynamic_qu": 554, "onnx_inc_static_quant_qdq": 554, "onnx_inc_static_quant_qlinear": 554, "onnx_ml_pb2": [328, 545], "onnx_model": [330, 339, 340, 352, 567], "onnx_nod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 87], "onnx_qlinear_to_qdq": [262, 473], "onnx_quant": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "onnx_schema": 87, "onnx_typ": 91, "onnxbilinearimagenettransform": [214, 256], "onnxcommunitymeetup2023": 584, "onnxgraph": 88, "onnxmodel": [32, 335, 339, 340, 341, 352], "onnxnod": 89, "onnxopschema": 90, "onnxprofilingpars": 345, "onnxqlinear2qdq": 188, "onnxqlinear2qdqconfig": 188, "onnxresizecropimagenettransform": [214, 256], "onnxrt": [30, 31, 32, 202, 204, 211, 218, 244, 246, 253, 259, 274, 327, 352, 481, 505, 528, 544, 566, 586, 598], "onnxrt_cuda_ep": [187, 188, 544, 586], "onnxrt_dataload": [238, 352], "onnxrt_dml_ep": [188, 586], "onnxrt_dnnl_ep": [188, 544, 586], "onnxrt_integ": [543, 597], "onnxrt_integerop": [204, 211, 218, 246, 253, 259, 585], "onnxrt_qdq": [204, 211, 246, 253, 585], "onnxrt_qlinear": [543, 597], "onnxrt_qlinearop": [204, 211, 218, 246, 253, 259, 585], "onnxrt_qlinearopsadaptor": 505, "onnxrt_qoper": 585, "onnxrt_trt_ep": [187, 188, 544, 586], "onnxrtaug": 3, "onnxrtbertdataload": [198, 240], "onnxrtbertdataset": [202, 244], "onnxrtcroptoboundingbox": [218, 259], "onnxrtdataload": [198, 240, 352], "onnxrtglu": [274, 327], "onnxrtimagenetdataset": [207, 249], "onnxrtitdataset": [204, 246], "onnxrtitfilt": [211, 253], "onnxrtitmetr": [274, 327], "onnxrtittransform": [218, 259], "onnxrtparserfactori": 344, "onnxrtqldataset": [204, 246], "onnxrtqlfilt": [211, 253], "onnxrtqlmetr": [274, 327], "onnxrtqltransform": [218, 259], "onnxruntim": [4, 187, 188, 198, 204, 211, 240, 246, 253, 275, 353, 505, 523, 525, 538, 539, 544, 567, 585], "onto": [141, 462], "op": [2, 17, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 67, 71, 74, 77, 78, 79, 80, 82, 91, 93, 95, 109, 110, 111, 117, 119, 120, 121, 122, 127, 129, 132, 134, 135, 136, 145, 146, 150, 165, 187, 188, 264, 309, 316, 317, 353, 357, 363, 365, 367, 374, 375, 376, 379, 383, 385, 397, 398, 399, 400, 401, 402, 403, 404, 406, 410, 413, 417, 419, 421, 422, 423, 424, 426, 431, 433, 436, 437, 438, 444, 446, 447, 448, 449, 453, 456, 458, 473, 475, 477, 483, 488, 489, 497, 504, 505, 506, 507, 528, 535, 543, 544, 568, 569, 583, 586, 588, 590, 592, 593, 595, 597], "op_block_lst": 373, "op_cfg": 140, "op_defin": 347, "op_dict": 543, "op_dtyp": [315, 373], "op_dtype_dict": [315, 373], "op_infos_from_cfg": 146, "op_list": [505, 593], "op_nam": [146, 187, 188, 317, 375, 483, 484, 490, 506, 543, 583, 593], "op_name_dict": [187, 188, 490, 528, 543, 567, 569, 586, 595], "op_name_typ": [316, 374], "op_quant_mod": [317, 375], "op_registri": 22, "op_run": 347, "op_typ": [22, 126, 127, 134, 186, 317, 375, 378, 379, 489, 490], "op_type_dict": [187, 188, 490, 504, 507, 585, 586, 589, 595], "op_types_to_quant": 29, "op_user_cfg": 376, "op_user_cfg_modifi": 376, "op_wis": [543, 593, 597], "op_wise_config": [93, 117, 122, 431, 444, 449, 506], "op_wise_sequ": [117, 122, 444, 449], "open": [141, 222, 266, 319, 462, 471, 485, 499, 504, 533, 534, 543, 559, 562, 565, 566, 570, 571, 572, 584], "openai": [489, 592], "opencv": [534, 558], "opentri": 483, "openvino": 549, "openvinotoolkit": 136, "oper": [5, 31, 90, 96, 126, 134, 165, 166, 171, 187, 188, 214, 256, 297, 353, 357, 378, 434, 458, 486, 488, 489, 490, 491, 493, 494, 497, 501, 522, 525, 528, 533, 564, 570, 583, 586, 589, 592, 594, 595], "ops_lst": 146, "ops_nam": 146, "opset": [30, 88, 90, 91, 188, 263, 264, 474, 475, 533], "opset_vers": [91, 128, 188, 263, 264, 474, 475, 533], "opt": [180, 489, 497, 504, 541, 552, 583, 592, 595, 598], "opt_cfg": [61, 407], "opt_model": [303, 486, 490, 543], "optdecoderlay": 592, "optim": [40, 60, 61, 65, 66, 102, 104, 134, 156, 159, 160, 162, 165, 174, 179, 187, 188, 222, 228, 265, 282, 302, 306, 362, 386, 406, 407, 411, 412, 458, 468, 469, 480, 483, 490, 491, 494, 495, 496, 497, 502, 504, 522, 524, 528, 529, 530, 531, 535, 536, 538, 539, 541, 543, 545, 547, 549, 551, 552, 555, 558, 566, 569, 570, 571, 573, 575, 584, 585, 586, 588, 589, 591, 592, 593, 595, 597], "optimization_result": [573, 577], "optimize_for_infer": 554, "optimize_lay": 103, "optimize_qdq": [116, 443], "optimized_accuraci": 480, "optimized_model_tensor": 483, "optimized_result": 578, "optimized_tensor_data": 484, "optimizedmodel": 478, "optimizeqdqgraph": [117, 444], "optimizer_registri": [157, 225], "optimizer_typ": [157, 225], "optimum": [504, 554, 555, 567, 589], "option": [4, 32, 91, 141, 146, 167, 187, 188, 191, 192, 202, 218, 232, 233, 244, 259, 263, 264, 270, 276, 297, 303, 316, 323, 327, 328, 358, 374, 376, 377, 462, 468, 474, 475, 476, 478, 483, 491, 492, 495, 497, 506, 507, 524, 525, 526, 535, 539, 543, 558, 572, 575, 577, 578, 579, 583, 586, 589, 591, 592, 594, 595, 597], "optuningconfig": [315, 316, 317, 373, 374, 375], "optyp": [2, 187, 188, 262, 473, 506], "optype_wise_": 506, "optypes_to_exclude_output_qu": [29, 187, 188, 586], "optypewis": 506, "optypewisetuningsampl": [315, 373], "opwis": 506, "opwisetuningsampl": [315, 373], "orchestr": [468, 504, 538, 596], "order": [140, 146, 267, 268, 303, 306, 309, 318, 320, 321, 362, 367, 376, 491, 496, 497, 501, 528, 542, 567, 585, 589, 592, 593, 595], "ordered_op": 146, "ordereddefaultdict": [318, 376], "ordereddict": 524, "ordinari": 591, "org": [161, 179, 270, 299, 323, 501, 528, 539, 559, 562, 583], "organ": 597, "orient": 499, "orig_answer_text": [218, 259], "orig_lay": [143, 467], "orig_model": 491, "orig_sav": 492, "orig_text": [218, 259], "origin": [31, 32, 126, 134, 142, 146, 165, 177, 184, 188, 202, 218, 219, 244, 259, 283, 284, 286, 287, 288, 298, 299, 318, 363, 376, 378, 458, 464, 478, 483, 491, 492, 493, 495, 497, 500, 526, 552, 583, 586, 589, 594, 595, 597], "original_model": 491, "ort": 353, "ortsmoothqu": 30, "other": [53, 54, 56, 139, 150, 201, 243, 272, 325, 336, 399, 400, 402, 460, 463, 487, 492, 495, 497, 499, 501, 506, 507, 524, 528, 535, 538, 540, 543, 545, 546, 567, 581, 583, 586, 592, 594, 595, 598], "otherwis": [141, 204, 218, 246, 259, 462, 483, 491, 499, 506, 526, 559, 562, 585, 589, 594], "ouput_dir": 587, "our": [129, 146, 187, 188, 453, 487, 502, 504, 533, 543, 546, 565, 566, 569, 591, 596], "out": [170, 187, 188, 202, 203, 204, 244, 245, 246, 265, 297, 302, 491, 493, 495, 497, 500, 501, 504, 526, 547, 552, 557, 558, 559, 561, 562, 564, 570, 583, 585, 586, 589], "out_graph_def": [134, 458], "out_graph_fil": [134, 458], "outcom": [274, 327], "outer": [195, 236, 459], "outlier": [126, 378, 489, 491, 494, 497, 506, 523, 528, 569, 589, 592], "outlin": [506, 507], "outofcheeseerror": 524, "outperform": [491, 502], "output": [30, 31, 32, 37, 40, 45, 60, 84, 91, 96, 134, 146, 158, 165, 166, 171, 184, 187, 188, 191, 192, 223, 227, 232, 233, 263, 264, 267, 297, 320, 327, 328, 336, 358, 383, 386, 391, 406, 428, 434, 458, 460, 468, 474, 475, 478, 479, 483, 491, 492, 493, 497, 501, 505, 506, 529, 530, 531, 533, 535, 537, 542, 543, 545, 555, 564, 565, 567, 572, 573, 577, 578, 579, 582, 583, 585, 586, 589, 590, 592, 593, 594, 595, 597], "output_data": 30, "output_dict": 32, "output_dir": [140, 478, 492, 543, 552, 553, 568, 569, 575, 578, 579], "output_fn": [218, 259], "output_func": 146, "output_graph": 188, "output_graph_def": 494, "output_handl": 483, "output_index_map": [274, 327, 542], "output_mod": [202, 244], "output_model": [377, 543, 567, 569, 593], "output_nam": [88, 128, 188, 263, 264, 336, 460, 474, 475, 533], "output_node_nam": [69, 70, 117, 118, 122, 134, 415, 416, 444, 445, 449, 458], "output_path": [270, 323], "output_process": [158, 227], "output_shap": 88, "output_tensor": [134, 336, 458, 460], "output_tensor_ids_op_nam": 146, "output_tensor_nam": [134, 336, 458, 460], "output_tensors_dict": 593, "output_valu": 146, "outputs_to_valu": 91, "over": [91, 141, 204, 246, 274, 327, 462, 506, 532, 536, 538, 542, 555, 564, 570, 574, 583, 585, 592, 595], "overal": [507, 572, 589, 597], "overflow": [497, 586], "overhead": 592, "overli": 524, "overrid": [187, 188, 483, 524], "overridden": 595, "oversize_threshold": 550, "overview": [504, 595], "overwrit": [204, 246, 557, 561], "overwrite_exist": [152, 219], "overwritten": [283, 284, 286, 287, 288, 552], "own": [60, 141, 200, 218, 242, 259, 338, 406, 462, 497, 502, 506, 525, 526, 538, 542, 566, 570, 581, 589, 591, 596], "p": [4, 491, 497, 504, 565, 566, 589], "p1": 574, "p2": 574, "p3": 574, "p4": 574, "p_conf": [543, 582], "pack": [31, 47, 393], "packag": [90, 504, 505, 524, 534, 539, 564, 565, 584, 590, 595], "pad": [17, 32, 57, 58, 202, 218, 244, 259, 403, 404, 526, 594], "pad_max_length": 589, "pad_tensor": 32, "pad_token": [202, 244], "pad_token_segment_id": [202, 244], "paddedcentercroptransform": [218, 259], "padding_mod": 594, "pade": 32, "padoper": 23, "page": [499, 500, 566, 569, 570], "pager": 524, "pain": [497, 586], "pair": [93, 187, 188, 431, 488, 490, 506, 525, 543, 544, 590], "palett": 565, "panda": 567, "panel": [559, 562, 564], "paper": [489, 491, 497, 529, 583, 589, 592], "par": [502, 574], "paragraph": [271, 272, 324, 325], "parallel": [203, 245, 353, 357, 526, 543, 571, 574, 595], "param": [146, 152, 157, 193, 219, 225, 234, 274, 306, 327, 362, 459, 483, 505, 545, 595], "param1": 377, "param2": 377, "param3": 377, "param_alia": 483, "param_dict": [155, 157, 220, 225], "param_nam": 483, "paramet": [2, 4, 30, 31, 32, 53, 54, 56, 72, 91, 102, 118, 126, 127, 134, 135, 136, 141, 142, 145, 146, 147, 152, 154, 155, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 201, 202, 204, 211, 214, 218, 220, 225, 232, 233, 243, 244, 246, 253, 256, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 378, 379, 399, 400, 402, 418, 445, 458, 460, 462, 464, 468, 471, 473, 474, 475, 478, 479, 480, 482, 483, 487, 489, 490, 491, 494, 495, 497, 501, 506, 525, 526, 529, 531, 538, 542, 543, 546, 558, 564, 565, 566, 567, 572, 577, 578, 583, 586, 587, 589, 591, 592, 594, 595, 597], "parameter": 583, "parameter1": 377, "parameter2": 377, "parent": [177, 178, 182, 293, 299, 301, 593], "pareto": [281, 502], "pars": [91, 134, 146, 202, 203, 214, 218, 244, 245, 256, 259, 345, 346, 349, 458, 506, 507, 594], "parse_auto_slim_config": [163, 583], "parse_last_linear": 184, "parse_last_linear_tf": 184, "parse_not_to_prun": 298, "parse_saved_model": [134, 458], "parse_to_prun": [184, 298], "parse_to_prune_tf": 184, "parse_tune_config": 2, "parse_valid_pruner_typ": 175, "parsedecodebert": [202, 244], "parsedecodecoco": [203, 245], "parsedecodeimagenet": [214, 256, 594], "parsedecodeimagenettransform": [214, 256], "parsedecodevoctransform": [218, 259], "parserfactori": 343, "part": [146, 163, 172, 297, 299, 488, 497, 501, 539, 544, 559, 562, 572, 574, 583, 587, 592, 596], "parti": [270, 323, 497, 500, 540, 586], "partial": [176, 495, 583, 586], "particip": [499, 574], "particular": [504, 583, 589], "particularli": 495, "partit": [531, 583], "partner": 584, "parzen": 595, "pascal": [204, 246], "paser_cfg": 146, "pass": [63, 134, 139, 141, 152, 327, 358, 409, 458, 462, 463, 482, 483, 491, 497, 500, 501, 505, 522, 526, 529, 530, 531, 537, 542, 543, 565, 572, 583, 585, 586, 588, 592, 597], "past": [491, 497, 505, 589], "pat": 584, "patch": [551, 564], "patch_path": 551, "path": [91, 126, 134, 142, 146, 165, 180, 184, 202, 203, 204, 218, 244, 245, 246, 259, 260, 263, 264, 265, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 316, 328, 336, 340, 357, 358, 374, 378, 458, 460, 464, 474, 475, 478, 480, 483, 490, 491, 492, 501, 502, 505, 526, 528, 531, 537, 542, 543, 544, 545, 550, 553, 564, 567, 569, 572, 577, 578, 579, 582, 589, 594, 597], "path_to_cert": 566, "path_to_private_kei": 566, "path_to_sav": 468, "pathlib": 340, "pathlik": [141, 462], "patient": 529, "pattern": [44, 45, 47, 64, 82, 93, 94, 95, 117, 122, 146, 161, 162, 165, 166, 172, 173, 174, 175, 177, 179, 181, 187, 188, 204, 246, 287, 288, 290, 295, 299, 316, 374, 390, 391, 393, 410, 426, 431, 432, 433, 444, 449, 486, 490, 494, 505, 524, 526, 535, 538, 543, 565, 582, 585, 592, 595, 598], "pattern_analyz": 164, "pattern_detector": 137, "pattern_lock": [175, 187, 188, 285], "pattern_lst": 144, "pattern_registri": 292, "pattern_to_intern": [316, 374], "pattern_to_path": [316, 374], "pattern_typ": 292, "patternbas": 292, "patternlockprun": [287, 299], "patternmha": 169, "patternninm": 297, "patternnxm": 297, "pb": [152, 187, 188, 328, 336, 358, 460, 495, 522, 531, 536, 543, 545, 566, 569, 577, 593, 598], "pbound": [306, 362], "pc": 500, "pd": 567, "pdf": 4, "peak": [338, 581], "pegasu": 598, "peleenet": 598, "penal": 583, "penalti": [267, 268, 320, 321, 542], "pend": [534, 573], "pentium": 540, "peopl": [497, 586], "pep": [377, 524], "per": [30, 31, 32, 150, 152, 187, 188, 219, 340, 477, 487, 489, 491, 505, 507, 525, 546, 572, 583, 588, 589, 598], "per_channel": [99, 506, 507, 535, 586, 597], "per_channel_symmetr": 507, "per_tensor": [493, 506, 507, 535, 586, 597], "per_tensor_symmetr": 507, "percdamp": [32, 491, 589], "percent": 32, "percentag": [272, 325, 491, 523, 589, 597], "percentil": [4, 32, 126, 378, 523], "percentilecalibr": 4, "perceptron": 583, "perchannel": 32, "perf": 574, "perform": [82, 126, 152, 181, 187, 188, 202, 214, 219, 244, 256, 265, 289, 294, 302, 309, 327, 338, 358, 363, 367, 378, 426, 486, 488, 490, 491, 493, 495, 496, 497, 500, 501, 502, 505, 506, 522, 526, 527, 528, 530, 532, 533, 538, 539, 542, 543, 544, 545, 547, 549, 553, 555, 558, 564, 570, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 597, 598], "performance_onli": [33, 34, 35, 93, 117, 122, 133, 187, 380, 381, 431, 444, 449, 457, 543], "perm": [218, 259, 594], "perman": [163, 499, 583], "permiss": 499, "permut": [218, 259, 594], "perplex": 598, "persist": 545, "person": [499, 584], "perspect": 595, "phase": [147, 495, 497, 502, 543, 583, 586, 588, 595], "phi": 540, "philip": 583, "philosophi": [490, 495, 586], "physic": [152, 219, 499, 522, 572], "pick": [559, 562, 565], "pickl": [139, 141, 462, 463], "pickle_load_arg": [141, 462], "pickle_modul": [141, 162, 462], "pickle_protocol": 162, "pickleerror": [139, 463], "pickler": [139, 463], "pickletool": [139, 463], "picklingerror": [139, 463], "piec": [217, 258, 267, 320, 491, 497, 542, 589], "pil": [218, 259, 594], "pillow": 567, "pin": [525, 557, 561], "pin_memori": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525], "ping_memori": [543, 586], "pip": [504, 528, 531, 534, 536, 539, 549, 552, 557, 559, 561, 562, 566, 567, 568, 569, 590], "pip3": 558, "pipe": 524, "pipelin": [154, 260, 277, 278, 303, 500, 530, 543, 582], "piqa": 598, "pixel": 594, "pkg": [559, 562], "pkl": [483, 568], "pl": [267, 320], "place": [492, 530, 539, 577, 583, 593, 595], "placehold": [43, 200, 242, 389, 459, 524], "placeholder_dtyp": 165, "placeholder_shap": 165, "plai": [329, 460, 491, 497, 584, 589, 592], "plan": [492, 538], "platform": [483, 497, 504, 538, 547, 555, 574, 584, 586], "platinum": 598, "pleas": [30, 136, 150, 161, 169, 170, 171, 179, 180, 187, 188, 202, 203, 204, 207, 244, 245, 246, 249, 297, 299, 300, 327, 340, 358, 377, 489, 490, 491, 492, 493, 494, 497, 501, 502, 503, 504, 505, 522, 523, 526, 530, 531, 533, 539, 541, 542, 544, 547, 548, 552, 555, 571, 572, 573, 583, 586, 588, 589, 590, 591, 592, 595, 596], "plu": 544, "plug": 584, "plugin": [547, 565], "png": [204, 246, 526], "point": [31, 32, 214, 256, 271, 272, 281, 306, 324, 325, 362, 483, 486, 487, 488, 489, 490, 491, 494, 497, 542, 546, 564, 569, 570, 586, 589, 592, 594, 595], "polici": [305, 309, 359, 361, 367, 496, 499, 504, 597, 599], "polit": 499, "pollut": 524, "pont": 539, "pool": [17, 574], "pooloper": 24, "poor": [567, 593], "pop": [564, 574], "popen": 524, "popul": 502, "popular": [266, 319, 485, 492, 496, 497, 504, 505, 506, 523, 529, 532, 533, 536, 541, 543, 583, 586, 589, 595, 596], "popularli": 542, "port": [53, 54, 56, 399, 400, 402, 566, 573], "portabl": [139, 463], "portion": [202, 244], "pose": [487, 546, 587], "posit": [218, 259, 499, 542, 547, 572, 577, 578, 579], "possibl": [141, 219, 462, 528, 566, 582, 583, 587, 588, 595], "post": [30, 83, 84, 150, 179, 188, 191, 192, 232, 233, 340, 358, 427, 428, 487, 489, 490, 491, 492, 494, 496, 497, 499, 504, 505, 506, 528, 530, 531, 533, 538, 539, 546, 547, 553, 564, 574, 583, 584, 587, 589, 592, 593, 595], "post_batch": 2, "post_hostconst_convert": [81, 425], "post_node_nam": [63, 409], "post_quantized_op_cs": [81, 425], "post_training_auto_qu": 595, "post_training_dynamic_qu": [543, 585, 595], "post_training_static_qu": [187, 526, 543, 585, 595], "postcompressionutil": 166, "postcseoptim": [84, 428], "posterior": 595, "postfix": [75, 76, 420], "posthostconstconvert": [83, 427], "postposttrainingquantconfig": 588, "postprocess": [187, 188, 215, 218, 222, 259, 327, 358, 471, 505, 543, 593, 594], "postprocess_cfg": 471, "postprocess_cl": [216, 226, 543], "posttrainingquantconfig": [187, 188, 358, 501, 504, 507, 525, 528, 533, 536, 542, 543, 545, 566, 567, 568, 569, 586, 587, 588, 589, 591, 592, 595], "potenti": [502, 528], "power": [487, 495, 529, 543, 546, 558, 584], "powersav": 550, "pp": 583, "pr": [500, 525, 542, 559, 562, 590], "practic": [487, 546], "pre": [65, 102, 142, 165, 191, 192, 202, 232, 233, 244, 328, 358, 411, 464, 468, 490, 491, 496, 497, 524, 526, 529, 530, 543, 552, 569, 583, 584, 586, 589, 593, 595], "pre_batch": 2, "pre_node_nam": [63, 409], "pre_optim": [62, 408], "pre_post_process_quant": [187, 188, 586], "pre_process": 531, "preced": [267, 320, 497, 592, 595], "precis": [135, 187, 188, 191, 192, 232, 233, 265, 272, 274, 275, 302, 304, 316, 325, 327, 328, 338, 360, 363, 374, 380, 465, 466, 483, 487, 490, 491, 495, 496, 497, 504, 505, 506, 512, 522, 523, 530, 531, 535, 538, 546, 547, 553, 554, 555, 584, 585, 586, 589, 592, 595, 596], "pred": [134, 274, 327, 458, 542], "pred_list": [274, 327], "pred_text": [218, 259], "predefin": 496, "predict": [134, 218, 223, 259, 267, 271, 272, 274, 320, 324, 325, 327, 358, 458, 491, 497, 502, 529, 542, 555, 589, 592, 593, 594], "predictor": 502, "prefer": [152, 265, 302, 358, 491, 497, 583, 589], "prefix": [134, 135, 141, 142, 145, 146, 152, 458, 462, 464, 547, 552, 593], "preoptim": [65, 411], "prepar": [2, 32, 146, 486, 487, 489, 490, 491, 492, 495, 497, 501, 526, 531, 536, 566, 577, 578, 579, 583, 586], "prepare_compress": [187, 188, 468, 501, 529, 530, 543, 582, 583, 586], "prepare_dataload": 2, "prepare_dataset": 569, "prepare_input": 32, "prepare_model": 2, "prepare_model_data": 2, "prepare_prun": [162, 583], "prepared_model": [486, 489, 490], "preprint": [487, 491, 497, 523, 546, 583, 589, 592], "preprocess": [146, 187, 188, 202, 218, 244, 259, 376, 471, 531, 594], "preprocess_user_cfg": 376, "present": [53, 54, 56, 399, 400, 402, 497, 528, 572, 584, 592], "preserv": [161, 487, 491, 523, 546, 583, 589], "press": 565, "pretrain": [478, 547, 553], "pretrained_model_name_or_path": [140, 142, 464], "prettyt": 483, "preval": [491, 497, 589], "previou": [184, 492, 497, 506, 507, 543, 583, 590, 592, 593, 595, 596, 598], "previous": 525, "primari": [496, 523, 595], "primit": [141, 462], "print": [63, 136, 165, 274, 327, 377, 409, 483, 497, 531, 542, 543, 566, 567, 583, 592, 595], "print_iter": 165, "print_op_list": 483, "print_tabl": 483, "printer": 483, "prior": [2, 74, 419, 595], "prioriti": [524, 575], "privat": 499, "prob": 501, "probabl": [4, 187, 188, 477, 491, 497, 589], "problem": [139, 202, 244, 274, 327, 463, 488, 542, 544, 565], "proce": [173, 174, 179], "procedur": [502, 583, 595], "proceed": [497, 592], "process": [102, 126, 136, 152, 153, 167, 172, 173, 174, 180, 182, 184, 187, 188, 191, 192, 202, 203, 204, 214, 218, 219, 232, 233, 244, 245, 246, 256, 259, 297, 299, 301, 305, 306, 328, 358, 359, 361, 362, 378, 468, 482, 483, 486, 487, 490, 494, 495, 496, 497, 502, 505, 506, 507, 523, 525, 526, 529, 530, 531, 533, 543, 546, 548, 569, 571, 572, 574, 582, 583, 586, 587, 589, 592, 593, 594, 597], "process_and_check_config": [184, 298], "process_config": [184, 298], "process_weight_config": 184, "process_yaml_config": 184, "processor": [488, 497, 504, 541, 544, 572, 584, 586, 588], "produc": 529, "product": [161, 488, 497, 504, 538, 544, 547, 548, 564, 570, 584, 586, 591, 595], "profession": 499, "profil": [152, 188, 319], "profilerfactori": [350, 351, 355], "profilingpars": 346, "profilingresult": 347, "program": [490, 504, 531, 540, 547, 564], "programm": [549, 555, 564], "progress": [31, 175, 204, 246, 558, 564, 566, 583, 586], "project": [218, 259, 498, 499, 500, 570, 584, 591, 595, 599], "promis": [530, 543, 583], "promot": [487, 491, 546], "prompt": 531, "prone": 583, "propag": [2, 86, 429], "properli": 572, "properti": [202, 244, 376, 540], "proport": [274, 327], "propos": [488, 491, 497, 502, 505, 529, 544, 589, 592], "protect": [491, 589], "protected_nod": [66, 412], "proto": [214, 218, 256, 259, 594], "protobuf": [91, 336, 460, 567], "prototyp": 501, "prove": [491, 497, 523, 589, 592], "provid": [30, 31, 32, 88, 91, 96, 165, 191, 192, 218, 232, 233, 259, 265, 270, 289, 294, 302, 303, 323, 328, 339, 340, 358, 434, 468, 476, 478, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 504, 505, 506, 507, 522, 525, 528, 530, 531, 532, 538, 539, 541, 542, 543, 544, 545, 547, 551, 555, 558, 564, 565, 566, 572, 573, 583, 585, 586, 589, 592, 593, 595, 596, 597, 598], "proxi": 501, "prune": [154, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 188, 228, 229, 266, 283, 284, 286, 287, 288, 292, 294, 295, 297, 298, 299, 301, 303, 483, 504, 531, 532, 535, 536, 538, 582, 584, 596, 597], "prune_conf": 543, "prune_config": [184, 298], "prune_domain": 585, "prune_typ": [585, 597], "prune_util": 295, "pruner": [283, 284, 285, 286, 287, 289, 294, 295, 297, 300, 543, 583, 597], "pruner2": 583, "pruner_class": 179, "pruner_info": [180, 300], "pruner_legaci": 266, "pruner_registri": 288, "pruners_info": 184, "pruning_class": 180, "pruning_config": [187, 188, 543, 583], "pruning_end": 583, "pruning_frequ": [172, 187, 188, 543, 583], "pruning_func": 543, "pruning_op_typ": [187, 188, 543, 583], "pruning_pattern": 583, "pruning_recip": 266, "pruning_scop": [187, 188, 543, 583], "pruning_start": 583, "pruning_typ": [187, 188, 543, 583], "pruning_v2": 266, "pruningcallback": 154, "pruningconf": [289, 294], "pruningconfig": 468, "pruningcriterion": [161, 183], "pruningschedul": 182, "pseudo": [191, 192, 232, 233, 358, 468, 491, 589, 593], "pt": [141, 462, 482, 491, 539, 545, 568, 584, 586, 588, 589], "pt_fp32_model": [264, 475], "pt_int8_model": [264, 475], "ptq": [188, 358, 489, 490, 494, 495, 501, 528, 531, 538, 543, 569, 586, 592, 593, 595], "ptq_static": [528, 568], "public": [377, 499, 559, 562], "publish": [488, 499, 540, 541, 544, 565, 592], "pull": [53, 54, 56, 399, 400, 402], "punct_nondigit_r": [267, 320], "punctuat": [217, 258, 267, 272, 320, 325], "pure": [289, 294, 583], "purif": 584, "purpos": [488, 489, 490, 491, 493, 535, 544, 564, 566, 585, 586], "push": [487, 491, 497, 500, 546, 583, 589, 592], "put": [141, 204, 246, 462, 526, 529], "py": [4, 134, 136, 152, 172, 187, 188, 268, 270, 271, 272, 299, 321, 323, 324, 325, 377, 458, 493, 501, 505, 524, 528, 531, 539, 543, 549, 551, 552, 553, 559, 562, 566, 568, 569, 571, 572, 574, 575, 577, 578, 579, 586, 590, 593], "pycocotool": [270, 323, 534], "pyhessian": 136, "pylanc": 524, "pylint": 500, "pyobject": 534, "pypi": [539, 559, 562], "pypi_token": [559, 562], "pyproject": [559, 562], "pytest": 500, "python": [4, 61, 134, 139, 141, 204, 222, 246, 266, 319, 377, 407, 458, 462, 463, 483, 485, 501, 504, 524, 526, 528, 531, 534, 539, 543, 549, 555, 558, 564, 568, 569, 571, 572, 574, 577, 579, 583, 584, 594], "python3": 534, "pythonmultiheadattentionprun": 176, "pytorch": [155, 157, 158, 162, 165, 168, 171, 172, 175, 180, 186, 187, 188, 201, 202, 204, 207, 211, 218, 220, 225, 227, 243, 244, 246, 249, 253, 259, 264, 265, 274, 275, 295, 297, 300, 302, 310, 327, 328, 337, 358, 368, 475, 476, 483, 487, 492, 500, 501, 502, 504, 505, 506, 507, 523, 524, 525, 529, 530, 532, 535, 538, 539, 541, 543, 544, 545, 546, 547, 549, 552, 553, 554, 555, 564, 566, 575, 578, 579, 583, 584, 585, 589, 590, 592, 595, 597], "pytorch_aliblad": 554, "pytorch_amp": 554, "pytorch_channels_last": [551, 554], "pytorch_cpu": 507, "pytorch_dataload": 238, "pytorch_fx": [204, 211, 246, 253, 543, 585], "pytorch_inc_bf16": 554, "pytorch_inc_dynamic_qu": 554, "pytorch_inc_huggingface_optimum_dynam": 554, "pytorch_inc_huggingface_optimum_stat": 554, "pytorch_inc_static_quant_fx": 554, "pytorch_inc_static_quant_ipex": 554, "pytorch_inc_static_quant_ipex_xpu": 554, "pytorch_ipex": [204, 211, 246, 253, 543, 585, 597], "pytorch_ipex_bf16": 554, "pytorch_ipex_fp32": 554, "pytorch_ipex_int8_dynamic_qu": 554, "pytorch_ipex_int8_static_qu": 554, "pytorch_jit_script": [551, 554], "pytorch_jit_script_ofi": 554, "pytorch_jit_trac": 554, "pytorch_jit_trace_ofi": 554, "pytorch_lightning_bf16_cpu": 554, "pytorch_prun": [180, 266], "pytorch_torchdynamo_jit_script": 554, "pytorch_torchdynamo_jit_script_ofi": 554, "pytorch_torchdynamo_jit_trac": 554, "pytorch_torchdynamo_jit_trace_ofi": 554, "pytorchalignimagechannel": [218, 259], "pytorchbasemodel": 337, "pytorchbasepattern": [167, 181], "pytorchbaseprun": 172, "pytorchbasicprun": 173, "pytorchbertdataset": [202, 244], "pytorchblockmaskprun": 174, "pytorchcifar10": [204, 246], "pytorchcifar100": [204, 246], "pytorchcriterion": [155, 220], "pytorchcropresizetransform": [218, 259], "pytorchcrossentropyloss": [155, 220], "pytorchdataload": [199, 241], "pytorchdataset": [204, 246], "pytorchdynamo": 492, "pytorchfashionmnist": [204, 246], "pytorchfilt": [211, 253], "pytorchfxmodel": 337, "pytorchimagenetraw": [207, 249], "pytorchintermediatelayersknowledgedistillationloss": [155, 220], "pytorchintermediatelayersknowledgedistillationlosswrapp": [155, 220], "pytorchknowledgedistillationloss": [155, 220, 543], "pytorchknowledgedistillationlosswrapp": [155, 220], "pytorchloss": [274, 327], "pytorchmetr": [274, 327], "pytorchmnist": [204, 246], "pytorchmodel": [283, 284, 286, 287, 288, 337], "pytorchmxnettransform": [218, 259], "pytorchmxnetwrapdataset": [204, 246], "pytorchmxnetwrapfunct": [204, 218, 246, 259], "pytorchnormalizetransform": [218, 259], "pytorchoptim": [157, 225], "pytorchpatternlockprun": 177, "pytorchpatternninm": 170, "pytorchpatternnxm": 171, "pytorchprogressiveprun": 178, "pytorchretrainfreeprun": 179, "pytorchselfknowledgedistillationloss": 155, "pytorchselfknowledgedistillationlosswrapp": 155, "pytorchsgd": [157, 225], "pytorchtransform": [218, 259], "pytorchtranspos": [218, 259], "q": [31, 32, 93, 95, 117, 431, 433, 444, 486, 490, 492, 497, 589, 592], "q_conf": 530, "q_config": [29, 146, 264, 475, 505], "q_dataload": [191, 192, 232, 233, 304, 305, 306, 307, 309, 310, 311, 312, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 537, 595], "q_func": [191, 192, 232, 233, 304, 305, 306, 307, 309, 310, 311, 312, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 505, 506, 543, 595], "q_hook": [191, 192, 232, 233, 304, 305, 306, 307, 309, 310, 311, 312, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370], "q_max": [497, 592], "q_min": [497, 592], "q_model": [136, 140, 188, 276, 358, 486, 489, 490, 494, 496, 501, 525, 526, 528, 531, 533, 536, 537, 542, 543, 545, 566, 567, 586, 587, 588, 589], "q_weight": 32, "q_x": [497, 592], "qa": [271, 272, 324, 325, 504], "qactivationoper": 6, "qargmaxoper": 7, "qas_id": [218, 259], "qat": [98, 145, 188, 276, 336, 530, 531, 538, 543, 586], "qat_clone_funct": 102, "qat_op_name_dict": 188, "qattent": 8, "qattentionoper": 8, "qbinari": 9, "qbinaryoper": 9, "qconcat": 10, "qconcatoper": 10, "qconfig": [2, 146, 482, 491, 589, 593], "qconvoper": 11, "qd": 490, "qdirect": 12, "qdirectoper": 12, "qdq": [30, 73, 98, 99, 128, 146, 187, 188, 262, 263, 264, 435, 473, 474, 475, 494, 505, 528, 533, 538, 554, 555, 586, 590, 592], "qdq_enabl": [34, 381], "qdq_op_fp32_bia": 188, "qdq_op_fp32_bias_qdq": 188, "qdq_op_int32_bia": 188, "qdq_tensor": 32, "qembedlayernorm": 13, "qembedlayernormalizationoper": 13, "qgather": 14, "qgatheroper": 14, "qgemm": 16, "qgemmoper": 16, "qglobalaveragepooloper": 15, "qintegerop": [538, 586], "qkv": 176, "qkv_modul": 176, "qkv_name": 176, "qlinear": [188, 204, 211, 246, 253, 274, 327, 473, 505, 554], "qlinear2qdq": [261, 472], "qlinearaveragepool": 24, "qlinearconv": 11, "qlinearglobalaveragepool": 15, "qlinearmatmul": 19, "qlinearop": [262, 473, 528, 538, 555, 586, 598], "qlora": [491, 497, 589], "qmatmuloper": 19, "qmax": 146, "qmaxpool": 20, "qmaxpooloper": 20, "qmin": 146, "qmodel": [136, 493, 495], "qnli": [202, 244, 526, 542, 598], "qop_registri": 22, "qoper": [6, 22, 187, 188, 533, 567], "qpad": 23, "qpadoper": 23, "qpooloper": 24, "qqp": [202, 244, 526, 542, 598], "qresiz": 26, "qresizeoper": 26, "qscheme": 507, "qsplit": 27, "qsplitoper": 27, "qsym_model": 2, "qt_config": [34, 381], "qtensor_to_tensor": 2, "qtype": [30, 31, 505], "quadrat": 491, "quala": 584, "qualiti": [267, 320, 524], "quan": 568, "quan_model": 134, "quant": [32, 134, 146, 187, 188, 316, 339, 374, 380, 491, 497, 501, 524, 541, 543, 586], "quant_aware_train": 585, "quant_config": [380, 486, 487, 489, 490, 491, 492, 493, 494, 495, 546], "quant_dequant_data": 30, "quant_format": [187, 188, 264, 475, 533, 567], "quant_level": [187, 188, 567, 589, 592, 595], "quant_max": 507, "quant_min": 507, "quant_mod": [33, 316, 374, 380, 506, 507], "quant_mode_from_pattern": [316, 374], "quant_opt": 376, "quant_tensor": 32, "quant_typ": 376, "quantconf": 302, "quantformat": 31, "quantif": [489, 491, 494, 589, 592], "quantil": 595, "quantit": 491, "quantiti": 528, "quantiz": [2, 4, 5, 30, 31, 32, 34, 35, 74, 78, 80, 82, 85, 93, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 142, 143, 146, 150, 152, 153, 154, 187, 188, 191, 192, 214, 221, 228, 232, 233, 256, 264, 265, 266, 276, 303, 309, 315, 319, 339, 340, 363, 365, 367, 376, 378, 379, 380, 461, 464, 467, 468, 469, 475, 477, 478, 482, 483, 488, 494, 496, 505, 512, 524, 525, 526, 531, 532, 535, 537, 538, 542, 545, 547, 552, 554, 555, 558, 571, 573, 574, 576, 582, 584, 590, 593, 594, 595, 596, 597], "quantizable_nod": 2, "quantizable_op": 146, "quantization_aware_training_conf": 543, "quantization_cfg": 505, "quantization_param": 29, "quantizationawaretrainingcallback": 154, "quantizationawaretrainingconfig": [187, 188, 468, 501, 530, 533, 543, 586, 588, 595], "quantizationconfig": 187, "quantizationmod": 31, "quantize_config": [100, 506], "quantize_data": 31, "quantize_data_per_channel": 31, "quantize_data_with_scale_zero": 31, "quantize_graph": 97, "quantize_graph_bas": [98, 435], "quantize_graph_bn": [98, 435], "quantize_graph_common": 97, "quantize_graph_concatv2": [98, 435], "quantize_graph_conv": [98, 435], "quantize_graph_for_intel_cpu": [98, 435], "quantize_graph_matmul": [98, 435], "quantize_graph_pool": [98, 435], "quantize_help": 100, "quantize_lay": 100, "quantize_layer_add": 103, "quantize_layer_bas": 103, "quantize_layer_bn": 103, "quantize_model": [493, 494, 495, 497], "quantize_nod": [264, 475], "quantize_nparrai": 31, "quantize_per_channel": [497, 592], "quantize_per_tensor_absmax": [497, 592], "quantize_rang": 31, "quantize_recip": 102, "quantize_sym_model": 2, "quantize_wrapp": 100, "quantizeconfig": [101, 102], "quantized_data": 31, "quantized_dict": 136, "quantized_model": [504, 573, 577, 578], "quantized_nod": [93, 431], "quantized_value_typ": 31, "quantizedconcatv2": [110, 120, 437, 447], "quantizedconv": [77, 78, 421, 422], "quantizeddeconv": [77, 421], "quantizediniti": 31, "quantizedinput": [214, 256, 594], "quantizedmatmul": [79, 80, 423, 424], "quantizedmatmulwithbiasanddequant": [80, 424], "quantizedrnnconvert": 85, "quantizedvalu": 31, "quantizedvaluetyp": 31, "quantizegraph": [118, 445], "quantizegraphbas": [118, 445], "quantizegraphforintel": [122, 449], "quantizegraphhelp": [125, 452], "quantizelay": 106, "quantizelayeradd": 105, "quantizelayerbas": 106, "quantizelayerbatchnorm": 107, "quantizelinear": 31, "quantizenodebas": [118, 445], "quantizev2": [84, 428], "quantizewrapp": [102, 108], "quantizewrapperbas": 108, "quantiztaion": [187, 188], "quantopt": 376, "quanttyp": [31, 376], "queri": [2, 33, 134, 146, 165, 176, 187, 188, 380, 497, 506, 507, 574, 586], "query_framework_cap": 506, "query_fused_pattern": 505, "query_fw_cap": [505, 507], "query_id": 572, "query_layer_nam": 176, "query_quantizable_nod": 2, "query_task_statu": 574, "querybackendcap": [505, 506], "question": [218, 259, 271, 272, 324, 325, 497, 499, 500, 504, 505, 539, 547, 571, 583, 592, 594, 598], "question_text": [218, 259], "queue": 571, "quick": [535, 544, 583, 596, 597], "quickli": [496, 541, 595, 596], "quint8": 31, "quit": 583, "qweight_config_path": 589, "qwen2": [504, 584], "r": [31, 129, 151, 453, 489, 490, 491, 493, 495, 497, 528, 539, 565, 566, 568, 569, 571, 572, 586, 598], "r1": [134, 458], "r34": 501, "race": 499, "rais": [53, 54, 56, 91, 139, 141, 146, 162, 168, 175, 184, 270, 297, 298, 299, 323, 328, 377, 399, 400, 402, 462, 463, 504, 524, 566, 583, 584], "ram": [141, 462], "ran": [154, 260], "rand": [491, 497, 547, 592], "randn": [188, 533], "random": [42, 134, 187, 188, 214, 218, 256, 259, 282, 306, 308, 362, 366, 388, 483, 491, 502, 543, 583, 585, 594, 597], "random_crop": [214, 256, 594], "random_flip_left_right": [214, 256, 594], "random_se": [187, 188, 306, 362, 543, 597], "randomcrop": 594, "randomcroptftransform": [218, 259], "randomcroptransform": [218, 259], "randomhorizontalflip": [218, 259, 543, 594], "randomli": [218, 259, 282, 306, 362, 497, 502, 592, 594, 595], "randomresizedcrop": [543, 594], "randomresizedcropmxnettransform": [218, 259], "randomresizedcroppytorchtransform": [218, 259], "randomresizedcroptftransform": [218, 259], "randomresizedcroptransform": [218, 259], "randomsearch": 282, "randomst": [306, 362], "randomtunestrategi": [311, 369], "randomverticalflip": [218, 259, 594], "rang": [205, 206, 218, 247, 248, 259, 377, 459, 468, 478, 486, 487, 488, 491, 492, 495, 497, 504, 505, 507, 523, 526, 528, 529, 530, 531, 543, 546, 567, 569, 582, 583, 586, 589, 592, 594], "rank": 531, "rapid": [539, 541], "rate": [491, 497, 543, 583, 586], "rather": [491, 537, 589], "ratio": [32, 129, 151, 167, 172, 184, 187, 188, 214, 218, 256, 259, 299, 453, 526, 541, 543, 567, 583, 594, 598], "ratiospars": 598, "raw": [31, 152, 203, 207, 210, 245, 249, 252, 309, 367, 542, 568, 595], "raw_cmd": 152, "raw_dir": 569, "raw_imag": [204, 246], "rb": [141, 462], "rcnn": 533, "re": [564, 570, 589], "reach": [167, 182, 187, 188, 301, 500, 525, 566, 583, 595], "read": [91, 134, 141, 207, 218, 249, 259, 298, 458, 462, 526, 588, 591], "read_csv": 567, "read_graph": [134, 458], "read_squad_exampl": [218, 259], "read_tensorflow_node_attr": 91, "readabl": 524, "readi": [570, 583], "readlin": [141, 462], "readm": [531, 577], "real": [31, 205, 221, 247, 459, 497, 506, 523, 531, 566, 573, 584, 586], "realdiv": [52, 55, 398, 401], "realiz": [531, 581, 588, 591], "rearrang": [32, 179, 491, 583, 589], "reason": [221, 491, 497, 499, 506, 525, 569, 589, 593, 595], "rebuild": [134, 458, 548, 557, 561], "rebuilt": [557, 561], "recal": [272, 274, 325, 327], "receiv": [574, 591], "recent": [488, 543, 544], "recip": [34, 165, 187, 188, 265, 302, 381, 487, 496, 504, 543, 546, 587, 589, 592, 595], "recipe_sampl": 165, "recipesearch": 165, "recogn": [267, 320, 595], "recognit": [531, 533, 583, 593], "recognitionimagenet": 598, "recommend": [223, 327, 504, 505, 526, 535, 555, 558, 563, 565, 583, 585, 595], "recommendation_system": [187, 188], "reconstruct": [134, 458, 584], "reconstruct_saved_model": [134, 458], "record": [136, 146, 155, 158, 202, 203, 204, 210, 220, 227, 244, 245, 246, 252, 483, 496, 526, 569, 589, 591, 593, 595], "record_output": [158, 227], "recov": [30, 340, 482, 483, 505, 530], "recover_config": 35, "recover_model_from_json": 482, "rectangl": 587, "recurs": [186, 483], "red": 598, "redpajama": [489, 592], "reduc": [17, 187, 188, 488, 489, 490, 491, 494, 495, 497, 505, 523, 530, 543, 544, 564, 565, 583, 584, 586, 587, 588, 589, 592, 595, 597], "reduce_rang": [3, 29, 30, 187, 188, 507, 585], "reducemax": 25, "reducemin": 25, "reduceminmaxoper": 25, "reduceoper": 25, "reduct": [583, 587, 597], "redund": [77, 79, 421, 423], "ref": [4, 134, 458], "refer": [30, 136, 150, 161, 169, 170, 171, 179, 180, 184, 187, 188, 202, 244, 267, 268, 274, 297, 299, 300, 320, 321, 327, 340, 358, 377, 489, 490, 492, 493, 494, 495, 501, 504, 505, 506, 522, 525, 526, 528, 530, 531, 533, 537, 539, 540, 542, 543, 544, 547, 552, 555, 566, 567, 569, 571, 572, 573, 581, 585, 587, 590, 594, 595], "reference_corpu": [268, 321], "refin": [495, 537, 583], "reflect": [542, 594], "refresh": [557, 561], "reg": [162, 173, 174, 179, 188], "reg_term": 181, "regard": [499, 588], "regardless": 499, "region": [489, 592], "regist": [4, 22, 139, 141, 147, 155, 157, 161, 162, 167, 168, 172, 175, 180, 181, 182, 183, 204, 211, 218, 220, 225, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 376, 462, 463, 480, 502, 505, 524, 526, 531, 542, 543, 565, 581, 592, 595], "register_algo": 524, "register_config": 524, "register_criterion": [161, 183], "register_customer_metr": 327, "register_forward_hook": 593, "register_neural_insights_workload": 480, "register_packag": [141, 462], "register_pattern": [167, 297], "register_prun": [172, 180, 299], "register_reg": 181, "register_schedul": [182, 301], "registercommand": 565, "registr": [147, 204, 211, 218, 246, 253, 259, 292], "registri": [161, 167, 172, 180, 181, 182, 183, 297, 299, 301, 502], "registry_criterion": [155, 220], "regress": [202, 244, 500, 528], "regul": [173, 174, 179], "regular": [181, 267, 298, 320], "regulariz": 181, "reinstal": 534, "reject": 499, "rel": [187, 188, 338, 543, 567, 585, 595, 597, 598], "relat": [166, 181, 260, 270, 289, 294, 297, 323, 376, 471, 507, 547, 571, 572, 583, 589, 597], "relationship": [188, 566], "relaunch": 565, "releas": [486, 490, 504, 539, 553, 555, 557, 561, 563, 575, 578, 579, 599], "relev": [306, 362, 506, 507, 524, 569, 583], "reli": [492, 543, 592], "religion": 499, "reload": [548, 565, 567, 570], "relu": [60, 64, 95, 406, 410, 433, 501, 535, 592, 593], "relu6": [60, 406, 535], "remain": 552, "remaind": 523, "remap": [56, 141, 402, 462], "remot": 564, "remov": [6, 31, 37, 43, 46, 60, 66, 69, 70, 71, 82, 84, 126, 163, 176, 272, 325, 378, 383, 389, 392, 406, 412, 415, 416, 417, 426, 428, 499, 543, 557, 561, 570, 577, 578, 583, 593], "removableactivationoper": 6, "remove_init_from_model_input": 31, "remove_training_nod": [62, 408], "removetrainingnodesoptim": [66, 412], "renam": [67, 413, 492, 590], "rename_batch_norm": [62, 408], "renamebatchnormoptim": [67, 413], "repeat": [528, 595], "repercuss": 499, "replac": [4, 142, 146, 272, 325, 464, 486, 487, 490, 524, 531, 543, 546, 555, 590], "replic": 595, "replica": 595, "repo": [202, 244, 498, 500, 526, 532, 557, 559, 561, 562, 599], "repo_id": [142, 464], "repo_typ": [142, 464], "report": [499, 500, 504, 574, 591], "repositori": [500, 559, 562], "repres": [31, 167, 171, 172, 180, 181, 184, 204, 209, 246, 251, 270, 272, 274, 323, 325, 327, 490, 495, 497, 499, 507, 523, 526, 533, 572, 583, 586, 587, 595], "represent": [31, 139, 463, 487, 491, 497, 499, 501, 523, 530, 546, 583, 586], "requant": [78, 80, 422, 424, 593], "requantize_cfg": 146, "request": [490, 504, 572, 573, 574, 577, 578, 579, 586], "requir": [146, 187, 188, 194, 303, 336, 357, 460, 488, 490, 491, 495, 497, 501, 505, 506, 522, 523, 525, 528, 530, 531, 535, 543, 544, 545, 548, 558, 564, 566, 571, 572, 575, 578, 579, 583, 586, 589, 590, 591, 592, 593, 595, 597], "requirements_pt": 539, "requirements_tf": 539, "requisit": 552, "rerang": [133, 457], "rerange_quant": [133, 457], "rerange_quantized_concat": [131, 455], "rerangequantizedconcat": [133, 457], "rerewrit": [37, 383], "resblock": 188, "rescal": [214, 218, 259, 594], "rescalekeraspretraintransform": [218, 259], "rescaletftransform": [218, 259], "rescaletransform": [218, 259], "research": [492, 504, 540, 592, 598], "reserv": [191, 192, 232, 233], "reserve_resourc": 574, "reset": 542, "reset_non_value_to_default": 298, "reset_none_to_default": 184, "reshap": [47, 53, 54, 59, 393, 399, 400, 405, 497, 592], "reshape_in0_ndef": [53, 54, 399, 400], "reshape_in1_ndef": [53, 54, 399, 400], "reshuffl": 525, "resid": [141, 462], "resiz": [17, 202, 203, 214, 218, 244, 245, 256, 259, 526, 594], "resize_method": [214, 256], "resize_shap": [209, 251, 526], "resize_sid": [214, 256, 594], "resizecropimagenet": [531, 594], "resizemxnettransform": [218, 259], "resizeoper": 26, "resizepytorchtransform": [218, 259], "resizetftransform": [218, 259], "resizetransform": [218, 259], "resizewithaspectratio": [214, 256], "resizewithratio": [218, 259, 594], "resnest50": 598, "resnet": [531, 598], "resnet101": 598, "resnet18": [504, 544, 549, 598], "resnet34": [501, 598], "resnet50": [188, 493, 504, 528, 531, 533, 544, 547, 551, 583, 586, 591, 598], "resnet50_fp32_pretrained_model": 531, "resnet50_torchvis": 528, "resnet50_v1": [528, 531, 543], "resnetv2": 598, "resnext101_32x8d": 598, "resolut": 523, "resolv": [501, 503], "resort": 543, "resourc": [529, 571, 574, 595], "respect": [497, 499, 535, 583, 592, 597], "respons": [345, 346, 349, 493, 577, 578, 579, 586], "rest": [146, 571, 572, 577, 578, 579], "restful_api_port": [572, 577, 578, 579], "restor": [491, 589], "restrict": [56, 141, 187, 188, 402, 462, 583, 591], "restructuredtext": 377, "result": [31, 134, 136, 146, 214, 218, 256, 259, 267, 270, 271, 272, 274, 320, 323, 324, 325, 327, 358, 365, 458, 468, 482, 483, 486, 489, 491, 494, 496, 497, 499, 502, 504, 525, 528, 529, 531, 538, 540, 542, 543, 552, 553, 564, 565, 568, 572, 573, 574, 575, 581, 583, 584, 586, 589, 591, 592, 593, 594, 595, 596, 598], "result_monitor_port": [572, 577, 578, 579], "result_path": [573, 577, 578], "resultmonitor": 574, "results_csv_path": 502, "resum": [187, 188, 191, 192, 232, 233, 304, 305, 307, 310, 311, 312, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370], "resume_from": [187, 188, 483], "retain": 523, "retrac": 588, "retrain": [179, 490, 530], "retrain_fre": [161, 175, 583], "retrainfreecriterion": 161, "retrainfreeprun": [179, 180], "retriev": [153, 200, 242, 459, 583], "return": [2, 4, 32, 40, 53, 54, 56, 60, 91, 102, 134, 135, 136, 141, 145, 146, 147, 152, 155, 157, 162, 165, 167, 168, 172, 175, 180, 181, 182, 184, 186, 191, 192, 204, 211, 214, 218, 219, 220, 225, 232, 233, 246, 253, 256, 259, 264, 267, 268, 270, 271, 272, 274, 280, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 386, 399, 400, 402, 406, 458, 460, 462, 468, 471, 475, 480, 482, 483, 488, 492, 493, 496, 497, 501, 502, 506, 507, 525, 526, 531, 542, 545, 577, 578, 579, 581, 583, 586, 589, 592, 593, 595], "return_int": 589, "reus": 492, "revers": [134, 567], "revert": [310, 318, 368, 376, 595], "reverted_data_typ": [318, 376], "review": [499, 500, 504, 584], "revis": [142, 464], "rewrit": [36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 162, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433], "rgb": [214, 256], "right": [141, 214, 256, 270, 323, 462, 497, 499, 500, 501, 564, 570, 592, 594], "rmax": [31, 495, 497, 586], "rmin": [31, 487, 495, 497, 546, 586], "rmse": [274, 327, 542, 595], "rnn": 85, "rnn_convert": 81, "rnn_detail": 85, "roberta": [202, 244, 526, 598], "roc": [265, 274, 289, 294, 302, 327], "role": [329, 460, 491, 497, 589, 592], "rollov": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525], "romanian": 583, "root": [165, 202, 203, 204, 207, 244, 245, 246, 249, 274, 327, 526, 531, 542, 543, 597], "root_linear": 166, "root_rank": 531, "roughli": [491, 497, 589], "rouhani": [487, 546], "round": [32, 129, 151, 453, 486, 491, 492, 497, 504, 584, 586, 589, 592], "round_": [497, 592], "round_multipli": 163, "row": [483, 497, 528, 567, 592], "rowi": 32, "rte": [202, 244, 526, 542, 598], "rtn": [32, 146, 492, 497, 524, 587, 589], "rtn_algo_entri": 524, "rtn_arg": [587, 589], "rtn_g32asym": 589, "rtn_quantiz": 32, "rtnconfig": [491, 496], "rtnw4g32asym": 598, "rtnw4g32sym": 598, "rule": [495, 528, 547, 583], "run": [2, 126, 134, 141, 152, 172, 184, 187, 188, 191, 192, 201, 217, 219, 232, 233, 243, 258, 298, 299, 306, 328, 358, 362, 378, 458, 462, 468, 491, 492, 495, 497, 504, 505, 522, 531, 534, 535, 543, 547, 549, 551, 552, 553, 555, 557, 558, 559, 561, 562, 564, 572, 573, 574, 575, 577, 578, 579, 584, 586, 589, 590, 591, 593, 595, 597], "run_arg": 492, "run_bench": 551, "run_clm": 568, "run_cmd": 595, "run_fn": [489, 490, 491, 492], "run_forward": 2, "run_glu": [552, 553, 575, 578, 579], "run_glue_optim": 552, "run_inst": 152, "run_quant": 593, "run_tun": 569, "run_tuning_dump_tensor": 593, "runner": [565, 570], "runs_v3": 593, "runtim": [486, 497, 500, 504, 505, 506, 508, 525, 528, 532, 535, 538, 544, 546, 549, 554, 555, 585, 589, 590, 595], "rw": 598, "s1": 595, "s2": 595, "s3": 595, "s4": 595, "s5": 595, "s6": 595, "s7": 595, "s8": [264, 475], "sa_optim": 159, "sacrif": [487, 546, 584], "safe": 500, "sagemak": [547, 555], "sai": 552, "salient": [32, 491, 583, 589], "same": [69, 127, 134, 179, 188, 202, 218, 244, 259, 270, 323, 379, 415, 458, 483, 487, 491, 496, 497, 505, 507, 522, 525, 526, 529, 531, 535, 543, 546, 548, 552, 557, 561, 583, 585, 586, 589, 592, 593, 594, 595], "sampl": [32, 63, 146, 187, 188, 196, 200, 202, 203, 204, 214, 218, 237, 242, 244, 245, 246, 256, 259, 274, 281, 306, 327, 362, 409, 459, 491, 495, 496, 497, 502, 525, 526, 532, 538, 565, 586, 589, 592, 594, 595, 597, 598], "sampler": [193, 195, 199, 201, 221, 234, 236, 238, 241, 243, 315, 373, 459, 491, 496, 525, 531], "sampling_s": [543, 597], "samsum": 598, "sapphir": [539, 541], "satisfactori": 569, "satisfi": [201, 243, 528, 539, 570], "satur": 594, "save": [91, 134, 140, 141, 162, 184, 187, 188, 204, 246, 263, 264, 303, 336, 358, 458, 460, 462, 468, 469, 474, 475, 478, 483, 492, 493, 497, 501, 505, 537, 543, 544, 545, 548, 552, 557, 561, 567, 572, 577, 578, 579, 582, 586, 587, 589, 592], "save_for_huggingface_upstream": [478, 543], "save_path": [134, 263, 264, 474, 475, 505, 545], "save_protobuf": 91, "save_to_disk": 505, "saved_dir": [478, 589], "saved_model": [134, 276, 458, 495, 587], "saved_model_sess": [336, 460], "saved_model_tag": [336, 460], "saved_result": [491, 492, 545, 568, 589], "savedmodel": [328, 336, 358, 460], "scalabl": [488, 495, 497, 504, 539, 541, 544, 584, 586, 588], "scalar": [191, 192, 232, 233, 328, 358, 468, 542, 586, 595], "scale": [4, 31, 32, 86, 127, 129, 143, 146, 150, 151, 214, 218, 256, 259, 379, 429, 453, 467, 486, 487, 489, 490, 491, 495, 497, 546, 586, 589, 591, 592, 594, 595], "scale_c": [129, 151, 453], "scale_dtyp": [478, 589], "scale_info": 483, "scale_nam": 31, "scale_propag": [81, 425], "scale_valu": 31, "scalepropagationtransform": [86, 429], "scales_per_op": [127, 379], "scaling_governor": 550, "scan": [500, 504], "scenario": [491, 492, 497, 505, 522, 529, 543, 583, 589], "scene": 583, "schedul": [162, 172, 173, 174, 179, 181, 187, 188, 266, 295, 299, 491, 543, 571, 572, 574, 582], "schedule_task": 574, "schema": 90, "scheme": [30, 31, 32, 143, 146, 467, 505, 506, 507, 525, 535, 555, 589, 595, 597], "scienc": 539, "scipi": [306, 362], "scope": [134, 458, 492, 500, 506, 543], "score": [161, 167, 172, 176, 183, 187, 188, 267, 268, 270, 271, 272, 274, 299, 320, 321, 323, 324, 325, 327, 365, 471, 501, 542, 567, 581, 583, 591, 595], "script": [165, 267, 268, 271, 272, 320, 321, 324, 325, 500, 504, 531, 538, 547, 551, 554, 555, 558, 575, 577, 584], "script_url": [575, 577, 578, 579], "sdist": [559, 562], "seamlessli": [487, 546, 571, 583, 595], "search": [134, 165, 179, 188, 191, 192, 232, 233, 265, 267, 277, 280, 281, 282, 302, 306, 320, 362, 483, 491, 492, 494, 504, 524, 538, 542, 547, 548, 558, 583, 584, 589, 592, 593, 595, 596], "search_algorithm": [188, 279, 502], "search_result": 502, "search_spac": [188, 277, 280, 281, 282], "searcher": [165, 188, 282], "searching_result": 165, "sec": 598, "second": [50, 141, 166, 187, 188, 202, 244, 363, 396, 462, 483, 491, 497, 528, 543, 557, 561, 565, 577, 578, 589, 592, 595, 597], "secret": [559, 562], "section": [377, 507, 524, 528, 529, 530, 564, 567, 570, 583, 585, 589, 597], "secur": [139, 463, 504, 566, 584, 599], "sed": 590, "see": [139, 218, 259, 267, 320, 463, 491, 497, 499, 500, 501, 503, 524, 540, 543, 557, 558, 561, 564, 565, 569, 570, 589, 592, 593, 595], "seed": [134, 187, 188, 282, 483, 491, 543, 597], "seek": [141, 462, 589], "seem": 524, "seen": [483, 505], "segment": [202, 244, 268, 270, 321, 323, 500], "segment_id": [218, 259, 543], "select": [181, 184, 188, 202, 244, 478, 491, 497, 501, 502, 523, 538, 539, 564, 583, 586, 589, 593, 595], "self": [49, 146, 165, 187, 188, 338, 395, 492, 505, 506, 525, 526, 538, 542, 566, 591, 593, 595], "selfknowledg": [155, 220], "selfknowledgedistillationloss": [155, 220], "selfknowledgedistillationlossconfig": [188, 529, 543], "selfmhasearch": 165, "semant": [505, 535], "send": [500, 506], "senior": 523, "sensit": [161, 283, 299, 538, 583], "sensitivitybalanc": 598, "sentenc": 524, "sentencepiec": 567, "sep": [504, 584], "separ": [303, 499, 524, 537, 540, 572, 574, 582, 585], "seq_length": [202, 244], "seqev": 567, "seqlen": [491, 504], "seqtyp": 91, "sequenc": [49, 91, 166, 169, 170, 187, 188, 202, 217, 218, 244, 258, 259, 268, 272, 297, 321, 325, 395, 491, 497, 505, 526, 535, 583, 589, 594], "sequencediagram": [506, 507, 574], "sequenti": [200, 242, 303, 305, 359, 361, 459, 496, 595], "sequentialsampl": [200, 242, 459], "seri": [214, 256, 504, 539, 543, 594], "serial": [139, 141, 462, 463], "serv": [188, 336, 460, 497, 572, 577, 578, 579], "serve_log": [572, 577, 578, 579], "server": [564, 566, 569, 572, 577, 578, 579], "servic": [504, 564, 571, 584], "sess": [134, 336, 458, 460], "session": [32, 134, 201, 243, 336, 458, 460, 543, 593], "sessionopt": 353, "set": [2, 31, 37, 82, 91, 101, 134, 141, 146, 152, 157, 184, 187, 188, 191, 192, 193, 202, 204, 207, 218, 219, 224, 225, 232, 233, 234, 244, 246, 249, 259, 270, 276, 289, 294, 298, 303, 323, 327, 328, 336, 357, 358, 377, 383, 426, 458, 459, 460, 462, 468, 480, 483, 488, 489, 491, 492, 493, 494, 496, 497, 499, 502, 504, 506, 522, 525, 526, 529, 531, 533, 535, 537, 538, 542, 543, 544, 547, 549, 551, 565, 566, 567, 568, 569, 570, 574, 577, 583, 585, 586, 589, 591, 592, 595, 597], "set_all_env_var": [152, 219], "set_backend": 224, "set_eager_execut": 357, "set_env_var": [152, 219], "set_epoch": 531, "set_loc": [486, 489, 490, 491, 493], "set_modul": 146, "set_nam": 91, "set_opt": 567, "set_random_se": [187, 188, 483], "set_resume_from": [187, 188, 483], "set_tensor": 505, "set_tensorboard": [187, 188, 483], "set_workspac": [187, 188, 483], "setter": 221, "settings_recommend": 524, "setup": [504, 528, 535, 539, 559, 562, 566, 568, 569, 571, 572, 583], "setuptool": 567, "sever": [125, 182, 218, 259, 301, 303, 452, 487, 488, 497, 502, 528, 529, 530, 538, 543, 544, 546, 557, 561, 572, 583, 585, 587, 592, 594, 595, 597], "sex": 499, "sexual": 499, "sf": 534, "sgd": [157, 187, 188, 225, 529, 543, 585, 597], "sh": [569, 593], "shaji": 491, "shallow": 529, "shape": [31, 32, 91, 134, 167, 205, 206, 214, 218, 247, 248, 256, 259, 270, 323, 458, 459, 491, 495, 497, 504, 526, 535, 536, 543, 566, 567, 589, 592, 594], "shape_overrid": 128, "shard": [142, 464], "share": [31, 32, 68, 84, 95, 127, 379, 414, 428, 433, 491, 497, 534, 535, 589, 592, 595], "share_qdq_y_pattern": [92, 430], "shared_criterion": 592, "shareqdqforitexypatternoptim": [95, 433], "shell": 593, "shen": [540, 583], "shift": [129, 151, 214, 256, 453, 565, 594], "shop": 524, "short": 595, "shortcut": [202, 244, 526], "shorter": [202, 218, 244, 259, 526, 594], "shot": [161, 179, 182, 228, 299, 301, 491, 495, 502, 538, 543, 583, 584, 589], "should": [41, 101, 102, 141, 154, 163, 165, 176, 187, 188, 191, 192, 200, 202, 204, 218, 223, 232, 233, 242, 244, 246, 259, 264, 268, 321, 327, 328, 358, 377, 387, 462, 468, 475, 483, 490, 492, 493, 494, 495, 497, 501, 502, 505, 506, 507, 526, 529, 531, 542, 543, 550, 559, 562, 564, 566, 567, 581, 583, 586, 589, 594, 595, 597], "shouldn": 570, "show": [172, 483, 487, 497, 499, 529, 531, 543, 546, 550, 565, 566, 567, 569, 572, 577, 578, 579, 592, 595, 596], "show_memory_info": 483, "show_nam": [132, 456], "show_op": [132, 456], "shown": [487, 489, 497, 502, 525, 528, 529, 542, 543, 546, 558, 567, 569, 581, 582, 583, 587, 592, 595], "shrink": 583, "shuffl": [193, 195, 199, 201, 221, 234, 236, 241, 243, 459, 525, 543, 586], "shufflenet": 598, "side": [218, 259, 526, 558, 594], "sidebar": 564, "sigma": 528, "sigmoid": 533, "sign": [318, 376, 491, 497, 500, 504, 507, 523, 566, 584, 586, 589, 591], "signatur": [336, 460], "signed_flag": [318, 376], "signifi": 91, "signific": [495, 497, 583, 584, 587, 592], "significantli": [488, 491, 543, 544, 567, 569, 583, 595], "signround": 491, "sigopt": [190, 231, 584], "sigopt_api_token": [543, 591, 595], "sigopt_experiment_id": 591, "sigopt_experiment_nam": [543, 591, 595], "sigopt_project_id": [543, 591, 595], "sigopttunestrategi": [191, 232], "silicon": [487, 546], "similar": [176, 497, 543, 568, 585, 592, 595, 597], "similarli": [497, 592], "simpl": [218, 259, 495, 497, 539, 543, 583, 591, 592, 595], "simple_infer": 146, "simple_progress_bar": 31, "simplest": [502, 523, 550], "simpli": [531, 545, 547, 549, 552, 564, 572], "simplic": [497, 592], "simplifi": [547, 558, 564, 583, 584], "simul": [160, 492, 507], "simultan": [176, 547, 571, 582, 585], "sinc": [187, 188, 265, 267, 289, 294, 302, 320, 491, 497, 529, 533, 542, 558, 564, 569, 582, 589, 590], "since_vers": 90, "singl": [161, 182, 187, 188, 196, 202, 218, 237, 244, 259, 270, 299, 301, 323, 327, 358, 459, 501, 526, 528, 539, 570, 583, 587, 592], "single_output": [274, 327], "singleton": [96, 434, 483], "site": 590, "situat": [187, 188, 531, 583], "sixteen": [488, 544], "size": [84, 169, 170, 195, 196, 201, 204, 210, 214, 218, 236, 237, 243, 246, 252, 256, 259, 297, 336, 338, 428, 459, 460, 483, 487, 490, 491, 497, 499, 506, 525, 526, 531, 534, 543, 546, 564, 565, 581, 583, 586, 587, 589, 592, 594, 597, 598], "skill": 566, "skip": [141, 462, 491, 593, 595], "skip_convers": 89, "skip_first": [315, 373], "skylak": 539, "slave": [376, 595], "slice": 91, "slim": [163, 164, 165, 270, 323, 334, 336, 460, 545, 583], "slim_sess": [336, 460], "slower": 589, "small": [4, 53, 54, 55, 56, 365, 399, 400, 401, 402, 491, 497, 502, 569, 570, 583, 589, 595, 598], "smaller": [56, 218, 259, 402, 487, 529, 543, 546, 583, 594], "smbo": 595, "smooth": [4, 126, 127, 134, 150, 187, 188, 315, 339, 378, 379, 492, 524, 583, 595], "smooth_distribut": 4, "smooth_quant": [5, 140, 146, 149, 187, 188, 524, 586, 592], "smooth_quant_arg": [187, 188, 586, 592], "smooth_quant_calibr": 97, "smooth_quant_en": 146, "smooth_quant_entri": 524, "smooth_quant_scal": 97, "smoothquant": [30, 146, 150, 340, 489, 491, 492, 494, 497, 504, 541, 584, 589, 596], "smoothquant_scale_info": 146, "smoothquantcalibr": [126, 378], "smoothquantcalibrationllm": [126, 378], "smoothquantconfig": [489, 494, 495], "smoothquantsampl": [315, 373], "smoothquantscal": [127, 379], "smoothquantscalerllm": [127, 379], "smt": [267, 320], "snapshot": [482, 568], "snip": [161, 187, 188, 299, 538, 583, 598], "snip_momentum": [161, 187, 188, 543, 583], "snip_momentum_progress": [187, 188], "snip_progress": [187, 188], "snipcriterion": 161, "snipmomentumcriterion": 161, "snipmomentumprun": 299, "snippet": [524, 538], "snipprun": 299, "so": [32, 91, 218, 259, 376, 487, 491, 492, 495, 497, 501, 505, 528, 534, 538, 544, 546, 550, 552, 568, 569, 570, 586, 588, 589, 592, 593, 594, 596], "social": [499, 584], "socio": 499, "socket": [152, 219, 483, 572, 574, 598], "soft": 188, "softmax": 529, "softwar": [504, 540, 583, 584, 590], "solut": [129, 151, 453, 489, 491, 494, 497, 504, 505, 506, 534, 549, 553, 558, 584, 589, 590, 592, 595, 596], "solv": [497, 500, 586, 590], "some": [163, 165, 187, 188, 202, 244, 298, 491, 497, 506, 507, 524, 526, 528, 533, 539, 542, 543, 566, 567, 568, 569, 572, 581, 583, 586, 588, 589, 592, 593, 595, 596], "someth": [191, 192, 204, 232, 233, 246, 358, 468], "sometim": [91, 497, 501, 528, 586], "somewhat": 506, "soon": 541, "sort": [187, 188, 309, 367, 491, 528, 567, 589, 595], "sort_valu": 567, "sorted_data": 567, "sota": [504, 584], "sound": 539, "sourcspace": [152, 173, 174, 179, 187, 188, 191, 192, 232, 233, 265, 272, 277, 280, 281, 282, 302, 306, 309, 316, 325, 328, 358, 362, 367, 374, 492, 496, 497, 499, 500, 502, 505, 506, 507, 524, 583, 586, 592, 597], "spacetobatchnd": [44, 390], "spanbert": 598, "spars": [163, 177, 299, 526, 584], "sparse_dummy_v2": [206, 248, 526], "sparse_gpt": 583, "sparse_ratio": [206, 248, 526], "sparsecategoricalcrossentropi": 597, "sparsecategoricalcrossentropyloss": 155, "sparsedummydataset": [206, 248], "sparsegpt": [180, 583], "sparsegptprun": 180, "sparsiti": [167, 169, 170, 172, 173, 174, 177, 179, 182, 184, 187, 188, 299, 301, 483, 491, 504, 526, 538, 543, 596, 598], "sparsity_decay_typ": [187, 188, 543, 583], "speak": [491, 497, 589], "special": [102, 141, 165, 338, 462, 492, 501, 525, 542, 543, 581, 583, 589, 596], "specif": [30, 90, 102, 152, 157, 184, 187, 188, 202, 203, 204, 205, 209, 211, 225, 244, 245, 246, 247, 251, 253, 283, 284, 286, 287, 288, 327, 358, 459, 480, 487, 488, 490, 491, 495, 499, 502, 505, 506, 523, 524, 525, 528, 529, 535, 537, 541, 542, 543, 544, 545, 546, 547, 551, 552, 554, 558, 564, 566, 572, 581, 583, 585, 589, 595, 597], "specifi": [96, 141, 146, 152, 184, 187, 188, 191, 192, 218, 219, 232, 233, 259, 265, 270, 274, 276, 277, 280, 289, 294, 302, 303, 323, 327, 328, 358, 377, 434, 462, 468, 482, 483, 497, 506, 507, 531, 535, 542, 543, 552, 566, 572, 576, 577, 578, 579, 581, 583, 585, 589, 594, 595, 597], "speed": [497, 523, 543, 555, 583, 584, 586, 595], "speedup": [497, 532, 538, 586], "spellcheck": 500, "spent": 595, "spike": 569, "spiq": [30, 150, 340, 497, 592], "split": [17, 31, 68, 217, 218, 258, 259, 414, 497, 501, 587, 589, 592, 594], "split_shared_bia": 31, "split_shared_input": [62, 408], "splitoper": 27, "splitsharedinputoptim": [68, 414], "spot": [489, 592], "spr": [33, 380], "sprase": 163, "sq": [495, 541, 592], "sq_config": 494, "sq_weight_tensor": 134, "sq_weights_nod": 134, "sqlalchemi": 534, "sqrt": [55, 401, 528], "squad": [202, 218, 244, 259, 271, 272, 274, 324, 325, 327, 526, 542, 583, 594, 598], "squadexampl": [218, 259], "squadf1": [274, 327, 542], "squadv1": [218, 259, 594], "squar": [274, 309, 327, 367, 491, 528, 542, 569, 595], "squeez": [64, 410, 501], "squeezenet": 598, "squeezer": 166, "squential": [200, 242], "src": [91, 565], "ssd": [501, 533, 598], "ssd_mobilenet_v1": 543, "ssh": [531, 564], "sst": [583, 598], "sst2": 553, "st": [202, 244, 526, 542], "stabil": [491, 589], "stabilityai": [489, 592], "stabl": [504, 539, 583, 584], "stablelm": [489, 592], "stack": 504, "stage": [305, 310, 359, 361, 368, 529, 583, 593, 595], "stai": [489, 491, 492, 589, 592], "stand": [583, 595], "stand_norm": [205, 206, 247, 248, 459, 526], "standard": [204, 218, 246, 259, 500, 506, 524, 528, 533, 542, 594, 595], "star": 500, "start": [187, 188, 218, 259, 270, 323, 363, 539, 569, 584, 594, 595, 596, 599], "start_epoch": [543, 585, 597], "start_posit": [218, 259], "start_step": [172, 187, 188, 299, 543, 583, 585], "startup": 565, "state": [136, 166, 491, 507, 550, 583], "state_dict": [136, 531, 589, 593], "statement": 524, "static": [29, 30, 33, 150, 165, 188, 264, 316, 340, 358, 374, 380, 475, 491, 492, 505, 506, 507, 528, 533, 538, 543, 547, 552, 553, 554, 555, 558, 564, 567, 575, 577, 578, 579, 587, 592, 595, 598], "static_config": 494, "static_graph": 165, "static_group": 589, "static_ipex": 552, "static_qu": [493, 524], "static_quant_conf": 504, "static_quant_export": [264, 475], "staticmethod": [125, 452], "staticquantconfig": [380, 490, 493, 494, 495, 496], "statist": [483, 484], "statu": [165, 480, 492, 499, 525, 546, 574, 577, 578, 579, 581, 583], "std": [214, 218, 256, 259, 543, 594], "std_valu": [214, 256], "stderr": 483, "step": [161, 171, 172, 173, 174, 178, 179, 182, 187, 188, 297, 299, 301, 468, 486, 489, 490, 491, 497, 506, 507, 528, 529, 530, 531, 543, 559, 562, 564, 577, 578, 579, 582, 583, 585, 588, 589, 591, 592, 593, 595], "step1": [316, 374], "step2": [316, 374], "step3": [316, 374], "step4": [316, 374], "step5": [316, 374], "step_siz": 592, "still": [492, 494, 497, 523, 543, 570, 584, 586, 588], "stock": [33, 380, 553, 592], "stop": [187, 188, 496, 543, 595, 596, 597], "stopgradi": [66, 412], "storag": [141, 462, 491, 497, 536, 542, 566, 569, 589, 592], "store": [126, 161, 162, 165, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 187, 188, 204, 246, 292, 299, 378, 537], "storywrit": 598, "str": [2, 30, 31, 32, 126, 135, 136, 141, 142, 144, 145, 146, 147, 155, 157, 162, 165, 186, 187, 188, 202, 203, 204, 211, 214, 218, 220, 224, 225, 244, 245, 246, 253, 256, 259, 263, 264, 267, 268, 270, 272, 274, 281, 292, 315, 318, 320, 321, 323, 325, 327, 339, 340, 347, 352, 354, 356, 357, 373, 376, 377, 378, 462, 464, 465, 471, 474, 475, 478, 480, 483, 484, 491, 492, 495, 524, 525, 526, 542, 575, 585, 593, 594], "str2arrai": 483, "str_label": 542, "straightforward": [491, 495, 497, 583, 589, 592], "strategi": [2, 146, 179, 187, 188, 189, 204, 230, 246, 266, 319, 496, 497, 504, 505, 506, 507, 512, 523, 524, 525, 531, 538, 543, 552, 564, 569, 584, 585, 586, 588, 589, 590, 596, 597], "strategy_kwarg": [187, 188, 591, 595], "strategy_registri": [312, 370, 595], "stream": [483, 598], "streamlin": [539, 571, 584], "strftime": [187, 188], "stride": [91, 218, 259, 594], "string": [31, 102, 134, 139, 141, 152, 155, 157, 165, 167, 172, 180, 181, 182, 184, 187, 188, 204, 220, 225, 246, 260, 265, 267, 270, 276, 277, 278, 280, 281, 289, 294, 297, 298, 299, 300, 301, 302, 320, 323, 332, 336, 458, 460, 462, 463, 471, 480, 483, 495, 542, 594], "strip": [53, 54, 56, 69, 70, 134, 399, 400, 402, 415, 416, 458, 593], "strip_equivalent_nod": [62, 134, 408, 458], "strip_unused_lib": [134, 458], "strip_unused_nod": [62, 134, 408, 458], "stripequivalentnodesoptim": [69, 415], "stripunusednodesoptim": [70, 416], "stroke": 595, "structur": [166, 177, 178, 187, 188, 299, 317, 375, 483, 492, 497, 538, 563, 565, 568, 577, 583, 584, 586, 593, 596, 598], "stsb": 598, "student": [154, 158, 187, 188, 202, 227, 244, 260, 526, 529, 530, 598], "student1_layer_name1": 188, "student1_layer_name2": 188, "student2_layer_name1": 188, "student2_layer_name2": 188, "student_layer_nam": 188, "student_layer_output_process": 188, "student_loss": [529, 530], "student_model": [155, 188, 220, 543], "student_output": [529, 530], "studio": [504, 555, 564, 574, 596], "style": [196, 209, 237, 251, 377, 524, 526, 537], "style_fold": [209, 251, 526], "style_transf": 526, "style_transfer_dataset": [208, 250], "styletransferdataset": [209, 251], "sub": [52, 146, 152, 165, 219, 398, 502, 524, 595], "sub_class": [327, 358], "sub_modul": 524, "subclass": [4, 22, 147, 157, 167, 172, 180, 182, 197, 201, 204, 211, 218, 225, 239, 243, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 505], "subfold": [204, 246, 567], "subgraph": [41, 52, 91, 145, 387, 398, 587, 595], "subgraphstyl": 595, "subject": 540, "submit": [500, 571, 574, 584], "submodul": 593, "subpixel": [214, 256], "subprocess": [524, 525], "subsect": [497, 592, 597], "subsequ": [176, 506, 547, 564], "subset": [204, 207, 246, 249, 526, 569], "subsidiari": 540, "substanti": 587, "success": [539, 566], "successfulli": [501, 504, 531, 573, 577, 578, 579, 584], "successor": [77, 78, 79, 80, 421, 422, 423, 424], "sudo": [534, 550], "suffici": 591, "suffix": [134, 458], "suggest": [492, 501, 524, 591], "suit": [539, 565, 593], "suitabl": 570, "sum": [187, 188, 274, 327, 528, 529], "sum_over_batch_s": 597, "summar": [132, 456, 524, 529], "summari": [152, 468, 528, 559, 562, 593, 598], "summary_benchmark": 152, "summarywrit": 593, "super": [272, 325, 502], "superbench": 547, "supernet": 502, "supplement": 495, "suppli": 2, "support": [2, 30, 31, 32, 83, 90, 150, 155, 157, 162, 168, 175, 179, 187, 188, 191, 192, 201, 202, 204, 211, 214, 218, 220, 221, 222, 225, 232, 233, 243, 244, 246, 253, 256, 259, 266, 274, 276, 281, 297, 299, 303, 310, 316, 319, 327, 328, 332, 338, 340, 358, 368, 374, 377, 427, 468, 471, 477, 478, 483, 485, 486, 490, 493, 496, 497, 504, 506, 524, 541, 543, 547, 552, 555, 558, 564, 571, 572, 575, 584, 588, 591, 595, 596], "supported_lay": 146, "supported_op_typ": [49, 395], "suppos": [497, 592], "suppress": [491, 497, 589, 592], "sure": [167, 172, 180, 182, 297, 299, 301, 522, 566], "surg": [141, 462], "surrog": 595, "suyu": 540, "sweep": 551, "sweep_object": 551, "sweet": [489, 592], "switch": [71, 417, 547, 593], "switch_optim": [62, 408], "switchoptim": [71, 417], "sy": [483, 524, 550], "sym": [30, 31, 32, 491, 506, 507, 535, 586, 589, 597], "sym_full_rang": 589, "sym_model": 2, "symbol": [2, 31, 135, 145, 146, 267, 320, 328, 358, 501, 545], "symbol_r": [267, 320], "symbolblock": 2, "symbolic_trac": 137, "symlink": [557, 561], "symmetr": [99, 478, 495, 507, 586, 589, 594, 595], "symnet": 2, "synchron": 595, "syntax": 535, "sys_nic": 504, "system": [136, 141, 152, 219, 462, 483, 487, 522, 546, 550, 583, 598], "systemat": [489, 494, 592], "szymon": 523, "t": [31, 53, 54, 56, 129, 141, 151, 167, 187, 188, 218, 221, 259, 272, 325, 399, 400, 402, 453, 462, 488, 489, 490, 495, 501, 505, 524, 528, 529, 531, 543, 544, 565, 570, 583, 586, 589, 595, 597], "t10k": [204, 246, 526], "t5": 583, "t5norm": 592, "tab": [272, 325, 564, 593], "tabl": [165, 176, 483, 487, 507, 528, 533, 546, 567, 569, 598], "table_entri": 483, "taco": [504, 584], "tag": [141, 336, 460, 462, 497, 592, 593], "tail": 491, "tailor": 491, "take": [4, 167, 188, 191, 192, 196, 218, 223, 232, 233, 237, 259, 297, 306, 327, 328, 358, 362, 459, 468, 491, 495, 499, 501, 502, 525, 528, 529, 535, 543, 564, 583, 586, 588, 589, 594, 595, 597], "taken": [191, 192, 232, 233, 328, 358, 468, 586], "tamper": [141, 462], "tar": [204, 246, 526, 528, 559, 562], "target": [2, 30, 31, 88, 146, 165, 182, 184, 188, 298, 301, 306, 362, 478, 492, 526, 531, 543, 583, 593, 594, 595, 597], "target_boxes_num": 542, "target_depth": 146, "target_dtyp": 373, "target_height": [218, 259, 594], "target_lay": 165, "target_linear": 166, "target_op_lut": 165, "target_spars": [167, 187, 188, 543, 583, 585, 597], "target_sparsity_ratio": [172, 299], "target_width": [218, 259, 594], "targetspac": [306, 362], "task": [129, 202, 209, 244, 251, 274, 327, 453, 489, 491, 497, 526, 529, 530, 533, 538, 542, 543, 567, 571, 574, 583, 587, 589, 592, 598], "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 572, "task_collect": 574, "task_db": 574, "task_id": [572, 577, 578, 579], "task_log": 572, "task_monitor_port": [572, 577, 578, 579], "task_nam": [552, 553, 575, 578, 579], "task_request": [573, 577, 578, 579], "task_request_distribut": 577, "task_workspac": 572, "taskdataset": 598, "taskdb": 574, "tasklaunch": 574, "taskmonitor": 574, "td": 595, "teacher": [154, 187, 188, 260, 529, 530, 543, 598], "teacher_layer_nam": 188, "teacher_layer_name1": 188, "teacher_layer_name2": 188, "teacher_layer_output_process": 188, "teacher_logit": 543, "teacher_model": [155, 187, 188, 220, 529, 530, 543], "team": [153, 272, 325, 499, 588], "technic": 504, "techniqu": [266, 319, 485, 490, 495, 496, 497, 504, 538, 543, 547, 566, 582, 583, 584, 585, 586, 596, 597, 598], "technologi": [204, 246, 487, 541, 543, 546], "tee": 550, "tel2p1": 598, "tell": [141, 327, 358, 462, 585], "temp_path": [126, 378], "temperatur": [155, 187, 188, 220, 543, 597], "templat": [180, 300, 543, 583], "template_config": 184, "temporari": [126, 146, 378, 483, 499], "temporarili": 499, "tencent": [504, 584], "tend": 583, "tensor": [2, 3, 4, 31, 32, 56, 91, 126, 134, 136, 141, 142, 146, 161, 162, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 188, 218, 259, 262, 264, 297, 299, 309, 336, 367, 378, 402, 458, 460, 462, 464, 473, 475, 478, 482, 483, 486, 487, 492, 495, 501, 507, 524, 525, 526, 528, 546, 583, 586, 590, 593, 594, 595], "tensor2tensor": [268, 321], "tensor_data": [75, 420, 483, 484], "tensor_dict": 505, "tensor_dtyp": 91, "tensor_nam": [31, 134, 141, 142, 458, 462, 464], "tensor_to_nod": 2, "tensor_v": 134, "tensor_valu": 31, "tensorboard": [187, 188, 471, 483, 505, 543, 567], "tensorcollector": 2, "tensordataset": [202, 244, 526], "tensorflow": [38, 40, 61, 62, 63, 73, 81, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 103, 116, 126, 127, 128, 131, 134, 155, 157, 183, 187, 188, 201, 202, 203, 204, 207, 209, 211, 218, 225, 243, 244, 245, 246, 249, 251, 253, 259, 263, 264, 265, 268, 270, 274, 275, 276, 302, 310, 321, 323, 327, 328, 336, 352, 353, 356, 357, 358, 368, 474, 475, 483, 494, 500, 502, 504, 505, 506, 523, 524, 525, 528, 529, 530, 532, 535, 536, 538, 539, 543, 544, 545, 546, 554, 555, 566, 569, 583, 584, 585, 591, 592, 595, 597], "tensorflow1": [201, 243], "tensorflow_addon": [157, 225], "tensorflow_amp": 554, "tensorflow_dataload": [238, 356], "tensorflow_inc": 554, "tensorflow_itex": [204, 207, 209, 211, 246, 249, 251, 253, 525, 585], "tensorflow_itexadaptor": [33, 380], "tensorflow_model": [330, 356, 569], "tensorflowadam": 157, "tensorflowadamw": [157, 225], "tensorflowadaptor": [33, 380], "tensorflowbasemodel": [336, 356, 460], "tensorflowbertdataload": [201, 243], "tensorflowbertdataset": [202, 244], "tensorflowcheckpointmodel": [336, 460], "tensorflowcifar10": [204, 246], "tensorflowcifar100": [204, 246], "tensorflowcocomap": [274, 327], "tensorflowconfig": 380, "tensorflowconfigconvert": 380, "tensorflowcriterion": [155, 220], "tensorflowcroptoboundingbox": [218, 259], "tensorflowcrossentropyloss": [155, 220], "tensorflowdataload": [201, 243, 356], "tensorflowdataset": [204, 246], "tensorflowfashionmnist": [204, 246], "tensorflowfilt": [211, 253], "tensorflowimagefold": 246, "tensorflowimagenetdataset": [207, 249], "tensorflowimagenetraw": [207, 249], "tensorflowimagerecord": [204, 246], "tensorflowknowledgedistillationloss": [155, 220], "tensorflowknowledgedistillationlossextern": [155, 220], "tensorflowknowledgedistillationlosswrapp": 155, "tensorflowllmmodel": [336, 460], "tensorflowmap": [274, 327], "tensorflowmetr": [274, 327], "tensorflowmnist": [204, 246], "tensorflowmodel": [336, 460], "tensorflowmodelzoobertdataload": [201, 243], "tensorflowmodelzoobertdataset": [202, 203, 244, 245], "tensorflowoptim": [157, 225], "tensorflowparserfactori": 348, "tensorflowprofilingpars": 349, "tensorflowqatmodel": 336, "tensorflowqdqtoonnxqdqconvert": 128, "tensorflowqueri": [33, 380, 505], "tensorflowrandomhorizontalflip": [218, 259], "tensorflowrandomverticalflip": [218, 259], "tensorflowresizecropimagenettransform": [214, 256], "tensorflowresizewithratio": [218, 259], "tensorflowsavedmodelmodel": [336, 460], "tensorflowsgd": [157, 225], "tensorflowshiftrescal": 214, "tensorflowsparsecategoricalcrossentropi": 155, "tensorflowtfrecorddataset": [204, 246], "tensorflowtopk": [274, 327], "tensorflowtransform": [218, 259], "tensorflowtranspos": [218, 259], "tensorflowtransposelastchannel": 214, "tensorflowvocmap": [274, 327], "tensorflowvocrecord": [204, 246], "tensorflowwrapfunct": [218, 259], "tensorproto": [31, 91], "tensorrt": [31, 523, 544, 586], "tensorrtexecutionprovid": [544, 586], "tensors_kl": 2, "tensors_minmax": 2, "teq": [492, 504, 584, 587, 589], "teqconfig": 491, "teqlinearfakequ": [143, 467], "term": [154, 173, 174, 179, 181, 260, 492, 495, 500, 523, 529, 540, 542, 581, 582, 595], "termin": [528, 557, 558, 561, 567], "test": [152, 187, 188, 218, 259, 500, 504, 528, 539, 572, 577, 598], "test_func": 531, "text": [91, 180, 217, 218, 258, 259, 267, 272, 300, 320, 325, 487, 489, 491, 497, 533, 540, 546, 553, 575, 578, 579, 583, 584, 589, 592, 594, 598], "textdist": 567, "tf": [91, 102, 127, 134, 165, 184, 201, 202, 203, 204, 218, 243, 244, 245, 246, 259, 334, 336, 379, 458, 459, 460, 493, 495, 524, 531, 539, 545, 584, 588, 594], "tf1": [201, 243, 545], "tf2": 545, "tf2onnx": [188, 261, 472], "tf2onnx_convert": 97, "tf2onnx_util": 87, "tf2onnxconfig": [188, 533], "tf_criteria": 162, "tf_diagnosis_help": 134, "tf_example1": [576, 577, 578], "tf_modul": 357, "tf_to_fp32_onnx": [263, 474], "tf_to_int8_onnx": [263, 474], "tfdatadataload": [201, 243], "tfmodelzoocollecttransform": [218, 259], "tfpruningcallback": [289, 294], "tfrecord": [202, 203, 204, 244, 245, 246, 526], "tfrecorddataset": 526, "tfslimnetsfactori": 334, "tfsquadv1modelzooposttransform": [218, 259], "tfsquadv1posttransform": [218, 259], "th": [75, 76, 420], "thalaiyasingam": 583, "than": [41, 134, 202, 218, 244, 259, 387, 483, 487, 491, 497, 502, 504, 522, 526, 537, 546, 569, 577, 581, 582, 583, 586, 589, 591, 594, 595], "thei": [141, 219, 377, 462, 499, 524, 529, 535, 543, 552, 567, 570, 581], "them": [141, 165, 202, 244, 462, 491, 497, 501, 507, 525, 528, 533, 535, 537, 567, 570, 582, 583, 589, 595], "themselv": 586, "theoret": [491, 497, 586, 589], "therefor": [497, 501, 543, 567, 569, 583, 586, 587, 590, 592], "thi": [30, 72, 96, 118, 125, 129, 133, 136, 139, 141, 146, 151, 154, 158, 163, 165, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 187, 188, 191, 192, 201, 202, 203, 204, 205, 206, 207, 209, 218, 221, 227, 228, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 259, 267, 270, 271, 272, 274, 283, 284, 286, 287, 288, 289, 294, 297, 299, 301, 302, 303, 306, 309, 320, 323, 324, 325, 327, 328, 338, 358, 362, 367, 376, 377, 418, 434, 445, 452, 453, 457, 459, 462, 463, 468, 482, 483, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 505, 506, 507, 523, 524, 525, 526, 529, 530, 531, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 547, 549, 550, 552, 553, 555, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 577, 578, 579, 583, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596], "think": [491, 589], "third": [270, 323, 500, 540], "those": [60, 141, 309, 367, 406, 462, 483, 490, 495, 497, 528, 529, 530, 537, 543, 544, 582, 583, 586, 595], "though": [497, 592], "thread": [152, 187, 188, 219, 353, 357, 525, 574], "threat": 566, "threaten": 499, "three": [60, 184, 202, 244, 305, 359, 361, 406, 488, 492, 496, 497, 501, 505, 506, 523, 539, 544, 558, 572, 582, 586, 588, 591, 592, 593], "threshold": [2, 148, 469, 477, 542], "through": [136, 191, 192, 232, 233, 327, 328, 358, 490, 491, 492, 497, 504, 522, 535, 537, 538, 542, 550, 571, 581, 582, 583, 585, 586, 589], "throw": 525, "thu": [270, 323, 497, 543, 583, 586], "thudm": 541, "tian": 540, "tiiuae": [489, 541, 592, 598], "tile": [293, 524], "tile_pattern": 291, "tile_pattern_1x1": 585, "tilepattern_1x1": 293, "tilepattern_1x16": 293, "tilepattern_1x2": 293, "tilepattern_2x2": 293, "tilepattern_4x1": 293, "tilepatternbas": 293, "till": [483, 595], "tim": [491, 497, 589], "time": [134, 141, 187, 188, 218, 259, 274, 306, 327, 338, 362, 458, 462, 483, 490, 491, 492, 494, 496, 497, 506, 525, 528, 531, 534, 543, 552, 554, 557, 561, 564, 565, 570, 573, 577, 578, 581, 583, 584, 586, 589, 591, 592, 593, 594, 595], "time_limit": 483, "timeout": [187, 188, 543, 585, 595, 597], "timm": 567, "tinybert": 598, "tip": 567, "titl": [483, 540, 565, 595], "tl": 566, "tloss": 531, "tmp_file_path": 483, "to_numpi": 31, "toarrai": [218, 259, 594], "todo": [202, 205, 244, 247, 270, 316, 323, 374, 459], "togeth": [187, 188, 218, 259, 529, 539, 551, 584, 593, 594], "togethercomput": [489, 592], "token": [202, 215, 218, 244, 257, 259, 267, 268, 320, 321, 478, 489, 491, 497, 504, 526, 542, 543, 566, 567, 589, 591, 592, 594, 595], "token_is_max_context": [218, 259], "token_to_orig_map": [218, 259], "token_type_id": [202, 244, 543], "tokenzi": [217, 258], "toler": [495, 569], "tolerable_loss": [187, 188, 496, 543, 595], "tolist": 592, "toml": [559, 562], "tondarrai": 594, "tondarraytransform": [218, 259], "tool": [4, 134, 263, 458, 474, 483, 497, 504, 505, 543, 557, 561, 567, 570, 571, 572, 583, 584, 586], "toolbar": 565, "toolchain": [534, 584], "toolkit": [501, 539, 547, 555, 584, 596], "top": [218, 259, 265, 274, 289, 294, 302, 327, 500, 542, 564, 567, 569, 594], "top1": [468, 542, 566, 583, 586, 598], "topic": 504, "topilimag": 594, "topk": [327, 358, 531, 542, 543, 566, 586], "topologi": 593, "torch": [135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 150, 162, 165, 166, 168, 176, 187, 188, 264, 328, 358, 475, 478, 482, 486, 487, 488, 489, 490, 491, 496, 497, 501, 504, 507, 508, 529, 531, 533, 543, 544, 545, 546, 547, 552, 555, 567, 586, 589, 592, 593], "torch2onnx": [188, 261, 472], "torch2onnxconfig": [188, 533], "torch_dtyp": 507, "torch_load": 138, "torch_model": 330, "torch_to_fp32_onnx": [264, 475], "torch_to_int8_onnx": [264, 475], "torch_util": [222, 504, 587, 592], "torchdynamo": [492, 554], "torchimport": 492, "torchscript": [533, 587, 592], "torchsmoothqu": 592, "torchvis": [218, 259, 504, 532, 536, 547, 553, 567], "toronto": [204, 246, 526], "torr": 583, "total": [31, 172, 218, 259, 274, 299, 327, 491, 526, 528, 583, 589, 594, 598], "total_block_arg": 146, "total_block_kwarg": 146, "total_execution_tim": 347, "total_valu": 146, "totensor": [543, 594], "tow": 531, "toward": [499, 529], "tpe": [190, 231], "tpetunestrategi": [192, 233], "tqdm": [31, 543], "trace": [135, 136, 145, 146, 165, 187, 188, 264, 365, 475, 490, 492, 501, 554, 595], "trace_and_fuse_sub_graph": 145, "traceabl": 501, "traced_model": 145, "tracer": 501, "track": [564, 591], "trackabl": [134, 458], "trade": [491, 497, 589], "tradit": [495, 550, 583], "train": [30, 43, 66, 150, 154, 173, 174, 177, 179, 187, 188, 191, 192, 202, 204, 218, 228, 232, 233, 244, 246, 259, 260, 276, 299, 319, 340, 358, 389, 412, 471, 487, 488, 489, 490, 491, 492, 494, 496, 502, 504, 505, 506, 512, 526, 528, 529, 530, 533, 538, 544, 546, 547, 553, 564, 569, 577, 582, 584, 587, 589, 591, 592, 595, 597], "train_cfg": 471, "train_dataload": [543, 583, 586], "train_dataset": [531, 586], "train_fn": 491, "train_fun": 543, "train_func": [303, 468, 531, 543, 586], "train_kwarg": 531, "train_load": 531, "train_loop": [468, 543, 582], "train_sampl": 531, "trainabl": [491, 504, 584, 589], "trainer": [543, 555], "training_arg": 543, "training_func": 543, "training_func_for_nc": [529, 530], "trane": 492, "transact": 592, "transfer": [154, 209, 251, 260, 497, 526, 529, 530, 543, 592], "transform": [31, 36, 129, 131, 132, 133, 144, 179, 202, 203, 204, 205, 206, 207, 209, 211, 213, 244, 245, 246, 247, 248, 249, 251, 253, 255, 382, 453, 455, 456, 457, 459, 489, 490, 491, 494, 497, 501, 502, 504, 523, 526, 529, 530, 531, 532, 536, 541, 543, 547, 552, 553, 554, 555, 567, 575, 578, 579, 583, 584, 588, 589, 592, 593, 595, 597], "transform_func": [218, 259], "transform_graph": 97, "transform_list": [218, 259, 594], "transform_registri": [218, 259], "transform_typ": [218, 259], "transformerbasedmodelblockpatterndetector": 144, "transit": 570, "translat": [267, 268, 320, 321, 487, 546, 583, 595], "translation_corpu": [268, 321], "transpos": [31, 59, 171, 214, 218, 259, 263, 297, 405, 474, 589, 594], "travers": [496, 506, 507, 589, 595], "treat": [141, 462, 525], "tree": [180, 300, 316, 374, 572], "tri": [188, 524, 595], "trial": [496, 595], "trigger": [152, 172, 299], "troll": 499, "troubleshoot": 570, "trt_env_setup": 31, "true": [2, 31, 32, 71, 99, 132, 134, 141, 152, 187, 188, 200, 202, 204, 205, 217, 218, 219, 242, 244, 246, 247, 258, 259, 264, 268, 274, 292, 315, 321, 327, 338, 358, 373, 377, 417, 456, 458, 459, 462, 471, 475, 478, 482, 483, 486, 489, 490, 491, 492, 493, 495, 496, 497, 504, 506, 525, 526, 528, 531, 535, 542, 543, 547, 550, 551, 566, 567, 568, 569, 575, 577, 585, 586, 587, 589, 592, 593, 594, 595, 597], "true_sequenti": 589, "truncat": [202, 218, 244, 259, 526, 594], "trust": [141, 462, 528, 566], "trust_remote_cod": 504, "truth": [271, 272, 324, 325], "try": [200, 242, 336, 460, 495, 497, 501, 504, 528, 567, 583, 586, 592, 595], "try_cnt": [134, 458], "try_loading_kera": [336, 460], "tsl": 565, "tune": [2, 152, 153, 187, 188, 191, 192, 202, 204, 232, 233, 244, 246, 265, 302, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 328, 338, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 468, 483, 488, 489, 490, 491, 492, 496, 505, 506, 523, 524, 525, 526, 528, 531, 538, 540, 543, 544, 564, 568, 571, 573, 574, 581, 583, 584, 588, 590, 591, 593, 597], "tune_": 593, "tune_0_acc0": 593, "tune_1": 593, "tune_1_acc0": 593, "tune_1_acc_0": 593, "tune_cfg": [2, 134, 135, 146, 505, 507, 595], "tune_config": [488, 492, 493, 494, 495, 496, 506], "tuner": [191, 192, 232, 233, 265, 302, 328, 358, 468, 586], "tunestrategi": [312, 370, 595], "tunestrategymeta": 370, "tuning_cfg_to_fw": 506, "tuning_criterion": [188, 543, 581, 591, 595], "tuning_history_path": 483, "tuning_info": [573, 577], "tuning_items_prior": [315, 373], "tuning_order_lst": [315, 373], "tuning_sampl": [314, 372], "tuning_spac": [314, 315, 317, 372, 373, 375], "tuning_strategi": [187, 188], "tuning_struct": [314, 315, 316, 372, 373, 374], "tuningconfig": [488, 492, 493, 494, 495, 496], "tuningcriterion": [188, 543, 581, 591, 595], "tuningitem": [316, 374], "tuninglogg": 153, "tuningord": [315, 373], "tuningsampl": [315, 373], "tuningsamplerregistri": 315, "tuningspac": [315, 316, 373, 374], "tupl": [2, 91, 134, 146, 188, 191, 192, 214, 218, 232, 233, 256, 259, 264, 315, 328, 358, 373, 465, 468, 475, 482, 492, 495, 506, 524, 526, 542, 543, 586, 594], "turbo": 598, "turn": [542, 558, 587], "tutori": [501, 555, 584, 596], "tweak": 570, "twine": [559, 562], "twitter": 584, "two": [134, 136, 141, 152, 166, 171, 178, 182, 204, 209, 219, 246, 251, 270, 297, 301, 303, 310, 323, 368, 462, 483, 487, 488, 490, 491, 494, 496, 497, 500, 501, 502, 524, 525, 526, 529, 531, 533, 535, 543, 544, 546, 571, 572, 574, 583, 586, 588, 589, 591, 592, 595, 597], "txt": [207, 249, 526, 528, 539, 566, 568, 569, 571, 572], "type": [2, 4, 30, 31, 32, 60, 82, 91, 102, 108, 118, 126, 134, 135, 136, 141, 146, 147, 155, 157, 165, 166, 167, 172, 180, 181, 182, 184, 186, 187, 188, 200, 202, 204, 211, 218, 220, 225, 242, 244, 246, 253, 259, 264, 267, 268, 270, 274, 281, 288, 292, 297, 299, 301, 306, 312, 316, 318, 320, 321, 323, 327, 336, 338, 362, 363, 370, 374, 376, 377, 378, 406, 426, 445, 458, 460, 462, 475, 482, 483, 487, 488, 489, 490, 491, 492, 493, 495, 505, 506, 526, 528, 531, 533, 535, 538, 543, 544, 546, 565, 567, 572, 573, 577, 578, 586, 587, 589, 591, 594, 595, 596, 597], "typealia": 524, "types_to_splic": [66, 412], "typescript": [557, 561], "typic": [276, 303, 502, 504, 530, 532, 536, 569, 583, 598], "u": [129, 151, 453, 547, 566, 571], "ubuntu": 539, "ubuntu22": 504, "ubyt": [204, 246, 526], "ui": 566, "uint4": 507, "uint8": [31, 214, 256, 270, 318, 323, 376, 495, 497, 505, 526, 535, 585, 586, 594, 597], "ultim": [497, 586], "ultra": 598, "unaccept": 499, "unari": 28, "unary_op": 17, "unarydirect8bitoper": 28, "unaryoper": 28, "unbalanc": 598, "uncas": [202, 218, 244, 259, 526, 594, 598], "uncertain": 583, "undefin": [141, 184, 298, 462], "under": [96, 187, 188, 204, 246, 434, 478, 482, 496, 500, 502, 504, 526, 540, 542, 543, 547, 552, 553, 564, 572, 582, 583, 584, 587, 589, 593, 595], "underli": [53, 54, 56, 141, 399, 400, 402, 462], "understand": [497, 570, 586, 593, 596], "understudi": [267, 320], "unicod": [217, 258], "unicodedecodeerror": [141, 462], "unicoderegex": [267, 320], "unifi": [153, 265, 302, 505, 506, 507, 525, 537, 538, 542, 543, 545], "uniform": [491, 523, 589], "uniformli": [491, 589], "uninstal": 564, "union": [274, 327, 468, 495, 542, 575], "uniqu": [270, 303, 323, 497, 586], "unique_id": [218, 259], "unit": [167, 297, 500, 572, 583], "unk": [217, 258], "unk_token": [217, 258], "unless": [141, 462, 535], "unlik": 495, "unnecessari": [219, 543], "unpickl": [139, 141, 462, 463], "unpicklingerror": [139, 463], "unpreced": 583, "unsaf": [141, 462], "unseen": [495, 497, 586], "unset": 32, "unsign": [146, 318, 376, 507, 589], "unstructur": [187, 188, 293, 538, 583, 598], "unsupport": [533, 543, 583], "until": [502, 506, 595], "untrac": 501, "untrust": [141, 462], "unus": [70, 134, 416, 458], "unwelcom": 499, "up": [2, 86, 176, 218, 259, 298, 429, 497, 504, 531, 532, 535, 538, 555, 559, 562, 564, 583, 584, 585, 586, 591, 594, 595, 597], "up1": 535, "up2": 535, "updat": [60, 142, 146, 161, 167, 184, 299, 327, 358, 406, 464, 480, 491, 534, 541, 542, 543, 550, 555, 558, 574, 583, 589, 592, 595, 596], "update_config": [187, 188], "update_frequ": 585, "update_frequency_on_step": [299, 585], "update_modul": [142, 464], "update_neural_insights_workload": 480, "update_neural_insights_workload_accuracy_data": 480, "update_param": 184, "update_sq_scal": 146, "update_statu": 574, "update_task_statu": 574, "upgrad": [504, 543], "upload": [538, 559, 562], "upload_path": [572, 577, 578, 579], "upper": 564, "url": [204, 246, 500, 540, 575, 576, 583], "us": [2, 4, 22, 30, 31, 32, 34, 35, 56, 89, 91, 102, 127, 136, 141, 146, 152, 155, 157, 161, 165, 167, 172, 176, 177, 180, 182, 183, 187, 188, 191, 192, 200, 201, 202, 203, 204, 205, 206, 209, 217, 218, 219, 220, 225, 232, 233, 242, 243, 244, 245, 246, 247, 248, 251, 258, 259, 263, 264, 265, 267, 268, 270, 274, 275, 276, 281, 288, 289, 292, 294, 297, 299, 300, 301, 302, 303, 306, 309, 312, 315, 316, 320, 321, 323, 327, 338, 353, 357, 358, 362, 365, 367, 370, 374, 376, 377, 379, 380, 381, 402, 459, 462, 468, 469, 470, 471, 474, 475, 476, 478, 483, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 522, 523, 524, 526, 528, 529, 530, 531, 533, 535, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 551, 552, 555, 557, 559, 561, 562, 564, 566, 567, 568, 569, 570, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 598], "usag": [146, 201, 243, 270, 276, 303, 323, 377, 492, 493, 497, 506, 526, 531, 532, 547, 555, 566, 572, 577, 578, 579, 581, 585, 589, 594], "use_bf16": [34, 35, 187, 381, 585], "use_bp": [268, 321], "use_distributed_tun": 187, "use_full_length": 589, "use_max_length": 589, "use_optimum_format": [478, 589], "use_sym": [491, 496], "user": [141, 152, 157, 165, 177, 184, 187, 188, 191, 192, 204, 207, 211, 218, 219, 225, 232, 233, 246, 249, 253, 259, 265, 289, 294, 300, 302, 303, 327, 328, 338, 358, 363, 376, 462, 468, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 502, 504, 505, 506, 507, 512, 522, 524, 525, 529, 530, 533, 535, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 558, 564, 571, 572, 573, 574, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 590, 592, 593, 594, 595, 599], "user_config": 184, "user_metr": [223, 327, 358], "user_model": [487, 546], "user_obj_cfg": 338, "user_object": 338, "user_postprocess": [216, 226], "userfloatmodel": [486, 490], "usernam": 572, "usr": 534, "usr_cfg": 338, "usual": [202, 244, 495, 497, 506, 528, 529, 569, 582, 583, 586, 587, 592], "utf": [141, 217, 258, 462], "util": [1, 5, 91, 96, 97, 125, 128, 135, 136, 137, 138, 145, 156, 162, 185, 187, 188, 227, 268, 298, 308, 319, 321, 339, 340, 366, 461, 495, 506, 507, 508, 523, 524, 531, 543, 547, 567, 583, 586, 595, 596], "uuid": 480, "v": [555, 564, 583, 595, 597], "v0": [489, 528, 541, 569, 592, 593], "v1": [134, 214, 256, 271, 272, 274, 324, 325, 327, 336, 458, 460, 489, 531, 533, 534, 542, 545, 568, 583, 590, 591, 592, 598], "v14": [267, 320], "v1_6": [536, 566, 569], "v2": [136, 365, 489, 525, 531, 533, 534, 541, 553, 590, 592, 595, 596, 598], "v3": [569, 598], "v4": [553, 575, 578, 579, 598], "v5": 500, "v5s6": 598, "val": [134, 184, 204, 207, 246, 249, 298, 528, 543, 569], "val2017": [203, 245, 526], "val_dataload": [493, 543, 586], "val_dataset": [493, 543, 586], "val_load": 586, "val_map": [207, 249, 526], "valid": [41, 53, 54, 91, 153, 172, 175, 184, 187, 188, 204, 246, 270, 298, 299, 323, 336, 387, 399, 400, 460, 502, 504, 505, 526, 528, 529, 532, 535, 538, 540, 543, 555, 569, 583, 586, 589, 590], "valid_mixed_precis": 535, "valid_reshape_input": [53, 54, 399, 400], "validate_and_inference_input_output": [336, 460], "validate_graph_nod": [336, 460], "valu": [4, 31, 32, 42, 53, 54, 56, 75, 76, 91, 129, 134, 141, 146, 151, 152, 161, 165, 166, 176, 183, 184, 187, 188, 191, 192, 202, 205, 206, 214, 218, 219, 232, 233, 244, 247, 248, 256, 259, 270, 274, 298, 306, 309, 316, 323, 327, 328, 358, 362, 367, 374, 376, 377, 388, 399, 400, 402, 420, 453, 459, 462, 468, 469, 471, 483, 486, 487, 488, 489, 491, 494, 495, 497, 501, 506, 507, 523, 526, 528, 535, 542, 543, 544, 546, 550, 567, 569, 575, 581, 583, 585, 586, 589, 590, 592, 594, 595, 597], "valuabl": [583, 593], "value_layer_nam": 176, "valueerror": [53, 54, 56, 146, 270, 323, 377, 399, 400, 402, 534], "valueinfo": 31, "values_from_const": [53, 54, 56, 399, 400, 402], "vanhouck": 523, "vanilla": [505, 506, 538], "var": 528, "vari": [265, 289, 294, 302, 569, 583, 592, 598], "variabl": [31, 139, 152, 181, 187, 188, 204, 219, 246, 306, 362, 376, 463, 583, 595], "varianc": [129, 151, 453, 528], "variant": [198, 240], "varieti": [492, 496, 532, 585, 595], "variou": [265, 275, 302, 328, 487, 490, 492, 495, 507, 538, 546, 547, 574, 583, 585, 587], "vault": 504, "vcvtne2ps2bf16": [488, 544], "vcvtneps2bf16": [488, 544], "vdpbf16p": [488, 544], "vec": 528, "vecchio": 539, "vector": 488, "ventura": 539, "verbos": [31, 264, 306, 362, 475], "veri": [491, 497, 543, 565, 569, 586, 589, 595, 596], "verifi": [533, 541], "version": [2, 40, 90, 143, 146, 165, 188, 263, 264, 319, 386, 467, 474, 475, 489, 499, 501, 505, 524, 535, 539, 540, 543, 557, 559, 561, 562, 584, 592, 595, 596], "version1": [134, 483], "version1_eq_version2": [134, 483], "version1_gt_version2": [134, 483], "version1_gte_version2": [134, 483], "version1_lt_version2": [134, 483], "version1_lte_version2": [134, 483], "version2": [134, 483], "vertic": [171, 218, 259, 297, 594], "vgg": 598, "vgg16": [533, 598], "vgg19": 598, "via": [265, 289, 294, 302, 491, 497, 499, 504, 531, 538, 543, 547, 564, 583, 584], "view": [500, 504, 532, 555, 564, 570, 590], "viewlet": 565, "viewpoint": 499, "vincent": 523, "violat": [139, 463], "virtual": [376, 584], "vision": [497, 504, 533, 551, 592], "visit": 598, "visual": [187, 188, 504, 555, 564, 591, 593, 595, 596], "vit": 598, "vmware": 584, "vnni": [497, 532, 538, 585, 586], "voc": [204, 246, 274, 327], "vocab": [217, 258], "vocab_fil": [217, 218, 258, 259, 594], "vocabulari": [202, 217, 218, 244, 258, 259, 594], "vocmap": 542, "vscode": [524, 563, 565], "vtune": 540, "w": [32, 218, 259, 489, 497, 583, 592, 594], "w8a8": [486, 490, 491, 497, 587, 589], "w_dq": [497, 592], "w_dtype": [487, 489, 490, 546], "w_fp32": [129, 151, 453], "w_int8": [129, 151, 453], "w_q": [497, 592], "w_scale": [497, 592], "wa": [141, 187, 188, 462, 487, 489, 505, 543, 546, 569, 570, 573, 584, 595], "wai": [165, 203, 204, 207, 245, 246, 249, 336, 460, 491, 494, 497, 502, 507, 525, 526, 528, 542, 543, 547, 550, 565, 566, 570, 571, 572, 582, 583, 586, 589, 592, 595, 597], "wait": [557, 561, 564, 574], "wait_new_task": 574, "wanda": 162, "want": [53, 54, 56, 165, 187, 188, 200, 202, 242, 244, 299, 363, 399, 400, 402, 468, 501, 505, 525, 526, 531, 543, 552, 564, 565, 572, 581, 586, 589, 591, 593, 595], "waq": 592, "warmup": [187, 188, 522, 543, 585], "warn": [479, 524], "wasn": [141, 462], "wasserblat": 583, "watch": [557, 561, 570], "we": [30, 31, 53, 54, 56, 60, 72, 129, 141, 150, 151, 152, 165, 169, 176, 187, 188, 201, 219, 221, 243, 267, 270, 320, 323, 340, 365, 399, 400, 402, 406, 418, 453, 462, 486, 489, 490, 491, 492, 494, 495, 496, 497, 499, 501, 505, 506, 507, 524, 525, 528, 531, 533, 535, 541, 542, 543, 551, 552, 555, 559, 562, 564, 565, 567, 570, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596], "web": [504, 566, 572, 577, 578, 579, 593], "webpack": 570, "webpag": 569, "websit": 539, "wechat": [504, 584], "wei": [491, 497, 589, 592], "weight": [30, 31, 32, 46, 47, 108, 126, 127, 129, 134, 136, 146, 151, 161, 162, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 187, 188, 264, 297, 299, 316, 327, 340, 358, 365, 374, 376, 378, 379, 392, 393, 453, 475, 483, 484, 486, 489, 490, 492, 493, 494, 495, 496, 505, 506, 507, 523, 528, 530, 535, 537, 541, 543, 566, 577, 581, 583, 584, 585, 586, 587, 592, 593, 595, 596, 597], "weight_bit": 506, "weight_compress": [585, 597], "weight_config": 32, "weight_correct": [149, 187, 188, 586], "weight_decai": [543, 597], "weight_dict": 136, "weight_dtyp": 493, "weight_empir": [129, 453], "weight_granular": 493, "weight_name_map": [126, 378], "weight_onli": [5, 188, 482, 487, 504, 524, 546, 587, 589], "weight_shap": 32, "weight_slim": [164, 176], "weight_sym": [493, 495, 496], "weight_tensor": 483, "weight_typ": [264, 475], "weightcorrect": 151, "weightdetail": 483, "weightonli": 32, "weightonlylinear": [491, 589], "weightonlyqu": 491, "weightonlyquantsampl": 373, "weightpruningconfig": [187, 188, 543, 582, 583], "weights_detail": 476, "weights_onli": [141, 462], "weights_tabl": [567, 568], "weightsdetail": 484, "weightsstatist": 484, "welcom": [498, 499, 500, 504, 566, 573, 599], "well": [191, 192, 232, 233, 328, 358, 468, 487, 497, 502, 504, 524, 526, 546, 583, 586, 590, 592, 597], "wenhua": [491, 497], "were": [141, 274, 327, 462, 550, 583], "wget": [528, 534, 536, 566, 569], "what": [146, 172, 200, 242, 327, 358, 468, 495, 499, 584], "when": [31, 40, 50, 56, 134, 139, 141, 166, 172, 177, 184, 187, 188, 202, 203, 211, 218, 244, 245, 253, 259, 268, 298, 299, 321, 358, 386, 396, 402, 458, 462, 463, 468, 490, 491, 495, 496, 497, 499, 502, 506, 524, 525, 526, 543, 555, 557, 558, 561, 565, 566, 569, 570, 571, 573, 577, 583, 586, 589, 592, 594, 595], "where": [31, 141, 187, 188, 270, 274, 323, 327, 376, 462, 483, 497, 507, 523, 528, 529, 557, 561, 565, 592, 593], "whether": [2, 31, 32, 91, 102, 134, 141, 146, 167, 187, 188, 200, 202, 214, 218, 242, 244, 256, 259, 268, 270, 274, 297, 321, 323, 327, 458, 462, 471, 478, 482, 483, 491, 505, 526, 542, 586, 589, 592, 594], "which": [2, 30, 42, 69, 96, 136, 141, 161, 165, 166, 168, 172, 173, 174, 176, 179, 180, 182, 184, 187, 188, 202, 203, 204, 214, 219, 244, 245, 246, 256, 267, 272, 281, 283, 284, 286, 287, 288, 292, 297, 298, 299, 301, 306, 320, 325, 327, 332, 338, 340, 358, 362, 388, 415, 434, 462, 483, 488, 490, 491, 492, 493, 495, 496, 497, 499, 501, 502, 504, 505, 506, 507, 523, 525, 526, 528, 529, 531, 534, 535, 538, 542, 543, 544, 545, 548, 552, 555, 558, 564, 565, 566, 569, 572, 577, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597], "while": [166, 177, 184, 299, 306, 362, 488, 490, 491, 495, 497, 505, 506, 526, 532, 538, 544, 547, 552, 564, 566, 583, 585, 586, 589, 592], "white_nod": 3, "whitelist": 593, "whitespac": [217, 258, 272, 325], "whitespace_token": [217, 258], "whl": [559, 562], "who": [363, 499], "whole": [282, 486, 497, 507, 566, 586, 598], "whose": [150, 167, 298, 336, 460, 537, 592, 595], "why": [497, 592, 593], "wide": [488, 491, 497, 504, 532, 544, 583, 586], "wideresnet40": 598, "width": [171, 214, 218, 256, 259, 297, 497, 523, 531, 583, 586, 594, 597], "wiki": 499, "wikitext": [568, 598], "window": [152, 522, 539, 564, 565], "winogrand": 598, "winter": [497, 592], "wip": 541, "wise": [129, 138, 140, 142, 151, 187, 188, 306, 309, 362, 363, 367, 453, 461, 464, 491, 504, 506, 538, 569, 583, 589, 592, 593, 595, 596, 597], "wish": 540, "with_arg": 507, "within": [90, 173, 174, 179, 186, 265, 270, 302, 323, 336, 353, 357, 460, 488, 499, 501, 507, 523, 544, 557, 561, 564, 572, 583, 584, 589, 592, 595], "without": [35, 76, 134, 177, 218, 259, 299, 318, 376, 458, 487, 497, 499, 529, 531, 543, 546, 555, 566, 569, 583, 584, 585, 586, 595, 596], "wmt": 502, "wnli": [202, 244, 526, 542], "won": [188, 586, 589], "woq": [487, 541, 546], "woq_conf": 504, "word": [267, 320, 491, 497, 524, 542, 583, 589, 598], "word_perplex": 598, "wordpiec": [217, 218, 258, 259, 594], "wordpiecetoken": [217, 258], "work": [188, 265, 302, 492, 497, 503, 506, 524, 525, 529, 559, 562, 570, 588, 589, 590, 592, 593], "worker": [543, 574, 577, 578, 579, 586], "workflow": [487, 504, 506, 507, 528, 529, 533, 539, 544, 546, 559, 562, 566, 593, 596], "workload": [188, 480, 483, 566, 584], "workload_loc": [480, 483], "workload_mod": 480, "workload_nam": 480, "workload_uuid": 480, "workshop": 584, "workspac": [187, 188, 482, 483, 545, 572, 577, 578, 579], "workspace_path": [187, 188], "world": 565, "worth": [524, 583], "would": [490, 497, 500, 543, 568, 583, 586, 592], "wouldn": 570, "wrap": [2, 91, 102, 155, 220, 270, 323, 501, 531, 559, 562], "wrapmxnetmetr": [274, 327], "wraponnxrtmetr": [274, 327], "wrapped_lay": 102, "wrapper": [61, 88, 89, 90, 91, 108, 126, 135, 143, 155, 162, 201, 218, 220, 221, 223, 224, 243, 259, 270, 274, 323, 327, 332, 336, 378, 407, 460, 466, 467, 495, 588], "wrappytorchmetr": [274, 327], "write": [134, 211, 253, 458, 483, 531, 537, 543, 547, 593], "write_graph": [134, 458], "writer": 593, "written": 543, "wt_compare_dict": 136, "www": [204, 246, 526, 598], "x": [2, 41, 60, 166, 187, 188, 201, 218, 243, 259, 306, 362, 377, 387, 406, 496, 497, 523, 524, 528, 531, 544, 545, 572, 573, 577, 578, 580, 586, 587, 592, 593, 594, 596], "x1": [497, 592, 595], "x2": [497, 592, 595], "x86": [488, 544], "x86_64": 522, "x86inductorquant": 486, "x_max": [306, 362], "x_q": [497, 592], "x_scale": [497, 592], "x_tmp": [497, 592], "xdoctest": [141, 462], "xeon": [488, 497, 504, 539, 540, 541, 544, 584, 586, 588, 598], "xgb": 188, "xgboost": 583, "xiao": [491, 497, 589, 592], "xiui": [491, 497, 589, 592], "xlm": [202, 244, 526, 598], "xlnet": [202, 244, 526], "xpu": [188, 495, 555, 586], "xvzf": 528, "xx": 146, "xx_func": 524, "xxx": [204, 246, 526, 543], "xxy": [204, 246, 526], "xxz": [204, 246, 526], "y": [95, 187, 188, 218, 259, 306, 362, 433, 497, 524, 528, 534, 550, 592, 594], "y_dq": [497, 592], "y_max": [306, 362], "y_q": [497, 592], "yaml": [184, 188, 191, 192, 202, 204, 219, 232, 233, 244, 246, 260, 265, 276, 277, 278, 280, 289, 294, 302, 303, 482, 483, 505, 507, 537, 542, 543, 581, 585, 593, 594], "yaml_fil": [483, 526, 531], "yaml_file_path": 531, "yao": 136, "yarn": [557, 561], "year": 540, "yet": [502, 559, 562, 565, 572, 586], "yield": [191, 192, 200, 221, 232, 233, 242, 306, 328, 358, 362, 377, 459, 468, 497, 525, 586, 595], "yolo": 598, "yolov3": 598, "yolov5": 583, "you": [30, 141, 187, 188, 200, 202, 242, 244, 299, 327, 340, 358, 462, 500, 501, 506, 524, 525, 526, 528, 531, 539, 540, 542, 544, 547, 549, 550, 552, 557, 561, 564, 565, 566, 567, 568, 569, 570, 572, 583, 586, 589, 590, 591, 592, 593, 596], "your": [200, 202, 242, 244, 490, 500, 504, 524, 525, 526, 528, 531, 540, 543, 547, 550, 551, 552, 557, 558, 559, 561, 562, 564, 566, 570, 572, 577, 578, 579, 583, 584, 591, 593, 595, 596], "your_node1_nam": 531, "your_node2_nam": 531, "your_patch_path": 551, "your_script": 590, "yourmodel": 491, "yourself": 583, "youtub": 584, "yum": [534, 539], "yvinec": [497, 592], "z": [31, 497, 523, 524, 529, 592], "zafrir": 583, "zero": [4, 31, 32, 172, 184, 218, 259, 299, 483, 487, 490, 491, 497, 504, 546, 569, 583, 586, 589, 592, 594, 595], "zero_grad": [531, 543, 583], "zero_point": [31, 32], "zero_point_nam": 31, "zeropoint": [495, 497, 586], "zfnet": 598, "zhen": 136, "zhewei": 136, "zip": [501, 573, 577, 578], "zo_valu": 31, "zone": 584, "zoo": [201, 218, 243, 259, 504, 532, 536, 598], "zp": [32, 497, 592], "\u03b1": 523, "\u03b2": 523, "\u2776": 506, "\u2777": 506, "\u2778": 506, "\u2779": 506, "\u277a": 506, "\u277b": 506, "\u277c": 506, "\u817e\u8baf\u4e91taco": 584, "\u96c6\u6210\u82f1\u7279\u5c14": 584}, "titles": ["block_mask", "neural_compressor.adaptor.mxnet_utils", "neural_compressor.adaptor.mxnet_utils.util", "neural_compressor.adaptor.ox_utils.calibration", "neural_compressor.adaptor.ox_utils.calibrator", "neural_compressor.adaptor.ox_utils", "neural_compressor.adaptor.ox_utils.operators.activation", "neural_compressor.adaptor.ox_utils.operators.argmax", "neural_compressor.adaptor.ox_utils.operators.attention", "neural_compressor.adaptor.ox_utils.operators.binary_op", "neural_compressor.adaptor.ox_utils.operators.concat", "neural_compressor.adaptor.ox_utils.operators.conv", "neural_compressor.adaptor.ox_utils.operators.direct_q8", "neural_compressor.adaptor.ox_utils.operators.embed_layernorm", "neural_compressor.adaptor.ox_utils.operators.gather", "neural_compressor.adaptor.ox_utils.operators.gavgpool", "neural_compressor.adaptor.ox_utils.operators.gemm", "neural_compressor.adaptor.ox_utils.operators", "neural_compressor.adaptor.ox_utils.operators.lstm", "neural_compressor.adaptor.ox_utils.operators.matmul", "neural_compressor.adaptor.ox_utils.operators.maxpool", "neural_compressor.adaptor.ox_utils.operators.norm", "neural_compressor.adaptor.ox_utils.operators.ops", "neural_compressor.adaptor.ox_utils.operators.pad", "neural_compressor.adaptor.ox_utils.operators.pooling", "neural_compressor.adaptor.ox_utils.operators.reduce", "neural_compressor.adaptor.ox_utils.operators.resize", "neural_compressor.adaptor.ox_utils.operators.split", "neural_compressor.adaptor.ox_utils.operators.unary_op", "neural_compressor.adaptor.ox_utils.quantizer", "neural_compressor.adaptor.ox_utils.smooth_quant", "neural_compressor.adaptor.ox_utils.util", "neural_compressor.adaptor.ox_utils.weight_only", "neural_compressor.adaptor.tensorflow", "neural_compressor.adaptor.tf_utils.graph_converter", "neural_compressor.adaptor.tf_utils.graph_converter_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", "neural_compressor.adaptor.tf_utils.graph_rewriter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.adaptor.tf_utils.graph_util", "neural_compressor.adaptor.tf_utils", "neural_compressor.adaptor.tf_utils.quantize_graph", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", "neural_compressor.adaptor.tf_utils.quantize_graph.qat", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph_common", "neural_compressor.adaptor.tf_utils.smooth_quant_calibration", "neural_compressor.adaptor.tf_utils.smooth_quant_scaler", "neural_compressor.adaptor.tf_utils.tf2onnx_converter", "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", "neural_compressor.adaptor.tf_utils.transform_graph", "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", "neural_compressor.adaptor.tf_utils.util", "neural_compressor.adaptor.torch_utils.bf16_convert", "neural_compressor.adaptor.torch_utils.hawq_metric", "neural_compressor.adaptor.torch_utils", "neural_compressor.adaptor.torch_utils.layer_wise_quant", "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", "neural_compressor.adaptor.torch_utils.model_wrapper", "neural_compressor.adaptor.torch_utils.pattern_detector", "neural_compressor.adaptor.torch_utils.symbolic_trace", "neural_compressor.adaptor.torch_utils.util", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.utils.logger", "neural_compressor.compression.callbacks", "neural_compressor.compression.distillation.criterions", "neural_compressor.compression.distillation", "neural_compressor.compression.distillation.optimizers", "neural_compressor.compression.distillation.utility", "neural_compressor.compression.hpo", "neural_compressor.compression.hpo.sa_optimizer", "neural_compressor.compression.pruner.criteria", "neural_compressor.compression.pruner", "neural_compressor.compression.pruner.model_slim.auto_slim", "neural_compressor.compression.pruner.model_slim", "neural_compressor.compression.pruner.model_slim.pattern_analyzer", "neural_compressor.compression.pruner.model_slim.weight_slim", "neural_compressor.compression.pruner.patterns.base", "neural_compressor.compression.pruner.patterns", "neural_compressor.compression.pruner.patterns.mha", "neural_compressor.compression.pruner.patterns.ninm", "neural_compressor.compression.pruner.patterns.nxm", "neural_compressor.compression.pruner.pruners.base", "neural_compressor.compression.pruner.pruners.basic", "neural_compressor.compression.pruner.pruners.block_mask", "neural_compressor.compression.pruner.pruners", "neural_compressor.compression.pruner.pruners.mha", "neural_compressor.compression.pruner.pruners.pattern_lock", "neural_compressor.compression.pruner.pruners.progressive", "neural_compressor.compression.pruner.pruners.retrain_free", "neural_compressor.compression.pruner.pruning", "neural_compressor.compression.pruner.regs", "neural_compressor.compression.pruner.schedulers", "neural_compressor.compression.pruner.tf_criteria", "neural_compressor.compression.pruner.utils", "neural_compressor.compression.pruner.wanda", "neural_compressor.compression.pruner.wanda.utils", "neural_compressor.conf.pythonic_config", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.dataloaders.base_dataloader", "neural_compressor.data.dataloaders.dataloader", "neural_compressor.data.dataloaders.default_dataloader", "neural_compressor.data.dataloaders.fetcher", "neural_compressor.data.dataloaders.mxnet_dataloader", "neural_compressor.data.dataloaders.onnxrt_dataloader", "neural_compressor.data.dataloaders.pytorch_dataloader", "neural_compressor.data.dataloaders.sampler", "neural_compressor.data.dataloaders.tensorflow_dataloader", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.onnxrt.algorithms.smoother.calibrator", "neural_compressor.onnxrt.algorithms.smoother.core", "neural_compressor.onnxrt.utils.onnx_model", "neural_compressor.profiling", "neural_compressor.profiling.parser.factory", "neural_compressor.profiling.parser.onnx_parser.factory", "neural_compressor.profiling.parser.onnx_parser.parser", "neural_compressor.profiling.parser.parser", "neural_compressor.profiling.parser.result", "neural_compressor.profiling.parser.tensorflow_parser.factory", "neural_compressor.profiling.parser.tensorflow_parser.parser", "neural_compressor.profiling.profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.profiler", "neural_compressor.profiling.profiler.onnxrt_profiler.utils", "neural_compressor.profiling.profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.factory", "neural_compressor.profiling.profiler.tensorflow_profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.utils", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.template.api_doc_example", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.torch.algorithms.layer_wise", "neural_compressor.torch.algorithms.layer_wise.load", "neural_compressor.torch.algorithms.layer_wise.modified_pickle", "neural_compressor.torch.algorithms.layer_wise.utils", "neural_compressor.torch.algorithms.mix_precision.half_precision_convert", "neural_compressor.torch.algorithms.mix_precision.module_wrappers", "neural_compressor.torch.algorithms.weight_only.modules", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "titleterms": {"": [504, 539, 565, 571], "0": 598, "1": [502, 531, 534, 537, 543, 564, 571, 572, 598], "15": [584, 598], "17": 598, "2": [502, 531, 534, 537, 543, 564, 571, 572, 598], "2018": 584, "2020": 584, "2021": 584, "2022": 584, "2023": 584, "2024": 584, "25": 584, "3": [534, 548, 564, 584], "35": 584, "4": [534, 555, 564, 584], "5": 564, "64": 539, "82": 584, "For": 548, "One": 582, "Or": 558, "With": 493, "abil": 507, "accept": 500, "access": 585, "accord": [506, 507], "accuraci": [488, 493, 497, 541, 544, 567, 569, 586, 595], "activ": [6, 567], "ad": 505, "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 505, 506, 508], "add": [506, 572], "addit": 504, "advanc": [502, 570, 596], "ai": 539, "algorithm": [147, 148, 149, 150, 151, 339, 340, 378, 379, 380, 461, 462, 463, 464, 465, 466, 467, 523, 589, 592, 595], "alpha": [489, 494, 592], "amazon": 548, "an": [506, 577, 578, 579], "analyz": [567, 569, 570], "annot": 524, "api": [487, 488, 492, 495, 502, 505, 506, 511, 512, 522, 525, 526, 529, 530, 531, 536, 537, 542, 544, 546, 547, 551, 565, 566, 573, 579, 581, 582, 583, 585, 596], "api_doc_exampl": 377, "app": 570, "appendix": 533, "approach": [495, 586], "architectur": [502, 527, 538, 539], "argmax": 7, "argument": [491, 552], "ask": 534, "asymmetr": 497, "attent": 8, "attribut": [204, 246, 377, 499], "auto": [359, 494, 558, 564, 588, 592, 595], "auto_mixed_precis": [304, 360], "auto_slim": 163, "autom": [559, 562], "autoround": 491, "autotun": [488, 492, 496], "avail": 570, "aw": 548, "awai": 565, "awar": [493, 497, 501, 543, 583, 586], "awq": 491, "backend": [490, 495, 505, 586], "background": [505, 524, 564], "base": [167, 172, 539, 573, 596], "base_dataload": [193, 234], "base_model": 329, "basic": [173, 305, 361, 502, 595], "basic_na": 277, "bayesian": [306, 362, 595], "bench": 551, "benchmark": [152, 219, 513, 522, 528, 543, 585], "benefit": 591, "bert_dataset": [202, 244], "best": [550, 558], "between": 537, "bf16": [36, 37, 38, 382, 383, 384, 488, 544], "bf16_convert": [36, 135, 382], "bias_correct": [129, 453], "bigdl": 549, "binari": 539, "binary_op": 9, "bleu": [267, 320], "bleu_util": [268, 321], "block": 592, "block_mask": [0, 174], "build": [525, 534, 542, 570, 571, 572], "built": [537, 539, 542], "bundl": 570, "calcul": 506, "calibr": [3, 4, 339, 378, 506, 523], "callback": 154, "capabl": [505, 589], "chang": [507, 537, 563, 565, 590], "changelog": [556, 560], "channel": [497, 592], "check": 500, "checklist": 500, "citat": 540, "class": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 140, 143, 144, 147, 148, 150, 151, 153, 154, 155, 157, 161, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 265, 267, 270, 274, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 465, 466, 467, 468, 469, 477, 478, 479, 481, 483, 484, 505, 574], "client": 580, "cluster": [572, 573], "coco_dataset": [203, 245], "coco_filt": [210, 252], "coco_label_map": [269, 322], "coco_tool": [270, 323], "code": [499, 500, 502, 524, 543, 565, 570, 589, 596], "coder": [547, 551, 553, 564, 596], "collabor": 566, "collect_layer_histogram": 469, "comment": 524, "common": [153, 220, 221, 222, 223, 224, 225, 226, 227, 491, 492, 501, 534], "commun": 504, "comparison": 591, "compat": 539, "compon": 228, "compress": [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 229, 514, 589], "compressor": [498, 501, 504, 525, 528, 538, 539, 542, 543, 558, 564, 591, 599], "concat": 10, "conda": [559, 562], "conduct": [499, 500], "conf": 187, "config": [188, 515, 526, 581], "configur": [507, 531, 535, 570, 585, 591, 597], "conserv": [363, 595], "constant": [313, 371, 470], "contact": [547, 571], "contentcontrib": [189, 190, 191, 192, 230, 231, 232, 233], "contribut": [500, 557, 561], "contributor": [499, 500], "control": 550, "conv": 11, "convent": 524, "convert_add_to_biasadd": [39, 385], "convert_layout": [40, 386], "convert_leakyrelu": [41, 387], "convert_nan_to_random": [42, 388], "convert_placeholder_to_const": [43, 389], "core": 340, "coven": [499, 500], "cpu": [539, 550, 598], "creat": [500, 570], "create_obj_from_config": 471, "criteria": [161, 500, 583, 595], "criterion": [155, 220], "custom": [502, 525, 542, 577, 595], "data": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 459, 506, 507, 528, 532, 568], "dataload": [193, 194, 195, 196, 197, 198, 199, 200, 201, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 525, 526], "dataset": [202, 203, 204, 205, 206, 207, 208, 209, 244, 245, 246, 247, 248, 249, 250, 251, 526, 528, 537, 569], "debug": [567, 569], "decai": 583, "default_dataload": [195, 236], "defin": [507, 531], "definit": 574, "deploy": [570, 583], "dequantize_cast_optim": [37, 383], "descript": [528, 573, 575], "design": [506, 527, 574, 595], "detail": 501, "determin": [494, 592], "develop": [557, 561], "devic": [495, 586], "diagnosi": [528, 566], "diagram": 574, "differ": 591, "dilated_contract": [44, 390], "direct_q8": 12, "distil": [155, 156, 157, 158, 260, 529, 530, 543, 585, 598], "distribut": [531, 553, 595], "do": [528, 547], "doc": 574, "document": [498, 504, 511, 599], "doe": 571, "download": [573, 577, 578], "driven": [488, 544], "dummy_biasadd": [45, 391], "dummy_dataset": [205, 247], "dummy_dataset_v2": [206, 248], "dump": [566, 568], "dure": [544, 588], "dyna": 278, "dynam": [486, 497, 501, 502, 586], "each": 592, "eject": 570, "embed_layernorm": 13, "enabl": [551, 558, 564], "end": [571, 577, 578, 579], "endpoint": 573, "enforc": 499, "engin": 592, "enhanc": 592, "entir": 592, "environ": [539, 550], "evalu": 531, "evaluate_squad": [271, 324], "event": [504, 584], "exampl": [486, 487, 488, 490, 491, 493, 494, 497, 501, 502, 505, 511, 522, 525, 526, 528, 529, 530, 531, 532, 533, 542, 543, 544, 545, 546, 549, 553, 566, 567, 568, 569, 571, 576, 577, 578, 579, 581, 582, 583, 586, 587, 589, 592, 593, 598], "except": [139, 463], "execut": 531, "exhaust": [307, 364, 595], "exit": 595, "expanddims_optim": [46, 392], "experiment": [219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "explor": 565, "export": [261, 262, 263, 264, 472, 473, 474, 475, 533, 589], "extens": [547, 557, 558, 561, 564, 565, 574], "f1": [272, 325], "face": [537, 578, 579], "factori": [343, 344, 348, 350, 351, 355], "fail": 570, "fake_quant": 99, "fallback": 528, "fast_bias_correct": 148, "featur": [528, 531, 535, 538, 553, 554, 558, 585, 586, 593, 597], "fetch_weight_from_reshap": [47, 393], "fetcher": [196, 237], "few": 507, "file": [526, 535, 597], "filter": [210, 211, 212, 252, 253, 254], "fix": [489, 494, 592], "flow": [505, 586], "fold_batch_norm": [48, 394], "fold_const": [49, 395], "folder": [524, 565], "forg": [559, 562], "fp16": [488, 544], "fp32": [506, 533], "framework": [489, 506, 525, 526, 533, 535, 545, 546, 585, 587, 589, 592], "free": 583, "freeze_fake_qu": [74, 419], "freeze_valu": [75, 420], "freeze_value_without_calib": 76, "frequenc": 550, "frequent": 534, "from": [504, 506, 539, 543, 566, 571, 572], "full": 584, "function": [2, 4, 22, 30, 31, 32, 53, 54, 56, 90, 91, 102, 104, 134, 135, 136, 141, 142, 145, 146, 147, 152, 155, 157, 158, 161, 162, 163, 165, 167, 168, 172, 175, 180, 181, 182, 183, 184, 186, 194, 195, 202, 204, 211, 217, 218, 219, 220, 224, 225, 227, 236, 244, 246, 253, 258, 259, 262, 263, 264, 267, 268, 270, 271, 272, 274, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 399, 400, 402, 458, 459, 460, 462, 464, 468, 471, 473, 474, 475, 478, 479, 480, 482, 483, 531], "fundament": [497, 586, 592], "further": 565, "fuse_biasadd_add": [50, 396], "fuse_column_wise_mul": [51, 397], "fuse_conv_redundant_dequant": [77, 421], "fuse_conv_requant": [78, 422], "fuse_conv_with_math": [52, 398], "fuse_decomposed_bn": [53, 399], "fuse_decomposed_in": [54, 400], "fuse_gelu": [55, 401], "fuse_layer_norm": [56, 402], "fuse_matmul_redundant_dequant": [79, 423], "fuse_matmul_requant": [80, 424], "fuse_pad_with_conv": [57, 403], "fuse_pad_with_fp32_conv": [58, 404], "fuse_qdq_bn": [109, 436], "fuse_qdq_concatv2": [110, 437], "fuse_qdq_conv": [111, 438], "fuse_qdq_deconv": [112, 439], "fuse_qdq_in": [113, 440], "fuse_qdq_matmul": [114, 441], "fuse_qdq_pool": [115, 442], "fuse_reshape_transpos": [59, 405], "fx": 501, "gather": 14, "gavgpool": 15, "gemm": 16, "gener": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 506], "get": [486, 487, 488, 490, 491, 493, 501, 502, 504, 505, 522, 525, 526, 528, 529, 530, 531, 535, 536, 542, 544, 546, 547, 558, 565, 566, 570, 571, 572, 573, 581, 582, 583, 585, 586, 593, 597], "go": 565, "govern": 550, "gptq": 491, "gpu": 539, "gradient_sensit": 283, "graph": 506, "graph_bas": [72, 418], "graph_convert": [34, 381], "graph_converter_without_calib": 35, "graph_cse_optim": [60, 406], "graph_optim": 265, "graph_rewrit": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433], "graph_transform_bas": [130, 454], "graph_util": [96, 434], "grappler_pass": [61, 407], "group_lasso": 284, "grpc": 579, "guid": [548, 596], "guidelin": 500, "half_precision_convert": 465, "hardwar": [488, 539, 544, 598], "hawq_metr": 136, "hawq_v2": [365, 595], "help": 558, "highlight": 555, "histogram": 569, "horovodrun": 531, "how": [496, 506, 507, 528, 567, 568, 569, 571], "hpo": [159, 160], "hqq": 491, "hug": [578, 579], "hyperparamet": 583, "icon": 564, "imagenet_dataset": [207, 249], "imagenet_transform": [214, 256], "implement": [505, 506], "import": 524, "inc": 524, "incompat": [537, 590], "infer": 531, "inform": 540, "infrastructur": 538, "innov": 596, "insert_log": [132, 456], "insert_print_nod": [63, 409], "insert_qdq_pattern": [93, 431], "insight": [566, 567, 568, 569], "inspect": 572, "instal": [504, 528, 539, 548, 550, 557, 558, 561, 566, 571, 572], "instanc": 548, "int4": 507, "int8": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 533, 598], "intel": [498, 504, 525, 528, 538, 539, 542, 543, 550, 558, 564, 599], "interfac": 524, "intermedi": 529, "intern": 524, "introduct": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 501, 502, 505, 506, 507, 522, 523, 525, 526, 528, 529, 530, 531, 533, 535, 538, 542, 544, 545, 546, 564, 567, 568, 569, 581, 582, 583, 585, 586, 587, 589, 591, 592, 593, 594, 595, 597], "invok": 507, "ipex": [490, 497, 586], "issu": [534, 590], "iter": 506, "jemalloc": 550, "json": 524, "jupyt": [547, 548, 559, 562], "jupyterlab": 558, "keras_model": 331, "kernel": 507, "kit": 539, "kl_diverg": 477, "knowledg": [529, 598], "known": 590, "lab": [547, 548], "languag": [541, 583], "larg": [541, 583], "launcher": [547, 552], "layer": [529, 587, 592], "layer_wis": [461, 462, 463, 464], "layer_wise_qu": [138, 139, 140, 141, 142], "learn": [570, 571], "legal": 540, "let": 558, "licens": 540, "like": [492, 507], "limit": [497, 592], "line": 507, "list": [506, 532, 576, 594], "llm": [504, 541], "load": [462, 491, 492], "load_huggingfac": 478, "log": [563, 572, 573], "logger": [153, 296, 479, 524], "lstm": 18, "lwq": 587, "magnitud": 286, "make": [559, 562, 565, 570], "manag": [572, 577, 578], "manual": [559, 562], "matmul": [19, 497, 592], "matrix": [488, 489, 491, 492, 495, 501, 502, 505, 522, 523, 525, 526, 528, 529, 530, 531, 533, 535, 538, 542, 544, 545, 546, 549, 581, 582, 583, 585, 586, 587, 589, 592, 593, 597], "maxpool": 20, "merge_duplicated_qdq": [94, 432], "meta_op_optim": [82, 426], "method": [571, 572], "metric": [223, 267, 268, 269, 270, 271, 272, 273, 274, 320, 321, 322, 323, 324, 325, 326, 327, 537, 542], "mha": [169, 176], "microsc": [487, 546], "migrat": 543, "minifi": 570, "mix": [488, 516, 543, 544, 588], "mix_precis": [328, 465, 466], "mixed_precis": 275, "mkl": 550, "mode": [501, 598], "model": [224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 489, 490, 496, 506, 517, 533, 536, 539, 541, 543, 545, 546, 553, 567, 568, 569, 577, 578, 579, 583, 587, 589, 592, 598], "model_convers": 276, "model_slim": [163, 164, 165, 166], "model_wrapp": [143, 460], "modifi": 528, "modified_pickl": [139, 463], "modul": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "module_wrapp": 466, "more": [570, 571], "move_squeeze_after_relu": [64, 410], "mse": [309, 367, 595], "mse_v2": [310, 368, 595], "multipl": [539, 581, 598], "mxnet": [526, 542, 586, 594], "mxnet_dataload": [197, 239], "mxnet_model": 333, "mxnet_util": [1, 2], "na": [277, 278, 279, 280, 281, 282, 502, 585], "nano": 549, "nas_util": 281, "need": 506, "nets_factori": 334, "network": 583, "neural": [498, 501, 502, 504, 525, 528, 538, 539, 542, 543, 547, 551, 553, 558, 564, 566, 567, 568, 569, 571, 572, 573, 577, 578, 579, 583, 591, 596, 599], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "neural_compressor_ext_lab": [557, 559], "neural_compressor_ext_lab_alibaba": [561, 562], "neural_insights_util": 480, "new": [504, 505, 507, 559, 562, 595], "ninm": 170, "node": 572, "non": 504, "norm": 21, "note": [501, 590], "notebook": 548, "npm": [559, 562, 570], "numa": 550, "nxm": 171, "oaa": 574, "object": [338, 518, 577, 578, 579, 581], "off": 588, "offer": 547, "onli": [491, 497, 502, 504, 589], "onnx": [87, 88, 89, 90, 91, 509, 539, 586, 587, 598], "onnx_graph": 88, "onnx_model": [335, 341], "onnx_nod": 89, "onnx_pars": [344, 345], "onnx_schema": 90, "onnxrt": [339, 340, 341, 526, 542, 594], "onnxrt_dataload": [198, 240], "onnxrt_profil": [351, 352, 353], "onnxrtadaptor": 505, "op": [22, 533], "open": [564, 569], "openmp": 550, "oper": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 506, 507], "optim": [157, 225, 554, 564, 574, 577, 578, 579, 582, 583, 596], "optimize_lay": 104, "optimize_qdq": [117, 444], "option": [481, 531, 552], "orchestr": [543, 582], "other": 555, "our": [499, 592], "overview": [496, 500, 574, 596], "ox_util": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "packag": [162, 168, 175, 557, 559, 561, 562], "pad": 23, "paramet": [528, 573], "parser": [343, 344, 345, 346, 347, 348, 349], "pattern": [167, 168, 169, 170, 171, 291, 292, 293, 297, 583], "pattern_analyz": 165, "pattern_detector": 144, "pattern_lock": [177, 287], "per": [497, 592], "perform": [550, 591], "ping": 573, "pip": [571, 572], "platform": [550, 591], "pledg": 499, "polici": [503, 595], "pool": 24, "post": [495, 501, 543, 573, 586], "post_hostconst_convert": [83, 427], "post_quantized_op_cs": [84, 428], "postprocess": [216, 226], "pre": 558, "pre_optim": [65, 411], "precis": [488, 516, 543, 544, 588], "prepar": [506, 528, 567, 568, 569, 591], "prerequisit": [539, 571, 572], "problem": [492, 501], "process": 595, "processor": 539, "product": 596, "profil": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 528], "progress": [178, 570], "prune": [180, 289, 300, 543, 583, 585, 598], "prune_util": 298, "pruner": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 288, 299], "pruner_legaci": [283, 284, 285, 286, 287, 288], "pruning_recip": [290, 291, 292, 293], "pruning_v2": 294, "pt2e": 490, "ptq": 598, "public": [504, 524, 584], "publish": [559, 562], "pull": 500, "pure": 531, "pypi": [504, 553, 566], "python": [502, 525, 536, 542, 547, 551, 552, 559, 562, 566, 585, 596], "pythonic_config": 187, "pytorch": [482, 488, 489, 490, 491, 496, 497, 526, 531, 533, 542, 568, 586, 587, 588, 593, 594, 598], "pytorch_dataload": [199, 241], "pytorch_prun": [295, 296, 297, 298, 299, 300, 301], "qat": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 598], "qdq": [92, 93, 94, 95, 109, 110, 111, 112, 113, 114, 115, 116, 117, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 598], "qlinear2qdq": [262, 473], "quant": [494, 592], "quantiz": [29, 140, 302, 358, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 486, 487, 489, 490, 491, 492, 493, 495, 497, 501, 504, 506, 507, 519, 523, 528, 530, 533, 536, 539, 541, 543, 544, 546, 553, 564, 566, 567, 568, 569, 577, 578, 579, 585, 586, 587, 588, 589, 592, 598], "quantize_config": 101, "quantize_graph": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451], "quantize_graph_bas": [118, 445], "quantize_graph_bn": [119, 446], "quantize_graph_common": [125, 452], "quantize_graph_concatv2": [120, 447], "quantize_graph_conv": [121, 448], "quantize_graph_for_intel_cpu": [122, 449], "quantize_graph_matmul": [123, 450], "quantize_graph_pool": [124, 451], "quantize_help": 102, "quantize_lay": [103, 104, 105, 106, 107], "quantize_layer_add": 105, "quantize_layer_bas": 106, "quantize_layer_bn": 107, "quantize_wrapp": 108, "queri": [505, 572, 577, 578, 579], "query_fw_cap": 506, "question": 534, "quick": [536, 552], "random": [311, 369, 595], "rang": 506, "react": 570, "recip": [541, 586], "recommend": 524, "reduc": 25, "refer": [487, 491, 497, 523, 524, 546, 583, 586, 589, 592], "reg": 181, "regular": 583, "releas": [532, 559, 562, 590], "remov": 572, "remove_training_nod": [66, 412], "rename_batch_norm": [67, 413], "report": 503, "request": [488, 500, 544, 575], "requir": [539, 557, 561, 567, 568, 569, 577], "requisit": 558, "rerange_quantized_concat": [133, 457], "research": 566, "resiz": 26, "resourc": [572, 577, 578], "respons": [499, 573], "result": [347, 567, 569, 577, 578, 579], "retrain": 583, "retrain_fre": 179, "rnn_convert": 85, "rtn": 491, "rule": [489, 490, 491, 493, 524, 586], "run": [506, 528, 565, 567, 568, 569, 570], "runtim": [509, 539, 586, 587, 598], "sa_optim": 160, "sagemak": 548, "sampl": [490, 506, 536], "sampler": [200, 242], "save": 491, "scale_propag": [86, 429], "scaler": 379, "schedul": [182, 301, 303, 583], "scheme": [495, 497, 586], "scope": [499, 583], "screen": 573, "script": [528, 570], "search": [502, 564], "search_algorithm": 282, "section": [498, 599], "secur": [503, 531], "see": 528, "select": [504, 558], "self": 529, "servic": [572, 574, 577, 578, 579], "set": [524, 528, 550, 564], "setup": 565, "share_qdq_y_pattern": [95, 433], "shot": 582, "sigopt": [191, 232, 591, 595], "singl": 581, "size": 570, "smooth": [489, 494, 495, 497, 592], "smooth_quant": [30, 150], "smooth_quant_calibr": 126, "smooth_quant_scal": 127, "smoother": [339, 340, 378, 379], "smoothquant": 592, "softwar": [488, 539, 544], "solut": [571, 572, 573, 577, 578, 579], "sourc": [539, 566, 568, 569, 571, 572], "space": 595, "spars": 583, "sparsiti": 583, "specif": [507, 526], "specifi": [489, 490, 491, 493, 586], "split": [27, 570], "split_shared_input": [68, 414], "standard": 499, "start": [486, 487, 488, 490, 491, 493, 501, 502, 504, 505, 522, 525, 526, 528, 529, 530, 531, 535, 536, 542, 544, 546, 547, 548, 552, 558, 566, 570, 571, 572, 577, 578, 579, 581, 582, 583, 585, 586, 593, 597], "state": 572, "static": [490, 495, 497, 501, 504, 586], "static_qu": 380, "statu": [500, 572, 573], "step": [500, 566, 567, 568, 569], "stop": [572, 577, 578, 579], "straight": 565, "strategi": [190, 191, 192, 231, 232, 233, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 520, 591, 595], "string": 524, "strip_equivalent_nod": [69, 415], "strip_unused_nod": [70, 416], "structur": 524, "studio": 548, "style": 585, "style_transfer_dataset": [209, 251], "submit": [572, 573, 577, 578, 579], "submodul": [1, 5, 17, 38, 62, 73, 81, 87, 92, 97, 98, 100, 103, 116, 131, 137, 138, 149, 156, 159, 162, 164, 168, 175, 185, 190, 208, 212, 215, 222, 231, 238, 250, 254, 257, 261, 266, 273, 279, 285, 291, 295, 308, 314, 319, 326, 330, 366, 372, 384, 408, 425, 430, 435, 443, 455, 461, 472, 476], "subpackag": [5, 73, 97, 98, 100, 137, 162, 189, 213, 230, 255, 266, 290, 308, 319, 366, 435, 476], "suggest": 528, "summari": [507, 567], "superbench": 551, "support": [488, 489, 491, 492, 495, 500, 501, 502, 505, 507, 522, 523, 525, 526, 528, 529, 530, 531, 533, 535, 538, 539, 542, 544, 545, 546, 548, 549, 553, 554, 581, 582, 583, 585, 586, 587, 589, 592, 593, 594, 597], "switch_optim": [71, 417], "symbolic_trac": 145, "symmetr": 497, "system": 539, "task": [572, 573, 575, 577, 578, 579], "task_id": 573, "templat": [377, 500], "tensor": [497, 566, 592], "tensorboard": 593, "tensorflow": [33, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 493, 495, 496, 497, 526, 531, 533, 542, 586, 588, 593, 594, 598], "tensorflow_dataload": [201, 243], "tensorflow_model": 336, "tensorflow_pars": [348, 349], "tensorflow_profil": [355, 356, 357], "teq": 491, "test": [565, 570], "tf2onnx": [263, 474], "tf2onnx_convert": 128, "tf2onnx_util": 91, "tf_criteria": 183, "tf_util": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "through": [494, 539, 592, 598], "tile_pattern": 293, "todo": 524, "token": [217, 258], "topic": 596, "torch": [461, 462, 463, 464, 465, 466, 467, 492, 510, 598], "torch2onnx": [264, 475], "torch_load": 141, "torch_model": 337, "torch_util": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 227], "tpe": [192, 233, 595], "trademark": 540, "train": [468, 495, 497, 501, 521, 531, 543, 583, 586], "transform": [214, 215, 216, 217, 218, 256, 257, 258, 259, 537, 594], "transform_graph": [129, 130, 131, 132, 133, 453, 454, 455, 456, 457], "tune": [493, 494, 497, 507, 586, 589, 592, 595], "tune_cfg": 506, "tuning_sampl": [315, 373], "tuning_spac": [316, 374], "tuning_struct": [317, 375], "turn": 588, "type": [507, 524, 583], "u": 558, "unary_op": 28, "uninstal": [557, 561], "unreleas": 563, "up": 565, "url": 573, "us": [494, 507, 525, 542, 571, 572, 592], "usag": [489, 490, 491, 494, 502, 553, 564, 573, 592, 593, 595], "user": [526, 531, 537, 585, 589, 596, 597], "util": [2, 31, 134, 142, 146, 153, 158, 184, 186, 313, 314, 315, 316, 317, 318, 341, 353, 357, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 510], "v": [524, 565], "v0": 555, "v1": 537, "valid": [489, 536, 539, 592, 598], "variabl": 550, "vendor": 539, "version": 485, "vscode": 564, "vulner": 503, "wanda": [185, 186], "we": 547, "web": 570, "websocket": 573, "weight": [491, 497, 504, 567, 568, 569, 589], "weight_correct": 151, "weight_onli": [32, 467], "weight_slim": 166, "weights_detail": 484, "welcom": 565, "what": [504, 547, 565, 571], "why": 571, "wip": 574, "wise": 587, "without": 493, "woq": [589, 598], "work": [496, 505, 571, 586], "workflow": [527, 574], "x": 543, "xe": 539, "yaml": [502, 506, 526, 531, 535, 597], "you": 558, "your": 565, "zero": 596}})