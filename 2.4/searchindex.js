Search.setIndex({"alltitles": {"1. Open": [[451, "open"]], "1. Python code + YAML": [[392, "python-code-yaml"]], "2. Python code only": [[392, "python-code-only"]], "2. Search": [[451, "search"]], "2018 - 2020 (4)": [[471, "id4"]], "2021 (15)": [[471, "id3"]], "2022 (35)": [[471, "id2"]], "2023 (24)": [[471, "id1"]], "3. Setting": [[451, "setting"]], "4. Icon": [[451, "icon"]], "5. optimization (quantization)": [[451, "optimization-quantization"]], "5.1 Enable": [[451, "enable"]], "5.2 Auto": [[451, "auto"]], "API Document Example": [[401, "api-document-example"]], "API List that Need to Implement": [[396, "api-list-that-need-to-implement"]], "APIs": [[402, "apis"]], "AWS Amazon SageMaker Support": [[435, "aws-amazon-sagemaker-support"]], "Accuracy Criteria": [[482, "accuracy-criteria"]], "Accuracy-driven mixed precision": [[432, "accuracy-driven-mixed-precision"]], "Activations summary": [[454, "activations-summary"]], "Adaptor": [[395, "adaptor"], [398, "adaptor"]], "Adaptor Support Matrix": [[395, "adaptor-support-matrix"]], "Add node": [[459, "add-node"]], "Add quantize API according to tune_cfg": [[396, "add-quantize-api-according-to-tune-cfg"]], "Add query_fw_capability to Adaptor": [[396, "add-query-fw-capability-to-adaptor"]], "Additional Content": [[394, "additional-content"]], "Advanced Configuration": [[457, "advanced-configuration"]], "Advanced Topics": [[483, "advanced-topics"]], "Advanced Usage (Custom NAS)": [[392, "advanced-usage-custom-nas"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[479, "algorithm-layer-wise-auto-tuning-of-alpha"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[465, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[466, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "An end-to-end example: quantize a custom model with Neural Solution": [[464, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Analyzing the Bundle Size": [[457, "analyzing-the-bundle-size"]], "Analyzing the result of quantization": [[454, "analyzing-the-result-of-quantization"], [456, "analyzing-the-result-of-quantization"]], "Analyzing weight histograms": [[456, "analyzing-weight-histograms"]], "Appendix": [[422, "appendix"]], "Architecture": [[416, "architecture"], [427, "architecture"]], "Attributes": [[202, "attributes"], [244, "attributes"], [372, "attributes"]], "Attribution": [[389, "attribution"]], "Auto": [[482, "auto"]], "Auto-enable a feature": [[445, "auto-enable-a-feature"]], "Automated releases with the Jupyter Releaser": [[446, "automated-releases-with-the-jupyter-releaser"], [449, "automated-releases-with-the-jupyter-releaser"]], "Available Scripts": [[457, "available-scripts"]], "Background": [[395, "background"]], "Background Introduction": [[451, "background-introduction"]], "Base URL": [[460, "base-url"]], "Basic": [[482, "basic"]], "Basic NAS": [[392, "basic-nas"]], "Basic Usage": [[392, "basic-usage"]], "Bayesian": [[482, "bayesian"]], "Bench": [[438, "bench"]], "Benchmark": [[403, "benchmark"], [431, "benchmark"], [472, "benchmark"]], "Benchmark Support Matrix": [[412, "benchmark-support-matrix"]], "Benchmark diagnosis": [[417, "benchmark-diagnosis"]], "Benchmarking": [[412, "benchmarking"]], "Benefit of SigOpt Strategy": [[478, "benefit-of-sigopt-strategy"]], "BigDL Nano Support": [[436, "bigdl-nano-support"]], "Build Custom Dataloader with Python API": [[414, "build-custom-dataloader-with-python-api"]], "Build Custom Metric with Python API": [[430, "build-custom-metric-with-python-api"]], "Built-in transform/dataset/metric APIs": [[426, "built-in-transform-dataset-metric-apis"]], "Calculate the data range and generate quantized model": [[396, "calculate-the-data-range-and-generate-quantized-model"]], "Calibration Algorithms": [[413, "calibration-algorithms"]], "Calibration Algorithms in Quantization": [[413, "calibration-algorithms-in-quantization"]], "Capability": [[395, "capability"]], "Change Log": [[450, "change-log"]], "Changelog": [[443, "changelog"], [447, "changelog"]], "Citation": [[429, "citation"]], "Class definition diagram": [[461, "class-definition-diagram"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [99, "classes"], [101, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [136, "classes"], [140, "classes"], [143, "classes"], [144, "classes"], [147, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [212, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [234, "classes"], [235, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [254, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [263, "classes"], [265, "classes"], [268, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [295, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [318, "classes"], [321, "classes"], [325, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [385, "classes"], [386, "classes"]], "Client": [[467, "client"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[431, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Code Splitting": [[457, "code-splitting"]], "Common Build Issues": [[423, "common-build-issues"]], "Common Problem": [[391, "common-problem"]], "Communication": [[394, "communication"]], "Compression": [[404, "compression"]], "Config": [[405, "config"]], "Config Multiple Objectives": [[468, "config-multiple-objectives"]], "Config Single Objective": [[468, "config-single-objective"]], "Config dataloader in a yaml file": [[415, "config-dataloader-in-a-yaml-file"]], "Conservative Tuning": [[482, "conservative-tuning"]], "Contact": [[434, "contact"], [458, "contact"]], "Contents": [[461, "contents"]], "Contributing": [[444, "contributing"], [448, "contributing"]], "Contribution Guidelines": [[390, "contribution-guidelines"]], "Contributor Covenant Code of Conduct": [[389, "contributor-covenant-code-of-conduct"], [390, "contributor-covenant-code-of-conduct"]], "Create Pull Request": [[390, "create-pull-request"]], "Customize a New Tuning Strategy": [[482, "customize-a-new-tuning-strategy"]], "DataLoader": [[414, "dataloader"]], "Dataset": [[415, "dataset"]], "Define the Quantization Ability of the Specific Operator": [[397, "define-the-quantization-ability-of-the-specific-operator"]], "Deployment": [[457, "deployment"]], "Description": [[460, "description"], [460, "id1"], [460, "id4"], [460, "id8"], [460, "id12"], [460, "id15"], [460, "id18"], [460, "id21"], [460, "id24"]], "Design": [[416, "design"], [482, "design"], [482, "id1"], [482, "id3"], [482, "id5"], [482, "id7"], [482, "id9"], [482, "id11"], [482, "id13"], [482, "id15"], [482, "id17"], [482, "id19"], [482, "id21"]], "Design Doc for Optimization as a Service [WIP]": [[461, "design-doc-for-optimization-as-a-service-wip"]], "Design the framework YAML": [[396, "design-the-framework-yaml"]], "Details": [[391, "details"]], "Development install": [[444, "development-install"], [448, "development-install"]], "Development uninstall": [[444, "development-uninstall"], [448, "development-uninstall"]], "Diagnosis": [[417, "diagnosis"]], "Diagnosis Introduction": [[417, "diagnosis-introduction"]], "Diagnosis suggestions": [[417, "diagnosis-suggestions"]], "Distillation": [[418, "distillation"], [431, "distillation"], [472, "distillation"]], "Distillation Support Matrix": [[418, "distillation-support-matrix"]], "Distillation for Quantization": [[419, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[419, "distillation-for-quantization-support-matrix"]], "Distributed Training and Inference (Evaluation)": [[420, "distributed-training-and-inference-evaluation"]], "Distributed Tuning": [[482, "distributed-tuning"]], "Documentation": [[394, "documentation"]], "Download optimized model": [[464, "download-optimized-model"], [465, "download-optimized-model"]], "During quantization mixed precision": [[432, "during-quantization-mixed-precision"]], "Dynamic NAS": [[392, "dynamic-nas"]], "Dynamic Quantization": [[391, "dynamic-quantization"]], "Enable": [[438, "enable"]], "End-to-end examples": [[458, "end-to-end-examples"]], "Endpoints": [[460, "endpoints"]], "Enforcement": [[389, "enforcement"]], "Engineering": [[479, "engineering"]], "Environment Variables": [[437, "environment-variables"]], "Example": [[417, "example"], [430, "example"], [436, "example"], [440, "example"], [468, "example"], [479, "example"]], "Example List": [[421, "example-list"]], "Example of Adding a New Backend Support": [[395, "example-of-adding-a-new-backend-support"]], "Examples": [[391, "examples"], [392, "examples"], [412, "examples"], [414, "examples"], [415, "examples"], [418, "examples"], [419, "examples"], [420, "examples"], [421, "examples"], [422, "examples"], [431, "examples"], [432, "examples"], [433, "examples"], [469, "examples"], [470, "examples"], [473, "examples"], [474, "examples"], [476, "examples"], [480, "examples"]], "Examples List": [[463, "examples-list"]], "Exceptions": [[139, "exceptions"]], "Exhaustive": [[482, "exhaustive"]], "Exit Policy": [[482, "exit-policy"]], "Explore the API": [[452, "explore-the-api"]], "Export": [[422, "export"]], "Export Compressed Model": [[476, "export-compressed-model"]], "Extensibility": [[461, "extensibility"]], "FP32 Model Export": [[422, "fp32-model-export"], [422, "id1"]], "FX": [[391, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[391, "fx-mode-support-matrix-in-neural-compressor"]], "Fallback setting example": [[417, "fallback-setting-example"]], "Features Supported": [[440, "features-supported"]], "For SageMaker Notebook instance": [[435, "for-sagemaker-notebook-instance"]], "For SageMaker Studio": [[435, "for-sagemaker-studio"]], "Framework YAML Configuration Files": [[424, "framework-yaml-configuration-files"]], "Frequency Governers": [[437, "frequency-governers"]], "Frequently Asked Questions": [[423, "frequently-asked-questions"]], "Full Publications/Events (78)": [[471, "full-publications-events-78"]], "Functions": [[2, "functions"], [4, "functions"], [22, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [53, "functions"], [54, "functions"], [56, "functions"], [90, "functions"], [91, "functions"], [102, "functions"], [104, "functions"], [134, "functions"], [135, "functions"], [136, "functions"], [141, "functions"], [142, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [152, "functions"], [153, "functions"], [155, "functions"], [157, "functions"], [158, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [168, "functions"], [172, "functions"], [175, "functions"], [180, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [192, "functions"], [193, "functions"], [200, "functions"], [202, "functions"], [209, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [222, "functions"], [223, "functions"], [225, "functions"], [234, "functions"], [242, "functions"], [244, "functions"], [251, "functions"], [256, "functions"], [257, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [265, "functions"], [266, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [272, "functions"], [279, "functions"], [286, "functions"], [290, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [304, "functions"], [310, "functions"], [314, "functions"], [316, "functions"], [318, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [325, "functions"], [326, "functions"], [330, "functions"], [334, "functions"], [336, "functions"], [348, "functions"], [352, "functions"], [353, "functions"], [357, "functions"], [365, "functions"], [369, "functions"], [371, "functions"], [372, "functions"], [374, "functions"], [377, "functions"], [380, "functions"], [381, "functions"], [382, "functions"], [384, "functions"], [385, "functions"]], "GET /": [[460, "get"]], "GET /cluster": [[460, "get-cluster"]], "GET /description": [[460, "get-description"]], "GET /download/{task_id}": [[460, "get-download-task-id"]], "GET /ping": [[460, "get-ping"]], "GET /task/log/{task_id}": [[460, "get-task-log-task-id"]], "GET /task/status/{task_id}": [[460, "get-task-status-task-id"]], "Get Started": [[391, "get-started"], [417, "get-started"], [458, "get-started"], [473, "get-started"]], "Get Started with Adaptor API": [[395, "get-started-with-adaptor-api"]], "Get Started with Benchmark API": [[412, "get-started-with-benchmark-api"]], "Get Started with DataLoader": [[414, "get-started-with-dataloader"]], "Get Started with Distillation API": [[418, "get-started-with-distillation-api"]], "Get Started with Distillation for Quantization API": [[419, "get-started-with-distillation-for-quantization-api"]], "Get Started with Distributed Training and Inference API": [[420, "get-started-with-distributed-training-and-inference-api"]], "Get Started with Metric": [[430, "get-started-with-metric"]], "Get Started with Mixed Precision API": [[432, "get-started-with-mixed-precision-api"]], "Get Started with NAS API": [[392, "get-started-with-nas-api"]], "Get Started with Objective API": [[468, "get-started-with-objective-api"]], "Get Started with Orchestration API": [[469, "get-started-with-orchestration-api"]], "Get Started with Pruning API": [[470, "get-started-with-pruning-api"]], "Get Started with Pythonic API for Configurations": [[472, "get-started-with-pythonic-api-for-configurations"]], "Get Started with TensorBoard": [[480, "get-started-with-tensorboard"]], "Get start with Dataset API": [[415, "get-start-with-dataset-api"]], "Get started": [[459, "get-started"]], "Get started with Framework YAML Files": [[424, "get-started-with-framework-yaml-files"]], "Get started with User YAML Files": [[484, "get-started-with-user-yaml-files"]], "Get up and running straight away": [[452, "get-up-and-running-straight-away"]], "Getting Started": [[394, "getting-started"], [425, "getting-started"], [453, "getting-started"]], "Getting Started with Create React App": [[457, "getting-started-with-create-react-app"]], "Getting Started!": [[434, "getting-started"], [445, "getting-started"]], "Go further": [[452, "go-further"]], "HAWQ_V2": [[482, "hawq-v2"]], "Hardware and Software requests for BF16": [[432, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[432, "hardware-and-software-requests-for-fp16"]], "Highlights": [[442, "highlights"]], "Horovodrun Execution": [[420, "horovodrun-execution"]], "How does Neural Solution Work?": [[458, "how-does-neural-solution-work"]], "How to Add An Adaptor": [[396, "how-to-add-an-adaptor"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[397, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "How to do diagnosis": [[417, "how-to-do-diagnosis"]], "INT8 Model Export": [[422, "int8-model-export"], [422, "id2"]], "Implement ONNXRTAdaptor Class": [[395, "implement-onnxrtadaptor-class"]], "Incompatible Changes": [[477, "incompatible-changes"]], "Incompatible changes between v1.2 and v1.1": [[426, "incompatible-changes-between-v1-2-and-v1-1"]], "Infrastructure of Intel\u00ae Neural Compressor": [[427, "infrastructure-of-intel-neural-compressor"]], "Innovations for Productivity": [[483, "innovations-for-productivity"]], "Inspect logs": [[459, "inspect-logs"]], "Install": [[444, "install"], [448, "install"]], "Install Intel\u00ae Neural Compressor": [[417, "install-intel-neural-compressor"]], "Install MKL, OpenMP and JEMALLOC": [[437, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[437, "install-numa-controller"]], "Install Neural Solution": [[459, "install-neural-solution"]], "Install from AI Kit": [[428, "install-from-ai-kit"]], "Install from Binary": [[428, "install-from-binary"]], "Install from Source": [[428, "install-from-source"], [453, "install-from-source"]], "Install from pypi": [[394, "install-from-pypi"], [453, "install-from-pypi"]], "Installation": [[394, "installation"], [428, "installation"], [428, "id1"], [445, "installation"], [453, "installation"], [458, "installation"]], "Installation Guide": [[435, "installation-guide"]], "Intel CPU Platforms: Best Performance Setting": [[437, "intel-cpu-platforms-best-performance-setting"]], "Intel\u00ae Neural Compressor": [[394, "intel-neural-compressor"], [451, "intel-neural-compressor"]], "Intel\u00ae Neural Compressor Documentation": [[388, "intel-neural-compressor-documentation"], [486, "intel-neural-compressor-documentation"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[445, "intel-neural-compressor-as-jupyterlab-extension"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[428, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[428, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[428, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intermediate Layer Knowledge Distillation": [[418, "intermediate-layer-knowledge-distillation"]], "Introduction": [[391, "introduction"], [392, "introduction"], [395, "introduction"], [396, "introduction"], [397, "introduction"], [412, "introduction"], [413, "introduction"], [414, "introduction"], [415, "introduction"], [418, "introduction"], [419, "introduction"], [420, "introduction"], [422, "introduction"], [424, "introduction"], [427, "introduction"], [430, "introduction"], [432, "introduction"], [433, "introduction"], [454, "introduction"], [455, "introduction"], [456, "introduction"], [468, "introduction"], [469, "introduction"], [470, "introduction"], [472, "introduction"], [474, "introduction"], [476, "introduction"], [478, "introduction"], [479, "introduction"], [480, "introduction"], [481, "introduction"], [482, "introduction"], [484, "introduction"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[397, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Issue 1:": [[423, "issue-1"]], "Issue 2:": [[423, "issue-2"]], "Issue 3:": [[423, "issue-3"]], "Issue 4:": [[423, "issue-4"]], "Jupyter Lab Extension": [[434, "jupyter-lab-extension"]], "Knowledge Distillation": [[418, "knowledge-distillation"]], "Known Issues": [[477, "known-issues"]], "Large Language Model Pruning": [[470, "large-language-model-pruning"]], "Launcher Arguments (Optional)": [[439, "launcher-arguments-optional"]], "Layer Wise Quantization (LWQ)": [[474, "layer-wise-quantization-lwq"]], "Learn More": [[457, "learn-more"], [458, "learn-more"]], "Legal Information": [[429, "legal-information"]], "License": [[429, "license"]], "MSE": [[482, "mse"]], "MSE_V2": [[482, "mse-v2"]], "MXNet": [[415, "mxnet"], [430, "mxnet"], [481, "mxnet"]], "Make changes": [[452, "make-changes"]], "Making a Progressive Web App": [[457, "making-a-progressive-web-app"]], "Making a new release of neural_compressor_ext_lab": [[446, "making-a-new-release-of-neural-compressor-ext-lab"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[449, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Manage resource": [[459, "manage-resource"], [464, "manage-resource"], [465, "manage-resource"]], "Manual release": [[446, "manual-release"], [449, "manual-release"]], "Matmul quantization example": [[479, "matmul-quantization-example"]], "Method 1. Using pip": [[459, "method-1-using-pip"]], "Method 1. Using pip:": [[458, "method-1-using-pip"]], "Method 2. Building from source": [[459, "method-2-building-from-source"]], "Method 2. Building from source:": [[458, "method-2-building-from-source"]], "Metrics": [[430, "metrics"]], "Mix Precision": [[406, "mix-precision"], [431, "mix-precision"]], "Mixed Precision": [[432, "mixed-precision"]], "Mixed Precision Support Matrix": [[432, "mixed-precision-support-matrix"]], "Model": [[407, "model"], [433, "model"], [454, "model"], [456, "model"]], "Model Quantization": [[431, "model-quantization"]], "Models Supported": [[440, "models-supported"]], "Modify script": [[417, "modify-script"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [163, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"]], "Multiple Objectives": [[468, "multiple-objectives"]], "NAS": [[472, "nas"]], "NAS Support Matrix": [[392, "nas-support-matrix"]], "NPM package": [[446, "npm-package"], [449, "npm-package"]], "Neural Architecture Search": [[392, "neural-architecture-search"]], "Neural Coder": [[434, "neural-coder"], [451, "neural-coder"], [451, "id1"]], "Neural Coder (Zero-code Optimization)": [[483, "neural-coder-zero-code-optimization"]], "Neural Coder Extension Usage": [[451, "neural-coder-extension-usage"]], "Neural Coder Extension in VSCode": [[451, "neural-coder-extension-in-vscode"]], "Neural Coder as Python API": [[438, "neural-coder-as-python-api"]], "Neural Coder for Quantization": [[440, "neural-coder-for-quantization"]], "Neural Compressor Configuration": [[478, "neural-compressor-configuration"]], "Neural Insights": [[453, "neural-insights"]], "Neural Network Pruning": [[470, "neural-network-pruning"]], "Neural Solution API": [[460, "neural-solution-api"]], "Node States": [[459, "node-states"]], "Note": [[391, "note"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[485, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[485, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Runtime": [[399, "onnx-runtime"]], "ONNX Runtime framework example": [[474, "onnx-runtime-framework-example"]], "ONNXRT": [[415, "onnxrt"], [430, "onnxrt"], [481, "onnxrt"]], "Objective": [[408, "objective"], [464, "objective"], [465, "objective"], [466, "objective"], [468, "objective"]], "Objective Support Matrix": [[468, "objective-support-matrix"]], "One-shot": [[469, "one-shot"]], "Open Neural Insights": [[456, "open-neural-insights"]], "Optimization Orchestration": [[469, "optimization-orchestration"]], "Option 1: Pure Yaml Configuration": [[420, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[420, "option-2-user-defined-training-function"]], "Or let us help you auto-select the best feature": [[445, "or-let-us-help-you-auto-select-the-best-feature"]], "Orchestration": [[431, "orchestration"]], "Orchestration Support Matrix": [[469, "orchestration-support-matrix"]], "Others": [[442, "others"]], "Our Pledge": [[389, "our-pledge"]], "Our Responsibilities": [[389, "our-responsibilities"]], "Our Standards": [[389, "our-standards"]], "Our enhancement:": [[479, "our-enhancement"]], "Overview": [[461, "overview"], [483, "overview"]], "POST /task/submit": [[460, "post-task-submit"]], "Package Contents": [[162, "package-contents"], [168, "package-contents"], [175, "package-contents"]], "Packaging the extension": [[444, "packaging-the-extension"], [448, "packaging-the-extension"]], "Parameter description": [[417, "parameter-description"]], "Parameters": [[460, "parameters"], [460, "id5"], [460, "id10"], [460, "id13"]], "Per-channel example": [[479, "per-channel-example"]], "Per-channel limitation": [[479, "per-channel-limitation"]], "Per-tensor & Per-channel": [[479, "per-tensor-per-channel"]], "Per-tensor example": [[479, "per-tensor-example"]], "Performance": [[478, "performance"]], "Performance Comparison of Different Strategies": [[478, "performance-comparison-of-different-strategies"]], "Post Training Dynamic Quantization": [[391, "post-training-dynamic-quantization"], [473, "post-training-dynamic-quantization"]], "Post Training Quantization": [[473, "post-training-quantization"]], "Post Training Static Quantization": [[391, "post-training-static-quantization"], [473, "post-training-static-quantization"]], "Post-training Quantization": [[431, "post-training-quantization"]], "Pre-requisites": [[445, "pre-requisites"]], "Preparation": [[454, "preparation"], [455, "preparation"], [456, "preparation"], [478, "preparation"]], "Prepare calibration model from fp32 graph": [[396, "prepare-calibration-model-from-fp32-graph"]], "Prepare dataset": [[417, "prepare-dataset"]], "Prepare the dataset": [[456, "prepare-the-dataset"]], "Prerequisites": [[428, "prerequisites"], [458, "prerequisites"], [459, "prerequisites"]], "Pruning": [[431, "pruning"], [470, "pruning"], [472, "pruning"]], "Pruning Criteria": [[470, "pruning-criteria"]], "Pruning Patterns": [[470, "pruning-patterns"]], "Pruning Schedules": [[470, "pruning-schedules"]], "Pruning Scope": [[470, "pruning-scope"]], "Pruning Support Matrix": [[470, "pruning-support-matrix"]], "Pruning Types": [[470, "pruning-types"]], "Pruning with Hyperparameter Optimization": [[470, "pruning-with-hyperparameter-optimization"]], "Publishing to conda-forge": [[446, "publishing-to-conda-forge"], [449, "publishing-to-conda-forge"]], "Pull Request Acceptance Criteria": [[390, "pull-request-acceptance-criteria"]], "Pull Request Checklist": [[390, "pull-request-checklist"]], "Pull Request Status Checks Overview": [[390, "pull-request-status-checks-overview"]], "Pull Request Template": [[390, "pull-request-template"]], "PyPI distribution:": [[440, "pypi-distribution"]], "PyTorch": [[415, "pytorch"], [430, "pytorch"], [475, "pytorch"]], "PyTorch Examples": [[480, "pytorch-examples"]], "PyTorch Examples:": [[420, "pytorch-examples"]], "PyTorch Model": [[422, "pytorch-model"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[485, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[485, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[485, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[485, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "PyTorch TensorBoard": [[480, "pytorch-tensorboard"]], "PyTorch framework example": [[474, "pytorch-framework-example"]], "Python API": [[434, "python-api"]], "Python Launcher": [[434, "python-launcher"], [439, "python-launcher"]], "Python package": [[446, "python-package"], [449, "python-package"]], "Python-based APIs": [[483, "python-based-apis"]], "Pythonic API for Framework Configurations": [[472, "pythonic-api-for-framework-configurations"], [472, "id2"]], "Pythonic API for User Configurations": [[472, "pythonic-api-for-user-configurations"], [472, "id1"]], "Pythonic Style Access for Configurations": [[472, "pythonic-style-access-for-configurations"]], "Pytorch": [[481, "pytorch"]], "Quantization": [[409, "quantization"], [472, "quantization"], [473, "quantization"]], "Quantization Approaches": [[473, "quantization-approaches"]], "Quantization Aware Training": [[431, "quantization-aware-training"], [473, "quantization-aware-training"], [473, "id1"]], "Quantization Capability": [[476, "quantization-capability"]], "Quantization Fundamentals": [[473, "quantization-fundamentals"], [479, "quantization-fundamentals"]], "Quantization Introduction": [[473, "quantization-introduction"]], "Quantization Scheme in IPEX": [[473, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[473, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[473, "quantization-scheme-in-onnx-runtime"]], "Quantization Scheme in PyTorch": [[473, "quantization-scheme-in-pytorch"]], "Quantization Scheme in TensorFlow": [[473, "quantization-scheme-in-tensorflow"]], "Quantization Support Matrix": [[473, "quantization-support-matrix"]], "Quantization diagnosis": [[417, "quantization-diagnosis"]], "Quantization with Python API": [[394, "quantization-with-python-api"], [425, "quantization-with-python-api"], [453, "quantization-with-python-api"]], "Quantization-Aware Training": [[391, "quantization-aware-training"]], "Query API": [[395, "query-api"]], "Query API Introduction": [[395, "query-api-introduction"]], "Query cluster": [[459, "query-cluster"]], "Query optimization result": [[464, "query-optimization-result"], [465, "query-optimization-result"], [466, "query-optimization-result"]], "Query task status": [[459, "query-task-status"]], "Quick Samples": [[425, "quick-samples"]], "Quick-Start": [[439, "quick-start"]], "Random": [[482, "random"]], "Reference": [[413, "reference"], [470, "reference"], [473, "reference"], [476, "reference"], [479, "reference"]], "Regularization": [[470, "regularization"]], "Release": [[477, "release"]], "Release Data": [[421, "release-data"]], "Release Notes": [[477, "release-notes"]], "Remove node": [[459, "remove-node"]], "Report a Vulnerability": [[393, "report-a-vulnerability"]], "Requirements": [[444, "requirements"], [448, "requirements"], [454, "requirements"], [455, "requirements"], [456, "requirements"], [464, "requirements"]], "Research Collaborations": [[453, "research-collaborations"]], "Responses": [[460, "responses"], [460, "id3"], [460, "id7"], [460, "id11"], [460, "id14"], [460, "id17"], [460, "id20"], [460, "id23"], [460, "id26"]], "Retrain-free Pruning API": [[470, "retrain-free-pruning-api"]], "Run benchmark script": [[417, "run-benchmark-script"]], "Run quantization script": [[417, "run-quantization-script"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[396, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Run tests": [[452, "run-tests"]], "Running the quantization": [[454, "running-the-quantization"], [455, "running-the-quantization"], [456, "running-the-quantization"]], "Scope": [[389, "scope"]], "Sections": [[388, "sections"], [486, "sections"]], "Security": [[420, "security"]], "Security Policy": [[393, "security-policy"]], "See profiling data": [[417, "see-profiling-data"]], "See quantization data": [[417, "see-quantization-data"]], "Selected Publications/Events": [[394, "selected-publications-events"]], "Self Distillation": [[418, "self-distillation"]], "Setup": [[452, "setup"]], "SigOpt": [[482, "sigopt"]], "SigOpt Platform": [[478, "sigopt-platform"]], "SigOpt Strategy": [[478, "sigopt-strategy"]], "Single Objective": [[468, "single-objective"]], "Smooth Quant": [[479, "smooth-quant"]], "SmoothQuant": [[479, "smoothquant"]], "SmoothQuant and Our Enhancement": [[479, "smoothquant-and-our-enhancement"]], "Source": [[455, "source"], [456, "source"]], "Sparse Model Deployment": [[470, "sparse-model-deployment"]], "Sparsity Decay Types": [[470, "sparsity-decay-types"]], "Specify Quantization Backend and Device": [[473, "specify-quantization-backend-and-device"]], "Specify Quantization Recipes": [[473, "specify-quantization-recipes"]], "Specify Quantization Rules": [[473, "specify-quantization-rules"]], "Start Jupyter Lab 3": [[435, "start-jupyter-lab-3"]], "Start service": [[459, "start-service"]], "Start the Neural Insights": [[453, "start-the-neural-insights"]], "Start the Neural Solution Service": [[464, "start-the-neural-solution-service"], [465, "start-the-neural-solution-service"], [466, "start-the-neural-solution-service"]], "Static Quantization & Quantization Aware Training": [[391, "static-quantization-quantization-aware-training"]], "Step by Step Diagnosis Example": [[453, "step-by-step-diagnosis-example"]], "Step by step example how to debug accuracy with Neural Insights": [[454, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [456, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[455, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Step-by-Step guidelines": [[390, "step-by-step-guidelines"]], "Stop service": [[459, "stop-service"]], "Stop the service": [[464, "stop-the-service"], [465, "stop-the-service"], [466, "stop-the-service"]], "Strategy": [[410, "strategy"]], "Strategy Design": [[482, "strategy-design"]], "Submit optimization task": [[464, "submit-optimization-task"], [465, "submit-optimization-task"], [466, "submit-optimization-task"]], "Submit task": [[459, "submit-task"]], "Submodules": [[1, "submodules"], [5, "submodules"], [17, "submodules"], [38, "submodules"], [62, "submodules"], [73, "submodules"], [81, "submodules"], [87, "submodules"], [92, "submodules"], [97, "submodules"], [98, "submodules"], [100, "submodules"], [103, "submodules"], [116, "submodules"], [131, "submodules"], [137, "submodules"], [138, "submodules"], [149, "submodules"], [156, "submodules"], [159, "submodules"], [162, "submodules"], [164, "submodules"], [168, "submodules"], [175, "submodules"], [188, "submodules"], [206, "submodules"], [210, "submodules"], [213, "submodules"], [220, "submodules"], [229, "submodules"], [236, "submodules"], [248, "submodules"], [252, "submodules"], [255, "submodules"], [259, "submodules"], [264, "submodules"], [271, "submodules"], [277, "submodules"], [283, "submodules"], [289, "submodules"], [293, "submodules"], [306, "submodules"], [312, "submodules"], [317, "submodules"], [324, "submodules"], [328, "submodules"], [361, "submodules"], [367, "submodules"], [378, "submodules"]], "Subpackages": [[5, "subpackages"], [73, "subpackages"], [97, "subpackages"], [98, "subpackages"], [100, "subpackages"], [137, "subpackages"], [162, "subpackages"], [187, "subpackages"], [211, "subpackages"], [228, "subpackages"], [253, "subpackages"], [264, "subpackages"], [288, "subpackages"], [306, "subpackages"], [317, "subpackages"], [361, "subpackages"]], "Summary": [[397, "summary"]], "SuperBench": [[438, "superbench"]], "Support": [[390, "support"]], "Support Matrix": [[413, "support-matrix"], [436, "support-matrix"]], "Supported Built-in Metric Matrix": [[430, "supported-built-in-metric-matrix"]], "Supported Feature Matrix": [[417, "supported-feature-matrix"], [420, "supported-feature-matrix"], [424, "supported-feature-matrix"], [427, "supported-feature-matrix"], [472, "supported-feature-matrix"], [473, "supported-feature-matrix"], [480, "supported-feature-matrix"], [484, "supported-feature-matrix"]], "Supported Framework Dataloader Matrix": [[414, "supported-framework-dataloader-matrix"]], "Supported Framework Dataset Matrix": [[415, "supported-framework-dataset-matrix"]], "Supported Framework Matrix": [[479, "supported-framework-matrix"]], "Supported Framework Model Matrix": [[422, "supported-framework-model-matrix"], [433, "supported-framework-model-matrix"], [474, "supported-framework-model-matrix"], [476, "supported-framework-model-matrix"]], "Supported Optimization Features": [[441, "supported-optimization-features"]], "Supported quantized ops": [[422, "supported-quantized-ops"]], "System Requirements": [[428, "system-requirements"]], "TPE": [[482, "tpe"]], "Task request description": [[462, "task-request-description"]], "Tensor dump examples": [[453, "tensor-dump-examples"]], "TensorBoard": [[480, "tensorboard"]], "TensorFlow": [[415, "tensorflow"], [430, "tensorflow"], [481, "tensorflow"]], "TensorFlow Examples": [[480, "tensorflow-examples"]], "TensorFlow Examples:": [[420, "tensorflow-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[485, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "TensorFlow Tensorboard": [[480, "tensorflow-tensorboard"]], "Tensorflow": [[475, "tensorflow"]], "Tensorflow Model": [[422, "tensorflow-model"]], "Torch Utils": [[400, "torch-utils"]], "Trademarks": [[429, "trademarks"]], "Training": [[411, "training"]], "Training-aware pruning API": [[470, "training-aware-pruning-api"]], "Transform": [[481, "transform"]], "Transform Support List": [[481, "transform-support-list"]], "Tuning Algorithms": [[482, "tuning-algorithms"]], "Tuning Process": [[482, "tuning-process"]], "Tuning Space": [[482, "tuning-space"]], "Tuning Strategies": [[482, "tuning-strategies"]], "Turn OFF Auto Mixed Precision during Quantization": [[475, "turn-off-auto-mixed-precision-during-quantization"]], "Uninstall": [[444, "uninstall"], [448, "uninstall"]], "Usage": [[440, "usage"], [460, "usage"], [460, "id2"], [460, "id6"], [460, "id9"], [460, "id16"], [460, "id19"], [460, "id22"], [460, "id25"], [480, "usage"], [480, "id1"], [482, "usage"], [482, "id2"], [482, "id4"], [482, "id6"], [482, "id8"], [482, "id10"], [482, "id12"], [482, "id14"], [482, "id16"], [482, "id18"], [482, "id20"], [482, "id22"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[414, "use-intel-neural-compressor-dataloader-api"]], "Use Intel\u00ae Neural Compressor Metric API": [[430, "use-intel-neural-compressor-metric-api"]], "Use the New Data Type": [[397, "use-the-new-data-type"]], "User Code Example": [[476, "user-code-example"]], "User Guide": [[483, "user-guide"]], "User YAML Configuration Files": [[484, "user-yaml-configuration-files"]], "User code example": [[476, "id1"]], "User-facing APIs": [[426, "user-facing-apis"]], "User-specific dataset": [[415, "user-specific-dataset"]], "Validated Hardware Environment": [[428, "validated-hardware-environment"]], "Validated Knowledge Distillation Examples": [[485, "validated-knowledge-distillation-examples"]], "Validated Models": [[425, "validated-models"], [479, "validated-models"], [485, "validated-models"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[485, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]], "Validated Pruning Examples": [[485, "validated-pruning-examples"]], "Validated Quantization Examples": [[485, "validated-quantization-examples"]], "Validated Software Environment": [[428, "validated-software-environment"]], "WOQ Algorithms Tuning": [[476, "woq-algorithms-tuning"]], "WebSocket /task/screen/{task_id}": [[460, "websocket-task-screen-task-id"]], "Weight Only Quantization (WOQ)": [[476, "weight-only-quantization-woq"]], "Weights summary": [[454, "weights-summary"]], "Welcome to your VS Code Extension": [[452, "welcome-to-your-vs-code-extension"]], "What do we offer?": [[434, "what-do-we-offer"]], "What\u2019s Neural Solution?": [[458, "what-s-neural-solution"]], "What\u2019s in the folder": [[452, "what-s-in-the-folder"]], "Why Neural Solution?": [[458, "why-neural-solution"]], "With or Without Accuracy Aware Tuning": [[473, "with-or-without-accuracy-aware-tuning"]], "Workflow": [[416, "workflow"]], "Workflow of OaaS": [[461, "workflow-of-oaas"]], "Working Flow": [[395, "working-flow"], [473, "working-flow"]], "[Unreleased]": [[450, "unreleased"]], "block_mask": [[0, "module-block_mask"]], "neural_compressor": [[317, "module-neural_compressor"]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark"]], "neural_compressor.common.logger": [[153, "module-neural_compressor.common.logger"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.pythonic_config": [[185, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[186, "module-neural_compressor.config"]], "neural_compressor.contrib": [[187, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[188, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[189, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[190, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data": [[211, "module-neural_compressor.data"]], "neural_compressor.data.dataloaders.base_dataloader": [[191, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[192, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[193, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[194, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters"]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental": [[264, "module-neural_compressor.experimental"]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[227, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[228, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[229, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data": [[253, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.dataloaders": [[236, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets": [[248, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[244, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters": [[252, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data.filters.coco_filter": [[250, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[251, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.transforms": [[255, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms.tokenization": [[256, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[257, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[258, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[259, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[260, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[261, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[262, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[263, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental.metric": [[271, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.bleu": [[265, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[266, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[267, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[268, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[269, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[270, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric.metric": [[272, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[273, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[274, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas": [[277, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.basic_nas": [[275, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[276, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.nas": [[278, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[279, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[280, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy": [[283, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy": [[306, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[303, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[304, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[305, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy.mse": [[307, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[308, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[309, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[310, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils": [[312, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.constant": [[311, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[316, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor.metric": [[324, "module-neural_compressor.metric"]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1"]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision"]], "neural_compressor.model": [[328, "module-neural_compressor.model"]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model"]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[336, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[337, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[338, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[341, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[342, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[345, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[353, "module-neural_compressor.quantization"]], "neural_compressor.strategy": [[361, "module-neural_compressor.strategy"]], "neural_compressor.strategy.auto": [[354, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[355, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[356, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[357, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[358, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[359, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[360, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy.mse": [[362, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[363, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[364, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[365, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[367, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.constant": [[366, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils.tuning_sampler": [[368, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[369, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[370, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[371, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[372, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.torch.quantization.modules": [[373, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.training": [[374, "module-neural_compressor.training"]], "neural_compressor.utils": [[378, "module-neural_compressor.utils"]], "neural_compressor.utils.collect_layer_histogram": [[375, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[376, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[377, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.kl_divergence": [[379, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[380, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[381, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[382, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[383, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[384, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[385, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[386, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[387, "module-neural_compressor.version"]], "neural_compressor_ext_lab": [[444, "neural-compressor-ext-lab"]], "neural_compressor_ext_lab_alibaba": [[448, "neural-compressor-ext-lab-alibaba"]], "npm run build": [[457, "npm-run-build"]], "npm run build fails to minify": [[457, "npm-run-build-fails-to-minify"]], "npm run eject": [[457, "npm-run-eject"]], "npm start": [[457, "npm-start"]], "npm test": [[457, "npm-test"]], "v0.4": [[442, "v0-4"]], "}": [[146, "id3"]]}, "docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "indexentries": {"_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran", false]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation._epoch_ran", false]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Accuracy", false]], "accuracy (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Accuracy", false]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.AccuracyCriterion", false]], "accuracycriterion (class in neural_compressor.config)": [[186, "neural_compressor.config.AccuracyCriterion", false]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.acq_max", false]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[357, "neural_compressor.strategy.bayesian.acq_max", false]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator", false]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name", false]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.Algorithm", false]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.algorithm_registry", false]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.ALGORITHMS", false]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.AlgorithmScheduler", false]], "alias_param() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.alias_param", false]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.AlignImageChannelTransform", false]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform", false]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.alpha", false]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.amp_convert", false]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.append_attr", false]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip", false]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale", false]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.apply_inlining", false]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal", false]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator", false]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error", false]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator", false]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[372, "neural_compressor.template.api_doc_example.ExampleClass.attr1", false]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[372, "neural_compressor.template.api_doc_example.ExampleClass.attr2", false]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[372, "neural_compressor.template.api_doc_example.ExampleClass.attr5", false]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.attribute1", false]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg", false]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.auto_copy", false]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[302, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[355, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy", false]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[354, "neural_compressor.strategy.auto.AutoTuneStrategy", false]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize", false]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks", false]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[191, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader", false]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.BaseMetric", false]], "basemetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.BaseMetric", false]], "basemodel (class in neural_compressor.model.base_model)": [[327, "neural_compressor.model.base_model.BaseModel", false]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern", false]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner", false]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning", false]], "basereg (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.BaseReg", false]], "basetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.BaseTransform", false]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.BaseTransform", false]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[284, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner", false]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[275, "neural_compressor.experimental.nas.basic_nas.BasicNAS", false]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning", false]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.BasicTokenizer", false]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer", false]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[303, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy", false]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[356, "neural_compressor.strategy.basic.BasicTuneStrategy", false]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator", false]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.BatchSampler", false]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler", false]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[357, "neural_compressor.strategy.bayesian.BayesianOptimization", false]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher", false]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy", false]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[357, "neural_compressor.strategy.bayesian.BayesianTuneStrategy", false]], "benchmark (class in neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.Benchmark", false]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.benchmark_with_raw_cmd", false]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.BenchmarkConfig", false]], "benchmarkconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.BenchmarkConfig", false]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model", false]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.best_model", false]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score", false]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.best_score", false]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace", false]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[36, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert", false]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper", false]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection", false]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform", false]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator", false]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator", false]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.BLEU", false]], "bleu (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.BLEU", false]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.bleu_tokenize", false]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.bleu_tokenize", false]], "block_mask": [[0, "module-block_mask", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size", false]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size", false]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size", false]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler", false]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion", false]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.build_slave_faker_model", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape", false]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape", false]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.calculate_md5", false]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.calculate_md5", false]], "calculate_mse() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.calculate_mse", false]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max", false]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp", false]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.calib_model", false]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry", false]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector", false]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibData", false]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calibration", false]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase", false]], "call_one() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.call_one", false]], "callbacks (class in neural_compressor.training)": [[374, "neural_compressor.training.CallBacks", false]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.CaptureOutputToFile", false]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.cast_tensor", false]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastONNXTransform", false]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform", false]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastPyTorchTransform", false]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform", false]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastTFTransform", false]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastTFTransform", false]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTFTransform", false]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform", false]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTransform", false]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform", false]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig", false]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_config", false]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config", false]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[192, "neural_compressor.data.dataloaders.dataloader.check_dataloader", false]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.check_integrity", false]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.check_integrity", false]], "check_key_exist() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.check_key_exist", false]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_key_validity", false]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[260, "neural_compressor.experimental.export.qlinear2qdq.check_model", false]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version", false]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.checkpoint_session", false]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR10", false]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.CIFAR10", false]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR100", false]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.CIFAR100", false]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher", false]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF", false]], "classregister (class in neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.ClassRegister", false]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper", false]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper", false]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.COCOmAPv2", false]], "cocomapv2 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.COCOmAPv2", false]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCONpy", false]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy", false]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORaw", false]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw", false]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset", false]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset", false]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper", false]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper", false]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.collate_preds", false]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds", false]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds", false]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.collect_layer_inputs", false]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collect_weight_info", false]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase", false]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CollectTransform", false]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CollectTransform", false]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities", false]], "combine_histogram() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.combine_histogram", false]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.compare_label", false]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.compare_label", false]], "compare_objects() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.compare_objects", false]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights", false]], "component (class in neural_compressor.experimental.component)": [[226, "neural_compressor.experimental.component.Component", false]], "composetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ComposeTransform", false]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ComposeTransform", false]], "compressionmanager (class in neural_compressor.training)": [[374, "neural_compressor.training.CompressionManager", false]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[266, "neural_compressor.experimental.metric.bleu_util.compute_bleu", false]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[319, "neural_compressor.metric.bleu_util.compute_bleu", false]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf", false]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.compute_sparsity", false]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator", false]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.conf", false]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.conf", false]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config", false]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config", false]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config", false]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config", false]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config", false]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config", false]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path", false]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path", false]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path", false]], "config_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.config_instance", false]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers", false]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[358, "neural_compressor.strategy.conservative.ConservativeTuneStrategy", false]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def", false]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert", false]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_by_vocab", false]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab", false]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features", false]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features", false]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx", false]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_to_unicode", false]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode", false]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[39, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer", false]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer", false]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[41, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer", false]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom", false]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst", false]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator", false]], "cpuinfo (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.CpuInfo", false]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.create_data_example", false]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.create_dataloader", false]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.create_dataset", false]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.create_eval_func", false]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[348, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config", false]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool", false]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[352, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config", false]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.create_train_func", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion", false]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion", false]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.criterion_registry", false]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.criterion_registry", false]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.Criterions", false]], "criterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.Criterions", false]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform", false]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTransform", false]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform", false]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropToBoundingBox", false]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox", false]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio", false]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio", false]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader", false]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[192, "neural_compressor.data.dataloaders.dataloader.DataLoader", false]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[219, "neural_compressor.experimental.common.dataloader.DataLoader", false]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap", false]], "dataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Dataset", false]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.Dataset", false]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset", false]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.dataset", false]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.dataset_registry", false]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.dataset_registry", false]], "datasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Datasets", false]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.Datasets", false]], "debug() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.debug", false]], "debug() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.debug", false]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[193, "neural_compressor.data.dataloaders.default_dataloader.default_collate", false]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate", false]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[193, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader", false]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[352, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign", false]], "dequantize() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.Dequantize", false]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data", false]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero", false]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dequantize_weight", false]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[37, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer", false]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type", false]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device", false]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device", false]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction", false]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator", false]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.disable_random", false]], "distillation (class in neural_compressor.experimental.distillation)": [[258, "neural_compressor.experimental.distillation.Distillation", false]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks", false]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.DistillationConfig", false]], "distillationconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.DistillationConfig", false]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors", false]], "dotdict (class in neural_compressor.config)": [[186, "neural_compressor.config.DotDict", false]], "dotdict (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.DotDict", false]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model", false]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.download_url", false]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.download_url", false]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dtype_to_name", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[203, "neural_compressor.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[245, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset", false]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset", false]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dump_class_attrs", false]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dump_data_to_local", false]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dump_elapsed_time", false]], "dump_table() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dump_table", false]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.dump_table_to_csv", false]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export", false]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[276, "neural_compressor.experimental.nas.dynas.DyNAS", false]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator", false]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step", false]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step", false]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step", false]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ensure_list", false]], "equal_dicts() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.equal_dicts", false]], "error() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.error", false]], "error() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.error", false]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.estimator_session", false]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency", false]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.eval_frequency", false]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.evaluate", false]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.evaluate", false]], "evaluate() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.evaluate", false]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score", false]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.exact_match_score", false]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.ExampleClass", false]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[305, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[359, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy", false]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer", false]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[380, "neural_compressor.utils.load_huggingface.export_compressed_model", false]], "exportconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.ExportConfig", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco", false]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.extract_data_type", false]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.extract_data_type", false]], "f1 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.F1", false]], "f1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.F1", false]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.f1_score", false]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.f1_score", false]], "f1_score() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.f1_score", false]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction", false]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.quantization.modules)": [[373, "neural_compressor.torch.quantization.modules.FakeAffineTensorQuantFunction", false]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize", false]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase", false]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler", false]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.FashionMNIST", false]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST", false]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[148, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection", false]], "fatal() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.fatal", false]], "fatal() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.fatal", false]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.fault_tolerant_file", false]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.fetch_module", false]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[194, "neural_compressor.data.dataloaders.fetcher.Fetcher", false]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher", false]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer", false]], "filter (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.Filter", false]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.Filter", false]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.filter_registry", false]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.filter_registry", false]], "filters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.FILTERS", false]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.FILTERS", false]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.find_by_name", false]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset", false]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.find_pareto_front", false]], "fit() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.fit", false]], "fit() (in module neural_compressor.mix_precision)": [[326, "neural_compressor.mix_precision.fit", false]], "fit() (in module neural_compressor.quantization)": [[353, "neural_compressor.quantization.fit", false]], "fit() (in module neural_compressor.training)": [[374, "neural_compressor.training.fit", false]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph", false]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph", false]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator", false]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator", false]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16", false]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_float16", false]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer", false]], "footprint (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Footprint", false]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.forward_wrapper", false]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.framework_datasets", false]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.framework_datasets", false]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer", false]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer", false]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer", false]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.frozen_pb_session", false]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer", false]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer", false]], "function1() (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.function1", false]], "function2() (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.function2", false]], "function3() (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.function3", false]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.fuse", false]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer", false]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer", false]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer", false]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer", false]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer", false]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer", false]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer", false]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator", false]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer", false]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer", false]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer", false]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer", false]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer", false]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer", false]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d", false]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3", false]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling", false]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling", false]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer", false]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer", false]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer", false]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator", false]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator", false]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.gen_bar_updater", false]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater", false]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK", false]], "generaltopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.GeneralTopK", false]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer", false]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict", false]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config", false]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config", false]], "generate_prefix() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.generate_prefix", false]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.generate_pruner_config", false]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern", false]], "generator1() (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.generator1", false]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers", false]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.get_activation", false]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.get_activation", false]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name", false]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.get_adaptor_name", false]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.get_algorithm", false]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_all_fp32_data", false]], "get_architecture() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_architecture", false]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_architecture", false]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes", false]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size", false]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_block_prefix", false]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_bounded_threads", false]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_bounded_threads", false]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children", false]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count", false]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count", false]], "get_core_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_core_ids", false]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_core_ids", false]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.get_criterion", false]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_depth", false]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth", false]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth", false]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous", false]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph", false]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_example_input", false]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_fallback_order", false]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_final_text", false]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.get_final_text", false]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name", false]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.get_func_from_config", false]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_graph_def", false]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_hidden_states", false]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape", false]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names", false]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_layers", false]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version", false]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.get_metrics", false]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[330, "neural_compressor.model.model.get_model_fwk_name", false]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape", false]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[382, "neural_compressor.utils.neural_insights_utils.get_model_path", false]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.get_model_type", false]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module", false]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_module_input_output", false]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32", false]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8", false]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children", false]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.get_node_mapping", false]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_number_of_sockets", false]], "get_op_list() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_op_list", false]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name", false]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.get_pattern", false]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern", false]], "get_physical_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_physical_ids", false]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_physical_ids", false]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.get_postprocess", false]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[377, "neural_compressor.utils.create_obj_from_config.get_preprocess", false]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.get_pruner", false]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner", false]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output", false]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops", false]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs", false]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg", false]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg_type", false]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.get_scheduler", false]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler", false]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema", false]], "get_size() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_size", false]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio", false]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf", false]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx", false]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name", false]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name", false]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_tensor_histogram", false]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node", false]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr", false]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr", false]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data", false]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape", false]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_tensors_info", false]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion", false]], "get_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads", false]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads", false]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads_per_core", false]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads_per_core", false]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_torch_version", false]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_torchvision_map", false]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map", false]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_tuning_history", false]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor", false]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale", false]], "get_weights_details() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.get_weights_details", false]], "global_state (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.GLOBAL_STATE", false]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step", false]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step", false]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step", false]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator", false]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq", false]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize", false]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion", false]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[281, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner", false]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_def_session", false]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[263, "neural_compressor.experimental.graph_optimization.Graph_Optimization", false]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_session", false]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer", false]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[34, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter", false]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[35, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib", false]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer", false]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer", false]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase", false]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper", false]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase", false]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer", false]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.GridSearcher", false]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso", false]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[282, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner", false]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top", false]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[360, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy", false]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks", false]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace", false]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector", false]], "hpoconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.HPOConfig", false]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ImageFolder", false]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ImageFolder", false]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw", false]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw", false]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[194, "neural_compressor.data.dataloaders.fetcher.IndexFetcher", false]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher", false]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype", false]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.infer_shapes", false]], "info() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.info", false]], "info() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.info", false]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode", false]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter", false]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer", false]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.input2tuple", false]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures", false]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.InputFeatures", false]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging", false]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode", false]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss", false]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers", false]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers", false]], "ipexmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.IPEXModel", false]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.is_B_transposed", false]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format", false]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.is_fused_module", false]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global", false]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global", false]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global", false]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[384, "neural_compressor.utils.pytorch.is_int8_model", false]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple", false]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized", false]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain", false]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format", false]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.isiterable", false]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.IterableDataset", false]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.IterableDataset", false]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[194, "neural_compressor.data.dataloaders.fetcher.IterableFetcher", false]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher", false]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.IterableSampler", false]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler", false]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.IterativeScheduler", false]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler", false]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run", false]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher", false]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.k", false]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.k", false]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.k", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers", false]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers", false]], "keras (class in neural_compressor.config)": [[186, "neural_compressor.config.Keras", false]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.keras_session", false]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern", false]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner", false]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner", false]], "kerasmodel (class in neural_compressor.model.keras_model)": [[329, "neural_compressor.model.keras_model.KerasModel", false]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM", false]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[379, "neural_compressor.utils.kl_divergence.KL_Divergence", false]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator", false]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework", false]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework", false]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss", false]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss", false]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig", false]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.KnowledgeDistillationLossConfig", false]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.label_list", false]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.label_list", false]], "label_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.label_list", false]], "label_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.label_list", false]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[250, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[250, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter", false]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[265, "neural_compressor.experimental.metric.bleu.BLEU.labels", false]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.labels", false]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.LabelShift", false]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift", false]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1", false]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2", false]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[375, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector", false]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant", false]], "lazyimport (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.LazyImport", false]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher", false]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers", false]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns", false]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression", false]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator", false]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load", false]], "load() (in module neural_compressor.utils.pytorch)": [[384, "neural_compressor.utils.pytorch.load", false]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples", false]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.load_data_from_pkl", false]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model", false]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model", false]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.load_saved_model", false]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor", false]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard", false]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.load_vocab", false]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.load_vocab", false]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[384, "neural_compressor.utils.pytorch.load_weight_only", false]], "log() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.log", false]], "log() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.log", false]], "logger (class in neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.Logger", false]], "logger (class in neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.Logger", false]], "loss (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.Loss", false]], "loss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Loss", false]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler", false]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[18, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator", false]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M", false]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M", false]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M", false]], "mae (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MAE", false]], "mae (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MAE", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion", false]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion", false]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner", false]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_dquant_node", false]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node", false]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_module", false]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model", false]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs", false]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape", false]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_quant_node", false]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph", false]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block", false]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype", false]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type", false]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype", false]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks", false]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks", false]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks", false]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern", false]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator", false]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op", false]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op", false]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator", false]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer", false]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer", false]], "metric (class in neural_compressor.experimental.common.metric)": [[221, "neural_compressor.experimental.common.metric.Metric", false]], "metric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Metric", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths", false]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.metric_max_over_ground_truths", false]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.metric_registry", false]], "metric_registry() (in module neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.metric_registry", false]], "metrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.METRICS", false]], "metrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.METRICS", false]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[272, "neural_compressor.experimental.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[325, "neural_compressor.metric.metric.METRICS.metrics", false]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[325, "neural_compressor.metric.metric.MXNetMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[325, "neural_compressor.metric.metric.PyTorchMetrics.metrics", false]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[325, "neural_compressor.metric.metric.TensorflowMetrics.metrics", false]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions", false]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op", false]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op", false]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator", false]], "miou (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.mIOU", false]], "miou (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.mIOU", false]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[273, "neural_compressor.experimental.mixed_precision.MixedPrecision", false]], "mixedprecisionconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.MixedPrecisionConfig", false]], "mnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MNIST", false]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MNIST", false]], "mode (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.MODE", false]], "model (class in neural_compressor.experimental.common.model)": [[222, "neural_compressor.experimental.common.model.Model", false]], "model (class in neural_compressor.model.model)": [[330, "neural_compressor.model.model.Model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model", false]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model", false]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.model", false]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.model", false]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model", false]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model", false]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim", false]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2", false]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha", false]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[274, "neural_compressor.experimental.model_conversion.ModelConversion", false]], "modelsize (class in neural_compressor.objective)": [[336, "neural_compressor.objective.ModelSize", false]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler", false]], "module": [[0, "module-block_mask", false], [1, "module-neural_compressor.adaptor.mxnet_utils", false], [2, "module-neural_compressor.adaptor.mxnet_utils.util", false], [3, "module-neural_compressor.adaptor.ox_utils.calibration", false], [4, "module-neural_compressor.adaptor.ox_utils.calibrator", false], [5, "module-neural_compressor.adaptor.ox_utils", false], [6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false], [7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false], [8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false], [9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false], [10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false], [11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false], [12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false], [13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false], [14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false], [15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false], [16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false], [17, "module-neural_compressor.adaptor.ox_utils.operators", false], [18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false], [19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false], [20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false], [21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false], [22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false], [23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false], [24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false], [25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false], [26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false], [27, "module-neural_compressor.adaptor.ox_utils.operators.split", false], [28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false], [29, "module-neural_compressor.adaptor.ox_utils.quantizer", false], [30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false], [31, "module-neural_compressor.adaptor.ox_utils.util", false], [32, "module-neural_compressor.adaptor.ox_utils.weight_only", false], [33, "module-neural_compressor.adaptor.tensorflow", false], [34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false], [35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false], [36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false], [37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false], [38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false], [39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false], [96, "module-neural_compressor.adaptor.tf_utils.graph_util", false], [97, "module-neural_compressor.adaptor.tf_utils", false], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false], [126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false], [127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false], [128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false], [134, "module-neural_compressor.adaptor.tf_utils.util", false], [135, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false], [136, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false], [137, "module-neural_compressor.adaptor.torch_utils", false], [138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false], [139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false], [140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false], [141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false], [142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false], [143, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false], [144, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false], [145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false], [146, "module-neural_compressor.adaptor.torch_utils.util", false], [147, "module-neural_compressor.algorithm.algorithm", false], [148, "module-neural_compressor.algorithm.fast_bias_correction", false], [149, "module-neural_compressor.algorithm", false], [150, "module-neural_compressor.algorithm.smooth_quant", false], [151, "module-neural_compressor.algorithm.weight_correction", false], [152, "module-neural_compressor.benchmark", false], [153, "module-neural_compressor.common.logger", false], [154, "module-neural_compressor.compression.callbacks", false], [155, "module-neural_compressor.compression.distillation.criterions", false], [156, "module-neural_compressor.compression.distillation", false], [157, "module-neural_compressor.compression.distillation.optimizers", false], [158, "module-neural_compressor.compression.distillation.utility", false], [159, "module-neural_compressor.compression.hpo", false], [160, "module-neural_compressor.compression.hpo.sa_optimizer", false], [161, "module-neural_compressor.compression.pruner.criteria", false], [162, "module-neural_compressor.compression.pruner", false], [163, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false], [164, "module-neural_compressor.compression.pruner.model_slim", false], [165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false], [166, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false], [167, "module-neural_compressor.compression.pruner.patterns.base", false], [168, "module-neural_compressor.compression.pruner.patterns", false], [169, "module-neural_compressor.compression.pruner.patterns.mha", false], [170, "module-neural_compressor.compression.pruner.patterns.ninm", false], [171, "module-neural_compressor.compression.pruner.patterns.nxm", false], [172, "module-neural_compressor.compression.pruner.pruners.base", false], [173, "module-neural_compressor.compression.pruner.pruners.basic", false], [174, "module-neural_compressor.compression.pruner.pruners.block_mask", false], [175, "module-neural_compressor.compression.pruner.pruners", false], [176, "module-neural_compressor.compression.pruner.pruners.mha", false], [177, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false], [178, "module-neural_compressor.compression.pruner.pruners.progressive", false], [179, "module-neural_compressor.compression.pruner.pruners.retrain_free", false], [180, "module-neural_compressor.compression.pruner.pruning", false], [181, "module-neural_compressor.compression.pruner.regs", false], [182, "module-neural_compressor.compression.pruner.schedulers", false], [183, "module-neural_compressor.compression.pruner.tf_criteria", false], [184, "module-neural_compressor.compression.pruner.utils", false], [185, "module-neural_compressor.conf.pythonic_config", false], [186, "module-neural_compressor.config", false], [187, "module-neural_compressor.contrib", false], [188, "module-neural_compressor.contrib.strategy", false], [189, "module-neural_compressor.contrib.strategy.sigopt", false], [190, "module-neural_compressor.contrib.strategy.tpe", false], [191, "module-neural_compressor.data.dataloaders.base_dataloader", false], [192, "module-neural_compressor.data.dataloaders.dataloader", false], [193, "module-neural_compressor.data.dataloaders.default_dataloader", false], [194, "module-neural_compressor.data.dataloaders.fetcher", false], [195, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false], [196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false], [197, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false], [198, "module-neural_compressor.data.dataloaders.sampler", false], [199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false], [200, "module-neural_compressor.data.datasets.bert_dataset", false], [201, "module-neural_compressor.data.datasets.coco_dataset", false], [202, "module-neural_compressor.data.datasets.dataset", false], [203, "module-neural_compressor.data.datasets.dummy_dataset", false], [204, "module-neural_compressor.data.datasets.dummy_dataset_v2", false], [205, "module-neural_compressor.data.datasets.imagenet_dataset", false], [206, "module-neural_compressor.data.datasets", false], [207, "module-neural_compressor.data.datasets.style_transfer_dataset", false], [208, "module-neural_compressor.data.filters.coco_filter", false], [209, "module-neural_compressor.data.filters.filter", false], [210, "module-neural_compressor.data.filters", false], [211, "module-neural_compressor.data", false], [212, "module-neural_compressor.data.transforms.imagenet_transform", false], [213, "module-neural_compressor.data.transforms", false], [214, "module-neural_compressor.data.transforms.postprocess", false], [215, "module-neural_compressor.data.transforms.tokenization", false], [216, "module-neural_compressor.data.transforms.transform", false], [217, "module-neural_compressor.experimental.benchmark", false], [218, "module-neural_compressor.experimental.common.criterion", false], [219, "module-neural_compressor.experimental.common.dataloader", false], [220, "module-neural_compressor.experimental.common", false], [221, "module-neural_compressor.experimental.common.metric", false], [222, "module-neural_compressor.experimental.common.model", false], [223, "module-neural_compressor.experimental.common.optimizer", false], [224, "module-neural_compressor.experimental.common.postprocess", false], [225, "module-neural_compressor.experimental.common.torch_utils", false], [226, "module-neural_compressor.experimental.component", false], [227, "module-neural_compressor.experimental.compression", false], [228, "module-neural_compressor.experimental.contrib", false], [229, "module-neural_compressor.experimental.contrib.strategy", false], [230, "module-neural_compressor.experimental.contrib.strategy.sigopt", false], [231, "module-neural_compressor.experimental.contrib.strategy.tpe", false], [232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false], [233, "module-neural_compressor.experimental.data.dataloaders.dataloader", false], [234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false], [235, "module-neural_compressor.experimental.data.dataloaders.fetcher", false], [236, "module-neural_compressor.experimental.data.dataloaders", false], [237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false], [238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false], [239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false], [240, "module-neural_compressor.experimental.data.dataloaders.sampler", false], [241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false], [242, "module-neural_compressor.experimental.data.datasets.bert_dataset", false], [243, "module-neural_compressor.experimental.data.datasets.coco_dataset", false], [244, "module-neural_compressor.experimental.data.datasets.dataset", false], [245, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false], [246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false], [247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false], [248, "module-neural_compressor.experimental.data.datasets", false], [249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false], [250, "module-neural_compressor.experimental.data.filters.coco_filter", false], [251, "module-neural_compressor.experimental.data.filters.filter", false], [252, "module-neural_compressor.experimental.data.filters", false], [253, "module-neural_compressor.experimental.data", false], [254, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false], [255, "module-neural_compressor.experimental.data.transforms", false], [256, "module-neural_compressor.experimental.data.transforms.tokenization", false], [257, "module-neural_compressor.experimental.data.transforms.transform", false], [258, "module-neural_compressor.experimental.distillation", false], [259, "module-neural_compressor.experimental.export", false], [260, "module-neural_compressor.experimental.export.qlinear2qdq", false], [261, "module-neural_compressor.experimental.export.tf2onnx", false], [262, "module-neural_compressor.experimental.export.torch2onnx", false], [263, "module-neural_compressor.experimental.graph_optimization", false], [264, "module-neural_compressor.experimental", false], [265, "module-neural_compressor.experimental.metric.bleu", false], [266, "module-neural_compressor.experimental.metric.bleu_util", false], [267, "module-neural_compressor.experimental.metric.coco_label_map", false], [268, "module-neural_compressor.experimental.metric.coco_tools", false], [269, "module-neural_compressor.experimental.metric.evaluate_squad", false], [270, "module-neural_compressor.experimental.metric.f1", false], [271, "module-neural_compressor.experimental.metric", false], [272, "module-neural_compressor.experimental.metric.metric", false], [273, "module-neural_compressor.experimental.mixed_precision", false], [274, "module-neural_compressor.experimental.model_conversion", false], [275, "module-neural_compressor.experimental.nas.basic_nas", false], [276, "module-neural_compressor.experimental.nas.dynas", false], [277, "module-neural_compressor.experimental.nas", false], [278, "module-neural_compressor.experimental.nas.nas", false], [279, "module-neural_compressor.experimental.nas.nas_utils", false], [280, "module-neural_compressor.experimental.nas.search_algorithms", false], [281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false], [282, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false], [283, "module-neural_compressor.experimental.pruner_legacy", false], [284, "module-neural_compressor.experimental.pruner_legacy.magnitude", false], [285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false], [286, "module-neural_compressor.experimental.pruner_legacy.pruner", false], [287, "module-neural_compressor.experimental.pruning", false], [288, "module-neural_compressor.experimental.pruning_recipes", false], [289, "module-neural_compressor.experimental.pruning_recipes.patterns", false], [290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false], [291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false], [292, "module-neural_compressor.experimental.pruning_v2", false], [293, "module-neural_compressor.experimental.pytorch_pruner", false], [294, "module-neural_compressor.experimental.pytorch_pruner.logger", false], [295, "module-neural_compressor.experimental.pytorch_pruner.patterns", false], [296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false], [297, "module-neural_compressor.experimental.pytorch_pruner.pruner", false], [298, "module-neural_compressor.experimental.pytorch_pruner.pruning", false], [299, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false], [300, "module-neural_compressor.experimental.quantization", false], [301, "module-neural_compressor.experimental.scheduler", false], [302, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false], [303, "module-neural_compressor.experimental.strategy.basic", false], [304, "module-neural_compressor.experimental.strategy.bayesian", false], [305, "module-neural_compressor.experimental.strategy.exhaustive", false], [306, "module-neural_compressor.experimental.strategy", false], [307, "module-neural_compressor.experimental.strategy.mse", false], [308, "module-neural_compressor.experimental.strategy.mse_v2", false], [309, "module-neural_compressor.experimental.strategy.random", false], [310, "module-neural_compressor.experimental.strategy.strategy", false], [311, "module-neural_compressor.experimental.strategy.utils.constant", false], [312, "module-neural_compressor.experimental.strategy.utils", false], [313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false], [314, "module-neural_compressor.experimental.strategy.utils.tuning_space", false], [315, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false], [316, "module-neural_compressor.experimental.strategy.utils.utility", false], [317, "module-neural_compressor", false], [318, "module-neural_compressor.metric.bleu", false], [319, "module-neural_compressor.metric.bleu_util", false], [320, "module-neural_compressor.metric.coco_label_map", false], [321, "module-neural_compressor.metric.coco_tools", false], [322, "module-neural_compressor.metric.evaluate_squad", false], [323, "module-neural_compressor.metric.f1", false], [324, "module-neural_compressor.metric", false], [325, "module-neural_compressor.metric.metric", false], [326, "module-neural_compressor.mix_precision", false], [327, "module-neural_compressor.model.base_model", false], [328, "module-neural_compressor.model", false], [329, "module-neural_compressor.model.keras_model", false], [330, "module-neural_compressor.model.model", false], [331, "module-neural_compressor.model.mxnet_model", false], [332, "module-neural_compressor.model.nets_factory", false], [333, "module-neural_compressor.model.onnx_model", false], [334, "module-neural_compressor.model.tensorflow_model", false], [335, "module-neural_compressor.model.torch_model", false], [336, "module-neural_compressor.objective", false], [337, "module-neural_compressor.profiling", false], [338, "module-neural_compressor.profiling.parser.factory", false], [339, "module-neural_compressor.profiling.parser.onnx_parser.factory", false], [340, "module-neural_compressor.profiling.parser.onnx_parser.parser", false], [341, "module-neural_compressor.profiling.parser.parser", false], [342, "module-neural_compressor.profiling.parser.result", false], [343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false], [344, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false], [345, "module-neural_compressor.profiling.profiler.factory", false], [346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false], [347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false], [348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false], [349, "module-neural_compressor.profiling.profiler.profiler", false], [350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false], [351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false], [352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false], [353, "module-neural_compressor.quantization", false], [354, "module-neural_compressor.strategy.auto", false], [355, "module-neural_compressor.strategy.auto_mixed_precision", false], [356, "module-neural_compressor.strategy.basic", false], [357, "module-neural_compressor.strategy.bayesian", false], [358, "module-neural_compressor.strategy.conservative", false], [359, "module-neural_compressor.strategy.exhaustive", false], [360, "module-neural_compressor.strategy.hawq_v2", false], [361, "module-neural_compressor.strategy", false], [362, "module-neural_compressor.strategy.mse", false], [363, "module-neural_compressor.strategy.mse_v2", false], [364, "module-neural_compressor.strategy.random", false], [365, "module-neural_compressor.strategy.strategy", false], [366, "module-neural_compressor.strategy.utils.constant", false], [367, "module-neural_compressor.strategy.utils", false], [368, "module-neural_compressor.strategy.utils.tuning_sampler", false], [369, "module-neural_compressor.strategy.utils.tuning_space", false], [370, "module-neural_compressor.strategy.utils.tuning_structs", false], [371, "module-neural_compressor.strategy.utils.utility", false], [372, "module-neural_compressor.template.api_doc_example", false], [373, "module-neural_compressor.torch.quantization.modules", false], [374, "module-neural_compressor.training", false], [375, "module-neural_compressor.utils.collect_layer_histogram", false], [376, "module-neural_compressor.utils.constant", false], [377, "module-neural_compressor.utils.create_obj_from_config", false], [378, "module-neural_compressor.utils", false], [379, "module-neural_compressor.utils.kl_divergence", false], [380, "module-neural_compressor.utils.load_huggingface", false], [381, "module-neural_compressor.utils.logger", false], [382, "module-neural_compressor.utils.neural_insights_utils", false], [383, "module-neural_compressor.utils.options", false], [384, "module-neural_compressor.utils.pytorch", false], [385, "module-neural_compressor.utils.utility", false], [386, "module-neural_compressor.utils.weights_details", false], [387, "module-neural_compressor.version", false]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[372, "neural_compressor.template.api_doc_example.module_debug_level1", false]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules", false]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules", false]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules", false]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.move_input_device", false]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer", false]], "mse (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MSE", false]], "mse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MSE", false]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[272, "neural_compressor.experimental.metric.metric.RMSE.mse", false]], "mse (neural_compressor.metric.metric.rmse attribute)": [[325, "neural_compressor.metric.metric.RMSE.mse", false]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.mse_metric_gap", false]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[308, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy", false]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[363, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy", false]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[307, "neural_compressor.experimental.strategy.mse.MSETuneStrategy", false]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[362, "neural_compressor.strategy.mse.MSETuneStrategy", false]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear", false]], "mullinear (class in neural_compressor.torch.quantization.modules)": [[373, "neural_compressor.torch.quantization.modules.MulLinear", false]], "multiobjective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.MultiObjective", false]], "mxnet (class in neural_compressor.config)": [[186, "neural_compressor.config.MXNet", false]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10", false]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100", false]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform", false]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox", false]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[195, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader", false]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetDatasets", false]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets", false]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST", false]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.MXNetFilters", false]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.MXNetFilters", false]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder", false]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw", false]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MXNetMetrics", false]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MXNetMetrics", false]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetMNIST", false]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST", false]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[331, "neural_compressor.model.mxnet_model.MXNetModel", false]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform", false]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTransforms", false]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms", false]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTranspose", false]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose", false]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N", false]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N", false]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N", false]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.NameCollector", false]], "nas (class in neural_compressor.experimental.nas.nas)": [[278, "neural_compressor.experimental.nas.nas.NAS", false]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.nas_registry", false]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[278, "neural_compressor.experimental.nas.nas.NASBase", false]], "nasconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.NASConfig", false]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device", false]], "neural_compressor": [[317, "module-neural_compressor", false]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils", false]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util", false]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils", false]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration", false]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator", false]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators", false]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation", false]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax", false]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention", false]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op", false]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat", false]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv", false]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8", false]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm", false]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather", false]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool", false]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm", false]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm", false]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul", false]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool", false]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm", false]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops", false]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad", false]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling", false]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce", false]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize", false]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split", false]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op", false]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer", false]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant", false]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util", false]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only", false]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow", false]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils", false]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter", false]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", false]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", false]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util", false]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", false]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", false]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration", false]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler", false]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter", false]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph", false]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", false]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", false]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", false]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", false]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util", false]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils", false]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert", false]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", false]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", false]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper", false]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector", false]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace", false]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util", false]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm", false]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm", false]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction", false]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant", false]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction", false]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark", false]], "neural_compressor.common.logger": [[153, "module-neural_compressor.common.logger", false]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks", false]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation", false]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions", false]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers", false]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility", false]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo", false]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer", false]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner", false]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria", false]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim", false]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim", false]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer", false]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim", false]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns", false]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base", false]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha", false]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm", false]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm", false]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners", false]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base", false]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic", false]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask", false]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha", false]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock", false]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive", false]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free", false]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning", false]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs", false]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers", false]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria", false]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils", false]], "neural_compressor.conf.pythonic_config": [[185, "module-neural_compressor.conf.pythonic_config", false]], "neural_compressor.config": [[186, "module-neural_compressor.config", false]], "neural_compressor.contrib": [[187, "module-neural_compressor.contrib", false]], "neural_compressor.contrib.strategy": [[188, "module-neural_compressor.contrib.strategy", false]], "neural_compressor.contrib.strategy.sigopt": [[189, "module-neural_compressor.contrib.strategy.sigopt", false]], "neural_compressor.contrib.strategy.tpe": [[190, "module-neural_compressor.contrib.strategy.tpe", false]], "neural_compressor.data": [[211, "module-neural_compressor.data", false]], "neural_compressor.data.dataloaders.base_dataloader": [[191, "module-neural_compressor.data.dataloaders.base_dataloader", false]], "neural_compressor.data.dataloaders.dataloader": [[192, "module-neural_compressor.data.dataloaders.dataloader", false]], "neural_compressor.data.dataloaders.default_dataloader": [[193, "module-neural_compressor.data.dataloaders.default_dataloader", false]], "neural_compressor.data.dataloaders.fetcher": [[194, "module-neural_compressor.data.dataloaders.fetcher", false]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler", false]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets", false]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset", false]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset", false]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset", false]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset", false]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2", false]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset", false]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset", false]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters", false]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter", false]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter", false]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms", false]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform", false]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess", false]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization", false]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform", false]], "neural_compressor.experimental": [[264, "module-neural_compressor.experimental", false]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark", false]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common", false]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion", false]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader", false]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric", false]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model", false]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer", false]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess", false]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils", false]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component", false]], "neural_compressor.experimental.compression": [[227, "module-neural_compressor.experimental.compression", false]], "neural_compressor.experimental.contrib": [[228, "module-neural_compressor.experimental.contrib", false]], "neural_compressor.experimental.contrib.strategy": [[229, "module-neural_compressor.experimental.contrib.strategy", false]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, "module-neural_compressor.experimental.contrib.strategy.sigopt", false]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, "module-neural_compressor.experimental.contrib.strategy.tpe", false]], "neural_compressor.experimental.data": [[253, "module-neural_compressor.experimental.data", false]], "neural_compressor.experimental.data.dataloaders": [[236, "module-neural_compressor.experimental.data.dataloaders", false]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader", false]], "neural_compressor.experimental.data.dataloaders.dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.dataloader", false]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader", false]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, "module-neural_compressor.experimental.data.dataloaders.fetcher", false]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader", false]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", false]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader", false]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, "module-neural_compressor.experimental.data.dataloaders.sampler", false]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", false]], "neural_compressor.experimental.data.datasets": [[248, "module-neural_compressor.experimental.data.datasets", false]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, "module-neural_compressor.experimental.data.datasets.bert_dataset", false]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, "module-neural_compressor.experimental.data.datasets.coco_dataset", false]], "neural_compressor.experimental.data.datasets.dataset": [[244, "module-neural_compressor.experimental.data.datasets.dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset", false]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2", false]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset", false]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset", false]], "neural_compressor.experimental.data.filters": [[252, "module-neural_compressor.experimental.data.filters", false]], "neural_compressor.experimental.data.filters.coco_filter": [[250, "module-neural_compressor.experimental.data.filters.coco_filter", false]], "neural_compressor.experimental.data.filters.filter": [[251, "module-neural_compressor.experimental.data.filters.filter", false]], "neural_compressor.experimental.data.transforms": [[255, "module-neural_compressor.experimental.data.transforms", false]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, "module-neural_compressor.experimental.data.transforms.imagenet_transform", false]], "neural_compressor.experimental.data.transforms.tokenization": [[256, "module-neural_compressor.experimental.data.transforms.tokenization", false]], "neural_compressor.experimental.data.transforms.transform": [[257, "module-neural_compressor.experimental.data.transforms.transform", false]], "neural_compressor.experimental.distillation": [[258, "module-neural_compressor.experimental.distillation", false]], "neural_compressor.experimental.export": [[259, "module-neural_compressor.experimental.export", false]], "neural_compressor.experimental.export.qlinear2qdq": [[260, "module-neural_compressor.experimental.export.qlinear2qdq", false]], "neural_compressor.experimental.export.tf2onnx": [[261, "module-neural_compressor.experimental.export.tf2onnx", false]], "neural_compressor.experimental.export.torch2onnx": [[262, "module-neural_compressor.experimental.export.torch2onnx", false]], "neural_compressor.experimental.graph_optimization": [[263, "module-neural_compressor.experimental.graph_optimization", false]], "neural_compressor.experimental.metric": [[271, "module-neural_compressor.experimental.metric", false]], "neural_compressor.experimental.metric.bleu": [[265, "module-neural_compressor.experimental.metric.bleu", false]], "neural_compressor.experimental.metric.bleu_util": [[266, "module-neural_compressor.experimental.metric.bleu_util", false]], "neural_compressor.experimental.metric.coco_label_map": [[267, "module-neural_compressor.experimental.metric.coco_label_map", false]], "neural_compressor.experimental.metric.coco_tools": [[268, "module-neural_compressor.experimental.metric.coco_tools", false]], "neural_compressor.experimental.metric.evaluate_squad": [[269, "module-neural_compressor.experimental.metric.evaluate_squad", false]], "neural_compressor.experimental.metric.f1": [[270, "module-neural_compressor.experimental.metric.f1", false]], "neural_compressor.experimental.metric.metric": [[272, "module-neural_compressor.experimental.metric.metric", false]], "neural_compressor.experimental.mixed_precision": [[273, "module-neural_compressor.experimental.mixed_precision", false]], "neural_compressor.experimental.model_conversion": [[274, "module-neural_compressor.experimental.model_conversion", false]], "neural_compressor.experimental.nas": [[277, "module-neural_compressor.experimental.nas", false]], "neural_compressor.experimental.nas.basic_nas": [[275, "module-neural_compressor.experimental.nas.basic_nas", false]], "neural_compressor.experimental.nas.dynas": [[276, "module-neural_compressor.experimental.nas.dynas", false]], "neural_compressor.experimental.nas.nas": [[278, "module-neural_compressor.experimental.nas.nas", false]], "neural_compressor.experimental.nas.nas_utils": [[279, "module-neural_compressor.experimental.nas.nas_utils", false]], "neural_compressor.experimental.nas.search_algorithms": [[280, "module-neural_compressor.experimental.nas.search_algorithms", false]], "neural_compressor.experimental.pruner_legacy": [[283, "module-neural_compressor.experimental.pruner_legacy", false]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity", false]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, "module-neural_compressor.experimental.pruner_legacy.group_lasso", false]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, "module-neural_compressor.experimental.pruner_legacy.magnitude", false]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock", false]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, "module-neural_compressor.experimental.pruner_legacy.pruner", false]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning", false]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes", false]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns", false]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern", false]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", false]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2", false]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner", false]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger", false]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns", false]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils", false]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner", false]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning", false]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler", false]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization", false]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler", false]], "neural_compressor.experimental.strategy": [[306, "module-neural_compressor.experimental.strategy", false]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, "module-neural_compressor.experimental.strategy.auto_mixed_precision", false]], "neural_compressor.experimental.strategy.basic": [[303, "module-neural_compressor.experimental.strategy.basic", false]], "neural_compressor.experimental.strategy.bayesian": [[304, "module-neural_compressor.experimental.strategy.bayesian", false]], "neural_compressor.experimental.strategy.exhaustive": [[305, "module-neural_compressor.experimental.strategy.exhaustive", false]], "neural_compressor.experimental.strategy.mse": [[307, "module-neural_compressor.experimental.strategy.mse", false]], "neural_compressor.experimental.strategy.mse_v2": [[308, "module-neural_compressor.experimental.strategy.mse_v2", false]], "neural_compressor.experimental.strategy.random": [[309, "module-neural_compressor.experimental.strategy.random", false]], "neural_compressor.experimental.strategy.strategy": [[310, "module-neural_compressor.experimental.strategy.strategy", false]], "neural_compressor.experimental.strategy.utils": [[312, "module-neural_compressor.experimental.strategy.utils", false]], "neural_compressor.experimental.strategy.utils.constant": [[311, "module-neural_compressor.experimental.strategy.utils.constant", false]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler", false]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_space", false]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_structs", false]], "neural_compressor.experimental.strategy.utils.utility": [[316, "module-neural_compressor.experimental.strategy.utils.utility", false]], "neural_compressor.metric": [[324, "module-neural_compressor.metric", false]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu", false]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util", false]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map", false]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools", false]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad", false]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1", false]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric", false]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision", false]], "neural_compressor.model": [[328, "module-neural_compressor.model", false]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model", false]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model", false]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model", false]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model", false]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory", false]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model", false]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model", false]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model", false]], "neural_compressor.objective": [[336, "module-neural_compressor.objective", false]], "neural_compressor.profiling": [[337, "module-neural_compressor.profiling", false]], "neural_compressor.profiling.parser.factory": [[338, "module-neural_compressor.profiling.parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, "module-neural_compressor.profiling.parser.onnx_parser.factory", false]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser.parser", false]], "neural_compressor.profiling.parser.parser": [[341, "module-neural_compressor.profiling.parser.parser", false]], "neural_compressor.profiling.parser.result": [[342, "module-neural_compressor.profiling.parser.result", false]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory", false]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser.parser", false]], "neural_compressor.profiling.profiler.factory": [[345, "module-neural_compressor.profiling.profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler", false]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils", false]], "neural_compressor.profiling.profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler", false]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils", false]], "neural_compressor.quantization": [[353, "module-neural_compressor.quantization", false]], "neural_compressor.strategy": [[361, "module-neural_compressor.strategy", false]], "neural_compressor.strategy.auto": [[354, "module-neural_compressor.strategy.auto", false]], "neural_compressor.strategy.auto_mixed_precision": [[355, "module-neural_compressor.strategy.auto_mixed_precision", false]], "neural_compressor.strategy.basic": [[356, "module-neural_compressor.strategy.basic", false]], "neural_compressor.strategy.bayesian": [[357, "module-neural_compressor.strategy.bayesian", false]], "neural_compressor.strategy.conservative": [[358, "module-neural_compressor.strategy.conservative", false]], "neural_compressor.strategy.exhaustive": [[359, "module-neural_compressor.strategy.exhaustive", false]], "neural_compressor.strategy.hawq_v2": [[360, "module-neural_compressor.strategy.hawq_v2", false]], "neural_compressor.strategy.mse": [[362, "module-neural_compressor.strategy.mse", false]], "neural_compressor.strategy.mse_v2": [[363, "module-neural_compressor.strategy.mse_v2", false]], "neural_compressor.strategy.random": [[364, "module-neural_compressor.strategy.random", false]], "neural_compressor.strategy.strategy": [[365, "module-neural_compressor.strategy.strategy", false]], "neural_compressor.strategy.utils": [[367, "module-neural_compressor.strategy.utils", false]], "neural_compressor.strategy.utils.constant": [[366, "module-neural_compressor.strategy.utils.constant", false]], "neural_compressor.strategy.utils.tuning_sampler": [[368, "module-neural_compressor.strategy.utils.tuning_sampler", false]], "neural_compressor.strategy.utils.tuning_space": [[369, "module-neural_compressor.strategy.utils.tuning_space", false]], "neural_compressor.strategy.utils.tuning_structs": [[370, "module-neural_compressor.strategy.utils.tuning_structs", false]], "neural_compressor.strategy.utils.utility": [[371, "module-neural_compressor.strategy.utils.utility", false]], "neural_compressor.template.api_doc_example": [[372, "module-neural_compressor.template.api_doc_example", false]], "neural_compressor.torch.quantization.modules": [[373, "module-neural_compressor.torch.quantization.modules", false]], "neural_compressor.training": [[374, "module-neural_compressor.training", false]], "neural_compressor.utils": [[378, "module-neural_compressor.utils", false]], "neural_compressor.utils.collect_layer_histogram": [[375, "module-neural_compressor.utils.collect_layer_histogram", false]], "neural_compressor.utils.constant": [[376, "module-neural_compressor.utils.constant", false]], "neural_compressor.utils.create_obj_from_config": [[377, "module-neural_compressor.utils.create_obj_from_config", false]], "neural_compressor.utils.kl_divergence": [[379, "module-neural_compressor.utils.kl_divergence", false]], "neural_compressor.utils.load_huggingface": [[380, "module-neural_compressor.utils.load_huggingface", false]], "neural_compressor.utils.logger": [[381, "module-neural_compressor.utils.logger", false]], "neural_compressor.utils.neural_insights_utils": [[382, "module-neural_compressor.utils.neural_insights_utils", false]], "neural_compressor.utils.options": [[383, "module-neural_compressor.utils.options", false]], "neural_compressor.utils.pytorch": [[384, "module-neural_compressor.utils.pytorch", false]], "neural_compressor.utils.utility": [[385, "module-neural_compressor.utils.utility", false]], "neural_compressor.utils.weights_details": [[386, "module-neural_compressor.utils.weights_details", false]], "neural_compressor.version": [[387, "module-neural_compressor.version", false]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map", false]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input", false]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input", false]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re", false]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator", false]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.normalize_answer", false]], "normalize_answer() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.normalize_answer", false]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTFTransform", false]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform", false]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTransform", false]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform", false]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_correct", false]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_correct", false]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_sample", false]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_sample", false]], "objective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Objective", false]], "objective_custom_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_custom_registry", false]], "objective_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_registry", false]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.OneshotScheduler", false]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler", false]], "onnx (class in neural_compressor.config)": [[186, "neural_compressor.config.ONNX", false]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[260, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq", false]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform", false]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph", false]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[333, "neural_compressor.model.onnx_model.ONNXModel", false]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode", false]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema", false]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[340, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser", false]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.ONNXQlinear2QDQConfig", false]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform", false]], "onnxrt (class in neural_compressor.utils.options)": [[383, "neural_compressor.utils.options.onnxrt", false]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[3, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment", false]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader", false]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset", false]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox", false]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader", false]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTGLUE", false]], "onnxrtglue (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE", false]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset", false]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets", false]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters", false]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics", false]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics", false]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms", false]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[339, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory", false]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets", false]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters", false]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics", false]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms", false]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms", false]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry", false]], "opentry (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.OpEntry", false]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.Operator", false]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[380, "neural_compressor.utils.load_huggingface.OptimizedModel", false]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph", false]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.optimizer_registry", false]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.optimizer_registry", false]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.Optimizers", false]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.Optimizers", false]], "options (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.Options", false]], "options (class in neural_compressor.config)": [[186, "neural_compressor.config.Options", false]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[315, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig", false]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[370, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig", false]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.OpType", false]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler", false]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict", false]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.OrderedDefaultDict", false]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant", false]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor", false]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform", false]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform", false]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator", false]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config", false]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear", false]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear_tf", false]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune", false]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.parse_saved_model", false]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune", false]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune", false]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune_tf", false]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config", false]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types", false]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert", false]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco", false]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet", false]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform", false]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform", false]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform", false]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[338, "neural_compressor.profiling.parser.factory.ParserFactory", false]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.paser_cfgs", false]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern", false]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern", false]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern", false]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry", false]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal", false]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path", false]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.pattern_to_path", false]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase", false]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[285, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner", false]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner", false]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA", false]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM", false]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM", false]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS", false]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns", false]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator", false]], "performance (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Performance", false]], "pickleerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError", false]], "picklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError", false]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator", false]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils", false]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer", false]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter", false]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[214, "neural_compressor.data.transforms.postprocess.Postprocess", false]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[224, "neural_compressor.experimental.common.postprocess.Postprocess", false]], "posttrainingquantconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.PostTrainingQuantConfig", false]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.pred_list", false]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.pred_list", false]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.pred_list", false]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.pred_list", false]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[265, "neural_compressor.experimental.metric.bleu.BLEU.predictions", false]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.predictions", false]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization", false]], "prepare_compression() (in module neural_compressor.training)": [[374, "neural_compressor.training.prepare_compression", false]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader", false]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs", false]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model", false]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data", false]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.prepare_pruning", false]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.preprocess_user_cfg", false]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables", false]], "print_op_list() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.print_op_list", false]], "print_table() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.print_table", false]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_and_check_config", false]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config", false]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_config", false]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config", false]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_weight_config", false]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_yaml_config", false]], "profile() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.profile", false]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[347, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[349, "neural_compressor.profiling.profiler.profiler.Profiler", false]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[351, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler", false]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[345, "neural_compressor.profiling.profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[346, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory", false]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory", false]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[341, "neural_compressor.profiling.parser.parser.ProfilingParser", false]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[342, "neural_compressor.profiling.parser.result.ProfilingResult", false]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[286, "neural_compressor.experimental.pruner_legacy.pruner.Pruner", false]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info", false]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info", false]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info", false]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[286, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry", false]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners", false]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners", false]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.pruners", false]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners", false]], "pruning (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.Pruning", false]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.Pruning", false]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency", false]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency", false]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks", false]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion", false]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion", false]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler", false]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re", false]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner", false]], "pytorch (class in neural_compressor.config)": [[186, "neural_compressor.config.PyTorch", false]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel", false]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel", false]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern", false]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner", false]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner", false]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset", false]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner", false]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10", false]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100", false]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCriterions", false]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchCriterions", false]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform", false]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss", false]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[197, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader", false]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PyTorchDatasets", false]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets", false]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST", false]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.PyTorchFilters", false]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.PyTorchFilters", false]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchFXModel", false]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper", false]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.PyTorchLoss", false]], "pytorchloss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchLoss", false]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.PyTorchMetrics", false]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchMetrics", false]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMNIST", false]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST", false]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchModel", false]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform", false]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction", false]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction", false]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform", false]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers", false]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers", false]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[177, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner", false]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM", false]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM", false]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[178, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner", false]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner", false]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss", false]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper", false]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchSGD", false]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchSGD", false]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTransforms", false]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms", false]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTranspose", false]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose", false]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator", false]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator", false]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function", false]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator", false]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator", false]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator", false]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator", false]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator", false]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor", false]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator", false]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator", false]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator", false]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator", false]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator", false]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator", false]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry", false]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator", false]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator", false]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator", false]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator", false]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator", false]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data", false]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern", false]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor", false]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantFormat", false]], "quantization (class in neural_compressor.experimental.quantization)": [[300, "neural_compressor.experimental.quantization.Quantization", false]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks", false]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.QuantizationAwareTrainingConfig", false]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.QuantizationConfig", false]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizationMode", false]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data", false]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel", false]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero", false]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_nparray", false]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model", false]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig", false]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer", false]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput", false]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter", false]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValue", false]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType", false]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase", false]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel", false]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper", false]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd", false]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase", false]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization", false]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase", false]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[29, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer", false]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper", false]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase", false]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.QuantOptions", false]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantType", false]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.QuantType", false]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes", false]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform", false]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTransform", false]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform", false]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomHorizontalFlip", false]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip", false]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform", false]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform", false]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTransform", false]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform", false]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher", false]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[309, "neural_compressor.experimental.strategy.random.RandomTuneStrategy", false]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[364, "neural_compressor.strategy.random.RandomTuneStrategy", false]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomVerticalFlip", false]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip", false]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.read_graph", false]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.read_squad_examples", false]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.read_squad_examples", false]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs", false]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe", false]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher", false]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model", false]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.record_output", false]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.record_output", false]], "recover() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.recover", false]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[384, "neural_compressor.utils.pytorch.recover_model_from_json", false]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator", false]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator", false]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg", false]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg", false]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms", false]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.register_criterion", false]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.register_criterion", false]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.register_customer_metric", false]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[382, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload", false]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.register_pattern", false]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern", false]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.register_pruner", false]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners", false]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.register_pruning", false]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.register_reg", false]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.register_scheduler", false]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler", false]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator", false]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input", false]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer", false]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer", false]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat", false]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform", false]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTFTransform", false]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform", false]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTransform", false]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleTransform", false]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default", false]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.reset_none_to_default", false]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeMXNetTransform", false]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform", false]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator", false]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizePytorchTransform", false]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform", false]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTFTransform", false]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform", false]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTransform", false]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeTransform", false]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio", false]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeWithRatio", false]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio", false]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion", false]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning", false]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type", false]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[371, "neural_compressor.strategy.utils.utility.reverted_data_type", false]], "rmse (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.RMSE", false]], "rmse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.RMSE", false]], "roc (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ROC", false]], "roc (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ROC", false]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize", false]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.run_forward", false]], "run_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.run_instance", false]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[272, "neural_compressor.experimental.metric.metric.Loss.sample", false]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.sample", false]], "sample (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sample", false]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.Sampler", false]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.Sampler", false]], "save() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.save", false]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[380, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream", false]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf", false]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.saved_model_session", false]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer", false]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler", false]], "scheduler (class in neural_compressor.experimental.scheduler)": [[301, "neural_compressor.experimental.scheduler.Scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler", false]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler", false]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler", false]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores", false]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores", false]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores", false]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores", false]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.Searcher", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results", false]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results", false]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss", false]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.SelfKnowledgeDistillationLossConfig", false]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher", false]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType", false]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.SequentialSampler", false]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler", false]], "set_all_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_all_env_var", false]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_all_env_var", false]], "set_backend() (in module neural_compressor.experimental.common.model)": [[222, "neural_compressor.experimental.common.model.set_backend", false]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[352, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution", false]], "set_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_env_var", false]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_env_var", false]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.set_module", false]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name", false]], "set_random_seed() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.set_random_seed", false]], "set_resume_from() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.set_resume_from", false]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.set_tensorboard", false]], "set_workspace() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.set_workspace", false]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer", false]], "show_memory_info() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.show_memory_info", false]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[189, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[230, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy", false]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.simple_inference", false]], "singleton() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.singleton", false]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.slim_session", false]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution", false]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[150, "neural_compressor.algorithm.smooth_quant.SmoothQuant", false]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration", false]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM", false]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler", false]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler", false]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM", false]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion", false]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion", false]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner", false]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner", false]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset", false]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.SparseGPTPruning", false]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.split_shared_bias", false]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator", false]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer", false]], "squadexample (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.SquadExample", false]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.SquadExample", false]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.SquadF1", false]], "squadf1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.SquadF1", false]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step", false]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step", false]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph", false]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph", false]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.static_quant_export", false]], "statistics (class in neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.Statistics", false]], "str2array() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.str2array", false]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[310, "neural_compressor.experimental.strategy.strategy.strategy_registry", false]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[365, "neural_compressor.strategy.strategy.strategy_registry", false]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes", false]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes", false]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer", false]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer", false]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[207, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[249, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset", false]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[272, "neural_compressor.experimental.metric.metric.Loss.sum", false]], "sum (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sum", false]], "summary_benchmark() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.summary_benchmark", false]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer", false]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re", false]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re", false]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers", false]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers", false]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity", false]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio", false]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio", false]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets", false]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.TargetSpace", false]], "targetspace (class in neural_compressor.strategy.bayesian)": [[357, "neural_compressor.strategy.bayesian.TargetSpace", false]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector", false]], "tensorflow (class in neural_compressor.config)": [[186, "neural_compressor.config.TensorFlow", false]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Tensorflow", false]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor", false]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam", false]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW", false]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW", false]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor", false]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel", false]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader", false]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset", false]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel", false]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10", false]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100", false]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP", false]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowCOCOMAP", false]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowCriterions", false]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowCriterions", false]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox", false]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss", false]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader", false]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets", false]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST", false]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.TensorflowFilters", false]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.TensorflowFilters", false]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder", false]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset", false]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw", false]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord", false]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal", false]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper", false]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowLLMModel", false]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMAP", false]], "tensorflowmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMAP", false]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMetrics", false]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMetrics", false]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST", false]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowModel", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset", false]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers", false]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers", false]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[343, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory", false]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[344, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser", false]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowQATModel", false]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[128, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter", false]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorflowQuery", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform", false]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio", false]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel", false]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD", false]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowSGD", false]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale", false]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy", false]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset", false]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK", false]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowTopK", false]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform", false]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms", false]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose", false]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel", false]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowVOCMAP", false]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord", false]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowWrapFunction", false]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction", false]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant", false]], "teqlinearfakequant (class in neural_compressor.torch.quantization.modules)": [[373, "neural_compressor.torch.quantization.modules.TEQLinearFakeQuant", false]], "tf2onnxconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.TF2ONNXConfig", false]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper", false]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[261, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx", false]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[261, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx", false]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader", false]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform", false]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback", false]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback", false]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[332, "neural_compressor.model.nets_factory.TFSlimNetsFactory", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform", false]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform", false]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1", false]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16", false]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2", false]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2", false]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1", false]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase", false]], "time_limit() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.time_limit", false]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.to_numpy", false]], "toarray (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToArray", false]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ToArray", false]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToNDArrayTransform", false]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform", false]], "torch2onnxconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.Torch2ONNXConfig", false]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx", false]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx", false]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[190, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy", false]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[231, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy", false]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph", false]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.transform_registry", false]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.transform_registry", false]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[144, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector", false]], "transforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TRANSFORMS", false], [216, "neural_compressor.data.transforms.transform.Transforms", false]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS", false], [257, "neural_compressor.experimental.data.transforms.transform.Transforms", false]], "transpose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.Transpose", false]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.Transpose", false]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.trt_env_setup", false]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[310, "neural_compressor.experimental.strategy.strategy.TuneStrategy", false]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[365, "neural_compressor.strategy.strategy.TuneStrategy", false]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[365, "neural_compressor.strategy.strategy.TuneStrategyMeta", false]], "tuningcriterion (class in neural_compressor.config)": [[186, "neural_compressor.config.TuningCriterion", false]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem", false]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.TuningItem", false]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder", false]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler", false]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry", false]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace", false]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[369, "neural_compressor.strategy.utils.tuning_space.TuningSpace", false]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator", false]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator", false]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex", false]], "unicoderegex (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.UnicodeRegex", false]], "unpicklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError", false]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step", false]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module", false]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[382, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload", false]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[382, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data", false]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.update_params", false]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.update_sq_scale", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs", false]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs", false]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output", false]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_graph_node", false]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.ValueInfo", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const", false]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const", false]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2", false]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.version1_eq_version2", false]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2", false]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.version1_gt_version2", false]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2", false]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.version1_gte_version2", false]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2", false]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.version1_lt_version2", false]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2", false]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[385, "neural_compressor.utils.utility.version1_lte_version2", false]], "warn() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.warn", false]], "warn() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.warn", false]], "warning() (in module neural_compressor.common.logger)": [[153, "neural_compressor.common.logger.warning", false]], "warning() (in module neural_compressor.utils.logger)": [[381, "neural_compressor.utils.logger.warning", false]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[151, "neural_compressor.algorithm.weight_correction.WeightCorrection", false]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[368, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler", false]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[185, "neural_compressor.conf.pythonic_config.WeightPruningConfig", false]], "weightpruningconfig (class in neural_compressor.config)": [[186, "neural_compressor.config.WeightPruningConfig", false]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[386, "neural_compressor.utils.weights_details.WeightsDetails", false]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[386, "neural_compressor.utils.weights_details.WeightsStatistics", false]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.whitespace_tokenize", false]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize", false]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer", false]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer", false]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapMXNetMetric", false]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric", false]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric", false]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric", false]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric", false]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric", false]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.write_graph", false]]}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [317, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[149, 0, 0, "-", "algorithm"], [152, 0, 0, "-", "benchmark"], [186, 0, 0, "-", "config"], [187, 0, 0, "-", "contrib"], [211, 0, 0, "-", "data"], [264, 0, 0, "-", "experimental"], [324, 0, 0, "-", "metric"], [326, 0, 0, "-", "mix_precision"], [328, 0, 0, "-", "model"], [336, 0, 0, "-", "objective"], [337, 0, 0, "-", "profiling"], [353, 0, 0, "-", "quantization"], [361, 0, 0, "-", "strategy"], [374, 0, 0, "-", "training"], [378, 0, 0, "-", "utils"], [387, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "mxnet_utils"], [5, 0, 0, "-", "ox_utils"], [33, 0, 0, "-", "tensorflow"], [97, 0, 0, "-", "tf_utils"], [137, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.mxnet_utils": [[2, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, 1, 1, "", "CalibCollector"], [2, 1, 1, "", "CalibData"], [2, 1, 1, "", "CollectorBase"], [2, 1, 1, "", "DataIterLoader"], [2, 1, 1, "", "DataLoaderWrap"], [2, 1, 1, "", "NameCollector"], [2, 1, 1, "", "OpType"], [2, 1, 1, "", "TensorCollector"], [2, 2, 1, "", "amp_convert"], [2, 2, 1, "", "calib_model"], [2, 2, 1, "", "check_mx_version"], [2, 2, 1, "", "combine_capabilities"], [2, 2, 1, "", "create_data_example"], [2, 2, 1, "", "distribute_calib_tensors"], [2, 2, 1, "", "ensure_list"], [2, 2, 1, "", "fuse"], [2, 2, 1, "", "get_framework_name"], [2, 2, 1, "", "is_model_quantized"], [2, 2, 1, "", "isiterable"], [2, 2, 1, "", "make_module"], [2, 2, 1, "", "make_nc_model"], [2, 2, 1, "", "make_symbol_block"], [2, 2, 1, "", "ndarray_to_device"], [2, 2, 1, "", "parse_tune_config"], [2, 2, 1, "", "prepare_dataloader"], [2, 2, 1, "", "prepare_model"], [2, 2, 1, "", "prepare_model_data"], [2, 2, 1, "", "quantize_sym_model"], [2, 2, 1, "", "query_quantizable_nodes"], [2, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.ox_utils": [[3, 0, 0, "-", "calibration"], [4, 0, 0, "-", "calibrator"], [17, 0, 0, "-", "operators"], [29, 0, 0, "-", "quantizer"], [30, 0, 0, "-", "smooth_quant"], [31, 0, 0, "-", "util"], [32, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, 1, 1, "", "CalibratorBase"], [4, 1, 1, "", "HistogramCollector"], [4, 1, 1, "", "KLCalibrator"], [4, 1, 1, "", "MinMaxCalibrator"], [4, 1, 1, "", "PercentileCalibrator"], [4, 2, 1, "", "calib_registry"], [4, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[6, 0, 0, "-", "activation"], [7, 0, 0, "-", "argmax"], [8, 0, 0, "-", "attention"], [9, 0, 0, "-", "binary_op"], [10, 0, 0, "-", "concat"], [11, 0, 0, "-", "conv"], [12, 0, 0, "-", "direct_q8"], [13, 0, 0, "-", "embed_layernorm"], [14, 0, 0, "-", "gather"], [15, 0, 0, "-", "gavgpool"], [16, 0, 0, "-", "gemm"], [18, 0, 0, "-", "lstm"], [19, 0, 0, "-", "matmul"], [20, 0, 0, "-", "maxpool"], [21, 0, 0, "-", "norm"], [22, 0, 0, "-", "ops"], [23, 0, 0, "-", "pad"], [24, 0, 0, "-", "pooling"], [25, 0, 0, "-", "reduce"], [26, 0, 0, "-", "resize"], [27, 0, 0, "-", "split"], [28, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, 1, 1, "", "ActivationOperator"], [6, 1, 1, "", "Float16ActivationOperator"], [6, 1, 1, "", "QActivationOperator"], [6, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, 1, 1, "", "ArgMaxOperator"], [7, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, 1, 1, "", "AttentionOperator"], [8, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, 1, 1, "", "BinaryDirect8BitOperator"], [9, 1, 1, "", "BinaryOperator"], [9, 1, 1, "", "Float16BinaryOperator"], [9, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, 1, 1, "", "ConcatOperator"], [10, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, 1, 1, "", "ConvOperator"], [11, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, 1, 1, "", "Direct8BitOperator"], [12, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, 1, 1, "", "EmbedLayerNormalizationOperator"], [13, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, 1, 1, "", "GatherOperator"], [14, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, 1, 1, "", "GlobalAveragePoolOperator"], [15, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, 1, 1, "", "GemmOperator"], [16, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, 1, 1, "", "FusedMatMulOperator"], [19, 1, 1, "", "MatMulOperator"], [19, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, 1, 1, "", "MaxPoolOperator"], [20, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, 1, 1, "", "BatchNormalizationOperator"], [21, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, 1, 1, "", "Operator"], [22, 1, 1, "", "QOperator"], [22, 2, 1, "", "op_registry"], [22, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, 1, 1, "", "PadOperator"], [23, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, 1, 1, "", "PoolOperator"], [24, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, 1, 1, "", "ReduceMinMaxOperator"], [25, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, 1, 1, "", "QResizeOperator"], [26, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, 1, 1, "", "QSplitOperator"], [27, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, 1, 1, "", "UnaryDirect8BitOperator"], [28, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, 1, 1, "", "ORTSmoothQuant"], [30, 2, 1, "", "get_quant_dequant_output"], [30, 2, 1, "", "make_sub_graph"], [30, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[31, 1, 1, "", "QuantFormat"], [31, 1, 1, "", "QuantType"], [31, 1, 1, "", "QuantizationMode"], [31, 1, 1, "", "QuantizedInitializer"], [31, 1, 1, "", "QuantizedValue"], [31, 1, 1, "", "QuantizedValueType"], [31, 1, 1, "", "ValueInfo"], [31, 2, 1, "", "attribute_to_kwarg"], [31, 2, 1, "", "calculate_scale_zp"], [31, 2, 1, "", "cast_tensor"], [31, 2, 1, "", "collate_preds"], [31, 2, 1, "", "dequantize_data"], [31, 2, 1, "", "dequantize_data_with_scale_zero"], [31, 2, 1, "", "dtype_to_name"], [31, 2, 1, "", "find_by_name"], [31, 2, 1, "", "float_to_bfloat16"], [31, 2, 1, "", "float_to_float16"], [31, 2, 1, "", "infer_shapes"], [31, 2, 1, "", "is_B_transposed"], [31, 2, 1, "", "make_dquant_node"], [31, 2, 1, "", "make_quant_node"], [31, 2, 1, "", "quantize_data"], [31, 2, 1, "", "quantize_data_per_channel"], [31, 2, 1, "", "quantize_data_with_scale_zero"], [31, 2, 1, "", "quantize_nparray"], [31, 2, 1, "", "remove_init_from_model_input"], [31, 2, 1, "", "split_shared_bias"], [31, 2, 1, "", "to_numpy"], [31, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, 2, 1, "", "apply_awq_clip"], [32, 2, 1, "", "apply_awq_scale"], [32, 2, 1, "", "awq_quantize"], [32, 2, 1, "", "get_blob_size"], [32, 2, 1, "", "get_weight_scale"], [32, 2, 1, "", "gptq"], [32, 2, 1, "", "gptq_quantize"], [32, 2, 1, "", "make_matmul_weight_only_node"], [32, 2, 1, "", "pad_tensor"], [32, 2, 1, "", "prepare_inputs"], [32, 2, 1, "", "qdq_tensor"], [32, 2, 1, "", "quant_tensor"], [32, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.tensorflow": [[33, 1, 1, "", "TensorFlowAdaptor"], [33, 1, 1, "", "TensorflowQuery"], [33, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[34, 0, 0, "-", "graph_converter"], [35, 0, 0, "-", "graph_converter_without_calib"], [73, 0, 0, "-", "graph_rewriter"], [96, 0, 0, "-", "graph_util"], [98, 0, 0, "-", "quantize_graph"], [125, 0, 0, "-", "quantize_graph_common"], [126, 0, 0, "-", "smooth_quant_calibration"], [127, 0, 0, "-", "smooth_quant_scaler"], [128, 0, 0, "-", "tf2onnx_converter"], [131, 0, 0, "-", "transform_graph"], [134, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[38, 0, 0, "-", "bf16"], [62, 0, 0, "-", "generic"], [72, 0, 0, "-", "graph_base"], [81, 0, 0, "-", "int8"], [87, 0, 0, "-", "onnx"], [92, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[36, 0, 0, "-", "bf16_convert"], [37, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[39, 0, 0, "-", "convert_add_to_biasadd"], [40, 0, 0, "-", "convert_layout"], [41, 0, 0, "-", "convert_leakyrelu"], [42, 0, 0, "-", "convert_nan_to_random"], [43, 0, 0, "-", "convert_placeholder_to_const"], [44, 0, 0, "-", "dilated_contraction"], [45, 0, 0, "-", "dummy_biasadd"], [46, 0, 0, "-", "expanddims_optimizer"], [47, 0, 0, "-", "fetch_weight_from_reshape"], [48, 0, 0, "-", "fold_batch_norm"], [49, 0, 0, "-", "fold_constant"], [50, 0, 0, "-", "fuse_biasadd_add"], [51, 0, 0, "-", "fuse_column_wise_mul"], [52, 0, 0, "-", "fuse_conv_with_math"], [53, 0, 0, "-", "fuse_decomposed_bn"], [54, 0, 0, "-", "fuse_decomposed_in"], [55, 0, 0, "-", "fuse_gelu"], [56, 0, 0, "-", "fuse_layer_norm"], [57, 0, 0, "-", "fuse_pad_with_conv"], [58, 0, 0, "-", "fuse_pad_with_fp32_conv"], [59, 0, 0, "-", "fuse_reshape_transpose"], [60, 0, 0, "-", "graph_cse_optimizer"], [61, 0, 0, "-", "grappler_pass"], [63, 0, 0, "-", "insert_print_node"], [64, 0, 0, "-", "move_squeeze_after_relu"], [65, 0, 0, "-", "pre_optimize"], [66, 0, 0, "-", "remove_training_nodes"], [67, 0, 0, "-", "rename_batch_norm"], [68, 0, 0, "-", "split_shared_input"], [69, 0, 0, "-", "strip_equivalent_nodes"], [70, 0, 0, "-", "strip_unused_nodes"], [71, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, 1, 1, "", "FuseDecomposedBNOptimizer"], [53, 2, 1, "", "bypass_reshape"], [53, 2, 1, "", "get_const_dim_count"], [53, 2, 1, "", "node_from_map"], [53, 2, 1, "", "node_name_from_input"], [53, 2, 1, "", "valid_reshape_inputs"], [53, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, 1, 1, "", "FuseDecomposedINOptimizer"], [54, 2, 1, "", "bypass_reshape"], [54, 2, 1, "", "get_const_dim_count"], [54, 2, 1, "", "node_from_map"], [54, 2, 1, "", "node_name_from_input"], [54, 2, 1, "", "valid_reshape_inputs"], [54, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, 1, 1, "", "FuseLayerNormOptimizer"], [56, 2, 1, "", "node_from_map"], [56, 2, 1, "", "node_name_from_input"], [56, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[74, 0, 0, "-", "freeze_fake_quant"], [75, 0, 0, "-", "freeze_value"], [76, 0, 0, "-", "freeze_value_without_calib"], [77, 0, 0, "-", "fuse_conv_redundant_dequantize"], [78, 0, 0, "-", "fuse_conv_requantize"], [79, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [80, 0, 0, "-", "fuse_matmul_requantize"], [82, 0, 0, "-", "meta_op_optimizer"], [83, 0, 0, "-", "post_hostconst_converter"], [84, 0, 0, "-", "post_quantized_op_cse"], [85, 0, 0, "-", "rnn_convert"], [86, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [80, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[88, 0, 0, "-", "onnx_graph"], [89, 0, 0, "-", "onnx_node"], [90, 0, 0, "-", "onnx_schema"], [91, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, 1, 1, "", "OnnxOpSchema"], [90, 2, 1, "", "get_max_supported_opset_version"], [90, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, 1, 1, "", "SeqType"], [91, 2, 1, "", "add_port_to_name"], [91, 2, 1, "", "are_shapes_equal"], [91, 2, 1, "", "assert_error"], [91, 2, 1, "", "compute_const_folding_using_tf"], [91, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [91, 2, 1, "", "find_opset"], [91, 2, 1, "", "get_index_from_strided_slice_of_shape"], [91, 2, 1, "", "get_subgraphs_from_onnx"], [91, 2, 1, "", "get_tensorflow_node_attr"], [91, 2, 1, "", "get_tensorflow_node_shape_attr"], [91, 2, 1, "", "get_tensorflow_tensor_data"], [91, 2, 1, "", "get_tensorflow_tensor_shape"], [91, 2, 1, "", "infer_onnx_shape_dtype"], [91, 2, 1, "", "initialize_name_counter"], [91, 2, 1, "", "is_list_or_tuple"], [91, 2, 1, "", "is_onnx_domain"], [91, 2, 1, "", "make_onnx_inputs_outputs"], [91, 2, 1, "", "make_onnx_shape"], [91, 2, 1, "", "map_numpy_to_onnx_dtype"], [91, 2, 1, "", "map_onnx_to_numpy_type"], [91, 2, 1, "", "map_tensorflow_dtype"], [91, 2, 1, "", "read_tensorflow_node_attrs"], [91, 2, 1, "", "save_protobuf"], [91, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[93, 0, 0, "-", "insert_qdq_pattern"], [94, 0, 0, "-", "merge_duplicated_qdq"], [95, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, 1, 1, "", "GraphAnalyzer"], [96, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[100, 0, 0, "-", "qat"], [116, 0, 0, "-", "qdq"], [118, 0, 0, "-", "quantize_graph_base"], [119, 0, 0, "-", "quantize_graph_bn"], [120, 0, 0, "-", "quantize_graph_concatv2"], [121, 0, 0, "-", "quantize_graph_conv"], [122, 0, 0, "-", "quantize_graph_for_intel_cpu"], [123, 0, 0, "-", "quantize_graph_matmul"], [124, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, 0, 0, "-", "fake_quantize"], [101, 0, 0, "-", "quantize_config"], [102, 0, 0, "-", "quantize_helper"], [103, 0, 0, "-", "quantize_layers"], [108, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, 1, 1, "", "FakeQuantize"], [99, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, 2, 1, "", "init_quantize_config"], [102, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[104, 0, 0, "-", "optimize_layer"], [105, 0, 0, "-", "quantize_layer_add"], [106, 0, 0, "-", "quantize_layer_base"], [107, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, 1, 1, "", "QuantizeWrapper"], [108, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[109, 0, 0, "-", "fuse_qdq_bn"], [110, 0, 0, "-", "fuse_qdq_concatv2"], [111, 0, 0, "-", "fuse_qdq_conv"], [112, 0, 0, "-", "fuse_qdq_deconv"], [113, 0, 0, "-", "fuse_qdq_in"], [114, 0, 0, "-", "fuse_qdq_matmul"], [115, 0, 0, "-", "fuse_qdq_pooling"], [117, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, 1, 1, "", "QuantizeGraphBase"], [118, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, 1, 1, "", "SmoothQuantCalibration"], [126, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, 1, 1, "", "SmoothQuantScaler"], [127, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[129, 0, 0, "-", "bias_correction"], [130, 0, 0, "-", "graph_transform_base"], [132, 0, 0, "-", "insert_logging"], [133, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[134, 2, 1, "", "apply_inlining"], [134, 2, 1, "", "collate_tf_preds"], [134, 2, 1, "", "construct_function_from_graph_def"], [134, 2, 1, "", "disable_random"], [134, 2, 1, "", "fix_ref_type_of_graph_def"], [134, 2, 1, "", "generate_feed_dict"], [134, 2, 1, "", "get_estimator_graph"], [134, 2, 1, "", "get_graph_def"], [134, 2, 1, "", "get_input_output_node_names"], [134, 2, 1, "", "get_model_input_shape"], [134, 2, 1, "", "get_tensor_by_name"], [134, 2, 1, "", "get_tensor_val_from_graph_node"], [134, 2, 1, "", "get_weight_from_input_tensor"], [134, 2, 1, "", "int8_node_name_reverse"], [134, 2, 1, "", "is_ckpt_format"], [134, 2, 1, "", "is_saved_model_format"], [134, 2, 1, "", "iterator_sess_run"], [134, 2, 1, "", "parse_saved_model"], [134, 2, 1, "", "read_graph"], [134, 2, 1, "", "reconstruct_saved_model"], [134, 2, 1, "", "strip_equivalent_nodes"], [134, 2, 1, "", "strip_unused_nodes"], [134, 2, 1, "", "tf_diagnosis_helper"], [134, 2, 1, "", "version1_eq_version2"], [134, 2, 1, "", "version1_gt_version2"], [134, 2, 1, "", "version1_gte_version2"], [134, 2, 1, "", "version1_lt_version2"], [134, 2, 1, "", "version1_lte_version2"], [134, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[135, 0, 0, "-", "bf16_convert"], [136, 0, 0, "-", "hawq_metric"], [138, 0, 0, "-", "layer_wise_quant"], [143, 0, 0, "-", "model_wrapper"], [144, 0, 0, "-", "pattern_detector"], [145, 0, 0, "-", "symbolic_trace"], [146, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, 1, 1, "", "BF16ModuleWrapper"], [135, 2, 1, "", "Convert"], [135, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, 1, 1, "", "HessianTrace"], [136, 1, 1, "", "Node_collector"], [136, 2, 1, "", "compare_weights"], [136, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[139, 0, 0, "-", "modified_pickle"], [140, 0, 0, "-", "quantize"], [141, 0, 0, "-", "torch_load"], [142, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, 3, 1, "", "PickleError"], [139, 3, 1, "", "PicklingError"], [139, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, 2, 1, "", "dowload_hf_model"], [142, 2, 1, "", "get_children"], [142, 2, 1, "", "get_module"], [142, 2, 1, "", "get_named_children"], [142, 2, 1, "", "get_super_module_by_name"], [142, 2, 1, "", "load_empty_model"], [142, 2, 1, "", "load_layer_wise_quantized_model"], [142, 2, 1, "", "load_tensor"], [142, 2, 1, "", "load_tensor_from_shard"], [142, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, 1, 1, "", "FakeAffineTensorQuantFunction"], [143, 1, 1, "", "MulLinear"], [143, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, 2, 1, "", "symbolic_trace"], [145, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[146, 2, 1, "", "append_attr"], [146, 2, 1, "", "auto_copy"], [146, 2, 1, "", "calculate_quant_min_max"], [146, 2, 1, "", "calibration"], [146, 2, 1, "", "check_cfg_and_qconfig"], [146, 2, 1, "", "collate_torch_preds"], [146, 2, 1, "", "collect_weight_info"], [146, 2, 1, "", "fetch_module"], [146, 2, 1, "", "forward_wrapper"], [146, 2, 1, "", "generate_activation_observer"], [146, 2, 1, "", "get_absorb_layers"], [146, 2, 1, "", "get_block_prefix"], [146, 2, 1, "", "get_depth"], [146, 2, 1, "", "get_dict_at_depth"], [146, 2, 1, "", "get_element_under_depth"], [146, 2, 1, "", "get_embedding_contiguous"], [146, 2, 1, "", "get_example_input"], [146, 2, 1, "", "get_fallback_order"], [146, 2, 1, "", "get_hidden_states"], [146, 2, 1, "", "get_module_input_output"], [146, 2, 1, "", "get_mse_order_per_fp32"], [146, 2, 1, "", "get_mse_order_per_int8"], [146, 2, 1, "", "get_op_type_by_name"], [146, 2, 1, "", "get_quantizable_ops_from_cfgs"], [146, 2, 1, "", "get_torch_version"], [146, 2, 1, "", "input2tuple"], [146, 2, 1, "", "is_fused_module"], [146, 2, 1, "", "match_datatype_pattern"], [146, 2, 1, "", "move_input_device"], [146, 2, 1, "", "paser_cfgs"], [146, 2, 1, "", "set_module"], [146, 2, 1, "", "simple_inference"], [146, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[147, 0, 0, "-", "algorithm"], [148, 0, 0, "-", "fast_bias_correction"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[147, 1, 1, "", "ALGORITHMS"], [147, 1, 1, "", "Algorithm"], [147, 1, 1, "", "AlgorithmScheduler"], [147, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[148, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[150, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[151, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[152, 2, 1, "", "benchmark_with_raw_cmd"], [152, 2, 1, "", "call_one"], [152, 2, 1, "", "config_instance"], [152, 2, 1, "", "fit"], [152, 2, 1, "", "generate_prefix"], [152, 2, 1, "", "get_architecture"], [152, 2, 1, "", "get_bounded_threads"], [152, 2, 1, "", "get_core_ids"], [152, 2, 1, "", "get_physical_ids"], [152, 2, 1, "", "get_threads"], [152, 2, 1, "", "get_threads_per_core"], [152, 2, 1, "", "profile"], [152, 2, 1, "", "run_instance"], [152, 2, 1, "", "set_all_env_var"], [152, 2, 1, "", "set_env_var"], [152, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[153, 0, 0, "-", "logger"]], "neural_compressor.common.logger": [[153, 1, 1, "", "Logger"], [153, 2, 1, "", "debug"], [153, 2, 1, "", "error"], [153, 2, 1, "", "fatal"], [153, 2, 1, "", "info"], [153, 2, 1, "", "log"], [153, 2, 1, "", "warn"], [153, 2, 1, "", "warning"]], "neural_compressor.compression": [[154, 0, 0, "-", "callbacks"], [156, 0, 0, "-", "distillation"], [159, 0, 0, "-", "hpo"], [162, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[154, 1, 1, "", "BaseCallbacks"], [154, 1, 1, "", "DistillationCallbacks"], [154, 1, 1, "", "PruningCallbacks"], [154, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[154, 4, 1, "", "_epoch_ran"], [154, 4, 1, "", "best_model"], [154, 4, 1, "", "best_score"], [154, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[155, 0, 0, "-", "criterions"], [157, 0, 0, "-", "optimizers"], [158, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[155, 1, 1, "", "Criterions"], [155, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "KnowledgeDistillationFramework"], [155, 1, 1, "", "KnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchCriterions"], [155, 1, 1, "", "PyTorchCrossEntropyLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "SelfKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorFlowCrossEntropyLoss"], [155, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [155, 1, 1, "", "TensorflowCriterions"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[157, 1, 1, "", "Optimizers"], [157, 1, 1, "", "PyTorchOptimizers"], [157, 1, 1, "", "PyTorchSGD"], [157, 1, 1, "", "TensorFlowAdam"], [157, 1, 1, "", "TensorFlowAdamW"], [157, 1, 1, "", "TensorFlowSGD"], [157, 1, 1, "", "TensorflowOptimizers"], [157, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[158, 2, 1, "", "get_activation"], [158, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[160, 0, 0, "-", "sa_optimizer"]], "neural_compressor.compression.pruner": [[161, 0, 0, "-", "criteria"], [164, 0, 0, "-", "model_slim"], [168, 0, 0, "-", "patterns"], [162, 2, 1, "", "prepare_pruning"], [175, 0, 0, "-", "pruners"], [180, 0, 0, "-", "pruning"], [181, 0, 0, "-", "regs"], [162, 2, 1, "", "save"], [182, 0, 0, "-", "schedulers"], [183, 0, 0, "-", "tf_criteria"], [184, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[161, 1, 1, "", "BlockMaskCriterion"], [161, 1, 1, "", "GradientCriterion"], [161, 1, 1, "", "MagnitudeCriterion"], [161, 1, 1, "", "PruningCriterion"], [161, 1, 1, "", "RetrainFreeCriterion"], [161, 1, 1, "", "SnipCriterion"], [161, 1, 1, "", "SnipMomentumCriterion"], [161, 2, 1, "", "get_criterion"], [161, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[163, 0, 0, "-", "auto_slim"], [165, 0, 0, "-", "pattern_analyzer"], [166, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, 2, 1, "", "generate_ffn2_pruning_config"], [163, 2, 1, "", "generate_mha_pruning_config"], [163, 2, 1, "", "model_slim"], [163, 2, 1, "", "model_slim_ffn2"], [163, 2, 1, "", "model_slim_mha"], [163, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, 1, 1, "", "ClassifierHeadSearcher"], [165, 1, 1, "", "ClassifierHeadSearcherTF"], [165, 1, 1, "", "JitBasicSearcher"], [165, 1, 1, "", "Linear2LinearSearcher"], [165, 1, 1, "", "RecipeSearcher"], [165, 1, 1, "", "SelfMHASearcher"], [165, 2, 1, "", "get_attributes"], [165, 2, 1, "", "get_common_module"], [165, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[165, 4, 1, "", "current_pattern"], [165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"], [165, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[165, 4, 1, "", "model"], [165, 4, 1, "", "recipe"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, 1, 1, "", "LinearCompression"], [166, 1, 1, "", "LinearCompressionIterator"], [166, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[166, 4, 1, "", "device"], [166, 4, 1, "", "layer_1"], [166, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[166, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[167, 0, 0, "-", "base"], [168, 2, 1, "", "get_pattern"], [169, 0, 0, "-", "mha"], [170, 0, 0, "-", "ninm"], [171, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[167, 1, 1, "", "BasePattern"], [167, 1, 1, "", "KerasBasePattern"], [167, 1, 1, "", "PytorchBasePattern"], [167, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[169, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[169, 4, 1, "", "M"], [169, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[170, 4, 1, "", "M"], [170, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, 1, 1, "", "KerasPatternNxM"], [171, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[172, 0, 0, "-", "base"], [173, 0, 0, "-", "basic"], [174, 0, 0, "-", "block_mask"], [175, 2, 1, "", "get_pruner"], [176, 0, 0, "-", "mha"], [175, 2, 1, "", "parse_valid_pruner_types"], [177, 0, 0, "-", "pattern_lock"], [178, 0, 0, "-", "progressive"], [179, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[172, 1, 1, "", "BasePruner"], [172, 1, 1, "", "KerasBasePruner"], [172, 1, 1, "", "PytorchBasePruner"], [172, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[173, 1, 1, "", "KerasBasicPruner"], [173, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[174, 4, 1, "", "criterion"], [174, 4, 1, "", "pattern"], [174, 4, 1, "", "reg"], [174, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[176, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[176, 4, 1, "", "head_masks"], [176, 4, 1, "", "linear_layers"], [176, 4, 1, "", "mha_compressions"], [176, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[179, 4, 1, "", "criterion"], [179, 4, 1, "", "pattern"], [179, 4, 1, "", "reg"], [179, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[180, 1, 1, "", "BasePruning"], [180, 1, 1, "", "BasicPruning"], [180, 1, 1, "", "RetrainFreePruning"], [180, 1, 1, "", "SparseGPTPruning"], [180, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[181, 1, 1, "", "BaseReg"], [181, 1, 1, "", "GroupLasso"], [181, 2, 1, "", "get_reg"], [181, 2, 1, "", "get_reg_type"], [181, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[181, 4, 1, "", "alpha"], [181, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[182, 1, 1, "", "IterativeScheduler"], [182, 1, 1, "", "OneshotScheduler"], [182, 1, 1, "", "PruningScheduler"], [182, 2, 1, "", "get_scheduler"], [182, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[182, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[183, 1, 1, "", "MagnitudeCriterion"], [183, 1, 1, "", "PruningCriterion"], [183, 2, 1, "", "get_tf_criterion"], [183, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[184, 2, 1, "", "check_config"], [184, 2, 1, "", "check_key_validity"], [184, 2, 1, "", "collect_layer_inputs"], [184, 2, 1, "", "generate_pruner_config"], [184, 2, 1, "", "get_layers"], [184, 2, 1, "", "get_sparsity_ratio"], [184, 2, 1, "", "get_sparsity_ratio_tf"], [184, 2, 1, "", "parse_last_linear"], [184, 2, 1, "", "parse_last_linear_tf"], [184, 2, 1, "", "parse_to_prune"], [184, 2, 1, "", "parse_to_prune_tf"], [184, 2, 1, "", "process_and_check_config"], [184, 2, 1, "", "process_config"], [184, 2, 1, "", "process_weight_config"], [184, 2, 1, "", "process_yaml_config"], [184, 2, 1, "", "reset_none_to_default"], [184, 2, 1, "", "update_params"]], "neural_compressor.conf": [[185, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.pythonic_config": [[185, 1, 1, "", "AccuracyCriterion"], [185, 1, 1, "", "BenchmarkConfig"], [185, 1, 1, "", "DistillationConfig"], [185, 1, 1, "", "KnowledgeDistillationLossConfig"], [185, 1, 1, "", "Options"], [185, 1, 1, "", "QuantizationConfig"], [185, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[186, 1, 1, "", "AccuracyCriterion"], [186, 1, 1, "", "BenchmarkConfig"], [186, 1, 1, "", "DistillationConfig"], [186, 1, 1, "", "DotDict"], [186, 1, 1, "", "ExportConfig"], [186, 1, 1, "", "HPOConfig"], [186, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [186, 1, 1, "", "Keras"], [186, 1, 1, "", "KnowledgeDistillationLossConfig"], [186, 1, 1, "", "MXNet"], [186, 1, 1, "", "MixedPrecisionConfig"], [186, 1, 1, "", "NASConfig"], [186, 1, 1, "", "ONNX"], [186, 1, 1, "", "ONNXQlinear2QDQConfig"], [186, 1, 1, "", "Options"], [186, 1, 1, "", "PostTrainingQuantConfig"], [186, 1, 1, "", "PyTorch"], [186, 1, 1, "", "QuantizationAwareTrainingConfig"], [186, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [186, 1, 1, "", "TF2ONNXConfig"], [186, 1, 1, "", "TensorFlow"], [186, 1, 1, "", "Torch2ONNXConfig"], [186, 1, 1, "", "TuningCriterion"], [186, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[188, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[189, 0, 0, "-", "sigopt"], [190, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[189, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[190, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[206, 0, 0, "-", "datasets"], [210, 0, 0, "-", "filters"], [213, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[191, 0, 0, "-", "base_dataloader"], [192, 0, 0, "-", "dataloader"], [193, 0, 0, "-", "default_dataloader"], [194, 0, 0, "-", "fetcher"], [195, 0, 0, "-", "mxnet_dataloader"], [196, 0, 0, "-", "onnxrt_dataloader"], [197, 0, 0, "-", "pytorch_dataloader"], [198, 0, 0, "-", "sampler"], [199, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[191, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[192, 1, 1, "", "DataLoader"], [192, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[193, 1, 1, "", "DefaultDataLoader"], [193, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[194, 1, 1, "", "Fetcher"], [194, 1, 1, "", "IndexFetcher"], [194, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, 1, 1, "", "ONNXRTBertDataLoader"], [196, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[198, 1, 1, "", "BatchSampler"], [198, 1, 1, "", "IterableSampler"], [198, 1, 1, "", "Sampler"], [198, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, 1, 1, "", "TFDataDataLoader"], [199, 1, 1, "", "TensorflowBertDataLoader"], [199, 1, 1, "", "TensorflowDataLoader"], [199, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[200, 0, 0, "-", "bert_dataset"], [201, 0, 0, "-", "coco_dataset"], [202, 0, 0, "-", "dataset"], [203, 0, 0, "-", "dummy_dataset"], [204, 0, 0, "-", "dummy_dataset_v2"], [205, 0, 0, "-", "imagenet_dataset"], [207, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[200, 1, 1, "", "InputFeatures"], [200, 1, 1, "", "ONNXRTBertDataset"], [200, 1, 1, "", "ParseDecodeBert"], [200, 1, 1, "", "PytorchBertDataset"], [200, 1, 1, "", "TensorflowBertDataset"], [200, 1, 1, "", "TensorflowModelZooBertDataset"], [200, 2, 1, "", "convert_examples_to_features"], [200, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[201, 1, 1, "", "COCONpy"], [201, 1, 1, "", "COCORaw"], [201, 1, 1, "", "COCORecordDataset"], [201, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[202, 1, 1, "", "CIFAR10"], [202, 1, 1, "", "CIFAR100"], [202, 1, 1, "", "Dataset"], [202, 1, 1, "", "Datasets"], [202, 1, 1, "", "FashionMNIST"], [202, 1, 1, "", "ImageFolder"], [202, 1, 1, "", "IterableDataset"], [202, 1, 1, "", "MNIST"], [202, 1, 1, "", "MXNetCIFAR10"], [202, 1, 1, "", "MXNetCIFAR100"], [202, 1, 1, "", "MXNetDatasets"], [202, 1, 1, "", "MXNetFashionMNIST"], [202, 1, 1, "", "MXNetImageFolder"], [202, 1, 1, "", "MXNetMNIST"], [202, 1, 1, "", "ONNXRTITDatasets"], [202, 1, 1, "", "ONNXRTQLDatasets"], [202, 1, 1, "", "PyTorchDatasets"], [202, 1, 1, "", "PytorchCIFAR10"], [202, 1, 1, "", "PytorchCIFAR100"], [202, 1, 1, "", "PytorchFashionMNIST"], [202, 1, 1, "", "PytorchMNIST"], [202, 1, 1, "", "PytorchMxnetWrapDataset"], [202, 1, 1, "", "PytorchMxnetWrapFunction"], [202, 1, 1, "", "Tensorflow"], [202, 1, 1, "", "TensorflowCIFAR10"], [202, 1, 1, "", "TensorflowCIFAR100"], [202, 1, 1, "", "TensorflowDatasets"], [202, 1, 1, "", "TensorflowFashionMNIST"], [202, 1, 1, "", "TensorflowImageRecord"], [202, 1, 1, "", "TensorflowMNIST"], [202, 1, 1, "", "TensorflowTFRecordDataset"], [202, 1, 1, "", "TensorflowVOCRecord"], [202, 2, 1, "", "calculate_md5"], [202, 2, 1, "", "check_integrity"], [202, 2, 1, "", "dataset_registry"], [202, 2, 1, "", "download_url"], [202, 5, 1, "", "framework_datasets"], [202, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[203, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, 1, 1, "", "DummyDataset"], [204, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, 1, 1, "", "ImagenetRaw"], [205, 1, 1, "", "MXNetImagenetRaw"], [205, 1, 1, "", "ONNXRTImagenetDataset"], [205, 1, 1, "", "PytorchImagenetRaw"], [205, 1, 1, "", "TensorflowImagenetDataset"], [205, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[208, 0, 0, "-", "coco_filter"], [209, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[208, 1, 1, "", "LabelBalanceCOCORawFilter"], [208, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[209, 1, 1, "", "FILTERS"], [209, 1, 1, "", "Filter"], [209, 1, 1, "", "MXNetFilters"], [209, 1, 1, "", "ONNXRTITFilters"], [209, 1, 1, "", "ONNXRTQLFilters"], [209, 1, 1, "", "PyTorchFilters"], [209, 1, 1, "", "TensorflowFilters"], [209, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[212, 0, 0, "-", "imagenet_transform"], [214, 0, 0, "-", "postprocess"], [215, 0, 0, "-", "tokenization"], [216, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, 1, 1, "", "BilinearImagenetTransform"], [212, 1, 1, "", "LabelShift"], [212, 1, 1, "", "ONNXResizeCropImagenetTransform"], [212, 1, 1, "", "OnnxBilinearImagenetTransform"], [212, 1, 1, "", "ParseDecodeImagenet"], [212, 1, 1, "", "ParseDecodeImagenetTransform"], [212, 1, 1, "", "QuantizedInput"], [212, 1, 1, "", "ResizeWithAspectRatio"], [212, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [212, 1, 1, "", "TensorflowShiftRescale"], [212, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[214, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, 1, 1, "", "BasicTokenizer"], [215, 1, 1, "", "FullTokenizer"], [215, 1, 1, "", "WordpieceTokenizer"], [215, 2, 1, "", "convert_by_vocab"], [215, 2, 1, "", "convert_to_unicode"], [215, 2, 1, "", "load_vocab"], [215, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[216, 1, 1, "", "AlignImageChannelTransform"], [216, 1, 1, "", "BaseTransform"], [216, 1, 1, "", "CastONNXTransform"], [216, 1, 1, "", "CastPyTorchTransform"], [216, 1, 1, "", "CastTFTransform"], [216, 1, 1, "", "CenterCropTFTransform"], [216, 1, 1, "", "CenterCropTransform"], [216, 1, 1, "", "CollectTransform"], [216, 1, 1, "", "ComposeTransform"], [216, 1, 1, "", "CropResizeTFTransform"], [216, 1, 1, "", "CropResizeTransform"], [216, 1, 1, "", "CropToBoundingBox"], [216, 1, 1, "", "InputFeatures"], [216, 1, 1, "", "MXNetCropResizeTransform"], [216, 1, 1, "", "MXNetCropToBoundingBox"], [216, 1, 1, "", "MXNetNormalizeTransform"], [216, 1, 1, "", "MXNetTransforms"], [216, 1, 1, "", "MXNetTranspose"], [216, 1, 1, "", "NormalizeTFTransform"], [216, 1, 1, "", "NormalizeTransform"], [216, 1, 1, "", "ONNXRTCropToBoundingBox"], [216, 1, 1, "", "ONNXRTITTransforms"], [216, 1, 1, "", "ONNXRTQLTransforms"], [216, 1, 1, "", "PaddedCenterCropTransform"], [216, 1, 1, "", "ParseDecodeVocTransform"], [216, 1, 1, "", "PyTorchAlignImageChannel"], [216, 1, 1, "", "PyTorchCropResizeTransform"], [216, 1, 1, "", "PyTorchNormalizeTransform"], [216, 1, 1, "", "PyTorchTransforms"], [216, 1, 1, "", "PyTorchTranspose"], [216, 1, 1, "", "PytorchMxnetTransform"], [216, 1, 1, "", "PytorchMxnetWrapFunction"], [216, 1, 1, "", "RandomCropTFTransform"], [216, 1, 1, "", "RandomCropTransform"], [216, 1, 1, "", "RandomHorizontalFlip"], [216, 1, 1, "", "RandomResizedCropMXNetTransform"], [216, 1, 1, "", "RandomResizedCropPytorchTransform"], [216, 1, 1, "", "RandomResizedCropTFTransform"], [216, 1, 1, "", "RandomResizedCropTransform"], [216, 1, 1, "", "RandomVerticalFlip"], [216, 1, 1, "", "RescaleKerasPretrainTransform"], [216, 1, 1, "", "RescaleTFTransform"], [216, 1, 1, "", "RescaleTransform"], [216, 1, 1, "", "ResizeMXNetTransform"], [216, 1, 1, "", "ResizePytorchTransform"], [216, 1, 1, "", "ResizeTFTransform"], [216, 1, 1, "", "ResizeTransform"], [216, 1, 1, "", "ResizeWithRatio"], [216, 1, 1, "", "SquadExample"], [216, 1, 1, "", "TFModelZooCollectTransform"], [216, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [216, 1, 1, "", "TFSquadV1PostTransform"], [216, 1, 1, "", "TRANSFORMS"], [216, 1, 1, "", "TensorflowCropToBoundingBox"], [216, 1, 1, "", "TensorflowRandomHorizontalFlip"], [216, 1, 1, "", "TensorflowRandomVerticalFlip"], [216, 1, 1, "", "TensorflowResizeWithRatio"], [216, 1, 1, "", "TensorflowTransform"], [216, 1, 1, "", "TensorflowTransforms"], [216, 1, 1, "", "TensorflowTranspose"], [216, 1, 1, "", "TensorflowWrapFunction"], [216, 1, 1, "", "ToArray"], [216, 1, 1, "", "ToNDArrayTransform"], [216, 1, 1, "", "Transforms"], [216, 1, 1, "", "Transpose"], [216, 2, 1, "", "convert_examples_to_features"], [216, 2, 1, "", "get_final_text"], [216, 2, 1, "", "get_torchvision_map"], [216, 2, 1, "", "read_squad_examples"], [216, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[217, 0, 0, "-", "benchmark"], [220, 0, 0, "-", "common"], [226, 0, 0, "-", "component"], [227, 0, 0, "-", "compression"], [228, 0, 0, "-", "contrib"], [253, 0, 0, "-", "data"], [258, 0, 0, "-", "distillation"], [259, 0, 0, "-", "export"], [263, 0, 0, "-", "graph_optimization"], [271, 0, 0, "-", "metric"], [273, 0, 0, "-", "mixed_precision"], [274, 0, 0, "-", "model_conversion"], [277, 0, 0, "-", "nas"], [283, 0, 0, "-", "pruner_legacy"], [287, 0, 0, "-", "pruning"], [288, 0, 0, "-", "pruning_recipes"], [292, 0, 0, "-", "pruning_v2"], [293, 0, 0, "-", "pytorch_pruner"], [300, 0, 0, "-", "quantization"], [301, 0, 0, "-", "scheduler"], [306, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[217, 1, 1, "", "Benchmark"], [217, 2, 1, "", "get_architecture"], [217, 2, 1, "", "get_bounded_threads"], [217, 2, 1, "", "get_core_ids"], [217, 2, 1, "", "get_physical_ids"], [217, 2, 1, "", "get_threads"], [217, 2, 1, "", "get_threads_per_core"], [217, 2, 1, "", "set_all_env_var"], [217, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[218, 0, 0, "-", "criterion"], [219, 0, 0, "-", "dataloader"], [221, 0, 0, "-", "metric"], [222, 0, 0, "-", "model"], [223, 0, 0, "-", "optimizer"], [224, 0, 0, "-", "postprocess"], [225, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[218, 1, 1, "", "Criterions"], [218, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [218, 1, 1, "", "KnowledgeDistillationFramework"], [218, 1, 1, "", "KnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchCriterions"], [218, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "SelfKnowledgeDistillationLoss"], [218, 1, 1, "", "TensorflowCriterions"], [218, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [218, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[219, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[221, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[222, 1, 1, "", "Model"], [222, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[223, 1, 1, "", "Optimizers"], [223, 1, 1, "", "PyTorchOptimizers"], [223, 1, 1, "", "PyTorchSGD"], [223, 1, 1, "", "TensorFlowAdamW"], [223, 1, 1, "", "TensorFlowSGD"], [223, 1, 1, "", "TensorflowOptimizers"], [223, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[224, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, 2, 1, "", "get_activation"], [225, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[226, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[229, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[230, 0, 0, "-", "sigopt"], [231, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[236, 0, 0, "-", "dataloaders"], [248, 0, 0, "-", "datasets"], [252, 0, 0, "-", "filters"], [255, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[232, 0, 0, "-", "base_dataloader"], [233, 0, 0, "-", "dataloader"], [234, 0, 0, "-", "default_dataloader"], [235, 0, 0, "-", "fetcher"], [237, 0, 0, "-", "mxnet_dataloader"], [238, 0, 0, "-", "onnxrt_dataloader"], [239, 0, 0, "-", "pytorch_dataloader"], [240, 0, 0, "-", "sampler"], [241, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, 1, 1, "", "DefaultDataLoader"], [234, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, 1, 1, "", "Fetcher"], [235, 1, 1, "", "IndexFetcher"], [235, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, 1, 1, "", "ONNXRTBertDataLoader"], [238, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, 1, 1, "", "BatchSampler"], [240, 1, 1, "", "IterableSampler"], [240, 1, 1, "", "Sampler"], [240, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, 1, 1, "", "TFDataDataLoader"], [241, 1, 1, "", "TensorflowBertDataLoader"], [241, 1, 1, "", "TensorflowDataLoader"], [241, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[242, 0, 0, "-", "bert_dataset"], [243, 0, 0, "-", "coco_dataset"], [244, 0, 0, "-", "dataset"], [245, 0, 0, "-", "dummy_dataset"], [246, 0, 0, "-", "dummy_dataset_v2"], [247, 0, 0, "-", "imagenet_dataset"], [249, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, 1, 1, "", "InputFeatures"], [242, 1, 1, "", "ONNXRTBertDataset"], [242, 1, 1, "", "ParseDecodeBert"], [242, 1, 1, "", "PytorchBertDataset"], [242, 1, 1, "", "TensorflowBertDataset"], [242, 1, 1, "", "TensorflowModelZooBertDataset"], [242, 2, 1, "", "convert_examples_to_features"], [242, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, 1, 1, "", "COCONpy"], [243, 1, 1, "", "COCORaw"], [243, 1, 1, "", "COCORecordDataset"], [243, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[244, 1, 1, "", "CIFAR10"], [244, 1, 1, "", "CIFAR100"], [244, 1, 1, "", "Dataset"], [244, 1, 1, "", "Datasets"], [244, 1, 1, "", "FashionMNIST"], [244, 1, 1, "", "ImageFolder"], [244, 1, 1, "", "IterableDataset"], [244, 1, 1, "", "MNIST"], [244, 1, 1, "", "MXNetCIFAR10"], [244, 1, 1, "", "MXNetCIFAR100"], [244, 1, 1, "", "MXNetDatasets"], [244, 1, 1, "", "MXNetFashionMNIST"], [244, 1, 1, "", "MXNetImageFolder"], [244, 1, 1, "", "MXNetMNIST"], [244, 1, 1, "", "ONNXRTITDatasets"], [244, 1, 1, "", "ONNXRTQLDatasets"], [244, 1, 1, "", "PyTorchDatasets"], [244, 1, 1, "", "PytorchCIFAR10"], [244, 1, 1, "", "PytorchCIFAR100"], [244, 1, 1, "", "PytorchFashionMNIST"], [244, 1, 1, "", "PytorchMNIST"], [244, 1, 1, "", "PytorchMxnetWrapDataset"], [244, 1, 1, "", "PytorchMxnetWrapFunction"], [244, 1, 1, "", "TensorflowCIFAR10"], [244, 1, 1, "", "TensorflowCIFAR100"], [244, 1, 1, "", "TensorflowDatasets"], [244, 1, 1, "", "TensorflowFashionMNIST"], [244, 1, 1, "", "TensorflowImageFolder"], [244, 1, 1, "", "TensorflowImageRecord"], [244, 1, 1, "", "TensorflowMNIST"], [244, 1, 1, "", "TensorflowTFRecordDataset"], [244, 1, 1, "", "TensorflowVOCRecord"], [244, 2, 1, "", "calculate_md5"], [244, 2, 1, "", "check_integrity"], [244, 2, 1, "", "dataset_registry"], [244, 2, 1, "", "download_url"], [244, 5, 1, "", "framework_datasets"], [244, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, 1, 1, "", "DummyDataset"], [246, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, 1, 1, "", "ImagenetRaw"], [247, 1, 1, "", "MXNetImagenetRaw"], [247, 1, 1, "", "ONNXRTImagenetDataset"], [247, 1, 1, "", "PytorchImagenetRaw"], [247, 1, 1, "", "TensorflowImagenetDataset"], [247, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[250, 0, 0, "-", "coco_filter"], [251, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[250, 1, 1, "", "LabelBalanceCOCORawFilter"], [250, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[251, 1, 1, "", "FILTERS"], [251, 1, 1, "", "Filter"], [251, 1, 1, "", "MXNetFilters"], [251, 1, 1, "", "ONNXRTITFilters"], [251, 1, 1, "", "ONNXRTQLFilters"], [251, 1, 1, "", "PyTorchFilters"], [251, 1, 1, "", "TensorflowFilters"], [251, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[254, 0, 0, "-", "imagenet_transform"], [256, 0, 0, "-", "tokenization"], [257, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, 1, 1, "", "BilinearImagenetTransform"], [254, 1, 1, "", "LabelShift"], [254, 1, 1, "", "ONNXResizeCropImagenetTransform"], [254, 1, 1, "", "OnnxBilinearImagenetTransform"], [254, 1, 1, "", "ParseDecodeImagenet"], [254, 1, 1, "", "ParseDecodeImagenetTransform"], [254, 1, 1, "", "QuantizedInput"], [254, 1, 1, "", "ResizeWithAspectRatio"], [254, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[256, 1, 1, "", "BasicTokenizer"], [256, 1, 1, "", "FullTokenizer"], [256, 1, 1, "", "WordpieceTokenizer"], [256, 2, 1, "", "convert_by_vocab"], [256, 2, 1, "", "convert_to_unicode"], [256, 2, 1, "", "load_vocab"], [256, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[257, 1, 1, "", "AlignImageChannelTransform"], [257, 1, 1, "", "BaseTransform"], [257, 1, 1, "", "CastONNXTransform"], [257, 1, 1, "", "CastPyTorchTransform"], [257, 1, 1, "", "CastTFTransform"], [257, 1, 1, "", "CenterCropTFTransform"], [257, 1, 1, "", "CenterCropTransform"], [257, 1, 1, "", "CollectTransform"], [257, 1, 1, "", "ComposeTransform"], [257, 1, 1, "", "CropResizeTFTransform"], [257, 1, 1, "", "CropResizeTransform"], [257, 1, 1, "", "CropToBoundingBox"], [257, 1, 1, "", "InputFeatures"], [257, 1, 1, "", "MXNetCropResizeTransform"], [257, 1, 1, "", "MXNetCropToBoundingBox"], [257, 1, 1, "", "MXNetNormalizeTransform"], [257, 1, 1, "", "MXNetTransforms"], [257, 1, 1, "", "MXNetTranspose"], [257, 1, 1, "", "NormalizeTFTransform"], [257, 1, 1, "", "NormalizeTransform"], [257, 1, 1, "", "ONNXRTCropToBoundingBox"], [257, 1, 1, "", "ONNXRTITTransforms"], [257, 1, 1, "", "ONNXRTQLTransforms"], [257, 1, 1, "", "PaddedCenterCropTransform"], [257, 1, 1, "", "ParseDecodeVocTransform"], [257, 1, 1, "", "PyTorchAlignImageChannel"], [257, 1, 1, "", "PyTorchCropResizeTransform"], [257, 1, 1, "", "PyTorchNormalizeTransform"], [257, 1, 1, "", "PyTorchTransforms"], [257, 1, 1, "", "PyTorchTranspose"], [257, 1, 1, "", "PytorchMxnetTransform"], [257, 1, 1, "", "PytorchMxnetWrapFunction"], [257, 1, 1, "", "RandomCropTFTransform"], [257, 1, 1, "", "RandomCropTransform"], [257, 1, 1, "", "RandomHorizontalFlip"], [257, 1, 1, "", "RandomResizedCropMXNetTransform"], [257, 1, 1, "", "RandomResizedCropPytorchTransform"], [257, 1, 1, "", "RandomResizedCropTFTransform"], [257, 1, 1, "", "RandomResizedCropTransform"], [257, 1, 1, "", "RandomVerticalFlip"], [257, 1, 1, "", "RescaleKerasPretrainTransform"], [257, 1, 1, "", "RescaleTFTransform"], [257, 1, 1, "", "RescaleTransform"], [257, 1, 1, "", "ResizeMXNetTransform"], [257, 1, 1, "", "ResizePytorchTransform"], [257, 1, 1, "", "ResizeTFTransform"], [257, 1, 1, "", "ResizeTransform"], [257, 1, 1, "", "ResizeWithRatio"], [257, 1, 1, "", "SquadExample"], [257, 1, 1, "", "TFModelZooCollectTransform"], [257, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [257, 1, 1, "", "TFSquadV1PostTransform"], [257, 1, 1, "", "TRANSFORMS"], [257, 1, 1, "", "TensorflowCropToBoundingBox"], [257, 1, 1, "", "TensorflowRandomHorizontalFlip"], [257, 1, 1, "", "TensorflowRandomVerticalFlip"], [257, 1, 1, "", "TensorflowResizeWithRatio"], [257, 1, 1, "", "TensorflowTransform"], [257, 1, 1, "", "TensorflowTransforms"], [257, 1, 1, "", "TensorflowTranspose"], [257, 1, 1, "", "TensorflowWrapFunction"], [257, 1, 1, "", "ToArray"], [257, 1, 1, "", "ToNDArrayTransform"], [257, 1, 1, "", "Transforms"], [257, 1, 1, "", "Transpose"], [257, 2, 1, "", "convert_examples_to_features"], [257, 2, 1, "", "get_final_text"], [257, 2, 1, "", "get_torchvision_map"], [257, 2, 1, "", "read_squad_examples"], [257, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[258, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[258, 4, 1, "", "_epoch_ran"], [258, 4, 1, "", "best_model"], [258, 4, 1, "", "best_score"], [258, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[260, 0, 0, "-", "qlinear2qdq"], [261, 0, 0, "-", "tf2onnx"], [262, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[260, 2, 1, "", "check_model"], [260, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[261, 2, 1, "", "tf_to_fp32_onnx"], [261, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[262, 2, 1, "", "dynamic_quant_export"], [262, 2, 1, "", "get_node_mapping"], [262, 2, 1, "", "get_quantizable_onnx_ops"], [262, 2, 1, "", "static_quant_export"], [262, 2, 1, "", "torch_to_fp32_onnx"], [262, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[263, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[265, 0, 0, "-", "bleu"], [266, 0, 0, "-", "bleu_util"], [267, 0, 0, "-", "coco_label_map"], [268, 0, 0, "-", "coco_tools"], [269, 0, 0, "-", "evaluate_squad"], [270, 0, 0, "-", "f1"], [272, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[265, 1, 1, "", "BLEU"], [265, 1, 1, "", "UnicodeRegex"], [265, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[265, 4, 1, "", "labels"], [265, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[265, 4, 1, "", "nondigit_punct_re"], [265, 4, 1, "", "punct_nondigit_re"], [265, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[266, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[268, 1, 1, "", "COCOEvalWrapper"], [268, 1, 1, "", "COCOWrapper"], [268, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [268, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [268, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[268, 4, 1, "", "dataset"], [268, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[269, 2, 1, "", "evaluate"], [269, 2, 1, "", "exact_match_score"], [269, 2, 1, "", "f1_score"], [269, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[270, 2, 1, "", "evaluate"], [270, 2, 1, "", "f1_score"], [270, 2, 1, "", "metric_max_over_ground_truths"], [270, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[272, 1, 1, "", "Accuracy"], [272, 1, 1, "", "BaseMetric"], [272, 1, 1, "", "COCOmAPv2"], [272, 1, 1, "", "F1"], [272, 1, 1, "", "GeneralTopK"], [272, 1, 1, "", "Loss"], [272, 1, 1, "", "MAE"], [272, 1, 1, "", "METRICS"], [272, 1, 1, "", "MSE"], [272, 1, 1, "", "MXNetMetrics"], [272, 1, 1, "", "ONNXRTGLUE"], [272, 1, 1, "", "ONNXRTITMetrics"], [272, 1, 1, "", "ONNXRTQLMetrics"], [272, 1, 1, "", "PyTorchLoss"], [272, 1, 1, "", "PyTorchMetrics"], [272, 1, 1, "", "RMSE"], [272, 1, 1, "", "ROC"], [272, 1, 1, "", "SquadF1"], [272, 1, 1, "", "TensorflowCOCOMAP"], [272, 1, 1, "", "TensorflowMAP"], [272, 1, 1, "", "TensorflowMetrics"], [272, 1, 1, "", "TensorflowTopK"], [272, 1, 1, "", "TensorflowVOCMAP"], [272, 1, 1, "", "WrapMXNetMetric"], [272, 1, 1, "", "WrapONNXRTMetric"], [272, 1, 1, "", "WrapPyTorchMetric"], [272, 1, 1, "", "mIOU"], [272, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[272, 4, 1, "", "label_list"], [272, 4, 1, "", "pred_list"], [272, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[272, 4, 1, "", "k"], [272, 4, 1, "", "num_correct"], [272, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[272, 4, 1, "", "sample"], [272, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[272, 4, 1, "", "compare_label"], [272, 4, 1, "", "label_list"], [272, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[272, 4, 1, "", "compare_label"], [272, 4, 1, "", "label_list"], [272, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[272, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[272, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[272, 4, 1, "", "k"], [272, 4, 1, "", "num_correct"], [272, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[273, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[274, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[275, 0, 0, "-", "basic_nas"], [276, 0, 0, "-", "dynas"], [278, 0, 0, "-", "nas"], [279, 0, 0, "-", "nas_utils"], [280, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[275, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[276, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[278, 1, 1, "", "NAS"], [278, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[279, 2, 1, "", "create_search_space_pool"], [279, 2, 1, "", "find_pareto_front"], [279, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[280, 1, 1, "", "BayesianOptimizationSearcher"], [280, 1, 1, "", "GridSearcher"], [280, 1, 1, "", "RandomSearcher"], [280, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[281, 0, 0, "-", "gradient_sensitivity"], [282, 0, 0, "-", "group_lasso"], [284, 0, 0, "-", "magnitude"], [285, 0, 0, "-", "pattern_lock"], [286, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, 1, 1, "", "Pruner"], [286, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[287, 1, 1, "", "Pruning"], [287, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[287, 4, 1, "", "conf"], [287, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[289, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[290, 0, 0, "-", "pattern"], [291, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, 1, 1, "", "PATTERNS"], [290, 1, 1, "", "PatternBase"], [290, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[290, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, 1, 1, "", "TilePatternBase"], [291, 1, 1, "", "TilePattern_1x1"], [291, 1, 1, "", "TilePattern_1x16"], [291, 1, 1, "", "TilePattern_1x2"], [291, 1, 1, "", "TilePattern_2x2"], [291, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[292, 1, 1, "", "Pruning"], [292, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[292, 4, 1, "", "conf"], [292, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[294, 0, 0, "-", "logger"], [295, 0, 0, "-", "patterns"], [296, 0, 0, "-", "prune_utils"], [297, 0, 0, "-", "pruner"], [298, 0, 0, "-", "pruning"], [299, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, 1, 1, "", "Pattern"], [295, 1, 1, "", "PatternNInM"], [295, 1, 1, "", "PatternNxM"], [295, 2, 1, "", "get_pattern"], [295, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[295, 4, 1, "", "is_global"], [295, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[295, 4, 1, "", "M"], [295, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[295, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, 2, 1, "", "check_config"], [296, 2, 1, "", "parse_not_to_prune"], [296, 2, 1, "", "parse_to_prune"], [296, 2, 1, "", "process_and_check_config"], [296, 2, 1, "", "process_config"], [296, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, 1, 1, "", "MagnitudePruner"], [297, 1, 1, "", "PatternLockPruner"], [297, 1, 1, "", "Pruner"], [297, 1, 1, "", "SnipMomentumPruner"], [297, 1, 1, "", "SnipPruner"], [297, 2, 1, "", "get_pruner"], [297, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[297, 4, 1, "", "config"], [297, 4, 1, "", "current_sparsity_ratio"], [297, 4, 1, "", "end_step"], [297, 4, 1, "", "global_step"], [297, 4, 1, "", "masks"], [297, 4, 1, "", "max_sparsity_ratio_per_layer"], [297, 4, 1, "", "modules"], [297, 4, 1, "", "pattern"], [297, 4, 1, "", "scheduler"], [297, 4, 1, "", "scores"], [297, 4, 1, "", "start_step"], [297, 4, 1, "", "target_sparsity_ratio"], [297, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[298, 4, 1, "", "config_file_path"], [298, 4, 1, "", "model"], [298, 4, 1, "", "pruner_info"], [298, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, 1, 1, "", "IterativeScheduler"], [299, 1, 1, "", "OneshotScheduler"], [299, 1, 1, "", "Scheduler"], [299, 2, 1, "", "get_scheduler"], [299, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[299, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[300, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[301, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[302, 0, 0, "-", "auto_mixed_precision"], [303, 0, 0, "-", "basic"], [304, 0, 0, "-", "bayesian"], [305, 0, 0, "-", "exhaustive"], [307, 0, 0, "-", "mse"], [308, 0, 0, "-", "mse_v2"], [309, 0, 0, "-", "random"], [310, 0, 0, "-", "strategy"], [312, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[303, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[304, 1, 1, "", "BayesianOptimization"], [304, 1, 1, "", "BayesianTuneStrategy"], [304, 1, 1, "", "TargetSpace"], [304, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[305, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[307, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[308, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[309, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[310, 1, 1, "", "TuneStrategy"], [310, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[311, 0, 0, "-", "constant"], [313, 0, 0, "-", "tuning_sampler"], [314, 0, 0, "-", "tuning_space"], [315, 0, 0, "-", "tuning_structs"], [316, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, 1, 1, "", "FallbackTuningSampler"], [313, 1, 1, "", "ModelWiseTuningSampler"], [313, 1, 1, "", "OpTypeWiseTuningSampler"], [313, 1, 1, "", "OpWiseTuningSampler"], [313, 1, 1, "", "SmoothQuantSampler"], [313, 1, 1, "", "TuningOrder"], [313, 1, 1, "", "TuningSampler"], [313, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, 1, 1, "", "TuningItem"], [314, 1, 1, "", "TuningSpace"], [314, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [314, 2, 1, "", "pattern_to_internal"], [314, 2, 1, "", "pattern_to_path"], [314, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[316, 1, 1, "", "OrderedDefaultDict"], [316, 2, 1, "", "extract_data_type"], [316, 2, 1, "", "get_adaptor_name"], [316, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[318, 0, 0, "-", "bleu"], [319, 0, 0, "-", "bleu_util"], [320, 0, 0, "-", "coco_label_map"], [321, 0, 0, "-", "coco_tools"], [322, 0, 0, "-", "evaluate_squad"], [323, 0, 0, "-", "f1"], [325, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[318, 1, 1, "", "BLEU"], [318, 1, 1, "", "UnicodeRegex"], [318, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[318, 4, 1, "", "labels"], [318, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[318, 4, 1, "", "nondigit_punct_re"], [318, 4, 1, "", "punct_nondigit_re"], [318, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[319, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[321, 1, 1, "", "COCOEvalWrapper"], [321, 1, 1, "", "COCOWrapper"], [321, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [321, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [321, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[321, 4, 1, "", "dataset"], [321, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[322, 2, 1, "", "evaluate"], [322, 2, 1, "", "exact_match_score"], [322, 2, 1, "", "f1_score"], [322, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[323, 2, 1, "", "evaluate"], [323, 2, 1, "", "f1_score"], [323, 2, 1, "", "metric_max_over_ground_truths"], [323, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[325, 1, 1, "", "Accuracy"], [325, 1, 1, "", "BaseMetric"], [325, 1, 1, "", "COCOmAPv2"], [325, 1, 1, "", "F1"], [325, 1, 1, "", "GeneralTopK"], [325, 1, 1, "", "Loss"], [325, 1, 1, "", "MAE"], [325, 1, 1, "", "METRICS"], [325, 1, 1, "", "MSE"], [325, 1, 1, "", "MXNetMetrics"], [325, 1, 1, "", "Metric"], [325, 1, 1, "", "ONNXRTGLUE"], [325, 1, 1, "", "ONNXRTITMetrics"], [325, 1, 1, "", "ONNXRTQLMetrics"], [325, 1, 1, "", "PyTorchLoss"], [325, 1, 1, "", "PyTorchMetrics"], [325, 1, 1, "", "RMSE"], [325, 1, 1, "", "ROC"], [325, 1, 1, "", "SquadF1"], [325, 1, 1, "", "TensorflowCOCOMAP"], [325, 1, 1, "", "TensorflowMAP"], [325, 1, 1, "", "TensorflowMetrics"], [325, 1, 1, "", "TensorflowTopK"], [325, 1, 1, "", "TensorflowVOCMAP"], [325, 1, 1, "", "WrapMXNetMetric"], [325, 1, 1, "", "WrapONNXRTMetric"], [325, 1, 1, "", "WrapPyTorchMetric"], [325, 1, 1, "", "mIOU"], [325, 2, 1, "", "metric_registry"], [325, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"], [325, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[325, 4, 1, "", "k"], [325, 4, 1, "", "num_correct"], [325, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[325, 4, 1, "", "sample"], [325, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[325, 4, 1, "", "compare_label"], [325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[325, 4, 1, "", "compare_label"], [325, 4, 1, "", "label_list"], [325, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[325, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[325, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[325, 4, 1, "", "k"], [325, 4, 1, "", "num_correct"], [325, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[326, 2, 1, "", "fit"]], "neural_compressor.model": [[327, 0, 0, "-", "base_model"], [329, 0, 0, "-", "keras_model"], [330, 0, 0, "-", "model"], [331, 0, 0, "-", "mxnet_model"], [332, 0, 0, "-", "nets_factory"], [333, 0, 0, "-", "onnx_model"], [334, 0, 0, "-", "tensorflow_model"], [335, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[327, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[329, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[330, 1, 1, "", "Model"], [330, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[331, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[332, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[333, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[334, 1, 1, "", "TensorflowBaseModel"], [334, 1, 1, "", "TensorflowCheckpointModel"], [334, 1, 1, "", "TensorflowLLMModel"], [334, 1, 1, "", "TensorflowModel"], [334, 1, 1, "", "TensorflowQATModel"], [334, 1, 1, "", "TensorflowSavedModelModel"], [334, 2, 1, "", "checkpoint_session"], [334, 2, 1, "", "estimator_session"], [334, 2, 1, "", "frozen_pb_session"], [334, 2, 1, "", "get_model_type"], [334, 2, 1, "", "graph_def_session"], [334, 2, 1, "", "graph_session"], [334, 2, 1, "", "keras_session"], [334, 2, 1, "", "load_saved_model"], [334, 2, 1, "", "saved_model_session"], [334, 2, 1, "", "slim_session"], [334, 2, 1, "", "validate_and_inference_input_output"], [334, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[335, 1, 1, "", "IPEXModel"], [335, 1, 1, "", "PyTorchBaseModel"], [335, 1, 1, "", "PyTorchFXModel"], [335, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[336, 1, 1, "", "Accuracy"], [336, 1, 1, "", "Footprint"], [336, 1, 1, "", "ModelSize"], [336, 1, 1, "", "MultiObjective"], [336, 1, 1, "", "Objective"], [336, 1, 1, "", "Performance"], [336, 2, 1, "", "objective_custom_registry"], [336, 2, 1, "", "objective_registry"]], "neural_compressor.profiling.parser": [[338, 0, 0, "-", "factory"], [341, 0, 0, "-", "parser"], [342, 0, 0, "-", "result"]], "neural_compressor.profiling.parser.factory": [[338, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[339, 0, 0, "-", "factory"], [340, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[339, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[341, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[342, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[343, 0, 0, "-", "factory"], [344, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[344, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[345, 0, 0, "-", "factory"], [349, 0, 0, "-", "profiler"]], "neural_compressor.profiling.profiler.factory": [[345, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[346, 0, 0, "-", "factory"], [347, 0, 0, "-", "profiler"], [348, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[346, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[349, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[350, 0, 0, "-", "factory"], [351, 0, 0, "-", "profiler"], [352, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[351, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[352, 2, 1, "", "create_tf_config"], [352, 2, 1, "", "delete_assign"], [352, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[353, 2, 1, "", "fit"]], "neural_compressor.strategy": [[354, 0, 0, "-", "auto"], [355, 0, 0, "-", "auto_mixed_precision"], [356, 0, 0, "-", "basic"], [357, 0, 0, "-", "bayesian"], [358, 0, 0, "-", "conservative"], [359, 0, 0, "-", "exhaustive"], [360, 0, 0, "-", "hawq_v2"], [362, 0, 0, "-", "mse"], [363, 0, 0, "-", "mse_v2"], [364, 0, 0, "-", "random"], [365, 0, 0, "-", "strategy"], [367, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[354, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[355, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[356, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[357, 1, 1, "", "BayesianOptimization"], [357, 1, 1, "", "BayesianTuneStrategy"], [357, 1, 1, "", "TargetSpace"], [357, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[358, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[359, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[360, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[362, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[363, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[364, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[365, 1, 1, "", "TuneStrategy"], [365, 1, 1, "", "TuneStrategyMeta"], [365, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[366, 0, 0, "-", "constant"], [368, 0, 0, "-", "tuning_sampler"], [369, 0, 0, "-", "tuning_space"], [370, 0, 0, "-", "tuning_structs"], [371, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[368, 1, 1, "", "BlockFallbackTuningSampler"], [368, 1, 1, "", "FallbackTuningSampler"], [368, 1, 1, "", "LowerBitsSampler"], [368, 1, 1, "", "ModelWiseTuningSampler"], [368, 1, 1, "", "OpTypeWiseTuningSampler"], [368, 1, 1, "", "OpWiseTuningSampler"], [368, 1, 1, "", "SmoothQuantSampler"], [368, 1, 1, "", "TuningOrder"], [368, 1, 1, "", "TuningSampler"], [368, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[369, 1, 1, "", "TuningItem"], [369, 1, 1, "", "TuningSpace"], [369, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [369, 2, 1, "", "pattern_to_internal"], [369, 2, 1, "", "pattern_to_path"], [369, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[370, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[371, 1, 1, "", "ClassRegister"], [371, 1, 1, "", "OrderedDefaultDict"], [371, 1, 1, "", "QuantOptions"], [371, 1, 1, "", "QuantType"], [371, 2, 1, "", "build_slave_faker_model"], [371, 2, 1, "", "extract_data_type"], [371, 2, 1, "", "get_adaptor_name"], [371, 2, 1, "", "preprocess_user_cfg"], [371, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[372, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[372, 1, 1, "", "ExampleClass"], [372, 4, 1, "", "attribute1"], [372, 2, 1, "", "function1"], [372, 2, 1, "", "function2"], [372, 2, 1, "", "function3"], [372, 2, 1, "", "generator1"], [372, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[372, 4, 1, "", "attr1"], [372, 4, 1, "", "attr2"], [372, 4, 1, "", "attr5"]], "neural_compressor.torch.quantization": [[373, 0, 0, "-", "modules"]], "neural_compressor.torch.quantization.modules": [[373, 1, 1, "", "FakeAffineTensorQuantFunction"], [373, 1, 1, "", "MulLinear"], [373, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.training": [[374, 1, 1, "", "CallBacks"], [374, 1, 1, "", "CompressionManager"], [374, 2, 1, "", "fit"], [374, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[375, 0, 0, "-", "collect_layer_histogram"], [376, 0, 0, "-", "constant"], [377, 0, 0, "-", "create_obj_from_config"], [379, 0, 0, "-", "kl_divergence"], [380, 0, 0, "-", "load_huggingface"], [381, 0, 0, "-", "logger"], [382, 0, 0, "-", "neural_insights_utils"], [383, 0, 0, "-", "options"], [384, 0, 0, "-", "pytorch"], [385, 0, 0, "-", "utility"], [386, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[375, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[377, 2, 1, "", "create_dataloader"], [377, 2, 1, "", "create_dataset"], [377, 2, 1, "", "create_eval_func"], [377, 2, 1, "", "create_train_func"], [377, 2, 1, "", "get_algorithm"], [377, 2, 1, "", "get_func_from_config"], [377, 2, 1, "", "get_metrics"], [377, 2, 1, "", "get_postprocess"], [377, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[379, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[380, 1, 1, "", "OptimizedModel"], [380, 2, 1, "", "export_compressed_model"], [380, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[381, 1, 1, "", "Logger"], [381, 2, 1, "", "debug"], [381, 2, 1, "", "error"], [381, 2, 1, "", "fatal"], [381, 2, 1, "", "info"], [381, 2, 1, "", "log"], [381, 2, 1, "", "warn"], [381, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[382, 2, 1, "", "get_model_path"], [382, 2, 1, "", "register_neural_insights_workload"], [382, 2, 1, "", "update_neural_insights_workload"], [382, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[383, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[384, 2, 1, "", "is_int8_model"], [384, 2, 1, "", "load"], [384, 2, 1, "", "load_weight_only"], [384, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[385, 1, 1, "", "CaptureOutputToFile"], [385, 1, 1, "", "CpuInfo"], [385, 2, 1, "", "Dequantize"], [385, 1, 1, "", "DotDict"], [385, 1, 1, "", "GLOBAL_STATE"], [385, 1, 1, "", "LazyImport"], [385, 1, 1, "", "MODE"], [385, 1, 1, "", "OpEntry"], [385, 1, 1, "", "Statistics"], [385, 2, 1, "", "alias_param"], [385, 2, 1, "", "calculate_mse"], [385, 2, 1, "", "check_key_exist"], [385, 2, 1, "", "combine_histogram"], [385, 2, 1, "", "compare_objects"], [385, 2, 1, "", "compute_sparsity"], [385, 2, 1, "", "dequantize_weight"], [385, 2, 1, "", "dump_class_attrs"], [385, 2, 1, "", "dump_data_to_local"], [385, 2, 1, "", "dump_elapsed_time"], [385, 2, 1, "", "dump_table"], [385, 2, 1, "", "dump_table_to_csv"], [385, 2, 1, "", "equal_dicts"], [385, 2, 1, "", "fault_tolerant_file"], [385, 2, 1, "", "get_all_fp32_data"], [385, 2, 1, "", "get_number_of_sockets"], [385, 2, 1, "", "get_op_list"], [385, 2, 1, "", "get_size"], [385, 2, 1, "", "get_tensor_histogram"], [385, 2, 1, "", "get_tensors_info"], [385, 2, 1, "", "get_tuning_history"], [385, 2, 1, "", "get_weights_details"], [385, 2, 1, "", "load_data_from_pkl"], [385, 2, 1, "", "mse_metric_gap"], [385, 2, 1, "", "print_op_list"], [385, 2, 1, "", "print_table"], [385, 2, 1, "", "recover"], [385, 2, 1, "", "set_random_seed"], [385, 2, 1, "", "set_resume_from"], [385, 2, 1, "", "set_tensorboard"], [385, 2, 1, "", "set_workspace"], [385, 2, 1, "", "show_memory_info"], [385, 2, 1, "", "singleton"], [385, 2, 1, "", "str2array"], [385, 2, 1, "", "time_limit"], [385, 2, 1, "", "version1_eq_version2"], [385, 2, 1, "", "version1_gt_version2"], [385, 2, 1, "", "version1_gte_version2"], [385, 2, 1, "", "version1_lt_version2"], [385, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[386, 1, 1, "", "WeightsDetails"], [386, 1, 1, "", "WeightsStatistics"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "terms": {"": [31, 32, 91, 129, 134, 141, 151, 165, 166, 167, 171, 172, 173, 174, 177, 179, 184, 185, 186, 199, 202, 215, 216, 217, 219, 221, 241, 244, 256, 257, 270, 295, 297, 323, 325, 326, 330, 353, 382, 385, 389, 390, 392, 396, 397, 417, 418, 420, 422, 424, 427, 431, 432, 439, 442, 444, 448, 451, 454, 456, 459, 469, 470, 471, 472, 473, 476, 477, 478, 479, 482, 483, 484, 485], "0": [4, 31, 32, 40, 76, 91, 134, 140, 141, 146, 148, 150, 155, 161, 163, 184, 185, 186, 191, 193, 197, 199, 200, 203, 204, 207, 212, 216, 218, 219, 232, 234, 239, 241, 242, 245, 246, 249, 254, 257, 262, 263, 272, 279, 287, 292, 300, 325, 336, 353, 358, 372, 380, 391, 414, 415, 418, 420, 422, 423, 424, 428, 429, 430, 431, 432, 437, 439, 444, 448, 454, 464, 465, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484], "00": 485, "000": [202, 244, 394, 415], "0000": 433, "00000": [202, 244], "00001": [202, 244], "00003": [202, 244], "00004": [202, 244], "0001": [4, 185, 186, 418, 431, 472], "0003": 485, "0004": 431, "0006": 485, "0007": 485, "0008": 485, "001": [202, 244, 415, 420, 479, 484], "00173": 464, "002": 420, "0029": [479, 485], "00296431384049356": 479, "0030": 485, "0036": 479, "0046": 485, "0048": 485, "005": 476, "0058": 485, "0059755356051027775": 479, "006533813662827015": 479, "00774": 470, "0086": 479, "00978": 476, "01": [32, 185, 186, 431, 472, 476, 482, 484, 485], "01024": 464, "0106": 485, "0115": 485, "0119": 485, "0130": 485, "0141": 485, "017": 481, "01x": 485, "02": [186, 485], "0213": 485, "02340": [161, 297], "027": 485, "02x": 485, "03": 485, "04": [428, 485], "04191": 413, "0438": 485, "04x": 485, "05": [151, 186, 272, 325, 430, 479, 485], "0500": 479, "05754": 470, "05x": 485, "06": [466, 484, 485], "0626": 485, "0698": 479, "07": [479, 484, 485], "0734": 485, "0737": 479, "07x": 485, "08": [216, 257, 481, 485], "0806": 479, "083": 485, "0837": 478, "09": 485, "0927": 485, "095": 480, "09656": 179, "099": [202, 244, 415], "0999": 485, "09x": 485, "0_224_frozen": [394, 425, 453, 464], "0f": 420, "0x": 141, "0x2b0001b0": 485, "1": [4, 30, 31, 32, 41, 60, 75, 91, 95, 99, 132, 134, 141, 143, 146, 148, 150, 151, 152, 155, 161, 173, 174, 176, 185, 186, 191, 193, 197, 199, 200, 201, 203, 204, 207, 208, 212, 216, 217, 218, 219, 232, 234, 239, 241, 242, 243, 245, 246, 249, 250, 254, 257, 263, 268, 269, 270, 272, 287, 292, 297, 300, 301, 321, 322, 323, 325, 336, 353, 371, 372, 373, 377, 380, 385, 389, 391, 394, 395, 397, 413, 414, 415, 417, 418, 422, 424, 425, 428, 430, 432, 435, 437, 453, 454, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484], "10": [185, 186, 202, 244, 304, 357, 394, 412, 415, 422, 428, 431, 453, 454, 470, 472, 481, 482, 485], "100": [4, 152, 185, 186, 202, 244, 372, 412, 415, 420, 426, 431, 456, 472, 473, 481, 482, 484, 485], "1000": [431, 460, 484], "10000": [304, 357, 470], "10004": [391, 392, 395, 414, 418, 419, 420, 424, 427, 432, 469, 472, 474, 476, 484], "10005": 474, "10006": [418, 419], "10016": 479, "100x": 476, "101": [200, 242, 272, 325, 430, 460, 479, 485], "1016": 485, "102": 485, "1024": [132, 202, 244, 437], "103": 481, "10438": [476, 479], "1044": 485, "1048": 485, "1054": 485, "1072": 485, "1073": 485, "1077": 485, "108": 485, "10833": [216, 257], "109": 485, "1098": 485, "10k": [421, 425], "10x": 485, "11": [428, 430, 432, 453, 479, 482, 485], "110": 485, "1104": 485, "1111": 485, "1119": 485, "112": 434, "1121": 485, "1125": 485, "113": 485, "1130": 485, "1137": 485, "1139": 485, "1141": 485, "1142": 485, "1151": 485, "1159": 485, "116": 481, "1170": 485, "1186": 485, "119": 479, "11x": 485, "12": [428, 453, 485], "120": 479, "121": 485, "1229": 485, "123": [202, 244, 415, 481], "124m": 479, "125": 485, "125m": 479, "127": [203, 204, 245, 246, 415, 473, 479, 485], "1276": 485, "128": [4, 32, 146, 200, 203, 204, 216, 242, 245, 246, 257, 415, 431, 473, 476, 481, 485], "1286": 485, "1291": 485, "1295": 485, "12x": 485, "13": [423, 428, 453, 477, 479], "130": 485, "13325": [476, 479], "1362": 485, "1365": [216, 257, 481], "1374": 485, "1377": 485, "1380": 485, "1381": 479, "1383": 485, "139": [479, 485], "13b": [479, 485], "13x": 485, "14": [186, 261, 262, 422, 428, 466, 485], "141": 485, "1414": 485, "14314": 476, "145": 485, "1451": 485, "1459": 485, "146": 485, "149": 485, "1498": 485, "14x": 485, "15": [134, 424, 428, 465], "1508": 485, "151": [464, 485], "1510": 479, "1514": 485, "1515": 485, "152": 485, "1534": 485, "1556": 485, "1566": 485, "1567": 485, "1582": 485, "1583": 479, "159": 485, "1593": 485, "15x": 485, "16": [415, 428, 464, 476, 485], "1601": 479, "161": 485, "162": [479, 485], "163": 485, "1646": 485, "16599": 479, "166": 485, "1669": 485, "1673": 485, "168": 485, "169": 485, "16x": 485, "16x16gb": 485, "17": [464, 485], "171": 485, "172": [479, 485], "173": 485, "17323": 476, "174": 485, "1742": 479, "1748": 485, "1749": 479, "17509": 479, "1751": 479, "1756": 485, "177": [270, 323, 485], "178": 485, "179": 485, "1792": 485, "1797": 485, "1798": 485, "17x": 485, "18": [471, 485], "1809": 413, "1810": [161, 297], "182": 485, "1821": 485, "18284": 477, "183": 485, "18518": 136, "18529": 136, "1880": 485, "1889": 485, "189": 485, "1890": 479, "18x": 485, "19": [484, 485], "192": 479, "1930": 485, "1934": 485, "195": 485, "1958": 485, "197": 485, "1978": [185, 186], "1983354538679123": 479, "19x": 485, "1_11_capabl": 397, "1b7": 479, "1e": [151, 479, 484], "1s4c14ins1bsthroughput": 485, "1s56c1ins1bsthroughput": 485, "1x": 485, "1x1": [291, 418, 431, 470], "1x16": 291, "1x2": [291, 479], "1xchannel": [185, 186, 470], "2": [30, 31, 32, 40, 60, 91, 95, 141, 148, 150, 152, 167, 173, 174, 185, 186, 201, 217, 243, 268, 270, 272, 297, 304, 321, 323, 325, 336, 357, 372, 385, 391, 395, 413, 414, 415, 417, 418, 424, 427, 428, 429, 430, 432, 455, 461, 462, 464, 465, 466, 468, 470, 471, 473, 474, 476, 477, 478, 479, 481, 482, 483], "20": [216, 257, 456, 459, 464, 465, 466, 470, 481, 484, 485], "200": [215, 256, 391, 460, 482], "2000": 431, "2001": [200, 242], "2011": 413, "2012": [202, 244], "2017": 413, "2018": 413, "2019": 470, "2020": 136, "2021": 470, "20210514": 485, "2022": [185, 186, 394, 429, 470, 476, 479, 485], "2023": [394, 466, 470, 476, 479, 485], "2043": [200, 242], "2048": [4, 385, 476], "207": 479, "2083": 485, "2090": 485, "20b": 485, "20x": 485, "21": [272, 325, 439, 440, 462, 465, 466, 471, 479, 485], "21020": 479, "211": 485, "2111": 470, "212": 485, "213": 485, "2132": 478, "214": 485, "216": 485, "2160": 485, "21x": 485, "22": [428, 485], "2204": 179, "2208": 485, "2209": [476, 479], "2210": 476, "2211": [476, 479], "2213": 485, "222": 485, "2220": 479, "2222": [459, 464, 465, 466], "22222": [459, 464, 465, 466], "223": 485, "224": [186, 212, 254, 394, 415, 420, 422, 425, 431, 434, 453, 481, 484], "22444": 479, "225": [212, 254, 431], "226": 485, "2277": 485, "229": [212, 254, 431], "22x": 485, "23": 485, "230": 485, "2301": 470, "2305": 476, "2306": 476, "234": 485, "235": 485, "236": 485, "2384": 485, "23f1": 485, "23x": 485, "24": [470, 482, 485], "2404": 485, "24101": 470, "24116": 470, "242": 485, "2420": 479, "2426": 485, "244": 485, "245": 485, "25": [470, 485], "250": [392, 470], "2504": 485, "2538": 485, "2548": 485, "255": [473, 479], "256": [207, 212, 249, 254, 415, 420, 431, 481], "256gb": 485, "2570": 479, "2578": 485, "25x": 485, "26": 485, "2603": 485, "265": 485, "268": 485, "26f1": 485, "26x": 485, "27": [423, 485], "272": 485, "2757": 485, "2788": 485, "2799": 485, "27x": 485, "28": [200, 201, 205, 242, 243, 247, 415, 485], "283": 485, "2862": 485, "2890": 485, "2897": 485, "28x": 485, "29": 485, "2914": 485, "2970": 479, "2989": 454, "2991": 479, "29x": 485, "2d": [56, 479], "2gb": 334, "2x": [421, 427], "2x1": [470, 485], "2x2": [291, 479], "2xlarg": 485, "3": [30, 32, 134, 141, 174, 186, 202, 216, 244, 257, 268, 321, 372, 385, 391, 392, 394, 413, 414, 415, 418, 420, 422, 424, 425, 428, 430, 431, 432, 434, 438, 442, 444, 448, 453, 458, 459, 461, 462, 464, 468, 470, 472, 473, 476, 477, 478, 479, 481, 482, 485], "30": [216, 257, 421, 425, 427, 481, 485], "300": [415, 470, 485], "3000": 457, "304": 485, "30b": [479, 485], "30x": 485, "31": [31, 485], "3121": 485, "3162": 465, "31x": 485, "32": [32, 163, 371, 420, 426, 476, 485], "322": 485, "3242": 485, "3253": 479, "329": 485, "3290": 485, "32accuraci": 485, "32x": 485, "33": [136, 485], "3333": [459, 464, 465, 466], "33333": [459, 464, 465, 466], "3334": 485, "3348": 485, "335": 485, "3365": 485, "3377": 485, "338174d13706855fc6924cec7b3a8ae8": 453, "33x": 485, "34": [466, 485], "341": 485, "3429": 485, "343": 485, "3463": 485, "347": 485, "34f1": 485, "35": [470, 485], "3509": 485, "350m": 479, "353": 485, "354": 479, "3542": 479, "3568": 485, "35x": 485, "36": 485, "360": 485, "367": 485, "3690": 485, "36x": 485, "37": 485, "374": 485, "3740": 479, "3757": 479, "3758": 485, "379": 479, "37x": 485, "38": 485, "3804": 479, "381": 470, "3815": 479, "384": [216, 257, 481], "3845": 479, "385": 485, "3850": 479, "385297635664756e": 479, "3852e": 479, "3887": 479, "38x": 485, "39": 485, "3911": 479, "392": 485, "3924": 479, "393": 485, "3930": 479, "394": 485, "3947": 479, "395": 485, "3950": 485, "397": 485, "398": 485, "399": 485, "39x": 485, "3a14": 485, "3b": 479, "3d": [56, 471, 479], "3dgan": 471, "3rd": [432, 471, 473, 475], "4": [32, 40, 143, 146, 152, 167, 176, 185, 186, 209, 212, 216, 251, 254, 257, 265, 266, 268, 318, 319, 321, 371, 372, 373, 389, 395, 397, 412, 420, 421, 424, 427, 428, 430, 431, 439, 459, 461, 465, 470, 473, 476, 479, 481, 482, 485], "40": [484, 485], "400": [460, 485], "401": 485, "404": [460, 470, 485], "4055": 479, "406": [431, 485], "407": 485, "4080": 485, "409": 485, "4096": 485, "40x": 485, "41": 485, "412": 485, "4124": 485, "413": 485, "4133": 485, "4149": 479, "416": 485, "417": 485, "4172": 479, "4193": 485, "41x": 485, "42": [186, 280, 485], "420": 427, "4202": 485, "4208": 485, "4227": 485, "4237": 485, "4259": 485, "4271": 485, "428": 485, "4289": 485, "4299": 485, "42x": 485, "43": 485, "4319": 485, "435": 485, "44": 485, "446": 485, "4469": 478, "448": 485, "4496": 485, "45": [391, 485], "450": 485, "4516": 479, "453": 485, "4533": 479, "4542": 485, "456": [431, 485], "46": 485, "4607": 485, "4628": 485, "4634": 479, "4697": 485, "46x": 485, "47": 485, "4728": 485, "473": 485, "4731": 485, "4734": 479, "4741": 479, "4743": 479, "4789": 485, "47x": 485, "48": [479, 485], "4800": 485, "4828": 479, "484": [372, 485], "485": 431, "487": 485, "489": 485, "4895": 485, "4899": 485, "49": 485, "490": 485, "4906": 479, "4907": 485, "4916": 485, "4923": 485, "4936": 479, "494": 485, "4954": 485, "497": 485, "4973": 485, "4980": 479, "4984": 485, "49x": 485, "4th": [471, 473], "4x": [176, 392, 473], "4x1": [167, 185, 186, 291, 431, 470, 485], "5": [140, 150, 155, 185, 186, 204, 212, 218, 246, 254, 272, 325, 353, 395, 415, 422, 424, 428, 430, 431, 456, 461, 464, 465, 470, 472, 473, 476, 479, 481, 482, 484, 485], "50": [270, 323, 392, 396, 456, 470, 479, 485], "500": [442, 460, 485], "5000": 453, "5018": 479, "5040": 479, "5045": 485, "5048": 479, "5049": 485, "5053": 485, "5057": 479, "5058": 485, "507": 485, "508": 485, "50803": 485, "5084": 485, "5098": 485, "50x": 485, "51": 485, "5142": 485, "517": 485, "5177": 485, "518": 479, "5185": 479, "51x": 485, "52": 485, "5228": 485, "5282": 485, "52f1": 485, "52x": 485, "53": 485, "532": 485, "5328": 485, "533": 485, "535": 485, "5359": 485, "5369": 485, "5398": 485, "53x": 485, "54": [484, 485], "540": 485, "5419": 485, "5436": 479, "5443": [479, 485], "5444": 479, "545": 485, "5477": 485, "5478": 485, "548": 485, "5494": 485, "54accuraci": 485, "55": [466, 485], "5510": 485, "5514": 485, "5523": 485, "5525": 485, "5540": 485, "5552": 479, "5555": 479, "556": 485, "5566": 485, "557": 485, "558": 485, "5582": 485, "5593": [479, 485], "55x": 485, "56": 485, "5603": 485, "5604": 485, "560m": 479, "5610": 485, "5617": 485, "562": 485, "5627": 485, "5637": 485, "5642": 485, "5655": 485, "567": 485, "568": 485, "5682": 485, "5692": 485, "56be4db0acb8001400a502ec": [270, 323], "56x": 485, "57": [479, 485], "5701": 485, "5703": 485, "5711": 485, "5714": 485, "5716": 485, "5718": 485, "5732": 485, "5738": 485, "5742": 479, "5752": 485, "5764": [479, 485], "5765": 485, "577": 485, "5777": 485, "5789": 479, "5799": 485, "57x": 485, "58": [465, 485], "5819": 485, "5823": 485, "5826": 479, "5834": 485, "584": 485, "5841": 485, "5843": 485, "585": 485, "5871": 485, "588": 485, "5881": 485, "5898": 485, "5899": 485, "58x": 485, "59": [479, 485], "590": 485, "591": 485, "5911": 485, "5933": 485, "5934": 485, "5951": 485, "5972": [479, 485], "5977": 479, "5991": 485, "5997": 485, "59f1": 485, "5b": 479, "5x": 471, "6": [185, 186, 424, 473, 479, 482, 485], "60": 485, "600": 431, "6004": 485, "6018": 485, "602": 485, "6029": 485, "6038": 479, "6053": 485, "6057": 485, "6059": 485, "6094": 485, "61": 485, "6123": 485, "6134": 485, "614": 485, "615": 485, "6154": 485, "6181": 485, "6187": 485, "6195": 485, "61accuraci": 485, "61x": 485, "62": 485, "621": 485, "6224": 485, "6239": 485, "624": 485, "6247": 479, "6261": 485, "6266": 485, "627": 485, "6297": 479, "62x": 485, "63": [470, 485], "6301": 485, "6312": 485, "6361": 485, "6365": 479, "637690492221736e": 479, "6376e": 479, "6377": 485, "6379": 485, "6390": 485, "6392": 479, "6393": 485, "6399": 485, "63x": 485, "64": [216, 257, 392, 476, 479, 481, 485], "6401": 485, "6404": 479, "6409": 485, "6410": 485, "6433": 485, "6434": 485, "6437": [479, 485], "6438": 485, "6439": 485, "6448": 485, "6455": 485, "6456": 485, "6472": 485, "6473": 485, "6474": 485, "648": 485, "6481": 479, "6483": 485, "6484": 485, "6488": [465, 485], "6491": 485, "6496": 485, "6497": 485, "6499": 479, "64x": 485, "65": 485, "6504": 485, "6505": 485, "6506": 479, "6509": 485, "6519": 485, "652": 485, "6527": 485, "653": 485, "6532": 485, "6535": 485, "6542": 479, "6543": 485, "655": [479, 485], "6559": 485, "656": 485, "6569": 479, "657": 485, "6571": 485, "6575": 485, "6579": 485, "6582": 485, "659": 485, "6594": 485, "6598": 485, "65b": 479, "65x": 485, "66": [454, 485], "6604": 485, "6612": 485, "6614": 485, "6621": 479, "6622": 485, "663": 485, "6654": 485, "6661": 485, "6669": 485, "667": 485, "6678": 485, "6685": 485, "6687": 485, "6689": 485, "6693": 485, "66b": 479, "66x": 485, "67": 485, "6709": 485, "6713": 485, "6718": 479, "6719": 485, "6724": 485, "6726": 485, "6735": 479, "6739": 485, "6740": [479, 485], "6742": 485, "6746": 485, "6748": 485, "6756": 485, "6769": [479, 485], "678": 485, "679": 485, "67x": 485, "68": [481, 485], "6803": 485, "6804": [479, 485], "6814": 479, "6821": 479, "6824": 485, "6827": 485, "6829": 485, "683": 485, "6831": [479, 485], "6832": 485, "6835": 479, "6836": 479, "6837": 479, "6839": 479, "6842": 485, "6845": 485, "6848": 479, "685": 485, "6854": 485, "6857": 485, "6859": 485, "6861": 485, "6862": 485, "6864": 485, "6866": [479, 485], "6872": 479, "6876": 485, "6878": 485, "6883": 479, "6885": 485, "6887": 485, "689": 485, "6890": 485, "6895": 479, "68x": 485, "69": 485, "6902": 485, "6911": 485, "6918": 485, "693": 485, "6953": [479, 485], "696": 485, "6961": 485, "6977": 485, "6982": 485, "6994": 479, "69x": 485, "6ap0": 485, "6b": [455, 479, 485], "6f": 420, "7": [30, 152, 185, 186, 336, 397, 412, 423, 424, 431, 470, 473, 477, 479, 482, 485], "70": 485, "7002": 485, "7006": 485, "7009": 485, "7018": 485, "7022": 485, "7024": 485, "7025": 485, "7030": 485, "7031": 485, "7032": 485, "7034": 485, "7056": 485, "7058": [479, 485], "7075": 485, "7077": 485, "7080": 485, "7088": 485, "709": 485, "70b": 485, "70x": 485, "71": 485, "7103": 485, "7105": 485, "7106": 485, "7107": 485, "7111": 485, "7122": 485, "7128": 479, "7139": 485, "7143": 479, "7149": 479, "7153": 485, "716": 485, "7174": 479, "718": 485, "7186": 485, "7198": 485, "71x": 485, "72": [479, 485], "7203": 485, "721": 485, "722": 485, "7221": 479, "723": 485, "7233": 485, "7236": 485, "724": 485, "7240": 485, "7243": 485, "7244": 485, "7246": 485, "7247": 485, "7268": 485, "7269": 485, "727": 485, "7273": 485, "7277": 485, "728": 485, "7283": 485, "7285": 485, "73": 485, "7312": 485, "7322": 485, "7323": 485, "7326": 479, "7332": 479, "7334": 485, "7335": [479, 485], "7337": 485, "7350": 485, "7353": 485, "7357": 479, "7361": [479, 485], "739": 485, "7392": [479, 485], "7398": 479, "7399": 485, "73x": 485, "74": 485, "7415": 485, "7432": 485, "744": 485, "7440": 479, "7442": 485, "7443": 485, "7448": 485, "7451": 479, "746": 485, "7476": 485, "7486": 485, "7495": 478, "7497": 485, "75": [470, 485], "7502": 454, "7518": 485, "752": 485, "753": 485, "7541": 485, "7543": 485, "75552": 485, "7566": 485, "7568": 485, "7572": 485, "7589": 479, "7590": 479, "7596": 485, "75x": 485, "76": 485, "7602cd63d4c849e7a686a8165a77f69d": [464, 465], "7608": 479, "761": 485, "7615": [479, 485], "7616": 485, "7617": 485, "7622": 485, "7627": [479, 485], "7628": 485, "7632": 479, "7633": 485, "7634": 485, "7675": 485, "7677": [479, 485], "7682": 485, "7699": 485, "76x": 485, "77": 485, "770": 485, "7704": 485, "7706": 485, "7715": 485, "7742": 485, "774m": 479, "7753": 485, "7758": 485, "7759": [479, 485], "776": 480, "7764": 485, "7772": 479, "778": 485, "7797": 485, "77x": 485, "78": [481, 485], "7807": 485, "7813": 485, "7824": 485, "7828": 485, "7829": 485, "7835": 485, "7836": 485, "784": 485, "7840": 479, "7845": 485, "7851": 485, "7856": 485, "786": 485, "7873": 485, "7878": 485, "7894": 485, "7895": 470, "79": [480, 485], "790": 485, "7905": 485, "7908": 479, "7911": 485, "7927": 485, "7941": 485, "795": 485, "7957": 479, "7964": 485, "7965": 485, "79x": 485, "7b": [479, 485], "7b1": [479, 485], "8": [99, 141, 185, 186, 215, 256, 391, 396, 413, 424, 428, 458, 459, 470, 471, 476, 479, 482, 485], "80": [423, 474, 480, 485], "800": [216, 257, 481], "8000": [459, 464, 465, 466], "8001": [2, 375, 459, 464, 465, 466], "801": 470, "8018": 485, "8025": 485, "8044": 485, "8047": 485, "805": 476, "8058": 485, "8074": 485, "8080": 453, "8084": 485, "8096": 485, "80x": 485, "81": 485, "8146": 485, "8178": 485, "81x": 485, "82": 485, "8207": 479, "8213": [464, 485], "8235": 485, "8246": 479, "8256": 485, "8259": 485, "8266": 478, "829": 485, "8291": 478, "8294": 478, "8298": 479, "8299": 478, "82x": 485, "83": [478, 479, 485], "8314": 485, "8363": 485, "8371": 485, "8372": 478, "8382": 485, "84": [479, 485], "8411": 485, "8480": 485, "849": 485, "85": [478, 479, 485], "8537": 485, "8539": 485, "856": 485, "858": 485, "85x": 485, "86": 485, "8617": 464, "8626": 485, "8684": 485, "86x": 485, "87": [212, 254, 485], "875": [212, 254, 481], "8763": 479, "8768": 479, "8782": 485, "87f1": 485, "87x": 485, "88": [423, 478, 485], "8809": 485, "8814": 485, "8816": 485, "8863": 485, "88x": 485, "89": [479, 485], "890": 485, "8981": 454, "8984": 485, "89x": 485, "8ghz": 485, "8x1": [185, 186], "9": [161, 185, 186, 391, 428, 431, 470, 472, 479, 482, 484, 485], "90": [185, 186, 474, 484, 485], "9000000000": 437, "904": 485, "9048": 485, "9049": 454, "9091": 485, "90f1": 485, "90x": 485, "91": [476, 479, 485], "9125": 485, "9163": 485, "919": 485, "91x": 485, "92": 485, "927": 485, "93": [479, 485], "930": 485, "9301": 479, "9308": 479, "9317": 485, "9324": 485, "9359": 485, "93x": 485, "94": [481, 485], "9403": 485, "9411": 485, "9472": 485, "94x": 485, "95": [76, 272, 325, 430, 485], "9522": 485, "9527": [304, 357, 431, 484], "95top1": 485, "96": 485, "9631": 454, "9635": 485, "964": 485, "96x": 485, "97": [431, 485], "9702": 485, "977": 485, "97x": 485, "98": [185, 186, 431, 470, 472, 485], "9860": 479, "9861": 485, "987": 485, "9892": 485, "99": [4, 485], "9902": 485, "9906": 485, "9909": 485, "9916": 485, "9917": 485, "9919": 485, "9921": 485, "9922": 485, "9931": 485, "9932": 485, "9933": 485, "9934": 485, "9935": 485, "9937": 485, "9941": 485, "9942": 485, "9944": 485, "9945": 485, "9947": 485, "9950": 485, "9951": 485, "9952": 485, "9953": 485, "9957": 485, "9958": 485, "9961": 485, "9962": 485, "9963": 485, "9967": 485, "9971": 485, "9978": 485, "9979": 485, "9983": 485, "9984": 485, "999": [4, 484], "9994": 485, "9998": 485, "99ccff": 482, "99x": 485, "A": [4, 41, 60, 61, 89, 102, 126, 127, 134, 139, 146, 154, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 202, 216, 219, 221, 222, 244, 257, 258, 265, 268, 269, 270, 272, 275, 278, 279, 280, 287, 290, 292, 295, 296, 297, 298, 299, 304, 318, 321, 322, 323, 325, 326, 330, 334, 357, 374, 385, 390, 396, 414, 415, 421, 424, 430, 431, 433, 444, 445, 448, 451, 459, 470, 471, 473, 476, 479, 481, 482, 484], "And": [56, 390, 391, 412, 431, 437, 479], "As": [391, 396, 414, 418, 430, 431, 445, 456, 470, 476, 482], "At": [390, 396, 457, 461, 482], "Being": 389, "But": 456, "By": [141, 165, 185, 186, 265, 318, 396, 397, 430, 433, 444, 445, 448, 470, 471, 476, 482], "For": [30, 32, 146, 150, 165, 166, 169, 170, 180, 186, 202, 216, 244, 257, 269, 270, 272, 295, 298, 322, 323, 325, 326, 353, 389, 391, 393, 395, 397, 418, 419, 420, 422, 424, 427, 434, 436, 437, 439, 442, 453, 454, 459, 470, 475, 476, 479, 480, 482, 484, 485], "IT": [202, 209, 244, 251, 471], "If": [53, 54, 56, 60, 141, 152, 185, 186, 189, 190, 202, 216, 230, 231, 244, 257, 296, 326, 353, 372, 374, 390, 391, 396, 412, 414, 415, 420, 428, 429, 430, 431, 437, 445, 446, 449, 451, 457, 462, 468, 470, 473, 476, 478, 479, 480, 481, 482], "In": [154, 169, 170, 171, 176, 177, 178, 181, 186, 199, 226, 241, 268, 295, 297, 321, 336, 389, 391, 392, 394, 395, 396, 414, 415, 417, 418, 419, 420, 430, 431, 441, 444, 445, 448, 454, 455, 456, 457, 464, 465, 466, 468, 469, 470, 473, 475, 476, 478, 479, 480, 481, 482, 483], "It": [40, 141, 154, 158, 167, 189, 190, 225, 230, 231, 270, 272, 279, 295, 300, 307, 323, 325, 326, 353, 358, 362, 374, 395, 396, 397, 413, 417, 418, 431, 437, 440, 445, 451, 452, 453, 454, 456, 457, 459, 470, 473, 476, 477, 478, 482, 484], "Its": [396, 413, 470], "NOT": [200, 242, 424], "No": [390, 423, 431, 459, 460, 471], "Not": [313, 314, 368, 369, 385, 392], "ON": 475, "Of": 414, "On": [473, 485], "One": [397, 415, 420, 427, 456, 470, 471, 482], "TO": [420, 436, 456], "The": [4, 22, 40, 60, 99, 105, 107, 126, 134, 141, 146, 147, 152, 154, 155, 157, 161, 165, 167, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 200, 201, 202, 203, 204, 208, 209, 216, 218, 221, 223, 226, 230, 231, 232, 242, 243, 244, 245, 246, 250, 251, 257, 258, 263, 265, 266, 267, 269, 270, 272, 274, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 314, 316, 318, 319, 320, 322, 323, 325, 326, 334, 336, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 369, 371, 372, 374, 375, 377, 379, 380, 384, 385, 386, 389, 391, 392, 395, 396, 397, 398, 400, 404, 407, 410, 412, 413, 414, 415, 417, 418, 420, 422, 424, 426, 427, 428, 430, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "Their": 377, "Then": [268, 321, 396, 417, 444, 446, 448, 449, 456, 479, 482], "There": [101, 301, 303, 354, 356, 417, 418, 424, 427, 431, 434, 456, 458, 459, 476, 479, 482, 484], "These": [396, 427, 454], "To": [31, 268, 321, 336, 390, 396, 397, 415, 417, 420, 432, 435, 438, 444, 446, 448, 449, 453, 457, 470, 472, 475, 476, 477, 479, 482, 484], "Will": [129, 418, 427], "With": [82, 336, 391, 395, 397, 414, 431, 439, 444, 448, 452, 458, 468, 470, 471, 478, 479, 482, 485], "_": [189, 190, 230, 231, 353, 391, 392, 394, 395, 396, 413, 417, 418, 420, 422, 424, 431, 432, 433, 434, 440, 444, 446, 448, 449, 456, 459, 460, 468, 470, 473, 476, 477, 478, 479, 480, 482, 484], "__call__": [209, 251], "__class__": 336, "__getitem__": [198, 202, 216, 240, 244, 257, 414, 415, 431], "__init__": [395, 414, 415, 430, 482], "__iter__": [198, 202, 240, 244, 414, 415, 431], "__len__": [198, 202, 240, 244, 415], "__name__": 336, "__version__": [2, 139], "_acc": 480, "_add_observer_": 480, "_description_": 135, "_epoch_ran": [154, 258], "_generate_dataload": [191, 232], "_observer_forward_hook": 480, "_post_eval_hook": 480, "_pre_eval_hook": 480, "_propagate_qconfig_help": 146, "_quantiz": 262, "_quantizedconv": 77, "_quantizeddeconv": 77, "_quantizedfusedbatchnorm": 109, "_quantizedmatmul": [79, 80], "_recordingobserv": 480, "_saved_model": 134, "_type_": [146, 380], "_use_new_zipfile_seri": 162, "a100cuda": 485, "aarch64": 412, "ab": [31, 161, 179, 297, 470, 473, 479], "abbrevi": 186, "abc": [99, 270, 323, 395, 480, 482], "abcadaptor": 395, "abctunestrategi": 482, "abeja": 485, "abil": [395, 396, 415, 424, 479], "abl": [189, 190, 230, 231, 326, 353, 374, 442, 451, 473], "abound": 471, "about": [161, 183, 385, 389, 414, 431, 456, 457, 470, 475, 482, 483, 485], "abov": [40, 395, 396, 397, 418, 453, 454, 456, 459, 470, 473, 479, 482], "absenc": 477, "absolut": [161, 185, 186, 272, 325, 430, 431, 470, 473, 482], "absorb": [146, 150, 476], "absorb_pair": 32, "absorb_to_lay": 146, "absorbed_1": 146, "absorpt": 146, "abstract": [72, 154, 216, 257, 258, 263, 300, 395, 397, 426], "abus": 389, "ac": [304, 357], "acc": [392, 461, 470, 480, 485], "acc_delta": 442, "acceler": [163, 418, 431, 434, 442, 451, 454, 458, 470, 471, 475, 476, 479, 482], "accelerator_execution_tim": 342, "accept": [185, 186, 372, 389, 412, 414, 453, 476], "access": [53, 54, 56, 186, 380, 385, 446, 449, 453], "accommod": [396, 397], "accompani": [429, 482], "accord": [2, 108, 146, 152, 185, 186, 200, 201, 202, 216, 242, 243, 244, 257, 307, 360, 362, 377, 392, 395, 415, 420, 454, 459, 464, 465, 466, 470, 475, 479, 481, 482], "accordingli": [418, 442, 479], "account": [389, 478, 482], "accumul": [313, 368, 482], "accur": [30, 150, 470, 476, 479], "accuraci": [32, 152, 184, 185, 186, 189, 190, 230, 231, 258, 263, 272, 287, 292, 300, 325, 326, 336, 353, 358, 372, 374, 382, 391, 394, 396, 397, 413, 414, 415, 417, 419, 420, 421, 422, 430, 431, 442, 451, 453, 460, 461, 464, 465, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 483, 484, 485], "accuracy_criterion": [185, 186, 336, 431, 455, 468, 472, 482, 484], "accuracy_level": 32, "accuracycriterion": [185, 186, 431, 482], "accuracyspars": 485, "achiev": [263, 300, 422, 431, 454, 469, 470, 471, 473, 479, 480, 482], "acq": [304, 357], "acq_max": [304, 357], "acquir": 434, "acquisit": [304, 357], "across": [263, 273, 300, 326, 416, 431, 458, 461, 470, 474, 479, 482], "act": [184, 198, 240, 389], "act_fn": 166, "action": [389, 446, 449], "activ": [17, 32, 127, 146, 158, 185, 186, 225, 314, 369, 371, 395, 396, 397, 413, 417, 419, 424, 431, 452, 453, 456, 464, 465, 466, 472, 473, 476, 479, 480, 484], "activation_max": 385, "activation_min": 385, "activation_min_max": 385, "activation_post_process": 480, "activationoper": 6, "activations_t": 454, "actord": [32, 476], "actual": [272, 325, 420], "ad": [178, 200, 242, 265, 304, 318, 357, 396, 397, 417, 432, 434, 439, 442, 446, 449, 459, 470, 476, 480], "adadelta": 420, "adam": [157, 484], "adamw": [157, 223], "adapt": [389, 394, 396, 415, 442, 471], "adaptor": [154, 185, 186, 316, 371, 377, 394, 397, 427, 474, 475, 477, 479, 480, 483], "adaptor_registri": 395, "add": [31, 39, 50, 95, 105, 134, 157, 184, 185, 186, 200, 202, 223, 242, 244, 296, 314, 369, 385, 390, 391, 397, 414, 415, 420, 422, 424, 430, 431, 446, 449, 453, 454, 461, 464, 465, 478, 479, 480, 482, 483], "add_graph": 480, "add_histogram": 480, "add_modul": 480, "add_origin_loss": [155, 186, 218], "add_port_to_nam": 91, "add_qdq_pair_to_weight": [29, 185, 186, 473], "add_relu": 422, "addit": [146, 186, 374, 396, 397, 418, 445, 453, 459, 476, 477, 482], "addition": [397, 420, 470, 482], "addn": 424, "address": [202, 244, 389, 432, 453, 456, 459, 471], "addv2": [39, 55, 424], "adher": 390, "adjust": [442, 473, 479], "admin_github_token": [446, 449], "adopt": [390, 434, 470, 471, 479], "advanc": [136, 185, 186, 389, 394, 396, 402, 470, 473, 484], "advantag": [451, 470, 472, 482], "afc": [270, 323], "affect": 479, "affin": [143, 373, 473], "aforement": 431, "after": [2, 64, 134, 146, 163, 167, 172, 174, 179, 185, 186, 200, 212, 216, 219, 242, 254, 257, 297, 358, 372, 380, 385, 392, 396, 415, 417, 418, 419, 422, 427, 430, 431, 444, 445, 448, 452, 456, 468, 469, 470, 473, 475, 476, 478, 479, 480, 481, 482], "ag": 389, "again": [202, 244, 415, 454, 456, 475], "against": [266, 319], "agent": 392, "aggress": 482, "agnost": 418, "agnostic_mod": [268, 321], "agre": 390, "ai": [394, 434, 471, 475, 483], "aid": 416, "aim": [392, 394, 434, 470, 479, 482, 483], "ajanthan": 470, "al": [136, 413, 476, 479], "albert": [440, 485], "alemb": 423, "alexnet": [440, 485], "algo": 377, "algorithm": [2, 32, 146, 186, 265, 272, 280, 317, 318, 325, 377, 379, 392, 395, 396, 397, 418, 419, 424, 427, 440, 445, 470, 473, 480, 484], "algorithm_registri": 147, "algorithm_typ": 147, "algorithmschedul": 147, "alia": [153, 381, 385, 436, 441], "alias": 385, "alias_param": 385, "alibaba": [394, 441, 448, 449, 471], "align": [216, 257, 389, 476, 481], "alignimagechannel": 481, "alignimagechanneltransform": [216, 257], "alistarh": 470, "aliv": 459, "all": [2, 4, 22, 32, 49, 83, 141, 142, 146, 147, 149, 152, 154, 157, 162, 167, 175, 184, 185, 186, 191, 192, 198, 202, 209, 216, 217, 223, 226, 232, 240, 244, 251, 257, 262, 265, 268, 270, 272, 279, 286, 290, 291, 295, 301, 310, 313, 318, 321, 323, 325, 327, 336, 365, 371, 377, 385, 389, 390, 394, 395, 396, 397, 414, 415, 420, 424, 428, 431, 434, 442, 445, 446, 449, 450, 451, 452, 453, 456, 457, 459, 460, 464, 465, 466, 469, 470, 471, 473, 475, 476, 479, 481, 482], "allbalanc": 485, "allenai": [269, 270, 322, 323], "allevi": 479, "alloc": 461, "allow": [146, 304, 357, 418, 420, 430, 431, 432, 453, 458, 470, 472, 476, 479, 482, 484], "along": [428, 470, 476], "alpha": [127, 140, 143, 150, 161, 181, 373, 473, 482], "alpha_list": 368, "alreadi": [141, 152, 202, 215, 217, 244, 256, 395, 415, 427, 446, 449, 453, 462, 482], "also": [139, 166, 199, 202, 216, 241, 244, 257, 265, 318, 325, 336, 353, 390, 392, 395, 396, 397, 414, 417, 421, 425, 427, 430, 431, 434, 439, 444, 445, 448, 451, 452, 453, 456, 457, 468, 470, 471, 473, 475, 476, 479, 482], "altern": [141, 185, 186, 353], "although": [199, 241, 478], "alwai": [221, 268, 321, 325, 353, 417, 430, 431, 456, 476], "amazon": [394, 434, 442], "amd": [394, 428, 485], "amodio": 452, "among": [272, 325, 445, 479], "amount": 4, "amp": [2, 434, 441, 460, 476], "amp_cfg": 2, "amp_convert": 2, "amx": 471, "an": [2, 53, 54, 56, 91, 127, 129, 134, 136, 139, 141, 146, 151, 158, 172, 185, 186, 194, 198, 202, 216, 220, 225, 235, 240, 244, 257, 264, 265, 269, 270, 278, 279, 301, 317, 318, 322, 323, 326, 348, 352, 353, 372, 374, 385, 387, 389, 391, 392, 394, 395, 397, 413, 414, 415, 416, 417, 422, 430, 431, 432, 434, 438, 439, 442, 451, 454, 455, 456, 459, 462, 468, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482], "anaconda": [428, 458, 459], "analysi": [434, 451, 470, 478], "analyt": [428, 471, 483], "analyz": [96, 165, 334, 478, 479, 480], "andrew": 413, "ani": [136, 141, 268, 270, 313, 321, 323, 348, 352, 368, 372, 382, 385, 389, 394, 397, 420, 434, 439, 452, 453, 457, 458, 470, 478, 482], "ann": 392, "anneal": 160, "anno_dir": [201, 243, 415], "anno_path": [272, 325, 430], "annot": [201, 243, 268, 321, 372, 396, 397, 415, 430, 470, 482], "announc": 442, "anoth": [216, 257, 265, 274, 318, 385, 417, 418, 444, 448, 481, 482], "answer": [216, 257, 269, 270, 322, 323, 389, 456, 470, 481, 485], "answer_start": [270, 323], "answeringsquad": 485, "ap": 430, "ap0": 485, "apach": [4, 429], "api": [56, 61, 96, 227, 263, 268, 300, 313, 314, 321, 325, 353, 368, 369, 372, 385, 391, 398, 400, 404, 407, 410, 417, 422, 427, 428, 431, 436, 440, 441, 442, 458, 459, 463, 477, 478, 482, 486], "api_typ": [459, 464, 465, 466], "appear": [141, 389, 445, 451, 453], "append": [146, 301, 304, 357, 391, 419, 431, 469], "append_attr": 146, "append_task": 461, "appl": 482, "appli": [32, 99, 112, 113, 114, 117, 119, 123, 134, 143, 154, 176, 178, 226, 266, 319, 373, 389, 396, 397, 431, 434, 436, 442, 451, 455, 456, 461, 469, 470, 473, 475, 478, 479, 482, 483, 484], "applianc": 471, "applic": [212, 254, 397, 422, 434, 451, 453, 459, 460, 464, 465, 471, 476, 479, 480, 481, 483], "apply_awq_clip": 32, "apply_awq_scal": 32, "apply_inlin": 134, "appoint": 389, "approach": [185, 186, 275, 276, 278, 391, 392, 413, 415, 418, 427, 431, 439, 451, 454, 462, 464, 465, 466, 470, 471, 472, 474, 476, 482, 484], "appropri": [389, 413, 479], "approv": 390, "approx": 476, "approxim": [265, 266, 318, 319, 396, 430, 476], "apr": 471, "apt": [423, 428, 437, 445], "ar": [53, 54, 91, 141, 146, 167, 172, 173, 174, 179, 185, 186, 200, 216, 242, 257, 268, 272, 279, 295, 296, 297, 301, 303, 304, 321, 325, 354, 356, 357, 371, 372, 377, 384, 385, 389, 390, 391, 392, 395, 396, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 439, 442, 445, 451, 453, 454, 456, 457, 458, 459, 462, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "arang": 479, "arbitrari": [141, 431, 469], "arcfac": 485, "architectur": [152, 217, 275, 278, 394, 412, 418, 431, 458, 470, 471, 476, 483], "archiv": 462, "arctic": 428, "are_shapes_equ": 91, "area": [216, 257, 268, 321, 430, 481], "aren": 457, "arg": [2, 40, 91, 146, 153, 200, 201, 202, 242, 243, 244, 295, 304, 357, 372, 380, 381, 415, 420, 431, 440, 470, 473, 476, 479, 480, 481], "argmax": 17, "argmaxoper": 7, "argpars": 451, "argument": [141, 186, 372, 392, 417, 455, 456, 459, 462, 464, 465, 466, 476], "ariel": 470, "aris": 472, "arithmet": 424, "arm": [394, 427, 428, 485], "around": 91, "arr": [31, 385], "arrai": [4, 31, 32, 134, 141, 216, 257, 268, 279, 321, 385, 481], "arrang": [173, 174, 179, 201, 202, 205, 243, 244, 247, 415, 470], "art": 470, "articl": [269, 270, 322, 323], "artifici": 392, "arxiv": [161, 179, 297, 394, 413, 470, 471, 476, 479], "as_text": 91, "ascend": 454, "ascii": 141, "asd932_": [202, 244, 415], "ask": [394, 428], "aspect": [212, 216, 254, 257, 481], "asplo": 471, "assert_error": 91, "assertionerror": [162, 168, 175, 184, 295, 296, 297, 326], "assign": [268, 321, 385, 420, 472, 482], "assist": 477, "associ": [134, 141, 268, 321], "assum": [215, 256, 268, 279, 321, 395, 424, 451], "asterisk": 479, "asym": [30, 31, 32, 143, 146, 373, 397, 424, 476, 484], "asymmetr": [397, 473, 476, 482], "atom": 429, "att": [269, 270, 322, 323], "attach": [418, 431, 479], "attack": 389, "attempt": 482, "attent": [17, 144, 163, 165, 176, 185, 186, 200, 242, 389, 418, 470], "attention_ffn_nam": 176, "attention_mask": [200, 242, 431], "attentionoper": 8, "attr": [91, 134, 165], "attr1": 372, "attr2": 372, "attr5": 372, "attribut": [31, 69, 90, 91, 134, 146, 165, 176, 186, 385, 395, 414, 424, 426, 431, 472, 484], "attribute1": 372, "attribute_to_kwarg": 31, "attributeerror": [139, 372], "aug": 471, "augment": 3, "author": 429, "auto": [146, 163, 165, 185, 186, 302, 355, 361, 385, 391, 413, 434, 437, 439, 441, 442, 470, 473, 476], "auto_config": 470, "auto_copi": 146, "auto_input_output": 134, "auto_merg": 31, "auto_mixed_precis": [306, 361], "auto_qu": 440, "auto_slim": 164, "autocast": 434, "autom": [392, 434, 451, 452, 471, 479], "automat": [163, 165, 166, 185, 186, 202, 205, 212, 244, 247, 254, 263, 273, 300, 391, 394, 412, 415, 427, 431, 432, 434, 436, 439, 440, 442, 444, 445, 446, 448, 449, 451, 458, 461, 469, 470, 473, 479, 481, 482], "automixedprecisiontunestrategi": [302, 355], "automodelforcausallm": 142, "automodelforsequenceclassif": 431, "autonumb": [396, 397], "autotoken": 431, "autotrack": [126, 134], "autotunestrategi": 354, "aux": 2, "auxiliari": 378, "avail": [180, 185, 186, 330, 398, 400, 404, 407, 410, 421, 423, 425, 427, 444, 448, 453, 458, 459, 460, 464, 465, 466, 470, 482, 485], "averag": [32, 269, 270, 272, 322, 323, 325, 430, 431, 476, 482, 485], "averagepool": 24, "avg": 473, "avgpool": [115, 124, 424], "avoid": [91, 141, 146, 200, 242, 391, 480], "avx512": [432, 473], "avx512_bf16": 432, "aw": [434, 442, 461, 471, 485], "awai": 414, "awar": [32, 136, 154, 186, 226, 274, 295, 360, 374, 395, 396, 397, 413, 419, 420, 422, 427, 451, 461, 469, 471, 476, 482], "awq": [32, 474, 476], "awq_arg": 476, "awq_g32asym": 476, "awq_quant": 32, "ax": [186, 262], "axi": [31, 186], "azur": [390, 394, 471], "b": [31, 60, 200, 242, 385, 390, 413, 415, 430, 470, 476, 479, 482], "b0": 485, "b1": 60, "b16": 37, "b_dataload": [152, 185, 186, 412, 431], "b_filter": 2, "b_func": [152, 412], "babel": 457, "back": [141, 146, 216, 222, 257, 417, 451, 457], "backbon": 478, "backend": [3, 29, 30, 150, 157, 185, 186, 187, 188, 192, 193, 196, 200, 201, 203, 204, 205, 206, 207, 211, 213, 216, 222, 223, 228, 229, 233, 234, 236, 238, 242, 243, 245, 246, 247, 248, 249, 253, 255, 257, 273, 308, 326, 327, 328, 330, 363, 391, 397, 417, 420, 426, 427, 431, 432, 440, 459, 464, 465, 466, 472, 476, 481, 482, 484], "background_thread": 437, "backward": [374, 418, 419, 420, 431, 469, 470, 473, 477], "balanc": [208, 250, 476, 479], "ban": 389, "bandit": 390, "bandwidth": [431, 432, 476], "bar": [202, 244, 451, 471], "bare": 423, "bart": 485, "base": [2, 4, 22, 33, 72, 91, 102, 106, 108, 118, 130, 136, 139, 144, 146, 147, 154, 161, 168, 175, 181, 183, 186, 191, 194, 198, 200, 202, 209, 216, 226, 232, 235, 240, 242, 244, 251, 257, 272, 278, 280, 286, 287, 290, 292, 297, 307, 310, 314, 325, 327, 334, 335, 336, 362, 365, 369, 392, 394, 395, 396, 397, 415, 419, 420, 424, 431, 432, 439, 440, 442, 451, 454, 459, 462, 465, 466, 470, 471, 473, 476, 478, 479, 480, 482, 485], "base_dataload": 236, "base_dir": 31, "base_model": 328, "basecallback": 154, "basedataload": [191, 195, 197, 232, 237, 239], "basedatalod": [191, 232], "baselin": [377, 478, 480], "baseline_acc_0": 480, "baseline_accuraci": 382, "basemetr": [272, 325, 353], "basemodel": 327, "basepattern": [167, 169, 171], "baseprun": [172, 177, 179, 180], "basereg": 181, "basetransform": [216, 257], "bash": [456, 480], "basi": 470, "basic": [165, 167, 175, 185, 186, 215, 256, 275, 295, 306, 310, 313, 361, 365, 368, 374, 427, 428, 431, 453, 472, 478], "basic_magnitud": [472, 484], "basic_na": 277, "basicmagnitudeprun": 284, "basicna": 275, "basicprun": [178, 180], "basictoken": [215, 256], "basictunestrategi": [303, 356], "batch": [2, 146, 191, 193, 194, 198, 199, 219, 232, 234, 235, 240, 241, 374, 414, 418, 419, 431, 469, 470, 473, 481, 482, 485], "batch_idx": 420, "batch_sampl": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414], "batch_siz": [186, 191, 193, 197, 198, 199, 200, 201, 219, 232, 234, 239, 240, 241, 242, 243, 262, 392, 414, 415, 420, 422, 426, 431, 434, 473], "batchmatmul": 114, "batchmatmulv2": 114, "batchnorm": [21, 48, 53, 107, 391, 479], "batchnormalizationoper": 21, "batchsampl": [198, 240], "batchtospacend": 44, "bayesian": [186, 280, 306, 361, 392, 470, 472], "bayesianoptim": [304, 357], "bayesianoptimizationsearch": 280, "bayesiantunestrategi": [304, 357], "bbox": [268, 321, 391, 430], "bboxes_labels_scor": 391, "bc": [437, 445], "bdf0bd1b2cc14bc19bce12d4f9b333c7": 459, "bdist_wheel": [446, 449], "beam": [265, 318, 430], "becaus": [141, 171, 176, 216, 257, 295, 391, 456, 473, 479, 481, 482], "becom": [395, 422, 470, 476], "been": [4, 141, 162, 168, 175, 265, 295, 297, 318, 392, 397, 418, 431, 432, 451, 476, 479], "befor": [93, 95, 150, 167, 172, 174, 179, 180, 182, 185, 186, 200, 242, 295, 297, 299, 390, 397, 414, 415, 418, 419, 420, 423, 424, 428, 431, 446, 449, 455, 456, 473, 476, 478, 480, 482], "begin": [102, 173, 174, 179, 297, 414, 418, 419, 431, 470, 482], "behavior": [141, 389, 395, 396, 397, 424, 433, 476, 480, 482, 484], "being": [136, 268, 321, 397, 459], "belong": [202, 244, 330, 473], "below": [41, 52, 60, 185, 186, 301, 325, 353, 390, 391, 394, 395, 396, 397, 414, 417, 418, 420, 426, 430, 434, 436, 444, 445, 448, 451, 454, 459, 468, 469, 470, 472, 473, 476, 478, 479, 480, 482, 483], "bench": 434, "bench_config": 438, "bench_featur": 438, "benchmark": [185, 186, 219, 264, 301, 317, 336, 385, 394, 402, 433, 434, 438, 442, 445, 451, 454, 482, 483, 484, 485], "benchmark_with_raw_cmd": 152, "benchmarkconf": 431, "benchmarkconfig": [152, 185, 186, 412, 417, 431], "benefici": 413, "benefit": 469, "berkeleyvis": 417, "bert": [165, 186, 196, 199, 200, 216, 238, 241, 242, 257, 394, 415, 418, 430, 432, 439, 462, 465, 466, 470, 481, 485], "bert_dataset": [206, 248], "bertattent": 165, "besid": [395, 418, 456, 476], "best": [154, 216, 257, 258, 263, 300, 307, 362, 389, 392, 428, 434, 440, 451, 457, 468, 473, 476, 479, 481, 482], "best_configur": 384, "best_model": [154, 258, 384, 476], "best_model_weight": 384, "best_scor": [154, 258], "beta": 161, "beta_1": 484, "beta_2": 484, "better": [82, 185, 186, 189, 190, 230, 231, 279, 326, 353, 374, 419, 430, 432, 470, 471, 473, 476, 478, 479, 482], "between": [4, 30, 129, 151, 178, 185, 186, 216, 257, 269, 272, 322, 325, 348, 352, 385, 391, 395, 396, 397, 413, 417, 418, 427, 430, 431, 442, 473, 476, 477, 478, 479, 481, 482], "bf16": [32, 73, 135, 185, 186, 314, 369, 395, 396, 424, 431, 436, 441, 445, 451, 475, 482, 485], "bf16_convert": [38, 137], "bf16_op": [34, 36, 93, 396, 475], "bf16_symbolic_trac": 135, "bf16convert": [36, 475], "bf16modul": 135, "bf16modulewrapp": 135, "bf16wrapper": 475, "bfloat16": [31, 432, 434, 442, 475], "bi": [269, 270, 322, 323], "bia": [129, 185, 186, 476, 480], "bias_correct": 131, "biasadd": [39, 45, 50, 52, 95, 424], "biascorrect": 129, "bibtex": 429, "bicub": [216, 257, 481], "bidaf": 485, "big": [136, 417, 476], "bigdl": [441, 442], "bigger": 456, "bigscienc": [479, 485], "bilibili": 471, "bilinear": [212, 216, 254, 257, 481], "bilinearimagenet": [481, 484], "bilinearimagenettransform": [212, 254], "bilingu": [265, 318], "billion": 470, "bilstm": 485, "bin": [4, 141, 142, 385, 423], "binari": [9, 134, 272, 325, 423, 430, 446, 449, 477], "binary_op": 17, "binarydirect8bitoper": 9, "binaryoper": 9, "bind": [152, 217], "bind_al": 480, "bio": 485, "bit": [30, 32, 146, 185, 186, 371, 397, 413, 419, 432, 471, 473, 476, 479], "bitnami": 471, "bk3": 4, "black": 482, "black_nod": 3, "blade": 441, "blank": 445, "blendcnn": 485, "bleu": [266, 271, 319, 324, 430, 470], "bleu_hook": [266, 319], "bleu_scor": [266, 319], "bleu_token": [265, 318], "bleu_util": [271, 324], "blob": [4, 136, 169, 170, 265, 266, 269, 270, 295, 318, 319, 322, 323, 325, 353, 431, 440, 462, 465, 466], "blob_siz": 32, "block": [0, 32, 144, 146, 161, 171, 174, 179, 184, 295, 336, 372, 427, 468, 470, 476, 479, 482], "block_list": 146, "block_mask": [161, 175], "block_num": 146, "block_pattern": 144, "block_prefix": 146, "block_siz": [171, 295, 476], "blockfallbacktuningsampl": 368, "blockmaskcriterion": 161, "blocksiz": 32, "blockwise_over_matmul_gemm_conv": 184, "blog": [394, 471], "bloom": [394, 470, 479, 485], "bloomz": [479, 485], "blue": 474, "bmm": 476, "bn": 485, "bnb": 476, "bo": 186, "bodi": 389, "bool": [2, 30, 31, 32, 127, 134, 141, 145, 146, 167, 185, 186, 200, 202, 212, 216, 242, 244, 254, 257, 262, 266, 272, 295, 313, 319, 325, 368, 372, 380, 384, 385, 414, 415, 430, 462, 472, 481], "bool_val": 91, "boolean": 2, "boost": [432, 435, 451, 470, 471], "booster": 419, "bootstrap": 457, "border": 481, "bot": [446, 449], "both": [134, 186, 389, 392, 395, 419, 431, 435, 454, 456, 458, 470, 472, 473, 476, 479, 482], "bottleneck": 476, "bottom": 456, "boudoukh": 470, "bound": [60, 152, 216, 257, 268, 304, 321, 357, 430, 481], "boundari": [216, 257, 481], "bowl": [270, 323], "box": [216, 257, 268, 272, 321, 325, 391, 430, 434, 445, 451, 480, 481, 482], "branch": [134, 390], "brand": 429, "break": [95, 420, 431], "breakdown": 459, "breakpoint": 452, "breviti": [265, 266, 318, 319, 430], "bridg": [395, 396, 427], "briefli": [431, 479], "bright": 481, "bring": [263, 300, 445, 458, 479], "broad": [394, 427, 440, 483], "broadcast": [216, 257, 420, 481], "broadcast_optimizer_st": 420, "broadcast_paramet": 420, "bronco": [270, 323], "brought": [433, 435, 442, 473], "browser": [444, 448, 453, 457], "buffer": 141, "bug": [390, 394], "build": [2, 30, 32, 101, 147, 148, 150, 151, 275, 278, 329, 331, 333, 334, 335, 395, 396, 397, 428, 433, 444, 446, 448, 449, 452, 471, 482], "build_slave_faker_model": 371, "built": [61, 157, 176, 187, 188, 192, 196, 200, 201, 206, 208, 210, 211, 212, 213, 216, 221, 223, 228, 229, 233, 236, 238, 242, 243, 248, 250, 252, 253, 254, 255, 257, 301, 325, 328, 336, 353, 374, 392, 395, 415, 420, 431, 444, 448, 468, 473, 478, 481, 482, 484], "builtin": [141, 420], "bundl": 452, "busi": 471, "button": [390, 427, 445, 451], "bypass_reshap": [53, 54], "byte": 141, "byte_arrai": 141, "bytesio": 141, "c": [4, 60, 202, 244, 385, 415, 423, 428, 476, 482], "c1": 60, "c1c2": 60, "c2": 60, "c6a": 485, "c6g": 485, "c6i": 485, "cach": [200, 242, 423, 473, 476], "cache_dir": 142, "cache_kl": 2, "cache_minmax": 2, "caff": 417, "caffe_ilsvrc12": 417, "caffenet": 485, "calcul": [31, 46, 146, 161, 169, 184, 186, 203, 204, 245, 246, 269, 270, 295, 297, 307, 322, 323, 362, 375, 385, 413, 415, 430, 431, 442, 454, 468, 470, 473, 476, 478, 479, 482, 484], "calculate_md5": [202, 244], "calculate_ms": 385, "calculate_quant_min_max": 146, "calculate_scale_zp": 31, "calib": [146, 396], "calib_cfg": 2, "calib_data": [2, 140], "calib_dataload": [219, 301, 353, 391, 394, 414, 415, 417, 425, 426, 430, 431, 453, 454, 473, 474, 475, 476], "calib_dataset": 454, "calib_func": [34, 146, 353, 475], "calib_iter": 396, "calib_method": 4, "calib_model": 2, "calib_registri": 4, "calib_tensor": 2, "calibcollector": 2, "calibdata": 2, "calibr": [2, 5, 32, 35, 75, 76, 126, 146, 152, 185, 186, 189, 190, 230, 231, 263, 300, 353, 379, 395, 397, 415, 426, 427, 470, 473, 476, 482, 483, 484], "calibration_data": [85, 93], "calibration_sampling_s": [185, 186, 431, 456], "calibratorbas": 4, "call": [2, 30, 141, 147, 165, 173, 174, 179, 268, 297, 321, 391, 392, 395, 414, 426, 440, 442, 452, 470, 473, 479, 480, 481], "call_on": 152, "callabl": [141, 185, 186, 270, 323, 374, 414], "callback": [287, 292, 374, 377, 391, 431, 469, 470, 473], "callbacks_list": 374, "camembert": 485, "can": [30, 32, 129, 136, 141, 151, 165, 166, 167, 172, 180, 182, 185, 186, 189, 190, 199, 202, 216, 217, 219, 230, 231, 241, 244, 257, 268, 270, 272, 295, 297, 299, 321, 323, 325, 326, 336, 353, 374, 385, 391, 392, 394, 395, 396, 397, 412, 414, 415, 417, 418, 419, 420, 422, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 444, 445, 446, 448, 449, 451, 452, 454, 456, 457, 458, 459, 461, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "cannot": [268, 321, 391, 423, 476, 480], "cap_s8_1_11": 397, "cap_s8_1_11_conv1d": 397, "capabl": [2, 33, 314, 369, 396, 397, 412, 424, 431, 432, 442, 453, 458, 470, 472, 473, 482, 484], "capac": [476, 478], "captur": 385, "captureoutputtofil": 385, "card": 470, "carri": 470, "cascad": 428, "case": [56, 60, 141, 152, 186, 199, 215, 216, 217, 241, 256, 257, 263, 287, 292, 300, 336, 397, 414, 418, 419, 420, 424, 426, 430, 435, 439, 451, 452, 453, 456, 462, 465, 466, 468, 470, 471, 473, 476, 477, 481, 483, 484, 485], "cast": [31, 37, 475, 481], "cast_tensor": 31, "castonnxtransform": [216, 257], "castpytorchtransform": [216, 257], "casttftransform": [216, 257], "cat": [391, 422, 437, 464, 465, 466], "categor": 430, "categori": [202, 244, 267, 320, 412, 415, 441], "category_id_set": [268, 321], "caus": [184, 396, 414, 435, 454, 456, 470, 476], "causal": 470, "cce5ff": 482, "cd": [417, 420, 428, 453, 455, 456, 458, 459, 464, 465, 466], "cdf419910f9b4d2a8320d0e420ac1d0a": 465, "cdot": 479, "ce": [155, 185, 186, 218, 431, 484], "cell": 445, "center": [216, 257, 393, 394, 428, 481, 482], "centercrop": 481, "centercroptftransform": [216, 257], "centercroptransform": [216, 257], "cento": [428, 485], "central_fract": [212, 254, 481], "cern": 471, "cert": 453, "certain": [141, 477, 478], "certif": [390, 453], "cfg": [57, 58, 146, 314, 369, 377, 396, 397], "cfg_filter": 377, "cfg_from_fil": 385, "cfg_preprocess": 377, "cg": [417, 456, 480], "challeng": 474, "chang": [30, 82, 129, 151, 173, 174, 176, 177, 179, 182, 185, 186, 297, 299, 360, 385, 390, 396, 414, 420, 423, 429, 431, 434, 444, 445, 448, 451, 457, 470, 480, 481, 482], "changelog": [446, 449, 450], "channel": [30, 31, 32, 129, 150, 151, 163, 166, 171, 185, 186, 212, 216, 254, 257, 295, 380, 394, 395, 397, 427, 428, 434, 436, 441, 456, 470, 476, 481, 485], "channel_axi": [99, 148, 151], "channels_last": [212, 254, 434], "channelx1": [185, 186, 470], "chapter": 396, "characterist": 389, "chart": [456, 473, 478, 480], "chat": [479, 485], "chatbot": 471, "check": [2, 32, 53, 54, 91, 134, 146, 184, 192, 202, 244, 260, 296, 384, 385, 394, 417, 420, 428, 435, 437, 439, 446, 449, 450, 454, 457, 460, 461, 477], "check_cfg_and_qconfig": 146, "check_config": [184, 296], "check_dataload": 192, "check_integr": [202, 244], "check_key_exist": 385, "check_key_valid": 184, "check_model": 260, "check_mx_vers": 2, "checknumer": 66, "checkout": 390, "checkpoint": [141, 334, 384, 433], "checkpoint_dir": 384, "checkpoint_sess": 334, "checksum": [202, 244], "chen": 429, "child": [60, 142, 480], "children": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 142], "chines": 471, "choic": [200, 242, 395, 415, 430, 457, 479], "choos": [202, 244, 380, 427, 439, 471, 477, 479, 482, 484], "chosen": [396, 413], "chunk": [216, 257, 481], "chunk_siz": [202, 244], "ci": 390, "cifar": [202, 244, 415, 485], "cifar10": [202, 244, 415], "cifar100": [202, 244, 415], "circumst": [389, 472], "ckpt": [134, 326, 334, 353, 485], "cl": [142, 147, 155, 157, 167, 172, 180, 181, 182, 202, 209, 216, 218, 223, 244, 251, 257, 279, 286, 290, 295, 297, 299, 310, 325, 336, 365, 385], "claim": 429, "clamp_": 479, "clarifi": 389, "clase": 286, "class": [102, 139, 146, 162, 168, 175, 206, 248, 279, 326, 353, 391, 392, 396, 414, 415, 418, 430, 431, 442, 468, 469, 473, 477, 480, 482, 484], "class_1": [202, 244, 415], "class_n": [202, 244, 415], "classdef": 482, "classdiagram": 461, "classic": 482, "classif": [180, 200, 216, 242, 257, 272, 298, 325, 418, 422, 430, 440, 454, 462, 465, 466, 470, 471], "classifi": [165, 184, 200, 242, 272, 325, 415, 418], "classificationmnli": 485, "classificationmrpc": 485, "classificationqnli": 485, "classificationqqp": 485, "classificationsst": 485, "classifierheadsearch": 165, "classifierheadsearchertf": 165, "classregist": 371, "clean": [215, 256, 431], "clear": [198, 240, 395, 424, 430, 431], "cli": 454, "click": [427, 434, 435, 442, 445, 451, 456, 471, 480], "client": [453, 459, 466], "clip": [32, 476, 479], "clip_grad_norm_": 431, "clm": 470, "clone": [390, 417, 428, 444, 448, 453, 455, 456, 458, 459], "close": [129, 151, 413, 460], "closur": 460, "cloud": [390, 394, 461, 471], "cluster": [461, 464, 465, 482], "cmd": 152, "cnn": 485, "cnt": 431, "co": 470, "coarsest": 479, "coco": [201, 208, 243, 250, 268, 272, 321, 325, 430, 470], "coco_dataset": [206, 248], "coco_filt": [210, 252], "coco_label_map": [271, 324], "coco_tool": [271, 324], "cocoev": [268, 321], "cocoevalwrapp": [268, 321], "cocomap": 430, "cocomapv2": [272, 325, 430], "coconpi": [201, 243, 415], "cocoraw": [201, 243, 415], "cocorecord": 415, "cocorecorddataset": [201, 243], "cocowrapp": [268, 321], "code": [141, 165, 189, 190, 217, 230, 231, 274, 298, 301, 353, 374, 391, 394, 395, 396, 397, 415, 418, 419, 420, 426, 427, 429, 430, 434, 436, 438, 439, 440, 442, 445, 451, 455, 456, 458, 459, 460, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481], "codebert": 485, "codec": 141, "codenam": 432, "coder": [394, 427, 435, 436, 439, 442, 445, 458, 462, 471], "coeff": 181, "coeffici": [41, 181, 470], "cola": [200, 242, 415, 430, 485], "collabor": [390, 394, 436, 442], "collat": [134, 146], "collate_fn": [191, 193, 194, 197, 199, 219, 232, 234, 235, 239, 241, 414, 415], "collate_pr": 31, "collate_result": 146, "collate_tf_pr": 134, "collate_torch_pr": 146, "collctor": 4, "collect": [2, 4, 31, 146, 214, 216, 219, 221, 222, 224, 257, 270, 272, 323, 325, 375, 385, 396, 473, 480, 482], "collect_layer_histogram": 378, "collect_layer_input": 184, "collect_weight_info": 146, "collector": [2, 136, 375], "collectorbas": 2, "collecttransform": [216, 257], "color": [470, 474], "colorjitt": 481, "column": [385, 476, 479], "column_map": 385, "columnwis": 51, "com": [4, 136, 169, 170, 180, 200, 242, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 353, 389, 394, 415, 417, 425, 428, 429, 431, 434, 440, 453, 455, 456, 458, 459, 462, 465, 466, 477, 478, 485], "comb": 419, "combin": [2, 146, 185, 186, 189, 190, 212, 226, 230, 231, 254, 326, 353, 374, 385, 391, 395, 427, 431, 469, 471, 473, 475, 476, 481, 482], "combine_cap": 2, "combine_histogram": 385, "come": [141, 482], "command": [152, 217, 374, 417, 420, 434, 436, 439, 444, 448, 452, 453, 455, 456, 457, 459], "comment": [139, 389, 396, 415, 430, 431, 476, 481], "commentsbalancedor": 485, "commit": [389, 390], "common": [125, 139, 141, 186, 214, 264, 274, 278, 279, 280, 377, 389, 415, 419, 420, 422, 426, 428, 431, 473, 479], "commonli": [459, 470], "commun": [389, 453], "comoress": 380, "compact": [418, 431, 437, 470], "compar": [136, 272, 325, 385, 419, 430, 454, 470, 473, 476, 478, 479, 480, 482], "compare_kei": 385, "compare_label": [272, 325, 353, 430], "compare_object": 385, "compare_weight": 136, "comparison": [385, 476, 477, 480], "compat": [134, 334, 390, 420, 433, 446, 449, 451, 470, 477], "compatible_format": 139, "compil": [265, 318, 431], "complaint": 389, "complement": 470, "complet": [314, 369, 395, 396, 470, 473, 482, 484, 485], "complex": [431, 432, 470], "compli": 482, "compon": [154, 258, 264, 301, 391, 417, 420, 428, 429, 434, 451, 459, 469, 470], "compos": [216, 257, 377, 481], "composetransform": [216, 257], "comprehens": [431, 483], "compress": [264, 287, 292, 317, 336, 374, 380, 387, 394, 402, 418, 427, 431, 451, 453, 468, 469, 470, 471, 473, 479, 483, 485], "compressed_model": 476, "compression_dim": 380, "compression_dtyp": 380, "compression_manag": [185, 186, 374, 391, 418, 419, 431, 469, 470, 473], "compressionmanag": 374, "compressor": [2, 152, 154, 157, 169, 170, 180, 185, 186, 212, 213, 216, 217, 220, 223, 226, 254, 255, 257, 259, 264, 271, 272, 274, 295, 298, 300, 301, 306, 312, 317, 324, 325, 326, 330, 337, 353, 361, 367, 382, 387, 390, 392, 395, 396, 397, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 432, 433, 434, 435, 439, 441, 442, 444, 446, 448, 449, 450, 453, 454, 455, 456, 458, 459, 468, 469, 470, 471, 473, 476, 477, 479, 480, 481, 482, 483, 484, 485], "comput": [31, 32, 91, 136, 146, 265, 266, 269, 270, 272, 318, 319, 322, 323, 325, 374, 385, 413, 414, 419, 422, 430, 431, 432, 434, 445, 454, 470, 471, 473, 476, 479, 482], "compute_bleu": [266, 319], "compute_const_folding_using_tf": 91, "compute_error": 136, "compute_spars": 385, "computemetr": [268, 321], "concat": [17, 133], "concat_gener": [216, 257], "concatoper": 10, "concatv2": [110, 120, 133, 424], "concentr": 456, "concept": [426, 478, 483], "conclud": 392, "concret": [134, 482], "conda": [423, 428, 437, 445, 464, 465, 466, 477], "conda_env": [459, 464, 465, 466], "conda_prefix": 437, "condit": [71, 200, 201, 202, 216, 242, 243, 244, 257, 303, 354, 356, 415, 429, 481, 482], "conduct": [391, 431, 439, 451, 482, 483], "conf": [147, 152, 154, 186, 189, 190, 217, 230, 231, 274, 281, 282, 284, 285, 286, 287, 292, 302, 303, 304, 305, 307, 308, 309, 310, 314, 326, 336, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 369, 372, 374, 391, 392, 394, 397, 412, 418, 425, 426, 431, 432, 433, 453, 455, 456, 469, 473, 474, 475, 476, 478, 479, 482], "conf_fnam": 275, "conf_fname_or_obj": [217, 226, 258, 263, 273, 274, 275, 276, 278, 287, 292, 300], "confer": [136, 470, 479], "confid": 146, "confidence_batch": [146, 482], "confidenti": [389, 453], "config": [2, 32, 101, 102, 104, 108, 146, 152, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 200, 230, 231, 242, 281, 282, 284, 285, 286, 287, 292, 295, 296, 297, 298, 299, 314, 315, 317, 326, 348, 352, 369, 370, 371, 372, 374, 377, 384, 385, 392, 394, 396, 397, 402, 412, 414, 417, 418, 419, 420, 422, 425, 427, 430, 431, 432, 433, 453, 454, 469, 470, 472, 473, 475, 476, 478, 480, 482], "config_file_path": [180, 298], "config_inst": 152, "config_quantizable_lay": 104, "configproto": 352, "configur": [2, 104, 135, 146, 152, 184, 185, 186, 189, 190, 192, 202, 205, 217, 222, 230, 231, 244, 247, 258, 262, 263, 274, 275, 276, 278, 287, 292, 296, 300, 301, 307, 325, 326, 336, 353, 362, 371, 374, 376, 377, 383, 384, 391, 392, 395, 396, 415, 417, 431, 438, 452, 459, 464, 465, 466, 468, 470, 473, 476, 477, 481, 482, 485], "confirm": 396, "conflict": [91, 423], "connect": [161, 297, 451, 453, 460, 470, 478], "consecut": [163, 165, 166, 470], "conserv": [185, 186, 361], "conservativetunestrategi": 358, "consid": [32, 134, 272, 325, 389, 413, 418, 452, 482], "consist": [42, 49, 390, 391, 459, 479, 482], "consol": [452, 457], "consolid": 428, "const": [42, 43, 49, 50, 53, 54, 56, 68, 84], "const_node_valu": 91, "constant": [91, 262, 304, 312, 357, 367, 378, 414, 424, 454, 481], "constant_valu": [216, 257], "constfold": 424, "constrain": 474, "constraint": [185, 186, 263, 300, 431, 470, 478, 482, 484], "construct": [141, 200, 203, 204, 207, 214, 219, 221, 222, 224, 242, 245, 246, 249, 325, 330, 334, 371, 377, 389, 396, 397, 415, 420, 470, 482], "construct_function_from_graph_def": 134, "consum": 414, "consumpt": 479, "contact": [389, 477, 478], "contain": [2, 53, 54, 56, 60, 125, 134, 136, 141, 146, 152, 154, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 189, 190, 200, 201, 202, 230, 231, 242, 243, 244, 258, 262, 263, 268, 269, 270, 274, 287, 290, 292, 295, 296, 297, 298, 299, 300, 321, 322, 323, 326, 353, 374, 377, 384, 413, 415, 418, 427, 430, 452, 459, 464, 465, 466, 470, 476, 480, 482, 483], "content": [415, 459, 460, 464, 465, 466], "content_fold": [207, 249, 415], "context": [2, 385, 472, 476], "contextu": 470, "contigu": 146, "continu": [170, 268, 295, 321, 392, 431, 452, 470, 483], "contract": 44, "contrast": [167, 295, 481], "contrib": [4, 264, 317], "contribut": [389, 394, 470], "control": [147, 185, 186, 391, 431, 457, 470, 482], "conv": [17, 44, 48, 52, 57, 58, 59, 78, 95, 150, 185, 186, 391, 396, 397, 431, 470, 472, 473, 482], "conv0": [417, 456, 480], "conv1": [185, 186, 473, 484], "conv1d": 397, "conv1d_relu": 422, "conv2d": [39, 45, 46, 47, 51, 52, 57, 111, 121, 129, 396, 397, 417, 422, 424, 456, 479, 480, 482], "conv2d_relu": 422, "conv2dbackpropinput": 112, "conv3d": [57, 111], "conv3dbackpropinputv2": 112, "conveni": [431, 458], "convent": [202, 244, 268, 321, 418], "convers": [40, 41, 186, 274, 390, 395, 396, 431, 432, 473, 475, 479], "convert": [2, 31, 34, 35, 36, 39, 40, 41, 42, 43, 52, 60, 72, 85, 86, 88, 89, 90, 91, 117, 122, 126, 128, 135, 146, 165, 185, 186, 200, 212, 215, 216, 242, 254, 256, 257, 261, 268, 274, 296, 314, 321, 369, 372, 391, 396, 431, 432, 436, 473, 475, 476, 479, 481, 482], "convert_add_to_biasadd": 62, "convert_bf16": 396, "convert_by_vocab": [215, 256], "convert_examples_to_featur": [200, 216, 242, 257], "convert_layout": 62, "convert_leakyrelu": 62, "convert_nan_to_random": 62, "convert_placeholder_to_const": 62, "convert_tensorflow_tensor_to_onnx": 91, "convert_to_unicod": [215, 256], "convertaddtobiasaddoptim": 39, "converted_model": [186, 326, 431, 432], "convertlayoutoptim": 40, "convertleakyreluoptim": 41, "convertnantorandom": 42, "convertplaceholdertoconst": 43, "convolut": [418, 471], "convoper": 11, "cooper": [428, 432, 471], "coordin": [216, 257, 304, 357, 458, 481, 482], "copi": [186, 296, 385, 414, 457], "copyreg": 139, "copyright": [390, 429], "core": [152, 185, 186, 217, 390, 412, 429, 444, 448, 459, 485], "core_id": [152, 217], "core_list": 152, "cores_per_inst": [152, 185, 186, 412, 431, 472], "corner": [216, 257, 390, 395, 397, 481], "corpor": 429, "correct": [129, 151, 184, 185, 186, 268, 269, 270, 272, 296, 321, 322, 323, 325, 389, 434], "correctli": 457, "correspond": [4, 136, 165, 176, 185, 186, 200, 242, 265, 268, 272, 318, 321, 325, 377, 385, 395, 424, 431, 470, 472, 473, 478, 482], "cost": [473, 476], "could": [141, 150, 167, 189, 190, 202, 230, 231, 244, 301, 326, 353, 374, 389, 391, 419, 431, 469, 470, 473, 476, 477, 479, 483], "couldn": 457, "count": [2, 392, 415, 476], "counter": 91, "coupl": [199, 241], "cover": [390, 422, 426, 471], "coverag": 390, "cpu": [77, 78, 79, 80, 140, 141, 146, 185, 186, 380, 385, 394, 396, 412, 413, 427, 431, 432, 434, 436, 442, 451, 459, 471, 472, 473, 474, 475, 476, 480], "cpu_execution_tim": 342, "cpuexecutionprovid": [3, 29, 30, 432, 473], "cpufreq": 437, "cpuinfo": 385, "creat": [2, 4, 91, 139, 185, 186, 191, 200, 202, 219, 232, 242, 244, 268, 278, 279, 314, 321, 348, 352, 369, 371, 372, 377, 389, 392, 395, 415, 433, 444, 446, 448, 449, 452, 464, 465, 466, 470, 473, 478, 480, 482, 483], "create_data_exampl": 2, "create_dataload": 377, "create_dataset": 377, "create_eval_func": 377, "create_obj_from_config": 378, "create_onnx_config": 348, "create_search_space_pool": 279, "create_tf_config": 352, "create_train_func": 377, "crime": 485, "criteria": [162, 185, 186, 263, 287, 292, 295, 297, 300, 391, 451, 479], "criterion": [136, 154, 156, 157, 161, 167, 172, 173, 174, 176, 179, 183, 185, 186, 220, 223, 418, 419, 431, 470, 473, 479, 482, 484], "criterion_class": [161, 183], "criterion_conf": [185, 186], "criterion_registri": [155, 218], "criterion_typ": [155, 218], "critet": [155, 218], "critic": [176, 389], "crop": [212, 216, 254, 257, 415, 481], "crop_pad": [216, 257], "crop_ratio": [207, 249, 415], "cropres": 481, "cropresizetftransform": [216, 257], "cropresizetransform": [216, 257], "croptoboundingbox": [216, 257, 481], "cross": [157, 223, 272, 325, 426, 482], "crossentropyloss": [155, 185, 186, 418, 431], "crowd": [268, 321], "crt": 453, "crucial": 470, "cs412": 4, "cse": [60, 84], "csv": [385, 392, 454, 455], "ctrl": 452, "ctx": 2, "cube": [185, 186, 470], "cuda": [141, 184, 432, 434, 436, 470, 473], "cudaexecutionprovid": [432, 473], "curat": 457, "curl": [459, 460, 464, 465], "current": [2, 56, 90, 161, 162, 165, 168, 172, 175, 185, 186, 274, 281, 282, 284, 285, 286, 295, 297, 304, 308, 357, 363, 385, 391, 392, 395, 397, 413, 420, 424, 431, 434, 438, 451, 459, 468, 470, 473, 476, 479, 482], "current_it": 480, "current_pattern": 165, "current_sparsity_ratio": [172, 297], "curv": 430, "custom": [101, 139, 146, 152, 186, 301, 325, 336, 384, 412, 418, 419, 434, 457, 458, 459, 463, 465, 466, 470, 471, 476, 478], "custom_metr": 426, "custom_models_optim": 464, "customis": [414, 415, 430], "customized_msg": 385, "cut": [446, 449], "cv": [185, 186, 470], "cv2": [212, 254], "cvf": 479, "cycl": 392, "d": [60, 146, 418, 426, 452, 454, 460, 470, 485], "d1": [60, 385], "d2": 385, "d3e10a49326449fb9d0d62f2bfc1cb43": 466, "d_": [185, 186], "d_conf": [185, 186, 419, 431, 469], "dai": 482, "daili": 451, "dampen": 32, "data": [2, 30, 31, 32, 42, 91, 126, 134, 136, 141, 146, 150, 165, 185, 186, 189, 190, 217, 219, 230, 231, 262, 264, 304, 314, 316, 317, 326, 347, 351, 353, 357, 369, 371, 374, 377, 382, 385, 394, 395, 413, 414, 415, 420, 424, 425, 428, 430, 431, 432, 453, 454, 456, 459, 464, 465, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "data_dir": [200, 242, 415], "data_format": [202, 212, 244, 254], "data_it": [2, 165], "data_load": [34, 35, 395], "data_path": [205, 247, 415], "data_sourc": [198, 240, 377], "data_typ": [316, 371], "data_x": 2, "databas": [202, 244, 459], "databrick": [479, 485], "datafunc": [202, 244], "dataiterload": 2, "dataload": [2, 3, 30, 32, 126, 127, 136, 146, 152, 162, 163, 165, 180, 184, 189, 190, 200, 211, 220, 230, 231, 242, 253, 258, 287, 292, 301, 347, 351, 353, 374, 377, 391, 394, 395, 396, 417, 418, 419, 420, 425, 426, 431, 432, 453, 454, 469, 470, 473, 474, 475, 476, 479, 480, 481, 483, 484], "dataloader_cfg": 377, "dataloaderwrap": 2, "dataset": [126, 127, 146, 180, 189, 190, 191, 193, 194, 197, 198, 199, 211, 219, 230, 231, 232, 234, 235, 239, 240, 241, 253, 268, 269, 270, 272, 301, 321, 322, 323, 325, 326, 353, 374, 377, 392, 394, 395, 396, 414, 420, 425, 430, 431, 439, 453, 454, 464, 470, 473, 476, 477, 479, 482, 484, 485], "dataset_config_nam": 455, "dataset_format": [202, 244], "dataset_loc": [417, 456, 464, 480], "dataset_nam": 455, "dataset_path": 392, "dataset_registri": [202, 244], "dataset_typ": [202, 244], "datatyp": [91, 146, 475, 482, 485], "date": 476, "datetim": [185, 186], "db": [459, 461], "dbaeumer": 452, "dbox": 391, "dco": 390, "ddr5": 485, "de": 392, "deal": 374, "deberta": 485, "debug": [153, 372, 381, 417, 444, 448, 452, 482, 483], "debug_stripp": 424, "dec": 471, "decapoda": 485, "decid": [102, 185, 186, 266, 297, 319, 395, 396, 431, 473, 477, 482], "decim": 385, "decis": 430, "declar": 452, "decod": [141, 212, 254, 265, 318, 430, 481], "decode_singl": 391, "decodeimag": 481, "decompos": [53, 54], "decor": [4, 22, 53, 54, 56, 134, 147, 157, 167, 172, 180, 182, 216, 223, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 365, 385, 391, 392, 395, 482], "decorator_metr": [272, 325], "decreas": [84, 456, 470], "dedic": [185, 186], "dedicated_qdq_pair": [29, 185, 186, 473], "deem": 389, "deep": [394, 395, 396, 414, 427, 428, 431, 432, 434, 436, 439, 440, 442, 445, 451, 471, 473, 482, 483, 485], "deep_get": 336, "deep_set": 336, "deepcopi": 186, "deepen": 471, "deeper": 418, "deepest": 418, "deepst": 186, "def": [53, 54, 56, 189, 190, 230, 231, 353, 372, 374, 391, 395, 414, 415, 418, 419, 420, 430, 431, 473, 479, 480, 482], "default": [4, 32, 83, 134, 141, 146, 184, 185, 186, 189, 190, 193, 200, 201, 202, 212, 216, 230, 231, 234, 242, 243, 244, 254, 257, 261, 262, 265, 274, 296, 316, 318, 325, 334, 371, 377, 380, 385, 391, 395, 414, 415, 424, 427, 428, 430, 431, 432, 439, 442, 444, 448, 456, 459, 464, 465, 466, 468, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484], "default_col": [193, 234], "default_config": 184, "default_dataload": 236, "default_dtyp": [314, 369], "default_opset_vers": 128, "default_workspac": [185, 186], "defaultdataload": [193, 199, 234, 241], "defici": 477, "defin": [72, 136, 165, 167, 172, 173, 174, 179, 180, 181, 182, 185, 186, 189, 190, 230, 231, 275, 276, 278, 279, 280, 287, 292, 295, 296, 297, 299, 326, 353, 374, 384, 389, 392, 395, 396, 414, 415, 418, 419, 424, 427, 430, 431, 452, 469, 470, 473, 476, 478, 479, 480, 482, 484], "definit": [134, 143, 194, 198, 235, 240, 373], "degrad": [419, 470, 482], "delet": [456, 470], "delete_assign": 352, "delight": 442, "deliv": [431, 471, 477], "delta": 442, "demand": 476, "demo": 431, "democrat": [436, 471], "demonstr": [421, 434, 464, 465, 466, 480], "denot": 479, "dens": [165, 182, 185, 186, 299, 454, 470, 485], "dense_shap": [204, 246, 415], "densenet": 485, "densiti": 482, "denver": [270, 323], "depend": [2, 189, 190, 217, 230, 231, 326, 353, 374, 390, 423, 424, 457, 472, 473, 482], "deploi": [390, 418, 431, 457, 461, 476, 482], "deploy": [416, 434, 451, 471, 474, 479], "deprec": [446, 449, 477, 481], "depth": [146, 418, 475], "depthwiseconv2dn": [51, 57, 111, 121, 424], "dequant": [30, 31, 32, 37, 74, 77, 78, 79, 80, 82, 136, 146, 385, 391, 396, 479, 480], "dequantize_cast_optim": 38, "dequantize_data": 31, "dequantize_data_with_scale_zero": 31, "dequantize_per_channel": 479, "dequantize_tensor": 385, "dequantize_weight": 385, "dequantizecastoptim": 37, "dequantizelinear": 31, "deriv": [154, 161, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 258, 295, 297, 299], "derogatori": 389, "desc": 431, "descend": 454, "descent": [165, 394, 471], "describ": [395, 397, 417, 424, 453, 480], "descript": [2, 118, 372, 391, 396, 397, 414, 459, 463, 479], "deseri": 141, "design": [154, 199, 221, 226, 241, 325, 358, 392, 394, 431, 439, 442, 470, 473, 483], "desir": [186, 212, 216, 254, 257, 396, 397, 470, 479, 481], "dest": 91, "destin": [134, 260, 274], "detach": 479, "detail": [30, 150, 165, 216, 257, 385, 386, 389, 394, 396, 397, 413, 418, 424, 425, 426, 430, 431, 432, 434, 442, 451, 459, 460, 470, 476, 477, 478, 479, 480, 482, 483], "detect": [144, 146, 165, 185, 186, 268, 272, 321, 325, 330, 390, 391, 434, 441, 442, 470, 482], "detection_box": [268, 321, 431, 484], "detection_boxes_list": [268, 321], "detection_class": [268, 321, 431, 484], "detection_classes_list": [268, 321], "detection_mask": [268, 321], "detection_scor": [268, 321, 431, 484], "detection_scores_list": [268, 321], "detection_typ": [268, 321], "detectionboxes_precis": [272, 325], "detectioncoco": 485, "detections_list": [268, 321], "detector": 144, "determin": [161, 167, 172, 183, 185, 186, 379, 389, 391, 413, 470, 473, 479], "determinist": 431, "dettmer": 476, "dev": [423, 444, 448], "develop": [136, 336, 390, 391, 428, 431, 432, 434, 440, 451, 457, 470, 471, 475, 478], "deviat": [216, 257, 417, 481], "devic": [2, 65, 75, 76, 77, 78, 79, 80, 83, 93, 117, 122, 133, 140, 141, 146, 162, 165, 166, 180, 184, 185, 186, 380, 396, 414, 418, 431, 432, 434, 437, 442, 451, 470, 472, 474, 476], "device_id": 141, "devop": 390, "df": 91, "diag": 32, "diagnos": 417, "diagnosi": [134, 185, 186, 431, 454, 455, 456, 471, 477, 483], "diagnosis_help": 395, "diagnost": 453, "diagon": [32, 476], "diagram": [396, 397, 417, 482], "dict": [2, 32, 102, 134, 135, 136, 141, 146, 147, 152, 157, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 199, 217, 223, 230, 231, 241, 260, 262, 267, 268, 269, 270, 272, 275, 278, 279, 280, 287, 290, 292, 295, 296, 297, 298, 299, 304, 307, 313, 316, 320, 321, 322, 323, 325, 326, 334, 353, 368, 371, 372, 374, 375, 377, 384, 385, 391, 396, 422, 430, 470, 472, 473, 479, 480, 482], "dictionari": [53, 54, 56, 134, 135, 136, 141, 146, 185, 186, 215, 256, 268, 275, 278, 280, 321, 385], "diff": 451, "differ": [129, 147, 151, 155, 176, 185, 186, 194, 202, 216, 218, 235, 244, 257, 263, 272, 278, 280, 289, 300, 325, 336, 379, 389, 391, 392, 396, 414, 415, 417, 418, 420, 421, 426, 427, 430, 431, 433, 444, 448, 453, 456, 459, 468, 470, 473, 476, 479, 480, 481, 482], "difficult": [395, 479], "difficulti": 479, "diffus": [394, 471], "digit": [265, 318, 385, 471], "dilat": 44, "dilated_contract": 62, "dilatedcontract": 44, "dim": [216, 257, 476, 479, 481], "dimens": [53, 54, 91, 193, 216, 234, 257, 415, 418, 476, 481], "dir": [146, 200, 242, 380, 384, 415, 423, 426], "direct": [86, 171, 295, 470], "direct8bit": 12, "direct8bitoper": 12, "direct_q8": 17, "directli": [163, 185, 186, 199, 241, 268, 272, 296, 321, 325, 430, 431, 438, 470, 472, 473, 480], "directori": [185, 186, 201, 202, 243, 244, 334, 380, 382, 384, 385, 415, 420, 423, 444, 446, 448, 449, 455, 457, 480], "dirty_decay_m": 437, "disabl": [134, 185, 186, 389, 451, 456, 475, 476], "disable_al": [185, 186, 472], "disable_random": 134, "disappear": 480, "disc": 441, "discard": 414, "discord": 394, "discourag": 470, "discov": [413, 480], "discret": [4, 482], "discrimin": 485, "discuss": 394, "dispatch": [396, 427, 458, 461], "dispatch_task": 461, "dispers": [417, 454], "displai": [185, 186, 313, 314, 368, 369, 385, 451, 454], "dist": [446, 449], "distanc": [385, 418], "distil": [154, 185, 186, 218, 225, 226, 264, 394, 421, 425, 427, 469, 483, 484], "distil_loss": [185, 186, 431], "distil_loss_conf": 418, "distilbert": [200, 242, 394, 415, 432, 471, 485], "distilgpt2": 485, "distillation_conf": [154, 258], "distillation_criterion": [419, 431, 469], "distillationcallback": 154, "distillationconfig": [185, 186, 374, 418, 419, 431, 469], "distilroberta": 485, "distort": 396, "distribut": [2, 4, 129, 151, 185, 186, 191, 193, 194, 197, 198, 199, 219, 232, 234, 235, 239, 240, 241, 379, 394, 396, 414, 418, 428, 446, 449, 453, 456, 464, 471, 473, 476, 477, 479, 483, 485], "distribute_calib_tensor": 2, "distributedoptim": 420, "distributedsampl": 420, "distutil": 423, "div_": 479, "dive": [424, 483], "diverg": [4, 375, 379, 397, 413, 418, 482], "divid": [414, 461, 479, 482], "divis": 32, "dl": [263, 273, 287, 292, 300, 326, 417, 426, 438, 451, 471, 485], "dlabel": 391, "dlrm": [272, 325], "dmlexecutionprovid": 473, "dnnl_primitive_cache_capac": 437, "dnnlexecutionprovid": [432, 473], "do": [154, 180, 185, 186, 199, 200, 241, 242, 258, 262, 265, 268, 298, 318, 321, 384, 389, 396, 415, 420, 424, 427, 430, 431, 446, 449, 470, 475, 477, 479, 482], "do_constant_fold": 262, "do_ev": [439, 440, 455, 462, 465, 466], "do_lower_cas": [200, 215, 216, 242, 256, 257, 415, 481], "do_train": 455, "doc": [169, 170, 185, 186, 295, 313, 314, 325, 353, 368, 369, 372, 385, 430, 431, 446, 449, 457], "doc_span_index": [216, 257], "doc_strid": [216, 257, 481], "doc_token": [216, 257], "docstr": [186, 372], "docstyl": 390, "document": [216, 257, 372, 396, 397, 402, 420, 432, 436, 446, 449, 450, 457, 458, 460, 470, 477, 481, 483], "doe": [265, 318, 371, 414, 415, 430, 431, 476, 477, 481], "doesn": [141, 216, 257, 395, 420, 431, 432, 452, 484], "dolli": [470, 479, 485], "domain": [90, 91, 185, 186, 470, 482], "don": [129, 151, 167, 185, 186, 391, 457, 470, 482], "done": [391, 418, 419, 435, 451, 460, 464, 465, 470, 473], "dong": 136, "dot": [432, 473], "dotdict": [184, 186, 336, 385], "doubl": 471, "dowload_hf_model": 142, "down": 445, "download": [142, 202, 244, 415, 417, 428, 456, 462, 477], "download_url": [202, 244], "downstream": 470, "dq": [93, 95, 117, 479], "draft": [446, 449], "draw": [414, 478, 482], "drive": 397, "driven": [336, 394, 431, 451, 468, 480], "drop": [184, 268, 296, 321, 390, 431, 432, 445, 470, 476, 479, 485], "drop_last": [194, 198, 235, 240], "dropdown": 452, "dry_run": 420, "dscore": 391, "dtype": [31, 32, 88, 91, 185, 186, 203, 204, 212, 216, 245, 246, 254, 257, 380, 396, 397, 415, 417, 422, 424, 434, 456, 472, 473, 476, 479, 480, 481, 484], "dtype_map": 31, "dtype_to_nam": 31, "duc": 485, "due": [397, 422, 470, 473, 479, 480], "dummi": [45, 165, 203, 204, 245, 246, 272, 325, 394, 415, 425, 430, 431, 453], "dummy_biasadd": 62, "dummy_dataset": [206, 248], "dummy_dataset_v2": [206, 248], "dummy_v2": [204, 246, 415], "dummydataset": [203, 204, 245, 246], "dump": [3, 139, 146, 152, 262, 385, 390, 456, 473, 477, 480], "dump_class_attr": 385, "dump_data_to_loc": 385, "dump_elapsed_tim": [385, 395], "dump_fp32": 132, "dump_op_typ": 3, "dump_tabl": 385, "dump_table_to_csv": 385, "dump_tim": 480, "duplic": [84, 94, 304, 357], "durat": [417, 460, 464, 465, 478], "dure": [2, 139, 141, 167, 171, 182, 185, 186, 295, 299, 336, 385, 396, 417, 431, 433, 458, 468, 469, 470, 473, 479, 480, 484], "dyna": [186, 277, 392, 427, 472], "dynam": [141, 186, 191, 232, 262, 314, 369, 395, 414, 418, 422, 427, 431, 434, 439, 440, 441, 442, 445, 451, 471, 482, 485], "dynamic_ax": [186, 262, 422], "dynamic_length": [200, 242, 415], "dynamic_quant_export": 262, "e": [141, 167, 185, 186, 389, 390, 418, 421, 425, 434, 439, 440, 444, 448, 470, 476, 479, 482], "e16": 390, "e2m1": 476, "each": [127, 134, 136, 141, 146, 184, 185, 186, 198, 202, 205, 212, 216, 240, 244, 247, 254, 257, 266, 268, 269, 270, 307, 319, 321, 322, 323, 362, 385, 390, 395, 396, 397, 415, 417, 418, 419, 424, 431, 436, 442, 445, 451, 459, 461, 468, 470, 474, 476, 478, 479, 480, 481, 482, 483], "eager": [180, 298, 352, 420, 427, 473, 475, 480], "earli": [185, 186, 431, 473, 482, 484], "eas": [428, 436, 471], "easi": [200, 242, 300, 422, 431, 454, 458, 471, 473, 476, 478], "easier": [444, 448, 451, 453, 471], "easili": [336, 395, 435, 439, 451, 468, 479], "echo": 437, "econom": 389, "ecosystem": [394, 471], "edg": 481, "edit": 389, "edouard": 479, "edu": [4, 202, 244, 415], "educ": 389, "effect": [179, 394, 395, 470, 471], "effici": [30, 150, 392, 394, 413, 414, 418, 434, 459, 469, 470, 471, 476, 479, 482], "efficientnet": 485, "efficientnet_b0": 485, "efficientnet_b3": 485, "efficientnet_b7": 485, "effort": 431, "effortlessli": 458, "eg": [146, 202, 244, 415, 472], "eightbit": 480, "einop": 454, "either": [141, 186, 268, 321, 435, 439, 459, 469, 472, 473], "elaps": 385, "electra": 485, "electron": 389, "elem_typ": 91, "element": [32, 169, 170, 184, 198, 240, 268, 295, 321, 385, 415, 427, 430, 470, 476, 479], "elementwise_over_al": 184, "elementwise_over_matmul_gemm_conv": 184, "eleutherai": [455, 479, 485], "elia": 476, "elimin": [52, 458], "els": [2, 134, 186, 198, 240, 336, 382, 439, 476, 480], "em": 485, "email": 394, "embed": [146, 413, 470], "embed_layernorm": 17, "embed_out": 470, "embedlayernorm": 13, "embedlayernormalizationoper": 13, "emerg": 479, "emnlp": [394, 471], "emot": 485, "empathi": 389, "empir": [129, 151], "empti": [142, 185, 186, 437, 474], "emsp": 470, "emul": [431, 473], "en": 392, "enabl": [32, 95, 136, 172, 185, 186, 297, 396, 397, 420, 428, 432, 434, 436, 439, 440, 442, 453, 455, 456, 458, 461, 470, 471, 476, 482], "enable_act": 136, "enable_al": [185, 186], "enable_auto_scal": [32, 476], "enable_bas": [185, 186], "enable_eager_execut": 420, "enable_extend": [185, 186], "enable_full_rang": [380, 474, 476], "enable_mse_search": [32, 476], "encapsul": [96, 189, 190, 230, 231, 326, 353, 374, 433], "encod": [141, 268, 321, 454, 481], "encodejp": 481, "encount": 414, "encrypt": 453, "end": [134, 172, 173, 174, 179, 185, 186, 200, 215, 216, 242, 256, 257, 297, 303, 354, 356, 395, 396, 397, 418, 419, 424, 428, 431, 445, 461, 468, 470, 480, 481, 482], "end_epoch": [431, 472, 484], "end_posit": [216, 257], "end_step": [172, 185, 186, 297, 431, 470, 472], "endlessli": 482, "english": 470, "enhanc": [413, 434, 470, 471, 475], "enjoi": [435, 439, 442], "enough": 473, "ensp": [415, 481], "ensur": [2, 216, 257, 304, 357, 420, 473, 481], "ensure_list": 2, "enter": [445, 451, 459], "entir": [353, 374, 391, 396, 397, 413, 458, 470, 479], "entranc": [65, 192], "entri": [53, 54, 56, 136, 157, 223, 263, 301, 385, 429], "entropi": [185, 186, 413, 482], "enum": 2, "enumer": [279, 374, 395, 418, 419, 420, 431, 469, 470, 480], "env": [152, 217, 423, 464, 465, 466], "env_var": [152, 217], "environ": [31, 152, 217, 389, 412, 444, 448, 451, 459, 462, 464, 465, 466, 482], "eoferror": 139, "ep": [4, 151, 432], "epoch": [154, 173, 174, 179, 258, 297, 374, 414, 418, 419, 420, 431, 469, 470, 484], "epsilon": 484, "equal": [91, 129, 134, 151, 372, 385, 470, 476], "equal_dict": 385, "equat": [31, 270, 272, 323, 325, 473, 479], "equival": [69, 394, 471, 476, 479], "erf": 55, "error": [32, 91, 136, 141, 153, 272, 307, 325, 362, 381, 417, 430, 435, 456, 457, 460, 476, 479, 482], "error_msg": 91, "eslint": [452, 457], "esri": 428, "essenti": [413, 423], "estim": [134, 272, 325, 334, 482], "estimator_sess": 334, "et": [136, 413, 476, 479], "etc": [152, 154, 215, 256, 258, 263, 270, 287, 292, 300, 323, 326, 353, 384, 394, 418, 427, 453, 457, 470, 478, 482], "ethnic": 389, "euclidean": [385, 418], "eural_compressor": 336, "eval": [391, 414, 417, 434, 473, 480], "eval_dataload": [152, 185, 186, 189, 190, 230, 231, 301, 302, 303, 304, 305, 307, 308, 309, 310, 326, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 374, 412, 426, 430, 431, 453, 473, 474, 482], "eval_dataset": 454, "eval_frequ": [154, 258], "eval_func": [126, 189, 190, 230, 231, 301, 302, 303, 304, 305, 307, 308, 309, 310, 326, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 372, 374, 391, 414, 415, 417, 418, 419, 420, 431, 454, 473, 474, 475, 476, 482, 484], "eval_metr": [189, 190, 326, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 374, 430, 453, 473], "evalu": [152, 154, 167, 185, 189, 190, 200, 217, 230, 231, 242, 258, 265, 268, 269, 270, 272, 274, 318, 321, 322, 323, 325, 326, 336, 353, 374, 377, 392, 395, 396, 415, 418, 419, 426, 427, 430, 431, 432, 434, 440, 442, 445, 451, 468, 470, 473, 478, 479, 480, 482, 484], "evaluate_squad": [271, 324], "evaluation_result": 420, "evaluation_time_cost": 420, "even": [474, 476, 479], "evenli": 414, "event": [389, 480], "ever": 457, "everi": [53, 54, 56, 167, 170, 172, 185, 186, 295, 297, 395, 414, 439, 444, 448, 474, 476, 482], "everyon": 389, "everyth": [184, 296, 439], "evid": 454, "evolutionari": 392, "exact": [269, 322], "exact_match_scor": [269, 322], "exactli": [420, 435], "exampl": [2, 32, 136, 141, 146, 152, 165, 166, 180, 185, 186, 200, 201, 202, 212, 216, 242, 243, 244, 254, 257, 268, 269, 270, 272, 298, 321, 322, 323, 325, 326, 336, 353, 371, 372, 374, 384, 385, 389, 394, 396, 397, 402, 426, 427, 434, 437, 438, 439, 442, 459, 462, 475, 477, 481, 482, 483, 486], "example_gener": 372, "example_index": [216, 257], "example_inp": 146, "example_input": [146, 185, 186, 262, 384, 422], "exampleclass": 372, "exce": [216, 257, 476, 481], "exceed": 334, "excel": 476, "except": [141, 372, 385, 457, 473, 474], "exchang": 422, "exclud": [185, 186, 395, 413, 475], "excluded_op_nam": [57, 58, 185, 186, 431, 470], "excluded_precis": [185, 186, 475], "execut": [30, 31, 40, 141, 152, 172, 173, 174, 185, 186, 297, 301, 303, 352, 353, 354, 356, 374, 377, 384, 385, 417, 418, 419, 431, 432, 436, 437, 444, 445, 448, 451, 452, 453, 454, 458, 461, 469, 470, 473, 476, 478, 482, 485], "executionprovid": 485, "exemplifi": 470, "exhaust": [186, 280, 306, 361, 472], "exhaustivetunestrategi": [305, 359], "exist": [40, 152, 217, 334, 385, 422, 430, 438, 482], "exit": [185, 186, 303, 354, 356, 431, 459, 464, 465, 466, 484], "exit_polici": [431, 484], "exp": [185, 186, 431, 470], "expanddim": 46, "expanddims_optim": 62, "expanddimsoptim": 46, "expect": [202, 244, 389, 390, 423, 451, 473, 476, 482], "expens": [418, 431, 482], "experi": [389, 434, 456, 478, 479, 482], "experienc": 477, "experiment": [317, 392, 415, 419, 420, 422, 428, 431, 470, 472, 473, 477, 481], "explain": [397, 417, 479], "explicit": 389, "explicitli": [185, 186, 426, 470], "explor": 395, "exporsingleimagedetectionboxestococo": [268, 321], "export": [87, 186, 264, 268, 321, 394, 425, 437, 452, 454, 480, 483], "export_compressed_model": [380, 476], "exportconfig": 186, "exportdetectionstococo": [268, 321], "exportgroundtruthtococo": [268, 321], "exportsingleimagedetectionboxestococo": [268, 321], "exportsingleimagedetectionmaskstococo": [268, 321], "exportsingleimagedetectionstococo": [268, 321], "exportsingleimagegroundtruthtococo": [268, 321], "expos": 453, "express": [265, 318, 389], "ext": [444, 446, 448, 449, 450], "extend": [396, 397], "extend_engin": 96, "extens": [139, 141, 385, 392, 394, 395, 424, 427, 428, 431, 432, 433, 435, 440, 441, 442, 446, 449, 450, 454, 470, 471, 473, 476, 479, 482, 483, 484], "extern": 453, "extra": [141, 270, 323, 431], "extra_opset": 88, "extract": [53, 54, 56, 134, 165, 202, 244, 316, 371, 415], "extract_data_typ": [316, 371], "extrem": 413, "f": [141, 162, 418, 420, 473, 476, 479], "f1": [269, 271, 272, 322, 324, 325, 420, 430, 431, 454, 478, 485], "f1_score": [269, 270, 322, 323], "f5": 452, "face": [142, 389, 394, 402, 434, 438, 458, 460, 471, 477, 485], "facebook": [457, 479, 485], "facil": 141, "facilit": 434, "fact": 473, "factor": [4, 127, 476, 479, 485], "factori": 332, "fail": [141, 391, 414, 422, 460], "failur": [390, 391], "fair": 389, "faith": 389, "fake": [30, 32, 99, 143, 150, 371, 373, 431, 473, 476, 479], "fake_qu": [34, 74, 93, 117, 122], "fake_quant": 100, "fakeaffinetensorquantfunct": [143, 373], "fakequ": 74, "fakequant": 99, "fakequantizebas": 99, "falcon": [394, 470, 479, 485], "fall": [141, 146], "fallback": [146, 186, 307, 308, 360, 362, 363, 422, 432, 454, 475, 482], "fallback_list": 29, "fallback_ord": 146, "fallbacktuningsampl": [313, 368], "fals": [2, 3, 29, 30, 31, 32, 33, 34, 35, 57, 58, 75, 78, 85, 88, 89, 91, 99, 117, 122, 129, 132, 133, 134, 140, 141, 145, 146, 152, 155, 158, 185, 186, 191, 193, 197, 199, 200, 202, 212, 216, 217, 218, 219, 225, 232, 234, 239, 241, 242, 244, 254, 257, 268, 272, 321, 325, 336, 353, 372, 377, 380, 384, 385, 395, 396, 414, 415, 424, 430, 431, 444, 448, 454, 462, 465, 466, 472, 473, 476, 479, 480, 481, 482, 484], "familiar": 483, "famou": 476, "faq": [389, 394], "fashionmnist": [202, 244, 415], "fast": [179, 185, 186, 394, 470, 471, 476], "fast_bias_correct": [149, 185, 186, 473], "fastai": 428, "fastapi": 467, "fastbiascorrect": [148, 151], "faster": [414, 416, 422, 471, 482, 485], "fatal": [153, 381], "father": [142, 165], "fault": 390, "fault_tolerant_fil": 385, "fbgemm": [432, 473], "fc": [146, 186, 470], "fc1": 146, "fc2": [32, 146], "fcn": 485, "feasibl": [185, 186], "featur": [185, 186, 200, 201, 212, 216, 242, 243, 254, 257, 390, 394, 412, 414, 416, 418, 431, 432, 433, 434, 438, 439, 442, 451, 453, 457, 470, 471, 477, 479, 481], "feb": 471, "fed": 482, "feed": [134, 199, 241, 418, 470], "feed_dict": [134, 199, 241], "feedstock": [446, 449], "feedward": 176, "feel": [453, 457], "fefin": [190, 231], "feng": 429, "ferplu": 485, "fetch": [47, 146, 149, 194, 235, 396, 415, 464, 465, 466], "fetch_modul": 146, "fetch_weight_from_reshap": 62, "fetcher": 236, "fetchweightfromreshapeoptim": 47, "few": [470, 471, 482], "ffffff": 482, "ffn": [144, 176], "ffn2_sparsiti": [163, 470], "ffn_modul": 176, "ffn_name": 176, "field": [185, 186, 202, 244, 268, 321, 391, 395, 397, 420, 431, 478, 482, 484], "field_nam": 385, "figur": [392, 444, 445, 448, 474], "file": [91, 134, 139, 141, 142, 146, 149, 158, 180, 184, 185, 186, 189, 190, 200, 201, 202, 205, 215, 216, 222, 225, 230, 231, 242, 243, 244, 247, 256, 257, 258, 263, 268, 274, 275, 276, 278, 287, 292, 296, 298, 300, 301, 321, 326, 336, 340, 341, 344, 353, 384, 385, 390, 392, 395, 396, 397, 420, 423, 426, 429, 430, 431, 433, 437, 446, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 464, 465, 466, 468, 472, 473, 476, 480, 481], "file_lik": 141, "file_typ": 385, "filenam": [202, 244, 385, 415, 457], "filepath": [141, 385], "fill": [451, 478, 481, 482], "filter": [2, 200, 201, 202, 203, 204, 205, 207, 211, 242, 243, 244, 245, 246, 247, 249, 253, 385, 397, 415, 427, 470, 480], "filter_registri": [209, 251], "filter_typ": [209, 251], "final": [141, 165, 172, 184, 297, 396, 431, 437, 468, 470, 473, 477, 482], "find": [31, 53, 54, 56, 91, 134, 272, 279, 304, 325, 357, 385, 395, 417, 437, 444, 448, 451, 452, 454, 456, 470, 476, 478, 479, 480, 482], "find_by_nam": 31, "find_opset": 91, "find_pareto_front": 279, "fine": [178, 200, 242, 415, 437, 470, 471, 473], "finer": [479, 482], "finest": 479, "finetun": [454, 470, 476, 485], "finish": [445, 461], "firewal": 453, "first": [129, 141, 146, 151, 166, 185, 186, 200, 242, 268, 314, 321, 358, 369, 385, 391, 392, 395, 396, 397, 415, 417, 428, 432, 436, 445, 446, 449, 452, 454, 455, 456, 472, 473, 475, 476, 478, 479, 480, 482, 484], "first_conv_or_matmul_quant": [185, 186, 473], "first_n": 132, "fit": [152, 167, 185, 186, 304, 326, 353, 357, 372, 374, 391, 394, 412, 414, 415, 417, 420, 425, 426, 430, 431, 432, 433, 453, 454, 470, 473, 474, 475, 476], "fit_with_raw_cmd": 152, "fix": [134, 177, 179, 200, 242, 297, 414, 415, 438, 470, 473, 476, 479, 482], "fix_ref_type_of_graph_def": 134, "flag": [185, 186, 266, 319, 417], "flan": 470, "flatten_static_graph": 165, "flex": [394, 428], "flexibl": [263, 287, 292, 300, 394, 418, 458, 470, 476], "flip": [212, 216, 254, 257, 481], "float": [4, 31, 32, 126, 127, 136, 167, 172, 181, 184, 185, 186, 200, 212, 242, 254, 266, 268, 269, 270, 297, 319, 321, 322, 323, 368, 372, 382, 385, 415, 430, 472, 473, 479, 481], "float16": [6, 9, 31, 380, 415, 476], "float16activationoper": 6, "float16binaryoper": 9, "float32": [203, 204, 216, 245, 246, 257, 268, 321, 380, 395, 412, 415, 431, 473, 476, 479, 481], "float_dict": 136, "float_model": 136, "float_to_bfloat16": 31, "float_to_float16": 31, "floatfunct": 391, "flop": 476, "flow": [269, 270, 322, 323, 391, 392, 431], "flowchart": 482, "focu": [413, 482], "focus": [389, 395], "fold": [48, 49, 146, 262, 424, 476, 479], "fold_batch_norm": 62, "fold_const": 62, "foldbatchnormnodesoptim": 48, "folder": [134, 202, 207, 244, 249, 326, 353, 384, 415, 439, 444, 448, 457, 464, 465, 466, 476, 480], "follow": [74, 96, 166, 202, 244, 265, 268, 318, 321, 389, 390, 391, 392, 395, 396, 397, 414, 415, 418, 419, 420, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444, 448, 453, 455, 456, 459, 464, 469, 470, 472, 473, 476, 479, 480, 482], "footprint": [185, 186, 263, 287, 292, 300, 336, 419, 431, 468, 470, 472, 474], "forc": 475, "forfeit": 453, "forg": [423, 428], "fork": [390, 446, 449], "form": [270, 323, 417, 418, 451], "format": [6, 31, 40, 134, 146, 185, 186, 200, 201, 202, 242, 243, 244, 262, 268, 274, 314, 321, 369, 372, 380, 394, 396, 397, 415, 420, 422, 430, 431, 432, 433, 434, 456, 459, 471, 473, 476, 477], "format_vers": 139, "formerli": 428, "formul": 431, "formula": [470, 479], "forpytorch": 428, "fortensorflow": 428, "fortieth": 470, "forward": [2, 146, 184, 396, 431, 453, 470, 472, 473, 476, 479, 480], "forward_wrapp": 146, "foster": 389, "found": [154, 258, 394, 418, 432, 439, 456, 460, 479, 482, 485], "foundat": 471, "four": [461, 480, 485], "fp1": 479, "fp16": [32, 186, 314, 369, 473], "fp2": 479, "fp32": [29, 30, 32, 65, 117, 122, 129, 146, 151, 185, 186, 189, 190, 230, 231, 261, 262, 272, 307, 314, 325, 358, 362, 369, 377, 380, 384, 385, 390, 394, 395, 397, 417, 424, 425, 430, 431, 432, 441, 453, 454, 455, 456, 472, 473, 475, 476, 477, 478, 479, 480, 482, 484, 485], "fp32_acc": 442, "fp32_baselin": [377, 395], "fp32_graph": 129, "fp32_model": [134, 136, 146, 262, 385, 395, 474], "fp32_model_path": 474, "fp32_onnx_config": 422, "fp32_onnx_path": 262, "fp32_op": [34, 36, 93], "fp32_tensor": 385, "fp4": [394, 476], "fp8": [394, 471], "fpath": [202, 244], "frac": [417, 479], "fraction": [212, 254, 481], "fragment": 395, "framework": [2, 152, 155, 157, 162, 168, 172, 175, 179, 180, 187, 188, 192, 193, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 216, 218, 219, 223, 228, 229, 233, 234, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 257, 263, 272, 273, 300, 308, 314, 325, 326, 327, 328, 330, 363, 369, 377, 394, 395, 397, 413, 417, 420, 421, 425, 426, 427, 428, 430, 431, 432, 453, 454, 470, 471, 473, 477, 480, 481, 482, 483, 484, 485], "framework_dataset": [202, 244], "framework_specific_info": [33, 395], "frantar": [470, 476], "free": [30, 150, 179, 189, 190, 230, 231, 353, 389, 440, 445, 453, 461, 468, 478, 479], "freez": [74, 75, 76, 134, 434, 470], "freeze_fake_qu": 81, "freeze_valu": 81, "freeze_value_without_calib": 81, "freezefakequantopoptim": 74, "freezevaluetransform": 75, "freezevaluewithoutcalibtransform": 76, "frequenc": [154, 172, 185, 186, 258, 297, 431, 470, 484], "frequent": 428, "friendli": [424, 431, 471, 479, 483, 484], "from": [2, 31, 47, 53, 54, 56, 91, 134, 141, 142, 146, 152, 154, 155, 161, 162, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 194, 197, 200, 201, 202, 203, 204, 205, 207, 212, 218, 219, 222, 230, 231, 232, 235, 239, 242, 243, 244, 245, 246, 247, 249, 254, 258, 260, 261, 262, 265, 268, 269, 270, 274, 279, 295, 296, 297, 299, 314, 316, 318, 321, 322, 323, 326, 334, 336, 353, 369, 371, 372, 374, 377, 380, 384, 385, 389, 390, 391, 392, 395, 397, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 427, 430, 432, 433, 434, 438, 439, 440, 442, 452, 454, 456, 457, 461, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "from_logit": 484, "from_pretrain": [380, 431], "front": [279, 392], "frontend": [446, 449, 459], "frontend_grpc": 459, "frozen": [326, 334, 353, 433], "frozen_func": 134, "frozen_pb_sess": 334, "full": [31, 200, 201, 202, 242, 243, 244, 380, 385, 394, 413, 415, 417, 423, 429, 452, 457, 470, 476, 477], "fulli": [301, 431, 459, 473, 479], "fulltoken": [215, 256], "fun": 372, "func": [134, 146, 385, 473, 484], "func_dict": 377, "function": [125, 126, 139, 173, 174, 179, 185, 186, 189, 190, 201, 230, 231, 243, 275, 278, 287, 292, 378, 390, 391, 392, 395, 396, 397, 412, 414, 418, 419, 422, 426, 427, 428, 430, 431, 432, 442, 452, 458, 459, 470, 473, 476, 477, 478, 479, 480, 482, 483], "function1": 372, "function2": 372, "function3": 372, "fundament": [413, 431], "funnel": 485, "funsd": [454, 485], "further": [56, 186, 389, 432, 433, 434, 436, 445, 451, 473], "fuse": [2, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 77, 78, 79, 80, 82, 117, 122, 145, 146, 150, 391, 479, 480], "fuse_biasadd_add": 62, "fuse_column_wise_mul": 62, "fuse_conv_redundant_dequant": 81, "fuse_conv_requant": 81, "fuse_conv_with_math": 62, "fuse_decomposed_bn": 62, "fuse_decomposed_in": 62, "fuse_gelu": 62, "fuse_layer_norm": 62, "fuse_matmul_redundant_dequant": 81, "fuse_matmul_requant": 81, "fuse_pad_with_conv": 62, "fuse_pad_with_fp32_conv": 62, "fuse_qdq_bn": 116, "fuse_qdq_concatv2": 116, "fuse_qdq_conv": 116, "fuse_qdq_deconv": 116, "fuse_qdq_in": 116, "fuse_qdq_matmul": 116, "fuse_qdq_pool": 116, "fuse_reshape_transpos": 62, "fusebiasaddandaddoptim": 50, "fusecolumnwisemuloptim": 51, "fuseconvredundantdequantizetransform": 77, "fuseconvrequantizetransform": 78, "fuseconvwithmathoptim": 52, "fusedbatchnorm": 67, "fusedbatchnormv2": 67, "fusedbatchnormv3": [109, 119], "fusedbatcnormv3": 56, "fusedecomposedbnoptim": 53, "fusedecomposedinoptim": 54, "fusedinstancenorm": 113, "fusedmatmul": 19, "fusedmatmuloper": 19, "fusegeluoptim": 55, "fuselayernormoptim": 56, "fusematmulredundantdequantizetransform": 79, "fusematmulrequantizedequantizenewapitransform": 80, "fusematmulrequantizedequantizetransform": 80, "fusematmulrequantizenewapitransform": 80, "fusematmulrequantizetransform": 80, "fusenodestartwithconcatv2": [110, 120], "fusenodestartwithconv2d": [111, 121], "fusenodestartwithdeconv2d": 112, "fusenodestartwithfusedbatchnormv3": [109, 119], "fusenodestartwithfusedinstancenorm": 113, "fusenodestartwithmatmul": [114, 123], "fusenodestartwithpool": [115, 124], "fusepadwithconv2doptim": 57, "fusepadwithfp32conv2doptim": 58, "fusetransposereshapeoptim": 59, "fusion": [45, 47, 56, 64, 95, 112, 113, 114, 117, 118, 119, 123, 391, 395, 424], "futur": [150, 189, 190, 219, 230, 231, 427, 431, 442, 464, 465, 466, 483], "fvcore": 454, "fw": 396, "fwk": 330, "fx": [146, 185, 308, 363, 427, 432, 440, 441, 455, 471, 473, 475], "fx_model": 146, "fx_sub_module_list": 135, "fx_white_list": 146, "g": [91, 141, 167, 185, 186, 390, 418, 421, 425, 434, 439, 470, 476, 477, 479, 482], "gain": [445, 469, 471], "gan": 471, "gap": [417, 433], "gather": [2, 17, 185, 186, 295], "gatheroper": 14, "gaussian": [304, 357, 482], "gavgpool": 17, "gcc": 485, "gcp": [461, 471], "gelu": 55, "gemm": [17, 185, 186], "gemm_to_matmul": [185, 186, 473], "gemmoper": 16, "gen": [432, 471, 473, 475], "gen_bar_updat": [202, 244], "gender": 389, "gener": [2, 34, 35, 73, 108, 134, 146, 152, 165, 184, 189, 190, 191, 199, 202, 203, 204, 205, 216, 230, 231, 232, 241, 244, 245, 246, 247, 257, 265, 273, 304, 318, 326, 349, 353, 357, 372, 374, 390, 391, 395, 397, 414, 418, 430, 431, 432, 434, 439, 444, 446, 448, 449, 451, 453, 454, 468, 470, 471, 473, 475, 476, 479, 480, 481, 482], "generaltopk": [272, 325], "generate_activation_observ": 146, "generate_feed_dict": 134, "generate_ffn2_pruning_config": 163, "generate_mha_pruning_config": 163, "generate_prefix": 152, "generate_pruner_config": 184, "generategraphwithqdqpattern": 93, "generator1": 372, "geomean": 427, "gestalt": 471, "get": [2, 30, 32, 53, 54, 56, 90, 91, 134, 142, 146, 152, 157, 158, 161, 162, 163, 165, 168, 175, 181, 182, 183, 184, 186, 194, 216, 217, 223, 225, 235, 257, 262, 295, 297, 299, 307, 314, 316, 325, 334, 353, 362, 369, 371, 377, 380, 382, 385, 396, 413, 423, 427, 428, 431, 437, 454, 456, 464, 465, 471, 476, 479, 482, 483, 486], "get_absorb_lay": 146, "get_activ": [158, 225], "get_adaptor_nam": [316, 371], "get_algorithm": 377, "get_all_fp32_data": 385, "get_all_pending_task": 461, "get_architectur": [152, 217], "get_attribut": 165, "get_blob_s": 32, "get_block_prefix": 146, "get_bounded_thread": [152, 217], "get_children": 142, "get_common_modul": 165, "get_const_dim_count": [53, 54], "get_core_id": [152, 217], "get_criterion": 161, "get_depth": 146, "get_dict_at_depth": 146, "get_element_under_depth": 146, "get_embedding_contigu": 146, "get_estimator_graph": 134, "get_example_input": 146, "get_fallback_ord": 146, "get_final_text": [216, 257], "get_framework_nam": 2, "get_func_from_config": 377, "get_graph_def": 134, "get_hidden_st": 146, "get_index_from_strided_slice_of_shap": 91, "get_input_output_node_nam": 134, "get_lay": 184, "get_max_supported_opset_vers": 90, "get_metr": 377, "get_model_fwk_nam": 330, "get_model_input_shap": 134, "get_model_path": 382, "get_model_typ": 334, "get_modul": 142, "get_module_input_output": 146, "get_mse_order_per_fp32": 146, "get_mse_order_per_int8": 146, "get_named_children": 142, "get_node_map": 262, "get_node_statu": 461, "get_number_of_socket": 385, "get_observer_dict": 480, "get_op_list": 385, "get_op_type_by_nam": 146, "get_pattern": [168, 295], "get_physical_id": [152, 217], "get_postprocess": 377, "get_preprocess": 377, "get_prun": [175, 297], "get_quant_dequant_output": 30, "get_quantizable_onnx_op": 262, "get_quantizable_ops_from_cfg": 146, "get_reg": 181, "get_reg_typ": 181, "get_schedul": [182, 299], "get_schema": 90, "get_siz": 385, "get_sparsity_ratio": 184, "get_sparsity_ratio_tf": 184, "get_statu": 461, "get_subgraphs_from_onnx": 91, "get_super_module_by_nam": 142, "get_tensor_by_nam": 134, "get_tensor_histogram": 385, "get_tensor_val_from_graph_nod": 134, "get_tensor_valu": 480, "get_tensorflow_node_attr": 91, "get_tensorflow_node_shape_attr": 91, "get_tensorflow_tensor_data": 91, "get_tensorflow_tensor_shap": 91, "get_tensors_info": 385, "get_tf_criterion": 183, "get_thread": [152, 217], "get_threads_per_cor": [152, 217], "get_torch_vers": 146, "get_torchvision_map": [216, 257], "get_tuning_histori": 385, "get_weight_from_input_tensor": 134, "get_weight_scal": 32, "get_weights_detail": 385, "getmtim": 454, "gholami": 470, "gigant": 479, "git": [390, 417, 423, 428, 453, 455, 456, 458, 459], "github": [4, 136, 169, 170, 180, 200, 242, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 353, 390, 394, 415, 417, 421, 428, 429, 431, 440, 446, 449, 453, 455, 456, 457, 458, 459, 462, 465, 466, 477], "give": [396, 451, 482], "given": [2, 4, 53, 54, 56, 90, 91, 102, 134, 142, 146, 216, 257, 268, 321, 353, 392, 397, 470, 479, 481], "glob": 454, "global": [101, 167, 185, 186, 281, 282, 284, 285, 286, 295, 371, 385, 391, 431, 470, 472, 482], "global_config": [184, 281, 282, 284, 285, 286], "global_st": 385, "global_step": [172, 297], "globalaveragepool": 15, "globalaveragepooloper": 15, "glue": [265, 272, 318, 325, 415, 430, 431, 440], "gluon": [2, 326, 353, 433], "glx": 423, "go": [424, 446, 449, 457, 472, 476, 481], "goal": [152, 258, 263, 287, 292, 300, 326, 353, 396, 414, 469, 473, 482], "good": [389, 473, 482], "googl": [394, 432, 471], "googleapi": [394, 425, 453, 456], "googlenet": 485, "got": [134, 396, 423, 480], "governor": 437, "gp": [304, 357], "gpt": [394, 455, 470, 479, 485], "gpt2": 485, "gptq": [32, 474, 476], "gptq_arg": 476, "gptq_g128asym": 476, "gptq_g32asym": 476, "gptq_g32asym_disable_last_matmul": 476, "gptq_quantiz": 32, "gptqw4g128asym": 485, "gptqw4g128sym": 485, "gptqw4g32asym": 485, "gptqw4g32sym": 485, "gpu": [75, 76, 83, 141, 185, 186, 394, 412, 427, 431, 432, 436, 442, 451, 472, 473, 474], "gracefulli": 389, "grad": [174, 179], "gradient": [161, 281, 394, 427, 431, 470, 471, 485], "gradient_accumulation_step": 431, "gradient_sensit": 283, "gradientcriterion": 161, "gradientsensitivityprun": 281, "gradual": [182, 299, 470], "grain": [178, 470, 471, 482], "gram": [266, 319], "granular": [395, 396, 397, 424, 427, 437, 473, 479, 484], "graph": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 116, 118, 122, 125, 128, 129, 131, 132, 133, 134, 165, 199, 241, 263, 327, 334, 352, 391, 395, 415, 418, 420, 426, 433, 434, 453, 456, 473, 474, 475, 480], "graph_bas": 73, "graph_convert": 97, "graph_converter_without_calib": 97, "graph_cse_optim": 62, "graph_def": [40, 126, 127, 134, 261, 326, 334, 352, 353], "graph_def_sess": 334, "graph_nam": 88, "graph_node_name_map": 134, "graph_optim": 264, "graph_optimization_conf": 263, "graph_optimization_level": [185, 186, 472, 473], "graph_output": 91, "graph_rewrit": 97, "graph_sess": 334, "graph_transform_bas": 131, "graph_util": 97, "graphanalyz": 96, "graphconvert": 34, "graphconverterwithoutcalib": 35, "graphcseoptim": 60, "graphdef": [60, 134, 334, 352, 433], "graphfoldconstantoptim": 49, "graphmodul": [146, 391, 475], "graphrewriterbas": 72, "graphrewriterhelp": 96, "graphtransform": 130, "graphtransformbas": 130, "grappler": [61, 424], "grappler_optim": 424, "grappler_pass": 62, "grappleroptim": 61, "great": 434, "greater": [134, 385, 464, 470, 482], "greatest": 482, "greatli": [474, 476], "grei": 474, "grid": [186, 280, 392, 470], "gridsearch": 280, "ground": [269, 270, 322, 323], "ground_truth": [269, 270, 322, 323], "groundtruth": [185, 186, 268, 321], "groundtruth_box": [268, 321], "groundtruth_boxes_list": [268, 321], "groundtruth_class": [268, 321], "groundtruth_classes_list": [268, 321], "groundtruth_dict": [268, 321], "groundtruth_is_crowd": [268, 321], "groundtruth_mask": [268, 321], "group": [32, 181, 282, 394, 427, 470, 476, 480, 481, 482, 485], "group_lasso": 283, "group_norm": 422, "group_siz": [32, 143, 146, 371, 373, 476], "grouplasso": 181, "grouplassoprun": 282, "groupnorm": 479, "grow": 476, "grown": 470, "growth": [431, 432, 470], "grpc": [458, 459, 463, 464, 465, 467], "grpc_api_port": [459, 464, 465, 466], "gt": [415, 479, 481], "guangxuan": [476, 479], "guarante": [185, 186, 431], "guess_output_rank": 31, "gui": [417, 427, 456, 470], "guid": [200, 242, 391, 394, 415, 418, 428, 434, 442, 451, 486], "guidelin": [393, 394], "gz": [202, 244, 415, 417, 446, 449], "h": [32, 185, 186, 216, 257, 420, 459, 460, 464, 465, 466, 481], "h384": 485, "h5": 433, "ha": [53, 54, 56, 60, 141, 171, 172, 217, 265, 295, 297, 318, 372, 390, 392, 395, 396, 397, 414, 422, 427, 431, 432, 437, 451, 456, 457, 459, 462, 470, 472, 473, 475, 478, 479, 482], "hack": [265, 318], "haihao": [429, 470], "half": [432, 442], "hand": 392, "handl": [47, 134, 150, 153, 381, 391, 393, 414, 459, 479], "handler": [385, 482], "hanj": 4, "hanwen": 429, "happen": 417, "harass": 389, "hard": [186, 414, 417], "hardswish": 422, "hardtanh": 479, "hardwar": [394, 395, 418, 427, 431, 451, 470, 471, 472], "harm": 389, "harmon": [270, 272, 323, 325], "has_zp": 32, "hash": [457, 460], "hassoun": 470, "hat": 485, "hatch": 449, "have": [4, 60, 69, 127, 134, 141, 162, 166, 168, 175, 198, 219, 240, 265, 268, 295, 297, 318, 321, 325, 353, 371, 372, 389, 390, 396, 397, 414, 415, 417, 420, 424, 429, 430, 431, 432, 434, 451, 454, 457, 459, 464, 465, 466, 468, 470, 473, 474, 476, 479, 482, 483], "haven": 470, "hawq": [136, 360, 482], "hawq_metr": 137, "hawq_top": 136, "hawq_v2": [186, 361], "hawq_v2_loss": 482, "hawq_v2tunestrategi": 360, "hbm": 428, "he": 395, "head": [163, 165, 169, 176, 184, 470, 485], "head_mask": 176, "header": [385, 423], "headless": [428, 445], "health": 460, "healthi": 460, "heavi": 419, "height": [171, 212, 216, 254, 257, 295, 420, 481, 484], "hellaswag": 485, "hello": 452, "helloworld": [415, 432, 481], "help": [146, 158, 225, 274, 433, 434, 440, 451, 459, 464, 465, 466, 476, 482, 483], "helper": [31, 96, 102, 134, 146, 200, 201, 202, 215, 242, 243, 244, 256, 260, 261, 262, 334, 383], "henc": 472, "here": [268, 321, 372, 396, 415, 420, 421, 422, 424, 425, 430, 439, 446, 449, 451, 454, 457, 459, 473, 477, 478, 479, 485], "herebi": 479, "herlper": 125, "hesit": 470, "hessian": [32, 136, 360, 476, 482], "hessian_trac": 136, "hessiantrac": 136, "heterogen": 471, "heurist": [434, 451], "hf": [142, 479, 485], "hf_model": [459, 463, 465], "hf_models_grpc": [463, 466], "hidden": [166, 171, 295, 395], "high": [31, 203, 204, 245, 246, 415, 417, 428, 456, 471, 482], "higher": [185, 186, 189, 190, 230, 231, 279, 326, 353, 374, 391, 417, 418, 422, 430, 454, 470, 473, 478], "higher_is_bett": [185, 186, 325, 353, 482, 484], "highest": [456, 462, 482], "highli": [471, 476], "highlight": 391, "hinder": 477, "hint": 385, "histogram": [4, 375, 385, 453, 480], "histogramcollector": 4, "histori": [185, 186, 384, 385, 451, 455, 482], "history_cfg": 384, "hoc": [265, 318], "hold": [268, 304, 321, 357, 415], "holder": [207, 249, 415], "home": 437, "hook": [136, 154, 158, 176, 225, 226, 287, 292, 377, 418, 419, 431, 470, 479, 480], "hope": 422, "horizont": [216, 257, 481], "horovod": 420, "host": [420, 459, 461, 464, 465, 466], "host1": [459, 464, 465], "host2": [459, 464, 465], "host_ip": 460, "hostconst": 83, "hostfil": [459, 461, 464, 465, 466], "hostnam": 459, "hour": 482, "hous": 459, "hover": 451, "how": [32, 141, 154, 161, 167, 173, 174, 179, 185, 186, 216, 257, 258, 295, 390, 391, 393, 395, 414, 415, 418, 419, 420, 426, 430, 431, 445, 446, 449, 450, 451, 453, 464, 465, 466, 470, 471, 473, 479, 481, 482, 483, 484], "howev": [141, 457, 470, 476, 479], "howpublish": 429, "hpo": [189, 230, 470], "hpoconfig": 186, "ht": 485, "html": [391, 394, 396, 413, 420, 427, 446, 449, 452, 454, 460, 464, 473], "htmllabel": 482, "http": [4, 136, 161, 169, 170, 179, 180, 200, 202, 242, 244, 265, 266, 268, 269, 270, 295, 297, 298, 318, 319, 321, 322, 323, 325, 353, 391, 394, 415, 417, 425, 428, 429, 431, 440, 446, 449, 453, 455, 456, 457, 458, 459, 462, 464, 465, 466, 470, 477], "hub": [142, 394, 421, 425, 442], "hue": 481, "hug": [142, 394, 458, 471], "huge": [419, 456, 470, 474], "huggingfac": [165, 176, 200, 242, 380, 415, 421, 425, 439, 440, 441, 442, 462, 463, 465, 466, 479, 485], "huggingface_model": [180, 298, 455], "human": 482, "hvd": [272, 325, 420], "hybirdblock": [326, 353], "hybridblock": 433, "hyper": [159, 484], "hyperparamet": [185, 186, 313, 478, 479, 482], "hypjudi": 454, "i": [2, 31, 32, 34, 35, 37, 40, 41, 46, 50, 56, 68, 71, 91, 118, 129, 134, 136, 139, 141, 145, 146, 151, 152, 154, 157, 158, 161, 165, 166, 172, 177, 178, 179, 180, 181, 183, 184, 185, 186, 189, 190, 191, 198, 199, 200, 201, 202, 203, 204, 207, 209, 212, 216, 217, 219, 223, 225, 226, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 249, 251, 254, 257, 265, 268, 270, 272, 274, 279, 287, 292, 296, 297, 301, 308, 318, 321, 323, 325, 326, 336, 340, 341, 344, 353, 358, 363, 371, 372, 374, 380, 384, 385, 389, 390, 391, 392, 395, 396, 397, 398, 400, 404, 407, 410, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "ia": 418, "ic": [428, 471], "id": [152, 215, 217, 256, 265, 267, 268, 269, 270, 318, 320, 321, 322, 323, 430, 459, 460, 464, 465, 466, 478, 482], "idea": [394, 453, 470, 479, 482], "ident": [60, 66, 166, 389, 418], "identifi": [53, 54, 56, 141, 268, 321, 334, 459, 470, 476], "idx": [279, 415], "idx1": [202, 244, 415], "idx3": [202, 244, 415], "ieee": [136, 432, 479], "ignor": [385, 413, 415, 476, 479, 482], "ignore_attr": 385, "ignore_kei": 385, "ii": 482, "illinoi": 4, "illustr": [396, 397, 419, 482], "ilsvr2012": 417, "ilsvrc2012": 392, "imag": [201, 202, 205, 207, 212, 216, 243, 244, 247, 249, 254, 257, 268, 321, 415, 420, 422, 470, 472, 479, 480, 481, 485], "image_format": [207, 249, 415], "image_height": [268, 321], "image_id": [268, 321, 430], "image_list": [205, 247, 415], "image_nam": 415, "image_recognit": [417, 456, 480], "image_tensor": [431, 484], "image_width": [268, 321], "imageclassifi": [202, 244], "imagefold": [202, 244, 415, 420, 431], "imagenet": [202, 205, 212, 244, 247, 254, 392, 417, 431, 440, 456, 470, 480, 481, 484, 485], "imagenet_dataset": [206, 248], "imagenet_transform": [213, 255], "imagenetraw": [205, 247, 415], "imagerecord": [415, 420, 484], "imageri": 389, "img": 394, "img1": [205, 247, 415], "img2": [205, 247, 415], "img_dir": [201, 243, 415], "img_raw": 456, "imgx": [205, 247, 415], "iml": 471, "immedi": [444, 448, 470], "impact": [360, 470, 477, 482], "imper": 391, "implement": [96, 129, 133, 141, 189, 190, 195, 198, 199, 200, 202, 230, 231, 237, 240, 241, 242, 244, 265, 318, 326, 336, 353, 360, 374, 397, 414, 415, 430, 431, 442, 452, 470, 473, 476, 477, 480, 482, 484], "implicitli": 141, "import": [134, 152, 185, 186, 274, 326, 336, 353, 372, 374, 385, 391, 392, 394, 397, 412, 414, 415, 417, 418, 419, 420, 422, 425, 430, 431, 432, 433, 434, 438, 440, 453, 454, 462, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "importerror": [139, 423], "improv": [178, 390, 413, 431, 434, 451, 452, 454, 470, 471, 473, 475, 476, 482, 483, 485], "in_graph": 134, "in_graph_is_binari": 134, "in_mp": 31, "inappropri": 389, "inc": [216, 257, 389, 396, 434, 441, 451, 453, 458, 471, 472, 477, 482], "inc_auto": 441, "inc_model": [422, 433], "incdataset": 454, "incept": [456, 485], "inception_v3": [456, 480], "inceptionv3": 480, "inceptionv3_dump_tensor": 480, "inceptionv3_fp32_pretrained_model": [456, 480], "incid": 389, "incit": 479, "includ": [139, 155, 161, 165, 167, 181, 183, 185, 186, 200, 202, 209, 216, 218, 242, 244, 251, 257, 263, 273, 295, 300, 372, 385, 389, 395, 396, 397, 414, 415, 417, 428, 429, 430, 431, 434, 437, 440, 445, 457, 461, 464, 465, 466, 470, 473, 475, 476, 480, 482], "include_lay": 375, "include_nod": 2, "include_tensors_kl": 2, "include_tensors_minmax": 2, "inclus": 389, "incom": 461, "incompat": 423, "incorpor": [396, 397, 419, 470, 482], "incorrect": 141, "increas": [185, 186, 416, 427, 434, 451, 456, 476, 482], "increasingli": 470, "increment": 482, "incub": 4, "independ": [176, 348, 352, 397], "index": [53, 54, 56, 91, 152, 184, 186, 194, 198, 202, 235, 240, 244, 279, 385, 415, 430, 452, 456, 476, 479], "indexdataset": [198, 240], "indexerror": 139, "indexfetch": [194, 235], "indic": [141, 154, 185, 186, 194, 198, 200, 235, 240, 242, 258, 268, 279, 321, 391, 414, 423, 454, 459, 480], "individu": [127, 167, 295, 348, 352, 389, 459, 470, 479], "industri": [430, 471], "infer": [2, 31, 91, 126, 146, 165, 263, 300, 334, 336, 353, 374, 395, 396, 413, 418, 419, 431, 432, 451, 468, 470, 471, 473, 476, 479, 480, 482], "infer_onnx_shape_dtyp": 91, "infer_shap": 31, "influenc": [146, 470], "info": [31, 146, 153, 169, 170, 184, 214, 219, 224, 295, 330, 380, 381, 385, 391, 417, 433, 461, 466], "inform": [2, 136, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 219, 221, 222, 230, 231, 295, 297, 298, 299, 301, 325, 385, 389, 390, 393, 394, 395, 396, 397, 398, 400, 404, 407, 410, 413, 418, 424, 431, 433, 446, 449, 452, 453, 456, 457, 459, 460, 464, 465, 470, 475, 476, 477, 480, 484, 485, 486], "infrastructur": 416, "ingest": [268, 321], "inherit": [154, 155, 177, 178, 182, 185, 197, 216, 218, 226, 239, 257, 297, 299, 392, 395, 396, 415], "init": [1, 5, 30, 149, 156, 162, 164, 415, 430, 482], "init_quantize_config": 102, "initi": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 30, 31, 32, 91, 102, 134, 141, 155, 172, 189, 190, 197, 200, 218, 230, 231, 239, 242, 296, 297, 314, 353, 369, 374, 392, 397, 415, 430, 450, 470, 473, 479, 482], "initial_op_tuning_cfg": [313, 368], "initial_spars": [472, 484], "initial_tuning_cfg_with_quant_mod": [314, 369], "initialize_name_count": 91, "inject": [45, 431], "injectdummybiasaddoptim": 45, "inlin": [134, 434, 439, 442], "inner": 392, "innov": [394, 442, 471], "inplac": 30, "input": [2, 3, 30, 31, 32, 40, 46, 50, 53, 54, 56, 57, 58, 60, 68, 69, 71, 72, 91, 95, 96, 102, 108, 127, 134, 135, 143, 145, 146, 150, 165, 166, 184, 185, 186, 189, 190, 200, 201, 202, 204, 212, 215, 216, 221, 230, 231, 242, 243, 244, 246, 254, 256, 257, 260, 261, 262, 325, 326, 330, 334, 353, 373, 374, 380, 382, 384, 385, 392, 395, 396, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 426, 430, 431, 432, 433, 434, 439, 470, 472, 473, 476, 479, 480, 481, 484], "input2tupl": 146, "input_data": [30, 414], "input_desc": 2, "input_dtyp": 91, "input_fil": [216, 257], "input_fn": [134, 334], "input_func": 146, "input_graph": [117, 122, 129, 349, 352, 395], "input_graph_def": [53, 54, 56], "input_id": [200, 216, 242, 257, 431], "input_mask": [216, 257, 431], "input_model": [287, 292, 433, 454, 455, 456, 480], "input_model_tensor": 385, "input_nam": [53, 54, 88, 128, 186, 261, 262, 422], "input_name_to_nod": 260, "input_node_map": [53, 54], "input_node_nam": [70, 117, 122, 134], "input_output_nam": 61, "input_pb": [130, 132, 133], "input_scal": [143, 373], "input_shap": [91, 204, 246, 415], "input_tensor": [134, 334], "input_tensor_data": 386, "input_tensor_ids_op_nam": 146, "input_tensor_nam": [134, 334], "input_valu": 146, "inputbatch": [216, 257], "inputfeatur": [200, 216, 242, 257], "inputs_as_nchw": [128, 261], "insecur": [141, 453], "insert": [63, 91, 93, 95, 99, 132, 150, 391, 396, 414, 427, 431, 434, 470, 473, 475, 476, 479, 480], "insert_log": 131, "insert_newlin": 385, "insert_print_nod": 62, "insert_qdq_pattern": 92, "insertlog": 132, "insertprintminmaxnod": 63, "inset": 431, "insid": [268, 321, 418, 419, 452, 470, 474, 482], "insight": [186, 382, 394, 417, 471, 477, 482, 483], "inspect": [477, 480], "inspect_result": 455, "inspect_sav": 455, "inspect_tensor": 395, "inspect_typ": 395, "inspir": 476, "instal": [420, 423, 425, 434, 436, 439, 442, 446, 449, 451, 452, 454, 455, 456, 486], "instanc": [101, 102, 152, 185, 186, 189, 190, 217, 230, 231, 269, 270, 272, 275, 278, 281, 282, 284, 285, 286, 304, 316, 322, 323, 325, 326, 353, 357, 371, 374, 382, 385, 389, 390, 391, 395, 412, 431, 436, 442, 476, 482, 484, 485], "instance_norm": 422, "instancenorm": [54, 479], "instances_val2017": [201, 243, 415], "instanti": 469, "instead": [186, 199, 241, 385, 437, 439, 442, 457, 470, 476], "institut": [202, 244], "instruct": [396, 397, 418, 428, 432, 446, 449, 453, 454, 455, 456, 470, 471, 472, 473, 479, 485], "instrument": 480, "insult": 389, "int": [2, 4, 30, 31, 32, 91, 126, 134, 144, 146, 163, 185, 186, 199, 200, 201, 212, 216, 241, 242, 243, 254, 257, 261, 262, 266, 268, 272, 279, 319, 321, 325, 342, 348, 352, 371, 372, 380, 385, 414, 415, 430, 431, 462, 472, 476, 481], "int32": [380, 415, 476], "int4": [394, 473, 485], "int64": 415, "int8": [6, 7, 31, 32, 73, 109, 110, 111, 117, 119, 120, 121, 122, 129, 134, 151, 152, 185, 186, 212, 254, 260, 261, 262, 314, 316, 369, 371, 384, 385, 390, 391, 394, 395, 396, 397, 412, 415, 419, 424, 431, 432, 436, 439, 441, 442, 445, 451, 454, 456, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484], "int8_acc": 442, "int8_conv_config": 396, "int8_model": [261, 262, 395], "int8_model_path": 474, "int8_node_name_revers": 134, "int8_onnx_config": [186, 422], "int8_sequ": 34, "int_label": 430, "int_max": 31, "integ": [154, 171, 172, 185, 186, 258, 268, 272, 279, 295, 297, 321, 325, 372, 395, 397, 413, 473, 476, 479, 482], "integerop": 485, "integr": [134, 155, 218, 395, 431, 452, 453, 458, 476], "intel": [157, 169, 170, 180, 220, 223, 259, 264, 271, 272, 295, 298, 306, 312, 317, 324, 325, 337, 353, 361, 367, 387, 389, 390, 392, 393, 395, 396, 397, 413, 415, 416, 418, 419, 421, 422, 424, 425, 429, 432, 433, 434, 439, 441, 442, 453, 454, 455, 456, 458, 459, 468, 469, 470, 471, 473, 475, 476, 477, 479, 480, 482, 483, 484], "intel_extension_for_transform": 441, "intelcaff": 471, "intellig": 471, "intelon": 471, "inteltensorflow": [205, 207, 247, 249, 428], "intend": 390, "inter": [185, 186], "inter_area": [212, 254], "inter_num_of_thread": [185, 186, 348, 352, 431, 472], "inter_pol": [212, 254], "interact": [457, 478], "interest": [389, 394, 453, 480], "interfac": [72, 99, 263, 287, 292, 300, 301, 377, 427, 431, 442, 460, 473, 477], "interleav": [201, 243, 415], "intermedi": [31, 136, 155, 185, 186, 218, 391, 427, 473], "intermediatelayersknowledgedistillationloss": [155, 218], "intermediatelayersknowledgedistillationlossconfig": [186, 418], "intern": [136, 198, 240, 314, 369, 414, 415, 430, 470], "internal_pattern": [314, 369], "internet": [202, 244, 415, 453], "interpol": [178, 216, 257, 430, 470, 481], "intersect": [272, 325, 395, 430], "interv": [178, 470], "intra": [185, 186], "intra_num_of_thread": [185, 186, 348, 352, 431, 472], "introduc": [60, 395, 396, 397, 424, 431, 473, 476, 477, 479, 483], "introduct": 483, "intuit": [476, 479], "inturn": 430, "inuput": 31, "invalid_lay": 167, "invent": 473, "invers": 476, "investig": [389, 456], "invok": [268, 321, 396], "io": [2, 141, 457], "iou": [272, 325], "iou_thr": [268, 272, 321, 325, 430], "iou_typ": [268, 321], "ip": 459, "ipex": [146, 185, 186, 384, 427, 431, 432, 436, 440, 441, 479], "ipex_config": 146, "ipex_config_path": 146, "ipexmodel": 335, "ir_vers": 30, "is_asymmetr": 396, "is_b_transpos": 31, "is_ckpt_format": 134, "is_contigu": 290, "is_fused_modul": 146, "is_glob": [167, 295], "is_imposs": [216, 257], "is_int8_model": 384, "is_large_model": 31, "is_list_or_tupl": 91, "is_measur": 336, "is_model_quant": 2, "is_onnx_domain": 91, "is_perchannel": 396, "is_qat": 145, "is_quant": 480, "is_saved_model_format": 134, "is_subgraph": 88, "isa": 442, "isiter": 2, "isn": [53, 54, 56], "issu": [389, 390, 393, 394, 428, 454, 456, 473, 480], "item": [31, 184, 185, 186, 215, 256, 296, 314, 369, 413, 420, 470, 479, 482], "item_list": 31, "item_typ": [314, 369], "itemstyl": 482, "iter": [2, 3, 91, 126, 134, 146, 152, 166, 172, 179, 182, 185, 186, 189, 190, 194, 198, 202, 203, 219, 230, 231, 235, 240, 244, 245, 297, 299, 326, 353, 374, 377, 391, 392, 395, 412, 414, 415, 431, 470, 472, 473, 479, 480, 482, 484], "iter_bar": 431, "iter_op": 134, "iterabledataset": [198, 202, 240, 244], "iterablefetch": [194, 235], "iterablesampl": [198, 240], "iteration_list": 395, "iterativeschedul": [182, 299], "iterator_sess_run": 134, "itex": [33, 95, 185, 186, 261, 432, 473, 479], "itex_mod": [33, 34, 75, 93, 117, 122], "itex_qdq_mod": [57, 58], "itrex": [185, 186, 479], "its": [31, 46, 82, 134, 136, 165, 174, 177, 179, 184, 186, 196, 202, 216, 238, 244, 257, 260, 266, 267, 297, 304, 319, 320, 357, 389, 415, 418, 429, 430, 432, 442, 444, 448, 451, 452, 470, 476, 478, 481, 482], "itself": [439, 470], "j": [394, 455, 470, 479, 485], "jan": 471, "japanes": 485, "jason": 479, "jbla": 32, "jeffrei": 413, "jemalloc": 445, "ji": 476, "jit": [165, 185, 434, 436, 441, 479, 480], "jitbasicsearch": 165, "jitter": 481, "jlpm": [444, 448], "join": [394, 454, 459, 464, 465], "joint": 471, "jonathanhuang": [268, 321], "journei": 471, "jpeg": 481, "jpg": [201, 205, 207, 243, 247, 249, 394, 415], "json": [146, 201, 216, 243, 257, 384, 415, 433, 452, 459, 460, 464, 465, 466, 476, 481], "json_file_path": 384, "juli": 471, "jun": 471, "june": 471, "jupyt": [442, 444, 445, 448], "jupyterlab": [394, 434, 440, 442, 444, 448, 483], "just": [83, 191, 214, 216, 219, 221, 222, 224, 232, 257, 336, 392, 431, 441, 445, 451, 459, 469, 473, 479, 481, 482], "k": [272, 325, 353, 430, 453, 470], "k_block": 32, "kd": 418, "keep": [141, 176, 184, 296, 358, 391, 395, 450, 451, 477], "keep_mask_lay": 167, "keepdim": 479, "kei": [134, 136, 141, 142, 165, 176, 184, 185, 186, 279, 296, 334, 372, 375, 377, 385, 394, 396, 453, 454, 460, 471, 476, 480, 482], "kept": [171, 295], "kera": [56, 102, 157, 165, 184, 186, 202, 209, 223, 244, 251, 329, 334, 396, 414, 420, 433, 441, 442, 477], "keras_amp": 441, "keras_inc": 441, "keras_model": 328, "keras_sess": 334, "kerasbasepattern": 167, "kerasbaseprun": 172, "kerasbasicprun": 173, "kerasmodel": 329, "keraspatternnxm": 171, "kernel": [32, 150, 185, 186, 395, 396, 482], "keutzer": 470, "key_layer_nam": 176, "keynot": 471, "keyword": [141, 186], "kim": 470, "kind": [146, 431], "kl": [2, 4, 185, 186, 375, 379, 396, 397, 413, 424, 431, 482, 484], "kl_diverg": 378, "klcalibr": 4, "kmp_affin": 437, "kmp_blocktim": 437, "know": [219, 420, 477], "knowledg": [154, 155, 185, 186, 218, 258, 419, 421, 425, 427, 431, 433, 484], "knowledgedistillationframework": [155, 218], "knowledgedistillationloss": [155, 218, 431, 484], "knowledgedistillationlossconfig": [185, 186, 418, 419, 431, 469], "known": [141, 219, 304, 357, 431, 470, 473, 480, 482], "kriz": [202, 244, 415], "kullback": [397, 418], "kwarg": [3, 31, 91, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 123, 142, 146, 153, 163, 185, 186, 202, 214, 216, 221, 224, 244, 257, 313, 315, 325, 326, 327, 329, 331, 333, 334, 335, 353, 368, 370, 372, 374, 380, 381, 384, 385, 414], "kwon": 470, "l": [413, 418, 480, 482], "l1": 186, "l12": 485, "l2": [186, 470], "l6": 485, "l954": [265, 318], "l983": [265, 318], "lab": [444, 445, 446, 448, 449], "label": [185, 186, 189, 190, 200, 202, 203, 204, 205, 208, 212, 216, 221, 230, 231, 242, 244, 245, 246, 247, 250, 254, 257, 265, 267, 272, 318, 320, 325, 326, 353, 374, 391, 414, 415, 417, 430, 431, 473, 481], "label_fil": [200, 216, 242, 257, 415, 481], "label_list": [200, 242, 272, 325], "label_map": 430, "label_path": 417, "label_shap": [204, 246, 415], "label_shift": [212, 254, 481], "labelbal": 415, "labelbalancecocorawfilt": [208, 250], "labelbalancecocorecordfilt": [208, 250], "labelshift": [212, 254, 481], "labextens": [444, 445, 448], "lack": [414, 423], "lake": [428, 432, 471], "lambada": 479, "lambada_openai": 485, "lambda": [141, 474], "lamini": [470, 479], "land": 471, "languag": [30, 150, 265, 318, 389, 394, 422, 455, 471, 474, 476, 479], "larei": 470, "larg": [30, 31, 150, 394, 414, 418, 431, 471, 474, 476, 479, 485], "larger": [396, 470, 476, 479], "lasso": [181, 282, 427, 470], "lassounbalanc": 485, "last": [146, 161, 184, 185, 186, 414, 432, 434, 436, 441, 445, 473, 476, 479], "last_batch": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414], "last_conv_or_matmul_quant": [185, 186, 473], "latenc": [478, 482], "later": [141, 150, 458, 459, 480], "latest": [428, 471, 477], "latin1": 141, "launch": [432, 452, 457], "launch_task": 461, "launcher": [392, 394, 418, 419, 442, 483], "layer": [33, 102, 103, 104, 105, 107, 108, 138, 140, 142, 150, 155, 158, 163, 165, 166, 167, 171, 176, 184, 185, 186, 218, 225, 295, 296, 375, 377, 385, 394, 395, 396, 397, 419, 427, 454, 470, 476, 477, 483], "layer1": [165, 185, 186, 431, 470, 473], "layer2": [165, 431, 470, 473], "layer3": [431, 470], "layer_1": 166, "layer_2": 166, "layer_idx": 184, "layer_input": 184, "layer_map": [155, 186, 218, 418], "layer_nam": [186, 470], "layer_norm": 422, "layer_tensor": 375, "layer_wis": [384, 474], "layer_wise_qu": [137, 186, 474], "layerhistogramcollector": 375, "layernorm": [56, 479], "layerwisequ": 140, "layout": 40, "layoutlm": 485, "layoutlmv2": 485, "layoutlmv3": [454, 485], "lazi": 385, "lazyimport": 385, "ld_preload": 437, "lead": [185, 186, 418, 431, 432, 456, 470, 476, 479], "leadership": 389, "leaf": 480, "leaky_relu": 422, "leakyrelu": [41, 479], "learn": [394, 395, 396, 414, 415, 422, 426, 427, 428, 431, 432, 434, 436, 439, 440, 442, 445, 446, 449, 451, 470, 471, 473, 479, 480, 482, 483], "learning_r": [185, 186, 431, 472, 484], "least": [180, 298, 390, 431, 470, 482], "leav": [102, 445], "lee": 470, "left": [212, 216, 254, 257, 445, 451, 479, 481], "legaci": 283, "legal": [394, 486], "leibler": [397, 418], "len": [136, 186, 216, 257, 415, 420, 481], "length": [176, 185, 186, 200, 216, 242, 257, 268, 321, 394, 415, 430, 471, 473, 476, 481], "less": [41, 134, 146, 185, 186, 385, 412, 418, 431, 458, 470], "let": [397, 424, 439, 470, 472, 484], "level": [32, 153, 165, 358, 372, 381, 389, 461, 479, 482], "levelwis": 165, "leverag": [61, 380, 392, 394, 418, 422, 434, 451, 469, 473, 476, 482], "lib": 437, "libgl": 423, "libgl1": 423, "libglib2": 423, "libiomp5": 437, "libjemalloc": 437, "librari": [166, 220, 264, 317, 348, 387, 394, 428, 431, 432, 436, 445, 451, 471, 473], "licens": 390, "lie": [392, 413], "lieu": [444, 448], "light": 419, "lightn": [394, 441], "lightweight": 470, "like": [60, 82, 84, 134, 141, 165, 184, 186, 189, 190, 191, 202, 230, 231, 232, 244, 263, 272, 297, 300, 301, 325, 334, 353, 374, 390, 391, 392, 395, 396, 417, 418, 419, 427, 439, 454, 456, 469, 470, 473, 476, 477, 479, 482], "limit": [139, 304, 357, 385, 394, 417, 418, 473, 476, 477, 480], "lin": 476, "line": [396, 420, 427, 434, 439, 440, 459, 480], "linear": [31, 143, 146, 150, 163, 165, 166, 171, 176, 184, 185, 186, 295, 373, 391, 418, 422, 431, 470, 476, 479, 482], "linear2linearsearch": 165, "linear_lay": 176, "linear_pattern": 166, "linearcompress": 166, "linearcompressioniter": 166, "linearli": 31, "link": [185, 186, 200, 242, 325, 353, 413, 415, 422, 444, 448, 451, 476, 485], "linkedin": 471, "lint": 457, "linux": [412, 423, 428, 445, 451], "list": [2, 30, 31, 40, 91, 126, 134, 135, 136, 144, 146, 152, 165, 166, 171, 176, 180, 184, 185, 186, 189, 190, 194, 200, 212, 216, 217, 230, 231, 235, 242, 254, 257, 261, 262, 265, 266, 268, 269, 270, 272, 279, 287, 292, 295, 298, 313, 318, 319, 321, 322, 323, 325, 326, 334, 340, 341, 344, 353, 368, 372, 374, 375, 385, 391, 394, 395, 415, 422, 424, 428, 431, 434, 439, 441, 444, 445, 448, 456, 459, 461, 462, 468, 470, 472, 473, 475, 479, 480, 482], "listen": 453, "liter": 372, "llama": [470, 471, 474, 476, 479, 485], "llama2": 394, "llamanorm": 479, "llm": [126, 127, 394, 470, 471, 474, 476, 479], "llm_weight_minmax": 93, "lm": [470, 485], "lm_head": 470, "ln": 423, "load": [134, 139, 141, 142, 200, 215, 216, 242, 256, 257, 326, 334, 353, 384, 385, 396, 414, 444, 448, 452, 454, 472, 473, 474, 479], "load_and_cache_exampl": [200, 242], "load_data_from_pkl": 385, "load_empty_model": [142, 474], "load_huggingfac": [378, 431], "load_layer_wise_quantized_model": 142, "load_saved_model": 334, "load_state_dict": 141, "load_tensor": 142, "load_tensor_from_shard": 142, "load_vocab": [215, 256], "load_weight_onli": 384, "loadannot": [268, 321], "loader": [2, 126, 189, 190, 230, 231, 326, 353, 374, 380, 414, 473], "loc": 141, "local": [167, 185, 186, 295, 385, 444, 448, 453, 460, 461, 470, 478], "local_config": [184, 185, 186, 281, 282, 284, 285, 286], "local_config_fil": 33, "localhost": [457, 459, 464, 465], "locat": [141, 147, 184, 216, 257, 420, 437, 444, 448, 451, 459, 473, 477, 481, 484], "lock": [177, 285, 286, 427, 469, 470], "log": [132, 152, 153, 165, 340, 341, 344, 381, 391, 442, 464, 465, 466, 478, 480, 482], "log_fil": [152, 347, 351], "log_interv": 420, "logdir_spec": 480, "logger": [293, 375, 378, 385], "logic": 484, "login": [446, 449, 478], "logit": 418, "loglevel": 482, "logo": 429, "long": [216, 257, 423, 476, 481], "longer": [200, 216, 242, 257, 415, 481], "longest": [216, 257, 481], "look": [134, 176, 395, 397, 424, 430, 453, 454, 456, 484], "lookup": 165, "loop": [374, 391, 392, 396, 397, 424, 461, 478, 482], "loss": [30, 155, 185, 186, 218, 263, 272, 287, 292, 300, 325, 374, 413, 417, 418, 419, 420, 421, 430, 431, 432, 442, 454, 456, 469, 470, 471, 473, 476, 479, 482, 484], "loss_func": [162, 180], "loss_sum": 431, "loss_typ": [155, 185, 186, 218, 431, 484], "loss_weight": [155, 185, 186, 218, 431, 484], "lossi": 473, "lot": [391, 456, 479], "low": [31, 189, 190, 203, 204, 230, 231, 245, 246, 263, 273, 300, 326, 395, 396, 412, 413, 415, 420, 431, 432, 456, 471, 473, 476, 479, 482], "low_memory_usag": 186, "lower": [215, 216, 256, 257, 270, 323, 358, 419, 470, 471, 473, 479, 481, 482], "lowerbitssampl": 368, "lowercas": [200, 242, 415], "lowest": [470, 482], "lpot": [471, 477], "lr": [185, 186, 418, 420, 431], "lr_schedul": [431, 470], "lstm": 17, "lstmoper": 18, "lt": [392, 415, 485], "lvwerra": 485, "m": [31, 136, 169, 170, 185, 186, 295, 390, 418, 428, 434, 436, 439, 442, 446, 449, 459, 470, 485], "mac": [392, 452], "machin": [265, 318, 422, 428, 437, 451, 453, 459, 471, 479, 480], "maco": 428, "made": [360, 395, 473, 477, 482], "mae": [272, 325, 430], "magnitud": [161, 183, 185, 186, 272, 283, 325, 427, 470], "magnitude_progress": [185, 186], "magnitudecriterion": [161, 183], "magnitudeprun": 297, "mahonei": 470, "mai": [4, 134, 139, 141, 281, 282, 284, 285, 286, 372, 389, 390, 396, 413, 417, 422, 423, 429, 432, 444, 448, 454, 457, 459, 471, 473, 476, 482], "mail": 389, "main": [4, 157, 176, 180, 223, 298, 391, 414, 417, 420, 431, 438, 440, 452, 461, 470, 473, 476], "mainli": [154, 182, 226, 299, 394, 431, 470, 473], "mainstream": [394, 483], "maintain": [272, 325, 389, 390, 433, 434, 446, 449, 453, 458, 459, 470, 476, 477], "mainten": 395, "major": [426, 456, 473, 479], "make": [31, 91, 129, 151, 167, 172, 180, 182, 198, 240, 295, 297, 299, 385, 389, 395, 396, 412, 414, 424, 430, 431, 439, 444, 448, 451, 453, 470, 473, 474, 475, 476, 478, 479, 482], "make_dquant_nod": 31, "make_matmul_weight_only_nod": 32, "make_modul": 2, "make_nam": 91, "make_nc_model": 2, "make_nod": 31, "make_onnx_inputs_output": 91, "make_onnx_shap": 91, "make_quant_nod": 31, "make_sub_graph": 30, "make_symbol_block": 2, "makeiter": 134, "malici": 141, "malloc_conf": 437, "manag": [374, 377, 431, 434, 435, 445], "mandatori": [189, 190, 230, 231, 353, 431, 484], "mani": [32, 325, 353, 414, 428, 476, 482, 484], "manifest": 452, "manipul": [88, 89], "manner": [414, 418, 433], "manual": [202, 244, 415, 434, 440, 442, 445, 459, 464, 465, 466, 470], "mao": 413, "map": [2, 31, 91, 134, 141, 146, 186, 216, 257, 260, 262, 263, 267, 269, 270, 272, 287, 292, 297, 300, 320, 322, 323, 325, 415, 420, 430, 431, 444, 448, 456, 470, 473, 476], "map_kei": [272, 325], "map_loc": 141, "map_numpy_to_onnx_dtyp": 91, "map_onnx_to_numpy_typ": 91, "map_point": [268, 272, 321, 325, 430], "map_tensorflow_dtyp": 91, "mar": 471, "mark": 413, "market": 451, "marketplac": [394, 452, 471], "mask": [0, 161, 167, 169, 172, 174, 178, 179, 200, 242, 268, 297, 321, 470, 485], "mask_padding_with_zero": [200, 242], "mask_shap": [290, 291], "massiv": 470, "master": [4, 169, 170, 180, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 353, 431, 482], "match": [64, 88, 141, 165, 268, 269, 321, 322, 418, 452, 476], "match_datatype_pattern": 146, "matcher": 452, "math": [52, 473], "mathemat": 479, "matmul": [17, 32, 39, 45, 51, 59, 80, 95, 114, 123, 171, 185, 186, 295, 424, 454, 476, 482], "matmul_weight_only_nod": 32, "matmulfpq4": 32, "matmulnbit": 32, "matmuloper": 19, "matric": 479, "matrix": [32, 325, 353, 394, 442, 483], "matter": [198, 240, 475], "max": [31, 90, 129, 151, 185, 186, 216, 257, 269, 270, 304, 322, 323, 357, 385, 394, 417, 428, 431, 454, 456, 470, 473, 476, 479, 481, 482], "max_answer_length": [216, 257, 481], "max_column": 454, "max_dim": [216, 257, 481], "max_filter_tensor": 385, "max_grad_norm": 431, "max_inclusive_opset_vers": 90, "max_input_chars_per_word": [215, 256], "max_length": [200, 242], "max_min_data": [75, 76], "max_num_class": [268, 321], "max_ord": [266, 319], "max_output": 391, "max_query_length": [216, 257, 481], "max_row": 454, "max_seq_length": [200, 216, 242, 257, 415, 481], "max_sparsity_ratio_per_lay": [297, 472], "max_sparsity_ratio_per_op": [167, 172, 185, 186, 431, 470], "max_trial": [185, 186, 431, 482], "maxim": [431, 470, 482], "maximum": [41, 167, 172, 185, 186, 200, 216, 242, 257, 266, 297, 304, 319, 334, 357, 397, 413, 415, 417, 431, 470, 473, 479, 481], "maxpool": [17, 115, 124, 424], "maxpooloper": 20, "mbzuai": 479, "mckinstri": 413, "md": [169, 170, 185, 186, 295, 325, 353], "md5": [202, 244], "mean": [30, 32, 167, 176, 185, 186, 212, 216, 254, 257, 270, 272, 295, 307, 323, 325, 362, 391, 396, 397, 414, 417, 420, 424, 430, 431, 437, 456, 470, 473, 474, 476, 479, 481, 482, 484, 485], "mean_valu": [212, 254, 481], "meaning": [431, 469], "meanwhil": 474, "measur": [134, 217, 326, 379, 392, 395, 412, 417, 418, 430, 431, 476, 480, 482, 485], "mechan": [139, 161, 470, 478, 483], "media": [389, 471], "median": 126, "medium": 471, "meet": [186, 192, 301, 303, 354, 356, 391, 396, 468, 471, 472, 473, 476, 480, 482], "member": [389, 395], "memomeri": 140, "memori": [60, 146, 263, 287, 292, 300, 336, 385, 413, 414, 419, 431, 432, 434, 468, 470, 473, 474, 476, 479, 482, 485], "memory_format": 434, "mention": [470, 476], "merg": [94, 193, 234, 314, 369, 446, 449, 480, 482], "merge_duplicated_qdq": 92, "mergeduplicatedqdqoptim": 94, "mesa": 423, "messag": [91, 132, 390, 459, 460, 464, 465, 466, 482], "met": [392, 424, 473, 480], "meta": [82, 471, 485], "meta_op_optim": 81, "metaclass": 365, "metadata": 141, "metadata_thp": 437, "metagraphdef": 334, "metainfochangingmemopoptim": 82, "metal": 423, "metaop": 82, "method": [32, 127, 129, 139, 141, 146, 153, 181, 185, 186, 194, 198, 199, 200, 202, 209, 216, 219, 235, 240, 241, 242, 244, 251, 257, 278, 279, 280, 314, 369, 371, 377, 378, 380, 381, 391, 392, 394, 413, 414, 415, 417, 418, 419, 430, 431, 469, 470, 473, 475, 476, 479, 481, 482], "metric": [154, 185, 186, 189, 190, 220, 230, 231, 258, 263, 264, 279, 287, 292, 300, 301, 317, 326, 353, 374, 377, 392, 395, 396, 415, 417, 420, 431, 432, 453, 473, 478, 479, 480, 482, 483, 484, 485], "metric_cl": [221, 325, 353, 431], "metric_criterion": 336, "metric_fn": [269, 270, 322, 323], "metric_max_over_ground_truth": [269, 270, 322, 323], "metric_registri": [272, 325], "metric_typ": [272, 325], "metric_weight": 336, "mha": [168, 175, 470], "mha_compress": 176, "mha_head_s": 176, "mha_modul": 176, "mha_nam": 176, "mha_scor": 176, "mha_spars": [163, 470], "mhacompress": 176, "microcod": 485, "microsoft": [4, 394, 395], "middl": [457, 479], "migacz": 413, "might": [184, 391, 453, 482], "migrat": [479, 483], "mimic": 473, "min": [129, 151, 186, 385, 417, 454, 456, 470, 473, 476, 479, 481, 482], "min_dim": [216, 257, 481], "min_filter_tensor": 385, "min_sparsity_ratio_per_op": [167, 185, 186, 431, 470], "min_train_sampl": 186, "mini": 485, "minilm": [394, 471, 485], "minim": [129, 151, 304, 357, 396, 397, 413, 418, 421, 430, 431, 444, 448, 470, 473, 482], "minimum": [167, 185, 186, 397, 413, 417, 431, 442, 470, 479, 482], "minmax": [2, 4, 396, 397, 413, 424, 473, 484], "minmax_file_path": 385, "minmaxcalibr": 4, "miou": [272, 325], "misc": [139, 429], "miss": [470, 473], "mix": [135, 185, 186, 302, 314, 326, 355, 369, 394, 395, 402, 427, 434, 440, 441, 442, 483], "mix_precis": [186, 317, 372, 431, 432], "mixed_precis": [264, 326, 431], "mixed_precision_model": 135, "mixedprecis": [186, 273, 431], "mixedprecisionconfig": [186, 326, 372, 431, 432], "mkl": 445, "ml": 471, "mla": [395, 432, 473], "mleffici": 471, "mlp": 470, "mlperf": [471, 485], "mm": 485, "mnist": [202, 244, 415, 420], "mnli": [200, 242, 415, 430, 485], "mobil": [418, 431, 485], "mobilebert": [200, 242, 415, 418, 485], "mobilenet": [422, 478, 485], "mobilenet_v1": 484, "mobilenet_v1_1": [394, 425, 453, 464], "mobilenetv2": 485, "mobilenetv3": 392, "mode": [29, 30, 31, 96, 141, 209, 251, 268, 314, 321, 334, 369, 382, 384, 385, 395, 396, 417, 427, 444, 448, 456, 457, 473, 475, 476, 482], "model": [2, 3, 4, 17, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102, 104, 126, 127, 128, 134, 135, 136, 140, 141, 142, 144, 145, 146, 150, 152, 154, 162, 163, 165, 172, 173, 174, 177, 179, 180, 182, 184, 185, 186, 189, 190, 196, 199, 200, 202, 216, 217, 220, 221, 230, 231, 238, 241, 242, 244, 257, 258, 260, 261, 262, 263, 264, 272, 273, 274, 275, 278, 281, 282, 284, 285, 286, 287, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 317, 325, 326, 336, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 371, 372, 374, 380, 382, 384, 385, 387, 390, 391, 392, 394, 395, 397, 402, 412, 413, 414, 415, 417, 418, 419, 420, 421, 426, 427, 429, 430, 432, 434, 439, 441, 442, 445, 451, 453, 458, 460, 461, 462, 463, 468, 469, 471, 473, 477, 478, 480, 481, 482, 483, 484], "model_build": [275, 278], "model_convers": 264, "model_from_json": 477, "model_loss": 482, "model_nam": [102, 185, 186], "model_name_or_path": [200, 242, 415, 431, 439, 440, 455, 462, 465, 466, 474], "model_origin": [186, 353, 475], "model_path": [126, 134, 417, 464], "model_proto": 91, "model_slim": [162, 176], "model_slim_ffn2": 163, "model_slim_mha": 163, "model_summari": 455, "model_typ": [200, 242, 385, 415], "model_wis": [431, 484], "model_wrapp": [3, 137], "modelconvers": 274, "modelproto": [32, 260, 326, 433], "models": [185, 186, 336, 431, 468, 472], "modelwisetuningsampl": [313, 368], "modern": [436, 476], "modif": [390, 395, 424, 439, 458], "modifi": [176, 202, 244, 352, 371, 391, 397, 420, 424, 455, 456, 470, 484], "modified_pickl": 138, "modul": [137, 138, 162, 168, 175, 277, 283, 293, 294, 391, 414, 418, 427, 430, 431, 433, 470, 472, 475, 476, 480, 483], "module_debug_level1": 372, "module_hook_config": 146, "module_nam": [142, 161, 162, 172, 173, 174, 175, 177, 178, 179, 181, 183, 297, 385], "module_name_list": 146, "module_node_map": 262, "momentum": [161, 297, 427, 431, 470, 484], "momentumbalanc": 485, "momentumunbalanc": 485, "monitor": [459, 464, 465, 466], "more": [30, 134, 150, 169, 170, 216, 257, 295, 392, 393, 394, 396, 413, 415, 418, 420, 422, 425, 427, 428, 431, 432, 434, 442, 446, 449, 454, 459, 468, 469, 470, 475, 476, 479, 482, 483, 485], "moreoev": 297, "mosaicml": [479, 485], "mose": [265, 318], "mosesdecod": [265, 318], "mosh": 470, "most": [185, 186, 272, 325, 417, 431, 432, 470, 473, 476, 479, 482, 485], "move": [64, 141, 391, 457, 472, 476, 477], "move_input_devic": 146, "move_squeeze_after_relu": 62, "movesqueezeafterreluoptim": 64, "mpi": [458, 459, 482], "mpirun": [461, 482], "mpt": [470, 479, 485], "mrpc": [200, 242, 272, 325, 415, 430, 439, 462, 465, 466, 470, 482, 485], "mscoco": [268, 321], "mse": [32, 146, 185, 186, 272, 306, 325, 353, 361, 385, 417, 430, 456, 472, 476, 477], "mse_metric_gap": 385, "mse_v2": [186, 306, 361], "mse_v2tunestrategi": [308, 363], "mseloss": 479, "msetunestrategi": [307, 362], "msft": 471, "msg": [153, 381, 460, 464, 465], "mt": 485, "mteval": [265, 318], "mu": 417, "much": [154, 161, 185, 186, 216, 257, 258, 418, 445, 479, 481], "mul": [41, 51, 52, 55, 150, 422, 476, 479], "mullinear": [143, 373], "multi": [152, 163, 165, 176, 268, 321, 325, 353, 392, 414, 415, 427, 431, 468, 470, 473, 482], "multi_object": 468, "multiclass": 430, "multilabel": 430, "multilingu": 485, "multiobject": 336, "multipl": [157, 163, 187, 188, 192, 193, 200, 201, 203, 204, 205, 206, 207, 211, 213, 216, 223, 228, 229, 233, 234, 236, 242, 243, 245, 246, 247, 248, 249, 253, 255, 257, 273, 326, 327, 328, 330, 336, 412, 415, 422, 431, 458, 461, 469, 470, 478, 479, 482], "multipli": [4, 185, 186, 476], "must": [216, 257, 268, 321, 390, 391, 396, 412, 414, 428, 473, 481], "muzzy_decay_m": 437, "mx": 2, "mxnet": [1, 2, 4, 186, 195, 199, 202, 205, 209, 216, 237, 241, 244, 247, 251, 257, 263, 272, 300, 325, 326, 331, 353, 390, 394, 395, 396, 413, 414, 421, 424, 427, 428, 431, 432, 433, 472, 482, 484], "mxnet_dataload": 236, "mxnet_model": 328, "mxnetcifar10": [202, 244], "mxnetcifar100": [202, 244], "mxnetcropresizetransform": [216, 257], "mxnetcroptoboundingbox": [216, 257], "mxnetdataload": [195, 237], "mxnetdataset": [202, 244], "mxnetfashionmnist": [202, 244], "mxnetfilt": [209, 251], "mxnetimagefold": [202, 244], "mxnetimagenetraw": [205, 247], "mxnetmetr": [272, 325], "mxnetmnist": [202, 244], "mxnetmodel": 331, "mxnetnormalizetransform": [216, 257], "mxnettransform": [216, 257], "mxnettranspos": [216, 257], "my": 390, "my_model": 434, "n": [169, 170, 185, 186, 201, 216, 243, 257, 266, 295, 319, 372, 397, 415, 417, 418, 459, 470, 473, 479, 481], "n_best_siz": [216, 257, 481], "n_bit": 479, "n_block": 476, "n_gpu": 431, "n_iter": [304, 357], "n_metric": 279, "n_pareto_point": 279, "n_point": 279, "n_sampl": [32, 146], "n_warmup": [304, 357], "na": [186, 264, 330, 427, 485], "name": [2, 31, 40, 53, 54, 56, 90, 91, 96, 102, 126, 134, 135, 136, 141, 142, 145, 146, 147, 152, 158, 161, 165, 167, 172, 175, 176, 180, 181, 182, 183, 184, 185, 186, 200, 201, 202, 205, 209, 214, 216, 217, 221, 224, 225, 242, 243, 244, 247, 251, 257, 260, 261, 262, 267, 272, 290, 295, 297, 299, 314, 316, 320, 325, 330, 334, 336, 353, 369, 371, 375, 377, 382, 385, 390, 391, 397, 415, 417, 420, 422, 424, 429, 430, 431, 433, 437, 444, 448, 452, 453, 459, 470, 473, 477, 478, 480, 482, 484, 485], "namecollector": 2, "named_children": 480, "named_paramet": 420, "namhoon": 470, "nan": 42, "nano": [441, 442], "nano_": 441, "nano_bf16": 436, "nano_bf16_channels_last": 436, "nano_bf16_ipex": 436, "nano_bf16_ipex_channels_last": 436, "nano_fp32_channels_last": 436, "nano_fp32_ipex": 436, "nano_fp32_ipex_channels_last": 436, "nano_gpu_to_cpu": 436, "nano_int8": 436, "nano_jit_bf16": 436, "nano_jit_bf16_channels_last": 436, "nano_jit_bf16_ipex": 436, "nano_jit_bf16_ipex_channels_last": 436, "nano_jit_fp32": 436, "nano_jit_fp32_channels_last": 436, "nano_jit_fp32_ipex": 436, "nano_jit_fp32_ipex_channels_last": 436, "nano_onnxruntime_fp32": 436, "nano_onnxruntime_int8_qlinear": 436, "nano_openvino_fp32": 436, "nano_openvino_int8": 436, "narrow_rang": 99, "nas_method": 279, "nas_registri": 279, "nas_util": 277, "nasbas": [278, 392], "nasconfig": [186, 276, 278, 392], "nation": [202, 244, 389], "nativ": 397, "natur": [265, 318, 422], "nbest_predict": [216, 257, 481], "nbsp": 482, "nc": [478, 482], "nc_inception_v3": 456, "nc_inceptionv3": 480, "nc_model": [2, 287, 292], "nc_resnet50_v1": 420, "nc_workspac": [185, 186, 454, 455], "nchw": [40, 212], "ncmodel": 2, "ndarrai": [2, 30, 31, 53, 54, 56, 216, 257, 375, 423, 481], "ndarray_to_devic": 2, "nearest": [165, 216, 257, 476, 481], "nearst": 32, "necessari": [31, 180, 389, 392, 396, 433, 452, 470, 478, 482], "necessarili": 139, "need": [2, 30, 91, 95, 152, 165, 180, 186, 189, 190, 191, 198, 199, 202, 209, 216, 219, 221, 222, 230, 231, 232, 240, 241, 244, 251, 257, 262, 301, 307, 325, 326, 336, 353, 362, 374, 384, 385, 391, 395, 414, 415, 417, 418, 420, 427, 431, 434, 436, 437, 440, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 458, 462, 464, 470, 472, 473, 474, 475, 476, 477, 479, 481, 482, 484], "neither": 473, "neo": 485, "neox": 485, "nepoch": 431, "nest": 146, "nesterov": [431, 484], "net": 332, "netflix": 471, "nets_factori": 328, "network": [136, 161, 167, 168, 297, 360, 392, 413, 418, 419, 422, 431, 453, 471, 473, 479, 482], "neural": [2, 136, 152, 154, 157, 167, 168, 169, 170, 180, 185, 186, 212, 213, 216, 217, 220, 223, 226, 254, 255, 257, 259, 264, 271, 272, 274, 287, 292, 295, 298, 300, 301, 306, 312, 317, 324, 325, 326, 330, 337, 353, 360, 361, 367, 382, 387, 390, 395, 396, 397, 412, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 432, 433, 435, 436, 439, 441, 442, 444, 446, 448, 449, 450, 462, 468, 469, 471, 473, 476, 477, 479, 480, 481, 482, 484, 485], "neural_cod": [434, 436, 438, 439, 440, 442], "neural_compressor": [391, 392, 394, 397, 412, 414, 415, 417, 418, 419, 420, 422, 425, 426, 430, 431, 432, 433, 453, 454, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 484], "neural_insight": [453, 455, 456], "neural_insights_util": 378, "neural_solut": [458, 459, 464, 465, 466], "neurip": [394, 471], "neuron": 470, "never": [141, 482], "new": [2, 4, 32, 134, 152, 191, 202, 216, 217, 232, 244, 257, 296, 336, 390, 394, 396, 420, 431, 432, 445, 451, 452, 453, 454, 460, 461, 464, 465, 470, 471, 473, 476, 477, 478, 481, 483, 484], "new_api": [34, 35, 57, 58, 63, 65, 78, 85, 117, 122, 129], "new_dtyp": 31, "new_func": 134, "new_graph_def": 134, "new_init": 32, "new_metr": 430, "new_modul": [142, 146], "new_quantized_nam": 31, "newapi": 80, "newdataload": 414, "newer": 428, "newli": [431, 470], "newlin": [270, 323, 385], "newmetr": 430, "next": [46, 194, 235, 372, 392, 396, 397, 414, 472, 476, 482], "next_annotation_id": [268, 321], "next_tune_cfg": 482, "nextplatform": 471, "nf4": [394, 476], "nfl": [270, 323], "ngram": [265, 318, 430], "nhwc": [40, 212], "ni_workload_nam": 186, "nightli": 428, "ninm": 168, "nll_loss": 420, "nlp": [180, 185, 186, 298, 439, 455, 470, 473], "nn": [142, 143, 146, 165, 166, 176, 185, 186, 262, 326, 353, 373, 380, 384, 391, 418, 431, 433, 476, 479, 480], "nncf": 136, "no_absorb_lay": 146, "no_grad": 434, "node": [2, 30, 31, 32, 36, 40, 41, 42, 43, 46, 48, 50, 53, 54, 56, 60, 63, 66, 68, 69, 70, 84, 88, 89, 91, 96, 118, 126, 134, 165, 260, 262, 334, 352, 395, 417, 420, 454, 458, 461, 464, 465, 466, 474, 480, 482, 485], "node1": [420, 464, 465], "node2": [420, 464, 465], "node_collector": 136, "node_def": [53, 54, 56], "node_from_map": [53, 54, 56], "node_list": 461, "node_map": [53, 54, 56], "node_modul": 452, "node_nam": [53, 54, 56, 134, 334, 342, 396], "node_name_from_input": [53, 54, 56], "node_name_list": 132, "node_op": 396, "nodedef": [53, 54, 56], "nodej": [444, 448], "non": [4, 296, 385, 391, 417, 476, 482], "nondigit_punct_r": [265, 318], "none": [2, 29, 31, 32, 33, 34, 35, 49, 75, 88, 90, 91, 96, 102, 128, 134, 136, 140, 141, 142, 143, 146, 152, 154, 155, 161, 162, 163, 165, 169, 180, 184, 185, 186, 189, 190, 191, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 212, 216, 217, 218, 219, 226, 230, 231, 232, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 254, 257, 258, 261, 262, 263, 268, 272, 273, 274, 275, 278, 287, 292, 296, 300, 302, 303, 304, 305, 307, 308, 309, 310, 314, 321, 325, 326, 336, 347, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 369, 372, 373, 374, 375, 377, 380, 382, 384, 385, 395, 396, 414, 415, 430, 454, 473, 476, 480, 481, 482], "nor": 473, "norm": 17, "normal": [4, 21, 216, 257, 270, 323, 431, 460, 468, 476, 479, 481], "normalfloat": 476, "normalizationoper": 21, "normalize_answ": [270, 323], "normalizetftransform": [216, 257], "normalizetransform": [216, 257], "notabl": 450, "notat": [186, 385], "note": [41, 139, 171, 268, 308, 321, 363, 392, 394, 396, 397, 414, 417, 420, 422, 424, 428, 431, 436, 439, 444, 448, 451, 453, 457, 459, 461, 470, 473, 476, 479, 480, 482, 483, 484], "notebook": 483, "noteworthi": 413, "noth": [268, 321, 482], "notic": [129, 151, 217, 429, 432, 454, 477], "notif": 461, "nov": 471, "novel": [419, 434, 445, 451], "now": [185, 186, 216, 257, 391, 392, 397, 415, 420, 442, 472, 481, 482], "np": [31, 216, 257, 304, 357, 420, 461, 479, 481, 482], "np_dtype": 91, "npm": [444, 445, 448], "npm_token": [446, 449], "npu": [186, 473], "npy": [201, 243, 415], "npy_dir": [201, 243, 415], "npz": [202, 244, 415], "nr": 91, "ns_workspac": [459, 464, 465, 466], "nsampl": 476, "nsdf3": [202, 244, 415], "nsga2": 392, "num": 385, "num_bin": [2, 4, 375], "num_bit": [32, 99, 143, 146, 373, 479], "num_class": [272, 325], "num_cor": [200, 201, 205, 242, 243, 247, 415], "num_correct": [272, 325], "num_detect": [268, 272, 321, 325, 430, 431, 484], "num_ev": 392, "num_gt_box": [268, 321], "num_of_inst": [152, 185, 186, 412, 431, 472], "num_of_process": 420, "num_quantized_bin": 4, "num_replica": 420, "num_sampl": [272, 325], "num_train_epoch": [431, 470], "num_work": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414, 431, 473], "numactl": [152, 423, 437, 445], "number": [4, 32, 53, 54, 91, 126, 146, 163, 169, 170, 185, 186, 198, 201, 212, 216, 240, 243, 254, 257, 269, 270, 272, 295, 304, 322, 323, 325, 348, 352, 357, 372, 377, 385, 412, 414, 415, 420, 430, 459, 461, 470, 473, 476, 478, 479, 481, 482], "number_of_process": 482, "number_of_socket": [464, 465], "number_of_thread": [464, 465], "numer": [186, 272, 325, 397, 432, 471, 473, 476], "numpi": [30, 31, 53, 54, 56, 91, 134, 216, 257, 268, 279, 321, 423, 479, 481], "nvidia": [394, 413, 427, 428, 485], "nweight": 454, "nxm": [168, 178, 185, 186, 291, 295, 470], "o": [141, 372, 428, 436, 454], "o0": [358, 482], "o1": 482, "oaa": 460, "obj": [2, 91, 162, 184, 199, 241, 258, 263, 274, 275, 276, 278, 287, 292, 296, 300, 326, 336, 353, 374, 377, 385], "obj1": 385, "obj2": 385, "obj_cl": 336, "obj_criterion": 336, "obj_weight": 336, "object": [2, 30, 31, 32, 60, 72, 91, 102, 118, 134, 135, 136, 139, 141, 145, 146, 152, 154, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 200, 201, 202, 216, 217, 219, 230, 231, 232, 242, 243, 244, 257, 258, 263, 268, 276, 278, 281, 282, 284, 285, 286, 287, 292, 295, 296, 297, 298, 299, 300, 304, 317, 321, 325, 326, 334, 335, 348, 352, 353, 357, 371, 374, 377, 384, 385, 391, 392, 396, 402, 412, 414, 415, 423, 430, 431, 433, 469, 470, 472, 473, 481, 482, 483, 485], "object_detect": [185, 186, 268, 321], "objective_cfg": 336, "objective_cl": 336, "objective_custom_registri": 336, "objective_registri": 336, "oblig": [389, 457], "observ": [146, 397, 476, 478, 480, 482], "observer_dict": 480, "obtain": [163, 165, 174, 179, 181, 184, 296, 391, 396, 459, 470, 478, 479, 482], "oct": [394, 471], "ofa_mbv3_d234_e346_k357_w1": 392, "off": [4, 53, 54, 56, 390, 476], "offens": 389, "offer": 415, "offici": [134, 265, 269, 270, 318, 322, 323, 389, 479], "offlin": [385, 389, 431, 473, 479], "offset_height": [216, 257, 481], "offset_width": [216, 257, 481], "ofir": 470, "often": [184, 414, 418, 456, 469, 470], "old": [385, 431, 477], "old_hist": 385, "oliv": [394, 471], "omit": 476, "on_after_compute_loss": [374, 418, 419, 431, 469], "on_after_optimizer_step": [431, 470], "on_before_optimizer_step": [374, 418, 419, 431, 469, 470], "on_epoch_begin": [374, 377, 418, 419, 431, 469], "on_epoch_end": [374, 377, 418, 419, 431, 469], "on_step_begin": [374, 377, 418, 419, 431, 469, 470], "on_step_end": [374, 377, 418, 419, 431, 469], "on_train_begin": [374, 391, 418, 419, 431, 469, 470, 473], "on_train_end": [374, 418, 419, 431, 469, 470, 473], "onc": [134, 141, 157, 182, 223, 299, 303, 354, 356, 396, 397, 414, 451, 457, 470, 471, 482, 485], "one": [32, 95, 96, 101, 141, 146, 152, 167, 171, 176, 179, 180, 182, 216, 226, 257, 265, 268, 272, 274, 295, 298, 299, 318, 321, 325, 392, 395, 413, 418, 419, 420, 424, 427, 428, 430, 431, 432, 434, 435, 439, 440, 442, 444, 445, 448, 451, 452, 453, 456, 457, 458, 459, 461, 468, 469, 470, 472, 473, 474, 476, 477, 479, 481, 482], "oneapi": [428, 471, 483], "onednn": [428, 432, 473], "ones": [141, 268, 321, 470], "oneshotschedul": [182, 299], "onli": [30, 32, 40, 49, 56, 72, 95, 101, 129, 141, 150, 151, 152, 157, 162, 168, 175, 185, 186, 200, 217, 219, 223, 242, 262, 274, 295, 297, 308, 353, 363, 371, 372, 385, 394, 395, 396, 397, 412, 413, 414, 417, 418, 420, 423, 424, 431, 432, 439, 452, 470, 471, 472, 473, 474, 479, 480, 482, 483, 484], "onlin": [389, 478], "onnx": [3, 4, 17, 29, 31, 32, 73, 128, 150, 185, 186, 196, 238, 260, 261, 262, 326, 333, 348, 383, 390, 394, 395, 396, 398, 414, 417, 421, 422, 424, 425, 427, 432, 433, 436, 441, 442, 454, 471, 472, 476, 477, 479, 482], "onnx_graph": 87, "onnx_inc_dynamic_qu": 441, "onnx_inc_static_quant_qdq": 441, "onnx_inc_static_quant_qlinear": 441, "onnx_ml_pb2": [326, 433], "onnx_model": [328, 347, 454], "onnx_nod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 87], "onnx_qlinear_to_qdq": 260, "onnx_quant": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "onnx_schema": 87, "onnx_typ": 91, "onnxbilinearimagenettransform": [212, 254], "onnxcommunitymeetup2023": 471, "onnxgraph": 88, "onnxmodel": [32, 333, 347], "onnxnod": 89, "onnxopschema": 90, "onnxprofilingpars": 340, "onnxqlinear2qdq": 186, "onnxqlinear2qdqconfig": 186, "onnxresizecropimagenettransform": [212, 254], "onnxrt": [30, 31, 32, 200, 202, 209, 216, 242, 244, 251, 257, 272, 325, 347, 383, 395, 417, 432, 453, 473, 485], "onnxrt_cuda_ep": [185, 186, 432, 473], "onnxrt_dataload": [236, 347], "onnxrt_dml_ep": [186, 473], "onnxrt_dnnl_ep": [186, 432, 473], "onnxrt_integ": [431, 484], "onnxrt_integerop": [202, 209, 216, 244, 251, 257, 472], "onnxrt_qdq": [202, 209, 244, 251, 472], "onnxrt_qlinear": [431, 484], "onnxrt_qlinearop": [202, 209, 216, 244, 251, 257, 472], "onnxrt_qlinearopsadaptor": 395, "onnxrt_qoper": 472, "onnxrt_trt_ep": [185, 186, 432, 473], "onnxrtaug": 3, "onnxrtbertdataload": [196, 238], "onnxrtbertdataset": [200, 242], "onnxrtcroptoboundingbox": [216, 257], "onnxrtdataload": [196, 238, 347], "onnxrtglu": [272, 325], "onnxrtimagenetdataset": [205, 247], "onnxrtitdataset": [202, 244], "onnxrtitfilt": [209, 251], "onnxrtitmetr": [272, 325], "onnxrtittransform": [216, 257], "onnxrtparserfactori": 339, "onnxrtqldataset": [202, 244], "onnxrtqlfilt": [209, 251], "onnxrtqlmetr": [272, 325], "onnxrtqltransform": [216, 257], "onnxruntim": [4, 185, 186, 196, 202, 209, 238, 244, 251, 273, 348, 395, 413, 414, 427, 428, 432, 454, 472], "onto": 141, "op": [2, 17, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 67, 71, 74, 77, 78, 79, 80, 82, 91, 93, 95, 109, 110, 111, 117, 119, 120, 121, 122, 127, 129, 132, 134, 135, 136, 145, 146, 150, 165, 185, 186, 262, 307, 314, 315, 348, 352, 358, 360, 362, 369, 370, 371, 379, 385, 395, 396, 397, 417, 424, 431, 432, 455, 456, 470, 473, 475, 477, 479, 480, 482, 484], "op_block_lst": 368, "op_cfg": 140, "op_defin": 342, "op_dict": 431, "op_dtyp": [313, 368], "op_dtype_dict": [313, 368], "op_infos_from_cfg": 146, "op_list": [395, 480], "op_nam": [146, 185, 186, 315, 370, 385, 386, 396, 431, 470, 480], "op_name_dict": [185, 186, 417, 431, 454, 456, 473, 482], "op_name_typ": [314, 369], "op_quant_mod": [315, 370], "op_registri": 22, "op_run": 342, "op_typ": [22, 126, 127, 134, 315, 370], "op_type_dict": [185, 186, 397, 472, 473, 476, 482], "op_types_to_quant": 29, "op_user_cfg": 371, "op_user_cfg_modifi": 371, "op_wis": [431, 480, 484], "op_wise_config": [93, 117, 122, 396], "op_wise_sequ": [117, 122], "open": [141, 220, 264, 317, 377, 387, 389, 394, 422, 423, 431, 446, 449, 452, 453, 457, 458, 459, 471, 477], "openai": [479, 485], "opencv": [423, 428, 445], "opentri": 385, "openvino": 436, "openvinotoolkit": 136, "oper": [5, 31, 90, 96, 126, 134, 165, 166, 171, 185, 186, 212, 254, 295, 348, 352, 391, 412, 414, 417, 422, 451, 457, 470, 473, 476, 479, 481, 482], "ops_lst": 146, "ops_nam": 146, "opset": [30, 88, 90, 91, 186, 261, 262, 422], "opset_vers": [91, 128, 186, 261, 262, 422], "opt": [180, 394, 439, 470, 479, 482, 485], "opt_cfg": 61, "opt_model": [301, 431], "optim": [40, 60, 61, 65, 66, 102, 104, 134, 156, 159, 160, 162, 165, 174, 179, 185, 186, 220, 226, 263, 280, 300, 304, 357, 374, 375, 382, 385, 392, 394, 412, 417, 418, 419, 420, 424, 425, 427, 428, 431, 433, 434, 436, 438, 439, 442, 445, 453, 456, 457, 458, 460, 462, 471, 472, 473, 475, 476, 478, 479, 480, 482, 484], "optimization_result": [460, 464], "optimize_for_infer": 441, "optimize_lay": 103, "optimize_qdq": 116, "optimized_accuraci": 382, "optimized_model_tensor": 385, "optimized_result": 465, "optimized_tensor_data": 386, "optimizedmodel": 380, "optimizeqdqgraph": 117, "optimizer_registri": [157, 223], "optimizer_typ": [157, 223], "optimum": [441, 442, 454, 476], "option": [4, 32, 91, 141, 146, 167, 185, 186, 189, 190, 200, 216, 230, 231, 242, 257, 261, 262, 268, 274, 295, 301, 314, 321, 325, 326, 353, 369, 371, 372, 374, 378, 380, 385, 396, 397, 414, 415, 424, 428, 431, 445, 459, 462, 464, 465, 466, 470, 473, 476, 478, 481, 482, 484], "optuningconfig": [313, 314, 315, 368, 369, 370], "optyp": [2, 185, 186, 260, 396], "optype_wise_": 396, "optypes_to_exclude_output_qu": [29, 185, 186, 473], "optypewis": 396, "optypewisetuningsampl": [313, 368], "opwis": 396, "opwisetuningsampl": [313, 368], "orchestr": [374, 394, 427, 483], "order": [140, 146, 265, 266, 301, 304, 307, 316, 318, 319, 357, 362, 371, 391, 417, 430, 454, 472, 476, 479, 480, 482], "ordered_op": 146, "ordereddefaultdict": [316, 371], "ordinari": 478, "org": [161, 179, 268, 297, 321, 391, 417, 428, 446, 449, 470], "organ": 484, "orient": 389, "orig_answer_text": [216, 257], "orig_lay": [143, 373], "orig_text": [216, 257], "origin": [31, 32, 126, 134, 142, 146, 165, 177, 184, 186, 200, 216, 217, 242, 257, 281, 282, 284, 285, 286, 296, 297, 316, 358, 371, 380, 385, 390, 415, 439, 470, 473, 481, 482, 484], "ort": 348, "ortsmoothqu": 30, "other": [53, 54, 56, 139, 150, 199, 241, 270, 323, 334, 389, 391, 396, 397, 417, 424, 427, 429, 431, 433, 454, 468, 470, 473, 479, 481, 482, 485], "otherwis": [141, 202, 216, 244, 257, 385, 389, 396, 415, 446, 449, 472, 476, 481], "ouput_dir": 474, "our": [129, 146, 185, 186, 392, 394, 422, 431, 452, 453, 456, 478, 483], "out": [170, 185, 186, 200, 201, 202, 242, 243, 244, 263, 295, 300, 390, 391, 394, 415, 434, 439, 444, 445, 446, 448, 449, 451, 457, 470, 472, 473, 476], "out_graph_def": 134, "out_graph_fil": 134, "outcom": [272, 325], "outer": [193, 234], "outlier": [126, 396, 413, 417, 456, 476, 479], "outlin": [396, 397], "outperform": 392, "output": [30, 31, 32, 37, 40, 45, 60, 84, 91, 96, 134, 146, 153, 158, 165, 166, 171, 184, 185, 186, 189, 190, 221, 225, 230, 231, 261, 262, 265, 295, 318, 325, 326, 334, 353, 374, 380, 381, 385, 391, 395, 396, 418, 419, 420, 422, 424, 426, 430, 431, 433, 442, 451, 452, 454, 459, 460, 464, 465, 466, 469, 470, 472, 473, 476, 477, 479, 480, 481, 482, 484], "output_data": 30, "output_dict": 32, "output_dir": [140, 380, 431, 439, 440, 455, 456, 462, 465, 466], "output_fn": [216, 257], "output_func": 146, "output_graph": 186, "output_handl": 385, "output_index_map": [272, 325, 430], "output_mod": [200, 242], "output_model": [372, 431, 454, 456, 480], "output_nam": [88, 128, 186, 261, 262, 422], "output_node_nam": [69, 70, 117, 118, 122, 134], "output_path": [268, 321], "output_process": [158, 225], "output_shap": 88, "output_tensor": [134, 334], "output_tensor_ids_op_nam": 146, "output_tensor_nam": [134, 334], "output_tensors_dict": 480, "output_valu": 146, "outputs_to_valu": 91, "over": [91, 141, 202, 244, 272, 325, 396, 421, 425, 427, 430, 442, 451, 457, 461, 470, 472, 479, 482], "overal": [397, 459, 484], "overflow": 473, "overhead": 479, "overrid": [185, 186, 385], "overridden": 482, "oversize_threshold": 437, "overview": [394, 482], "overwrit": [202, 244, 444, 448], "overwrite_exist": [152, 217], "overwritten": [281, 282, 284, 285, 286, 439], "own": [60, 141, 198, 216, 240, 257, 336, 392, 396, 414, 415, 427, 430, 453, 457, 468, 476, 478, 483], "p": [4, 452, 453, 476], "p1": 461, "p2": 461, "p3": 461, "p4": 461, "p_conf": [431, 469], "pack": [31, 47], "packag": [90, 395, 423, 428, 451, 452, 471, 477, 482], "pad": [17, 32, 57, 58, 200, 216, 242, 257, 415, 476, 481], "pad_tensor": 32, "pad_token": [200, 242], "pad_token_segment_id": [200, 242], "paddedcentercroptransform": [216, 257], "padding_mod": 481, "pade": 32, "padoper": 23, "page": [389, 390, 453, 456, 457], "pain": 473, "pair": [93, 185, 186, 396, 414, 431, 432, 477], "palett": 452, "panda": 454, "panel": [446, 449, 451], "paper": [418, 470, 476, 479], "par": [392, 461], "paragraph": [269, 270, 322, 323], "parallel": [201, 243, 348, 352, 415, 431, 458, 461, 482], "param": [146, 152, 157, 191, 217, 223, 232, 272, 304, 325, 357, 385, 395, 433, 482], "param1": 372, "param2": 372, "param3": 372, "param_alia": 385, "param_dict": [155, 157, 218, 223], "param_nam": 385, "paramet": [2, 4, 30, 31, 32, 53, 54, 56, 72, 91, 102, 118, 126, 127, 134, 135, 136, 141, 142, 145, 146, 147, 152, 153, 154, 155, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 199, 200, 202, 209, 212, 216, 218, 223, 230, 231, 241, 242, 244, 251, 254, 257, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 304, 310, 314, 316, 318, 319, 321, 322, 323, 325, 326, 330, 334, 336, 348, 352, 353, 357, 365, 369, 371, 372, 374, 377, 380, 381, 382, 384, 385, 391, 396, 414, 415, 418, 420, 427, 430, 431, 445, 451, 452, 453, 454, 459, 464, 465, 470, 473, 474, 476, 477, 478, 479, 481, 482, 484], "parameter": 470, "parameter1": 372, "parameter2": 372, "parent": [177, 178, 182, 291, 297, 299, 480], "pareto": [279, 392], "pars": [91, 134, 146, 200, 201, 212, 216, 242, 243, 254, 257, 340, 341, 344, 396, 397, 481], "parse_auto_slim_config": [163, 470], "parse_last_linear": 184, "parse_last_linear_tf": 184, "parse_not_to_prun": 296, "parse_saved_model": 134, "parse_to_prun": [184, 296], "parse_to_prune_tf": 184, "parse_tune_config": 2, "parse_valid_pruner_typ": 175, "parsedecodebert": [200, 242], "parsedecodecoco": [201, 243], "parsedecodeimagenet": [212, 254, 481], "parsedecodeimagenettransform": [212, 254], "parsedecodevoctransform": [216, 257], "parserfactori": 338, "part": [146, 163, 172, 295, 297, 391, 428, 432, 446, 449, 459, 461, 470, 474, 479, 483], "parti": [268, 321, 390, 429, 473], "partial": [176, 470, 473], "particip": [389, 461], "particular": [394, 470, 476], "partit": [420, 470], "partner": 471, "parzen": 482, "pascal": [202, 244], "paser_cfg": 146, "pass": [63, 134, 139, 141, 152, 325, 353, 384, 385, 390, 391, 395, 412, 415, 418, 419, 420, 426, 430, 431, 452, 459, 470, 472, 473, 475, 479, 484], "past": [395, 476], "pat": 471, "patch": [438, 451], "patch_path": 438, "path": [91, 126, 134, 142, 146, 165, 180, 184, 200, 201, 202, 216, 242, 243, 244, 257, 258, 261, 262, 263, 274, 275, 276, 278, 287, 292, 296, 298, 300, 301, 314, 326, 334, 352, 353, 369, 380, 382, 385, 391, 392, 395, 415, 417, 420, 426, 430, 431, 432, 433, 437, 440, 451, 454, 456, 459, 464, 465, 466, 469, 476, 481, 484], "path_to_cert": 453, "path_to_private_kei": 453, "path_to_sav": 374, "pathlik": 141, "patient": 418, "pattern": [44, 45, 47, 64, 82, 93, 94, 95, 117, 122, 146, 161, 162, 165, 166, 172, 173, 174, 175, 177, 179, 181, 185, 186, 202, 244, 285, 286, 288, 293, 297, 314, 369, 395, 415, 424, 427, 431, 452, 469, 472, 479, 482, 485], "pattern_analyz": 164, "pattern_detector": 137, "pattern_lock": [175, 185, 186, 283], "pattern_lst": 144, "pattern_registri": 290, "pattern_to_intern": [314, 369], "pattern_to_path": [314, 369], "pattern_typ": 290, "patternbas": 290, "patternlockprun": [285, 297], "patternmha": 169, "patternninm": 295, "patternnxm": 295, "pb": [152, 185, 186, 326, 334, 353, 394, 412, 420, 425, 431, 433, 453, 456, 464, 480, 485], "pbound": [304, 357], "pc": 390, "pd": 454, "pdf": 4, "peak": [336, 468], "pegasu": 485, "peleenet": 485, "penal": 470, "penalti": [265, 266, 318, 319, 430], "pend": [423, 460], "pentium": 429, "peopl": 473, "pep": 372, "per": [30, 31, 32, 150, 152, 185, 186, 217, 379, 395, 397, 414, 459, 470, 475, 476, 485], "per_channel": [99, 396, 397, 424, 473, 484], "per_channel_symmetr": 397, "per_tensor": [396, 397, 424, 473, 484], "per_tensor_symmetr": 397, "percdamp": [32, 476], "percent": 32, "percentag": [270, 323, 413, 476, 484], "percentil": [4, 32, 126, 413], "percentilecalibr": 4, "perceptron": 470, "perchannel": 32, "perf": 461, "perform": [82, 126, 152, 181, 185, 186, 200, 212, 217, 242, 254, 263, 287, 292, 300, 307, 325, 336, 353, 358, 362, 390, 391, 392, 395, 396, 412, 415, 416, 417, 419, 421, 422, 427, 428, 430, 431, 432, 433, 434, 436, 440, 442, 445, 451, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 484, 485], "performance_onli": [33, 34, 35, 93, 117, 122, 133, 185, 431], "perm": [216, 257, 481], "perman": [163, 389, 470], "permiss": 389, "permut": [216, 257, 481], "perplex": 485, "persist": 433, "person": [389, 471], "perspect": 482, "phase": [147, 392, 431, 470, 473, 475, 482], "phi": 429, "philip": 470, "philosophi": 473, "physic": [152, 217, 389, 412, 459], "pick": [446, 449, 452], "pickl": [139, 141], "pickle_load_arg": 141, "pickle_modul": [141, 162], "pickle_protocol": 162, "pickleerror": 139, "pickler": 139, "pickletool": 139, "picklingerror": 139, "piec": [215, 256, 265, 318, 430, 476], "pil": [216, 257, 481], "pillow": 454, "pin": [414, 444, 448], "pin_memori": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414], "ping_memori": [431, 473], "pip": [394, 417, 420, 423, 425, 428, 436, 439, 444, 446, 448, 449, 453, 454, 455, 456, 477], "pip3": 445, "pipelin": [154, 258, 275, 276, 301, 390, 419, 431, 469], "piqa": 485, "pixel": 481, "pkg": [446, 449], "pkl": [385, 455], "pl": [265, 318], "place": [419, 428, 464, 470, 480, 482], "placehold": [43, 198, 240], "placeholder_dtyp": 165, "placeholder_shap": 165, "plai": [327, 471, 476, 479], "plan": 427, "platform": [385, 394, 427, 434, 442, 461, 471, 473], "platinum": 485, "pleas": [30, 136, 150, 161, 169, 170, 171, 179, 180, 185, 186, 200, 201, 202, 205, 242, 243, 244, 247, 295, 297, 298, 325, 353, 372, 391, 392, 393, 394, 395, 412, 413, 415, 419, 420, 422, 428, 430, 432, 434, 435, 439, 442, 458, 459, 460, 470, 473, 475, 476, 477, 478, 479, 482, 483], "plu": 432, "plug": 471, "plugin": [434, 452], "png": [202, 244, 415], "point": [31, 32, 212, 254, 269, 270, 279, 304, 322, 323, 357, 385, 430, 451, 456, 457, 473, 476, 479, 481, 482], "polici": [303, 307, 354, 356, 362, 389, 394, 484, 486], "polit": 389, "pont": 428, "pool": [17, 461], "pooloper": 24, "poor": [454, 480], "pop": [451, 461], "popul": 392, "popular": [264, 317, 387, 394, 395, 396, 413, 418, 421, 422, 425, 431, 470, 473, 476, 482, 483], "popularli": 430, "port": [53, 54, 56, 453, 460], "portabl": 139, "portion": [200, 242], "pose": 474, "posit": [216, 257, 389, 430, 434, 459, 464, 465, 466], "possibl": [141, 217, 417, 453, 469, 470, 474, 475, 482], "post": [30, 83, 84, 150, 179, 186, 189, 190, 230, 231, 353, 389, 394, 395, 396, 417, 419, 420, 422, 427, 428, 434, 440, 451, 461, 470, 471, 474, 476, 479, 480, 482], "post_batch": 2, "post_hostconst_convert": 81, "post_node_nam": 63, "post_quantized_op_cs": 81, "post_training_auto_qu": 482, "post_training_dynamic_qu": [431, 472, 482], "post_training_static_qu": [185, 415, 431, 472, 482], "postcompressionutil": 166, "postcseoptim": 84, "posterior": 482, "postfix": [75, 76], "posthostconstconvert": 83, "postposttrainingquantconfig": 475, "postprocess": [185, 186, 213, 216, 220, 257, 325, 353, 377, 395, 431, 480, 481], "postprocess_cfg": 377, "postprocess_cl": [214, 224, 431], "posttrainingquantconfig": [185, 186, 353, 391, 394, 397, 414, 417, 422, 425, 430, 431, 433, 453, 454, 455, 456, 473, 474, 475, 476, 478, 479, 482], "potenti": [392, 417, 477], "power": [418, 431, 445, 471], "powersav": 437, "pp": 470, "pr": [390, 414, 430, 446, 449, 477], "pre": [65, 102, 142, 165, 189, 190, 200, 230, 231, 242, 326, 353, 374, 415, 418, 419, 431, 439, 456, 470, 471, 473, 476, 480, 482], "pre_batch": 2, "pre_node_nam": 63, "pre_optim": 62, "pre_post_process_quant": [185, 186, 473], "pre_process": 420, "preced": [265, 318, 479, 482], "precis": [135, 185, 186, 189, 190, 230, 231, 263, 270, 272, 273, 300, 302, 314, 323, 325, 326, 336, 355, 358, 369, 385, 394, 395, 396, 402, 412, 413, 419, 420, 424, 427, 434, 440, 441, 442, 471, 472, 473, 476, 479, 482, 483], "pred": [134, 272, 325, 430], "pred_list": [272, 325], "pred_text": [216, 257], "predict": [134, 216, 221, 257, 265, 269, 270, 272, 318, 322, 323, 325, 353, 392, 418, 430, 442, 476, 479, 480, 481], "predictor": 392, "prefer": [152, 263, 300, 353, 470, 476], "prefix": [134, 135, 141, 142, 145, 146, 152, 434, 439, 480], "preoptim": 65, "prepar": [2, 32, 146, 391, 394, 415, 420, 425, 453, 464, 465, 466, 470, 473], "prepare_compress": [185, 186, 374, 391, 418, 419, 431, 469, 470, 473], "prepare_dataload": 2, "prepare_dataset": 456, "prepare_input": 32, "prepare_model": 2, "prepare_model_data": 2, "prepare_prun": [162, 470], "preprint": [413, 470, 476, 479], "preprocess": [146, 185, 186, 200, 216, 242, 257, 371, 377, 420, 481], "preprocess_user_cfg": 371, "present": [53, 54, 56, 417, 459, 471, 479], "preserv": [161, 413, 470, 476], "press": 452, "pretrain": [380, 434, 440], "pretrained_model_name_or_path": [140, 142], "prettyt": 385, "preval": 476, "previou": [184, 396, 397, 431, 470, 477, 479, 480, 482, 483, 485], "previous": 414, "primari": [413, 482], "primit": 141, "print": [63, 136, 165, 272, 325, 372, 385, 420, 430, 431, 453, 454, 470, 479, 482], "print_iter": 165, "print_op_list": 385, "print_tabl": 385, "printer": 385, "prior": [2, 74, 482], "prioriti": 462, "privat": 389, "prob": 391, "probabl": [4, 185, 186, 379, 476], "problem": [139, 200, 242, 272, 325, 430, 432, 452], "proce": [173, 174, 179], "procedur": [392, 470, 482], "proceed": 479, "process": [102, 126, 136, 152, 167, 172, 173, 174, 180, 182, 184, 185, 186, 189, 190, 200, 201, 202, 212, 216, 217, 230, 231, 242, 243, 244, 254, 257, 295, 297, 299, 303, 304, 326, 353, 354, 356, 357, 374, 384, 385, 392, 395, 396, 397, 413, 414, 415, 418, 419, 420, 422, 431, 435, 456, 458, 459, 461, 469, 470, 473, 474, 476, 479, 480, 481, 484], "process_and_check_config": [184, 296], "process_config": [184, 296], "process_weight_config": 184, "process_yaml_config": 184, "processor": [394, 432, 459, 471, 473, 475], "produc": 418, "product": [161, 394, 427, 432, 434, 435, 451, 457, 471, 473, 478, 482], "profession": 389, "profil": [152, 186, 317], "profilerfactori": [345, 346, 350], "profilingpars": 341, "profilingresult": 342, "program": [420, 429, 434, 451], "programm": [436, 442, 451], "progress": [175, 202, 244, 445, 451, 453, 470, 473], "project": [216, 257, 388, 389, 390, 457, 471, 478, 482, 486], "promis": [419, 431, 470], "prompt": 420, "prone": 470, "propag": [2, 86], "properli": 459, "properti": [200, 242, 371, 429], "proport": [272, 325], "propos": [392, 395, 418, 432, 476, 479], "protect": 476, "protected_nod": 66, "proto": [212, 216, 254, 257, 481], "protobuf": [91, 334, 454], "prototyp": 391, "prove": [413, 476, 479], "provid": [30, 31, 88, 91, 96, 165, 189, 190, 216, 230, 231, 257, 263, 268, 287, 292, 300, 301, 321, 326, 353, 374, 378, 380, 392, 394, 395, 396, 397, 412, 414, 417, 419, 420, 421, 427, 428, 430, 431, 432, 433, 434, 438, 442, 445, 451, 452, 453, 459, 460, 470, 472, 473, 476, 479, 480, 482, 483, 484, 485], "proxi": 391, "prune": [154, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 226, 227, 264, 281, 282, 284, 285, 286, 290, 292, 293, 295, 296, 297, 299, 301, 385, 394, 420, 421, 424, 425, 427, 469, 471, 483, 484], "prune_conf": 431, "prune_config": [184, 296], "prune_domain": 472, "prune_typ": [472, 484], "prune_util": 293, "pruner": [281, 282, 283, 284, 285, 287, 292, 293, 295, 298, 431, 470, 484], "pruner2": 470, "pruner_class": 179, "pruner_info": [180, 298], "pruner_legaci": 264, "pruner_registri": 286, "pruners_info": 184, "pruning_class": 180, "pruning_config": [185, 186, 431, 470], "pruning_end": 470, "pruning_frequ": [172, 185, 186, 431, 470], "pruning_func": 431, "pruning_op_typ": [185, 186, 431, 470], "pruning_pattern": 470, "pruning_recip": 264, "pruning_scop": [185, 186, 431, 470], "pruning_start": 470, "pruning_typ": [185, 186, 431, 470], "pruning_v2": 264, "pruningcallback": 154, "pruningconf": [287, 292], "pruningconfig": 374, "pruningcriterion": [161, 183], "pruningschedul": 182, "pseudo": [189, 190, 230, 231, 353, 374, 476, 480], "pt": [141, 384, 428, 433, 455, 471, 473, 475, 476], "pt_fp32_model": 262, "pt_int8_model": 262, "ptq": [186, 353, 391, 417, 420, 427, 431, 456, 473, 479, 480, 482], "ptq_static": [417, 455], "public": [372, 389, 446, 449], "publish": [389, 429, 432, 452, 479], "pull": [53, 54, 56], "punct_nondigit_r": [265, 318], "punctuat": [215, 256, 265, 270, 318, 323], "punish": 485, "pure": [287, 292, 470], "purif": 471, "purpos": [424, 432, 451, 453, 472, 473], "push": [390, 470, 476, 479], "put": [141, 202, 244, 415, 418], "py": [4, 134, 136, 152, 172, 185, 186, 266, 268, 269, 270, 297, 319, 321, 322, 323, 372, 391, 395, 417, 420, 428, 431, 436, 438, 439, 440, 446, 449, 453, 455, 456, 458, 459, 461, 462, 464, 465, 466, 473, 477, 480], "pycocotool": [268, 321, 423, 428], "pyhessian": 136, "pylint": 390, "pyobject": 423, "pypi": [428, 446, 449], "pypi_token": [446, 449], "pyproject": [446, 449], "pytest": 390, "python": [4, 61, 134, 139, 141, 202, 220, 244, 264, 317, 372, 385, 387, 390, 391, 415, 417, 420, 423, 428, 431, 436, 442, 445, 451, 455, 456, 458, 459, 461, 464, 466, 470, 471, 481], "python3": 423, "pythonmultiheadattentionprun": 176, "pytorch": [155, 157, 158, 162, 165, 168, 171, 172, 175, 180, 185, 186, 199, 200, 202, 205, 209, 216, 218, 223, 225, 241, 242, 244, 247, 251, 257, 262, 263, 272, 273, 293, 295, 298, 300, 308, 325, 326, 335, 353, 363, 378, 385, 390, 391, 392, 394, 395, 396, 397, 413, 414, 418, 419, 421, 424, 427, 428, 431, 432, 433, 434, 436, 439, 440, 441, 442, 451, 453, 462, 465, 466, 470, 471, 472, 476, 477, 479, 482, 484], "pytorch_aliblad": 441, "pytorch_amp": 441, "pytorch_channels_last": [438, 441], "pytorch_cpu": 397, "pytorch_dataload": 236, "pytorch_fx": [202, 209, 244, 251, 431, 472], "pytorch_inc_bf16": 441, "pytorch_inc_dynamic_qu": 441, "pytorch_inc_huggingface_optimum_dynam": 441, "pytorch_inc_huggingface_optimum_stat": 441, "pytorch_inc_static_quant_fx": 441, "pytorch_inc_static_quant_ipex": 441, "pytorch_inc_static_quant_ipex_xpu": 441, "pytorch_ipex": [202, 209, 244, 251, 431, 472, 484], "pytorch_ipex_bf16": 441, "pytorch_ipex_fp32": 441, "pytorch_ipex_int8_dynamic_qu": 441, "pytorch_ipex_int8_static_qu": 441, "pytorch_jit_script": [438, 441], "pytorch_jit_script_ofi": 441, "pytorch_jit_trac": 441, "pytorch_jit_trace_ofi": 441, "pytorch_lightning_bf16_cpu": 441, "pytorch_prun": [180, 264], "pytorch_torchdynamo_jit_script": 441, "pytorch_torchdynamo_jit_script_ofi": 441, "pytorch_torchdynamo_jit_trac": 441, "pytorch_torchdynamo_jit_trace_ofi": 441, "pytorchalignimagechannel": [216, 257], "pytorchbasemodel": 335, "pytorchbasepattern": [167, 181], "pytorchbaseprun": 172, "pytorchbasicprun": 173, "pytorchbertdataset": [200, 242], "pytorchblockmaskprun": 174, "pytorchcifar10": [202, 244], "pytorchcifar100": [202, 244], "pytorchcriterion": [155, 218], "pytorchcropresizetransform": [216, 257], "pytorchcrossentropyloss": [155, 218], "pytorchdataload": [197, 239], "pytorchdataset": [202, 244], "pytorchfashionmnist": [202, 244], "pytorchfilt": [209, 251], "pytorchfxmodel": 335, "pytorchimagenetraw": [205, 247], "pytorchintermediatelayersknowledgedistillationloss": [155, 218], "pytorchintermediatelayersknowledgedistillationlosswrapp": [155, 218], "pytorchknowledgedistillationloss": [155, 218, 431], "pytorchknowledgedistillationlosswrapp": [155, 218], "pytorchloss": [272, 325], "pytorchmetr": [272, 325], "pytorchmnist": [202, 244], "pytorchmodel": [281, 282, 284, 285, 286, 335], "pytorchmxnettransform": [216, 257], "pytorchmxnetwrapdataset": [202, 244], "pytorchmxnetwrapfunct": [202, 216, 244, 257], "pytorchnormalizetransform": [216, 257], "pytorchoptim": [157, 223], "pytorchpatternlockprun": 177, "pytorchpatternninm": 170, "pytorchpatternnxm": 171, "pytorchprogressiveprun": 178, "pytorchretrainfreeprun": 179, "pytorchselfknowledgedistillationloss": 155, "pytorchselfknowledgedistillationlosswrapp": 155, "pytorchsgd": [157, 223], "pytorchtransform": [216, 257], "pytorchtranspos": [216, 257], "q": [31, 32, 93, 95, 117, 476, 479], "q_conf": 419, "q_config": [29, 146, 262, 395], "q_dataload": [189, 190, 230, 231, 302, 303, 304, 305, 307, 308, 309, 310, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 426, 482], "q_func": [189, 190, 230, 231, 302, 303, 304, 305, 307, 308, 309, 310, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 395, 396, 431, 482], "q_hook": [189, 190, 230, 231, 302, 303, 304, 305, 307, 308, 309, 310, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365], "q_max": 479, "q_min": 479, "q_model": [136, 140, 186, 274, 353, 391, 394, 414, 415, 417, 420, 422, 425, 426, 430, 431, 433, 453, 454, 473, 474, 475, 476], "q_weight": 32, "q_x": 479, "qa": [269, 270, 322, 323, 394], "qactivationoper": 6, "qargmaxoper": 7, "qas_id": [216, 257], "qat": [98, 145, 186, 274, 334, 419, 420, 427, 431, 473], "qat_clone_funct": 102, "qat_op_name_dict": 186, "qattent": 8, "qattentionoper": 8, "qbinari": 9, "qbinaryoper": 9, "qconcat": 10, "qconcatoper": 10, "qconfig": [2, 146, 384, 476, 480], "qconvoper": 11, "qdirect": 12, "qdirectoper": 12, "qdq": [30, 73, 98, 99, 128, 146, 185, 186, 260, 261, 262, 395, 417, 422, 427, 441, 442, 473, 477, 479], "qdq_enabl": 34, "qdq_op_fp32_bia": 186, "qdq_op_fp32_bias_qdq": 186, "qdq_op_int32_bia": 186, "qdq_tensor": 32, "qembedlayernorm": 13, "qembedlayernormalizationoper": 13, "qgather": 14, "qgatheroper": 14, "qgemm": 16, "qgemmoper": 16, "qglobalaveragepooloper": 15, "qintegerop": [427, 473], "qkv": 176, "qkv_modul": 176, "qkv_name": 176, "qlinear": [186, 202, 209, 244, 251, 272, 325, 395, 441], "qlinear2qdq": 259, "qlinearaveragepool": 24, "qlinearconv": 11, "qlinearglobalaveragepool": 15, "qlinearmatmul": 19, "qlinearop": [260, 417, 427, 442, 473, 485], "qlora": 476, "qmatmuloper": 19, "qmax": 146, "qmaxpool": 20, "qmaxpooloper": 20, "qmin": 146, "qmodel": 136, "qnli": [200, 242, 415, 430, 485], "qop_registri": 22, "qoper": [6, 22, 185, 186, 422, 454], "qpad": 23, "qpadoper": 23, "qpooloper": 24, "qqp": [200, 242, 415, 430, 485], "qresiz": 26, "qresizeoper": 26, "qscheme": 397, "qsplit": 27, "qsplitoper": 27, "qsym_model": 2, "qt_config": 34, "qtensor_to_tensor": 2, "qtype": [30, 31, 395], "quala": [394, 471], "qualiti": [265, 318], "quan": 455, "quan_model": 134, "quant": [32, 134, 146, 185, 186, 314, 369, 391, 431, 473], "quant_aware_train": 472, "quant_dequant_data": 30, "quant_format": [185, 186, 262, 422, 454], "quant_level": [185, 186, 454, 476, 479, 482], "quant_max": 397, "quant_min": 397, "quant_mod": [33, 314, 369, 396, 397], "quant_mode_from_pattern": [314, 369], "quant_opt": 371, "quant_tensor": 32, "quant_typ": 371, "quantconf": 300, "quantformat": 31, "quantif": [476, 479], "quantil": 482, "quantiti": 417, "quantiz": [2, 4, 5, 30, 31, 32, 34, 35, 74, 78, 80, 82, 85, 93, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 142, 143, 146, 150, 152, 154, 185, 186, 189, 190, 212, 219, 226, 230, 231, 254, 262, 263, 264, 274, 301, 307, 313, 317, 358, 360, 362, 371, 374, 375, 379, 380, 384, 385, 395, 402, 414, 415, 420, 421, 424, 426, 427, 430, 433, 434, 439, 441, 442, 445, 458, 460, 461, 463, 469, 471, 477, 480, 481, 482, 483, 484], "quantizable_nod": 2, "quantizable_op": 146, "quantization_aware_training_conf": 431, "quantization_cfg": 395, "quantization_param": 29, "quantizationawaretrainingcallback": 154, "quantizationawaretrainingconfig": [185, 186, 374, 391, 419, 422, 431, 473, 475, 482], "quantizationconfig": 185, "quantizationmod": 31, "quantize_config": [100, 396], "quantize_data": 31, "quantize_data_per_channel": 31, "quantize_data_with_scale_zero": 31, "quantize_graph": 97, "quantize_graph_bas": 98, "quantize_graph_bn": 98, "quantize_graph_common": 97, "quantize_graph_concatv2": 98, "quantize_graph_conv": 98, "quantize_graph_for_intel_cpu": 98, "quantize_graph_matmul": 98, "quantize_graph_pool": 98, "quantize_help": 100, "quantize_lay": 100, "quantize_layer_add": 103, "quantize_layer_bas": 103, "quantize_layer_bn": 103, "quantize_nod": 262, "quantize_nparrai": 31, "quantize_per_channel": 479, "quantize_per_tensor_absmax": 479, "quantize_rang": 31, "quantize_recip": 102, "quantize_sym_model": 2, "quantize_wrapp": 100, "quantizeconfig": [101, 102], "quantized_data": 31, "quantized_dict": 136, "quantized_model": [460, 464, 465], "quantized_nod": 93, "quantized_value_typ": 31, "quantizedconcatv2": [110, 120], "quantizedconv": [77, 78], "quantizeddeconv": 77, "quantizediniti": 31, "quantizedinput": [212, 254, 481], "quantizedmatmul": [79, 80], "quantizedmatmulwithbiasanddequant": 80, "quantizedrnnconvert": 85, "quantizedvalu": 31, "quantizedvaluetyp": 31, "quantizegraph": 118, "quantizegraphbas": 118, "quantizegraphforintel": 122, "quantizegraphhelp": 125, "quantizelay": 106, "quantizelayeradd": 105, "quantizelayerbas": 106, "quantizelayerbatchnorm": 107, "quantizelinear": 31, "quantizenodebas": 118, "quantizev2": 84, "quantizewrapp": [102, 108], "quantizewrapperbas": 108, "quantiztaion": [185, 186], "quantopt": 371, "quanttyp": [31, 371], "queri": [2, 33, 134, 146, 165, 176, 185, 186, 396, 397, 461, 473], "query_framework_cap": 396, "query_fused_pattern": 395, "query_fw_cap": [395, 397], "query_id": 459, "query_layer_nam": 176, "query_quantizable_nod": 2, "query_task_statu": 461, "querybackendcap": [395, 396], "question": [216, 257, 269, 270, 322, 323, 389, 390, 394, 395, 428, 434, 458, 470, 479, 481, 485], "question_text": [216, 257], "queue": 458, "quick": [424, 432, 470, 483, 484], "quickli": [482, 483], "quint8": 31, "quit": 470, "qweight": 476, "r": [31, 129, 151, 417, 428, 452, 453, 455, 456, 458, 459, 473, 485], "r1": 134, "r34": 391, "race": 389, "rais": [53, 54, 56, 91, 139, 141, 146, 162, 168, 175, 184, 268, 295, 296, 297, 321, 326, 372, 394, 453, 470, 471], "ram": 141, "ran": [154, 258], "rand": [434, 479], "randn": [186, 422], "random": [42, 134, 185, 186, 212, 216, 254, 257, 280, 304, 306, 357, 361, 385, 392, 431, 470, 472, 481, 484], "random_crop": [212, 254, 481], "random_flip_left_right": [212, 254, 481], "random_se": [185, 186, 304, 357, 431, 484], "randomcrop": 481, "randomcroptftransform": [216, 257], "randomcroptransform": [216, 257], "randomhorizontalflip": [216, 257, 431, 481], "randomli": [216, 257, 280, 304, 357, 392, 479, 481, 482], "randomresizedcrop": [431, 481], "randomresizedcropmxnettransform": [216, 257], "randomresizedcroppytorchtransform": [216, 257], "randomresizedcroptftransform": [216, 257], "randomresizedcroptransform": [216, 257], "randomsearch": 280, "randomst": [304, 357], "randomtunestrategi": [309, 364], "randomverticalflip": [216, 257, 481], "rang": [203, 204, 216, 245, 246, 257, 372, 374, 380, 394, 395, 397, 413, 415, 417, 418, 419, 420, 431, 454, 456, 469, 470, 473, 476, 479, 481], "rank": 420, "rapid": 428, "rate": [431, 470, 473], "rather": [426, 476], "ratio": [32, 129, 151, 167, 172, 184, 185, 186, 212, 216, 254, 257, 297, 415, 431, 454, 470, 481, 485], "ratiospars": 485, "raw": [31, 152, 201, 205, 208, 243, 247, 250, 307, 362, 430, 455, 482], "raw_cmd": 152, "raw_dir": 456, "raw_imag": [202, 244], "rb": 141, "rcnn": 422, "re": [451, 457, 476], "reach": [167, 182, 185, 186, 299, 390, 414, 453, 470, 482], "read": [91, 134, 141, 205, 216, 247, 257, 296, 415, 475, 478], "read_csv": 454, "read_graph": 134, "read_squad_exampl": [216, 257], "read_tensorflow_node_attr": 91, "readi": [457, 470], "readlin": 141, "readm": [420, 464], "real": [31, 203, 219, 245, 396, 413, 420, 453, 460, 471, 473], "realdiv": [52, 55], "realiz": [420, 468, 475, 478], "rearrang": [32, 179, 470, 476], "reason": [219, 389, 396, 414, 456, 476, 480, 482], "rebuild": [134, 435, 444, 448], "rebuilt": [444, 448], "recal": [270, 272, 323, 325], "receiv": [461, 478], "recent": [431, 432], "recip": [34, 165, 185, 186, 263, 300, 431, 474, 476, 479, 482], "recipe_sampl": 165, "recipesearch": 165, "recogn": [265, 318, 482], "recognit": [420, 422, 470, 480], "recognitionimagenet": 485, "recommend": [221, 325, 395, 415, 424, 442, 445, 450, 452, 470, 472, 482], "recommendation_system": [185, 186], "reconstruct": [134, 471], "reconstruct_saved_model": 134, "record": [136, 146, 155, 158, 200, 201, 202, 208, 218, 225, 242, 243, 244, 250, 385, 415, 456, 476, 478, 480, 482], "record_output": [158, 225], "recov": [30, 384, 385, 395, 419], "recover_config": 35, "recover_model_from_json": 384, "rectangl": 474, "recurs": 385, "red": 485, "redpajama": 479, "reduc": [17, 185, 186, 395, 413, 419, 431, 432, 451, 452, 470, 471, 473, 474, 475, 476, 479, 482, 484], "reduce_rang": [3, 29, 30, 185, 186, 397, 472], "reducemax": 25, "reducemin": 25, "reduceminmaxoper": 25, "reduceoper": 25, "reduct": [470, 474, 484], "redund": [77, 79], "ref": [4, 134], "refer": [30, 136, 150, 161, 169, 170, 171, 179, 180, 184, 185, 186, 200, 242, 265, 266, 272, 295, 297, 298, 318, 319, 325, 353, 372, 391, 395, 396, 412, 414, 415, 417, 419, 420, 422, 426, 428, 429, 430, 431, 432, 434, 439, 442, 453, 454, 456, 458, 459, 460, 468, 472, 474, 477, 481, 482], "reference_corpu": [266, 319], "refin": [426, 470], "reflect": [430, 481], "reform": 485, "refresh": [444, 448], "reg": [162, 173, 174, 179, 186], "reg_term": 181, "regard": [389, 475], "regardless": 389, "region": 479, "regist": [4, 22, 139, 141, 147, 155, 157, 161, 162, 167, 168, 172, 175, 180, 181, 182, 183, 202, 209, 216, 218, 223, 244, 251, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 365, 371, 382, 392, 395, 415, 420, 430, 431, 452, 468, 479, 482], "register_criterion": [161, 183], "register_customer_metr": 325, "register_forward_hook": 480, "register_neural_insights_workload": 382, "register_packag": 141, "register_pattern": [167, 295], "register_prun": [172, 180, 297], "register_reg": 181, "register_schedul": [182, 299], "registercommand": 452, "registr": [147, 202, 209, 216, 244, 251, 257, 290], "registri": [161, 167, 172, 180, 181, 182, 183, 295, 297, 299, 392], "registry_criterion": [155, 218], "regress": [200, 242, 390, 417], "regul": [173, 174, 179], "regular": [181, 265, 296, 318], "regulariz": 181, "reinstal": 423, "reject": 389, "rel": [185, 186, 336, 431, 454, 472, 482, 484, 485], "relat": [166, 181, 258, 268, 287, 292, 295, 321, 371, 377, 397, 434, 458, 459, 470, 477, 484], "relationship": [186, 453], "relaunch": 452, "releas": [394, 428, 440, 442, 444, 448, 450, 462, 465, 466, 486], "relev": [304, 357, 396, 397, 456, 470], "reli": [431, 479], "religion": 389, "reload": [435, 452, 454, 457], "relu": [60, 64, 95, 391, 424, 479, 480], "relu6": [60, 424], "remain": 439, "remaind": 413, "remap": [56, 141], "remot": 451, "remov": [6, 31, 37, 43, 46, 60, 66, 69, 70, 71, 82, 84, 126, 163, 176, 270, 323, 389, 431, 444, 448, 457, 464, 465, 470, 480], "removableactivationoper": 6, "remove_init_from_model_input": 31, "remove_training_nod": 62, "removetrainingnodesoptim": 66, "renam": [67, 477], "rename_batch_norm": 62, "renamebatchnormoptim": 67, "repeat": [417, 482], "repercuss": 389, "replac": [4, 142, 146, 270, 323, 420, 431, 442, 477], "replic": 482, "replica": 482, "repo": [200, 242, 388, 390, 415, 421, 444, 446, 448, 449, 486], "repo_id": 142, "repo_typ": 142, "report": [389, 390, 394, 461, 478], "repositori": [390, 446, 449], "repres": [31, 167, 171, 172, 180, 181, 184, 202, 207, 244, 249, 268, 270, 272, 321, 323, 325, 389, 397, 413, 415, 422, 459, 470, 473, 474, 482], "represent": [31, 139, 389, 391, 413, 419, 470, 473], "requant": [78, 80, 480], "requantize_cfg": 146, "request": [394, 459, 460, 461, 464, 465, 466, 473], "requir": [146, 185, 186, 192, 301, 334, 352, 391, 395, 396, 412, 413, 414, 417, 419, 420, 424, 431, 432, 433, 435, 445, 451, 453, 458, 459, 462, 465, 466, 470, 473, 476, 477, 478, 479, 480, 482, 484], "requisit": 439, "rerang": 133, "rerange_quant": 133, "rerange_quantized_concat": 131, "rerangequantizedconcat": 133, "rerewrit": 37, "resblock": 186, "rescal": [212, 216, 257, 481], "rescalekeraspretraintransform": [216, 257], "rescaletftransform": [216, 257], "rescaletransform": [216, 257], "research": [394, 429, 479, 485], "reserv": [189, 190, 230, 231], "reserve_resourc": 461, "reset": 430, "reset_non_value_to_default": 296, "reset_none_to_default": 184, "reshap": [47, 53, 54, 59, 479], "reshape_in0_ndef": [53, 54], "reshape_in1_ndef": [53, 54], "reshuffl": 414, "resid": 141, "resiz": [17, 200, 201, 212, 216, 242, 243, 254, 257, 415, 481], "resize_method": [212, 254], "resize_shap": [207, 249, 415], "resize_sid": [212, 254, 481], "resizecropimagenet": [420, 481], "resizemxnettransform": [216, 257], "resizeoper": 26, "resizepytorchtransform": [216, 257], "resizetftransform": [216, 257], "resizetransform": [216, 257], "resizewithaspectratio": [212, 254], "resizewithratio": [216, 257, 481], "resnest50": 485, "resnet": [420, 485], "resnet101": 485, "resnet18": [432, 436, 485], "resnet34": [391, 485], "resnet50": [186, 394, 417, 420, 422, 432, 434, 438, 470, 473, 478, 485], "resnet50_fp32_pretrained_model": 420, "resnet50_torchvis": 417, "resnet50_v1": [417, 420, 431], "resnetv2": 485, "resnext101_32x16d_wsl": 485, "resnext101_32x8d": 485, "resolut": 413, "resolv": [391, 393], "resort": 431, "resourc": [418, 458, 461, 482], "respect": [389, 424, 470, 479, 484], "respons": [340, 341, 344, 464, 465, 466, 473], "rest": [146, 458, 459, 464, 465, 466], "restful_api_port": [459, 464, 465, 466], "restor": 476, "restrict": [56, 141, 185, 186, 470, 478], "restructuredtext": 372, "result": [31, 134, 136, 146, 212, 216, 254, 257, 265, 268, 269, 270, 272, 318, 321, 322, 323, 325, 353, 360, 374, 384, 385, 389, 392, 394, 414, 417, 418, 420, 427, 429, 430, 431, 439, 440, 451, 452, 455, 459, 460, 461, 462, 468, 470, 471, 473, 476, 478, 479, 480, 481, 482, 483, 485], "result_monitor_port": [459, 464, 465, 466], "result_path": [460, 464, 465], "resultmonitor": 461, "results_csv_path": 392, "resum": [185, 186, 189, 190, 230, 231, 302, 303, 305, 308, 309, 310, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365], "resume_from": [185, 186, 385], "retain": 413, "retrac": 475, "retrain": [179, 419], "retrain_fre": [161, 175, 470], "retrainfreecriterion": 161, "retrainfreeprun": [179, 180], "retriev": [198, 240, 470], "return": [2, 4, 32, 40, 53, 54, 56, 60, 91, 102, 134, 135, 136, 141, 145, 146, 147, 152, 155, 157, 162, 165, 167, 168, 172, 175, 180, 181, 182, 184, 189, 190, 202, 209, 212, 216, 217, 218, 223, 230, 231, 244, 251, 254, 257, 262, 265, 266, 268, 269, 270, 272, 278, 279, 286, 290, 295, 296, 297, 299, 304, 310, 314, 316, 318, 319, 321, 322, 323, 325, 326, 330, 334, 336, 348, 352, 353, 357, 365, 369, 371, 372, 374, 377, 382, 384, 385, 391, 392, 396, 397, 414, 415, 420, 430, 433, 464, 465, 466, 468, 470, 473, 476, 479, 480, 482], "revers": [134, 454], "revert": [308, 316, 363, 371, 482], "reverted_data_typ": [316, 371], "review": [389, 390, 394, 471], "revis": 142, "rewrit": [36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 162], "rgb": [212, 254], "right": [141, 212, 254, 268, 321, 389, 390, 391, 451, 457, 479, 481], "rmax": [31, 473], "rmin": [31, 473], "rmse": [272, 325, 430, 482], "rnn": 85, "rnn_convert": 81, "rnn_detail": 85, "roberta": [200, 242, 415, 485], "roc": [263, 272, 287, 292, 300, 325], "role": [327, 476, 479], "rollov": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414], "romanian": 470, "root": [165, 200, 201, 202, 205, 242, 243, 244, 247, 272, 325, 415, 420, 430, 431, 484], "root_linear": 166, "root_rank": 420, "roughli": 476, "round": [32, 129, 151, 394, 471, 473, 476, 479], "round_": 479, "round_multipli": 163, "row": [385, 417, 454, 479], "rowi": 32, "rte": [200, 242, 415, 430, 485], "rtn": [32, 146, 474, 476], "rtn_arg": [474, 476], "rtn_g32asym": 476, "rtn_quantiz": 32, "rtnw4g32asym": 485, "rtnw4g32sym": 485, "rule": [417, 434, 470], "run": [2, 126, 134, 141, 152, 172, 184, 185, 186, 189, 190, 199, 215, 217, 230, 231, 241, 256, 296, 297, 304, 326, 353, 357, 374, 395, 412, 420, 423, 424, 431, 434, 436, 438, 439, 440, 442, 444, 445, 446, 448, 449, 451, 459, 460, 461, 462, 464, 465, 466, 471, 473, 476, 477, 478, 480, 482, 484], "run_bench": 438, "run_clm": 455, "run_cmd": 482, "run_forward": 2, "run_glu": [439, 440, 462, 465, 466], "run_glue_optim": 439, "run_inst": 152, "run_quant": 480, "run_tun": 456, "run_tuning_dump_tensor": 480, "runner": [452, 457], "runs_v3": 480, "runtim": [390, 394, 395, 396, 398, 414, 417, 421, 424, 427, 432, 436, 441, 442, 472, 476, 477, 482], "rw": 485, "s1": 482, "s2": 482, "s3": 482, "s4": 482, "s5": 482, "s6": 482, "s7": 482, "s8": 262, "sa_optim": 159, "sacrif": 471, "safe": 390, "safe_mod": 477, "sagemak": [434, 442], "sai": 439, "salient": [32, 470, 476], "same": [69, 127, 134, 179, 186, 200, 216, 242, 257, 268, 321, 385, 395, 397, 412, 414, 415, 418, 420, 424, 431, 435, 439, 444, 448, 470, 472, 473, 476, 479, 480, 481, 482], "sampl": [32, 63, 146, 185, 186, 194, 198, 200, 201, 202, 212, 216, 235, 240, 242, 243, 244, 254, 257, 272, 279, 304, 325, 357, 392, 414, 415, 421, 427, 452, 473, 476, 479, 481, 482, 484, 485], "sampler": [191, 193, 197, 199, 219, 232, 234, 236, 239, 241, 313, 368, 414, 420], "sampling_s": [431, 484], "samsum": 485, "sapphir": 428, "satisfactori": 456, "satisfi": [199, 241, 417, 428, 457], "satur": 481, "save": [91, 134, 140, 141, 162, 184, 185, 186, 202, 244, 261, 262, 301, 334, 353, 374, 375, 380, 385, 391, 395, 426, 431, 432, 433, 435, 439, 444, 448, 454, 459, 464, 465, 466, 469, 473, 474, 476, 479], "save_for_huggingface_upstream": [380, 431], "save_path": [134, 261, 262, 395, 433], "save_protobuf": 91, "save_to_disk": 395, "saved_dir": [380, 476], "saved_model": [134, 274, 474], "saved_model_sess": 334, "saved_model_tag": 334, "saved_result": [433, 455, 476], "savedmodel": [326, 334, 353, 485], "scalabl": [394, 428, 432, 471, 473, 475], "scalar": [189, 190, 230, 231, 326, 353, 374, 430, 473, 479, 482], "scale": [4, 31, 32, 86, 127, 129, 143, 146, 150, 151, 212, 216, 254, 257, 373, 473, 476, 478, 479, 481, 482], "scale_c": [129, 151], "scale_dtyp": 380, "scale_info": 385, "scale_nam": 31, "scale_propag": 81, "scale_valu": 31, "scalepropagationtransform": 86, "scales_per_op": 127, "scaling_governor": 437, "scan": [390, 394], "scenario": [395, 412, 418, 431, 470, 476], "scene": 470, "schedul": [162, 172, 173, 174, 179, 181, 185, 186, 264, 293, 297, 431, 458, 459, 461, 469], "schedule_task": 461, "schema": 90, "scheme": [30, 31, 32, 143, 146, 373, 395, 396, 397, 414, 424, 442, 476, 482, 484], "scienc": 428, "scipi": [304, 357], "scope": [134, 390, 396, 431], "score": [161, 167, 172, 176, 183, 185, 186, 265, 266, 268, 269, 270, 272, 297, 318, 319, 321, 322, 323, 325, 360, 377, 391, 430, 454, 468, 470, 478, 482], "script": [165, 265, 266, 269, 270, 318, 319, 322, 323, 390, 420, 427, 434, 438, 441, 442, 445, 462, 464, 471], "script_url": [462, 464, 465, 466], "sdist": [446, 449], "se_resnext50_32x4d": 485, "seamlessli": [458, 470, 482], "search": [134, 165, 179, 186, 189, 190, 230, 231, 263, 265, 275, 278, 279, 280, 300, 304, 318, 357, 385, 394, 427, 430, 434, 435, 445, 470, 471, 476, 480, 482, 483], "search_algorithm": [186, 277, 392], "search_result": 392, "search_spac": [186, 275, 278, 279, 280], "searcher": [165, 186, 280], "searching_result": 165, "sec": 485, "second": [50, 141, 166, 185, 186, 200, 242, 358, 385, 417, 431, 444, 448, 452, 464, 465, 476, 479, 482, 484], "secret": [446, 449], "section": [372, 397, 417, 418, 419, 451, 454, 457, 470, 472, 476, 484], "secur": [139, 394, 453, 471, 486], "sed": 477, "see": [139, 216, 257, 265, 318, 389, 390, 391, 393, 429, 431, 444, 445, 448, 451, 452, 456, 457, 476, 479, 480, 482], "seed": [134, 185, 186, 280, 385, 431, 484], "seek": [141, 476], "seen": [385, 395], "segment": [200, 242, 266, 268, 319, 321, 390], "segment_id": [216, 257, 431], "select": [181, 184, 186, 200, 242, 380, 391, 392, 413, 427, 428, 451, 470, 473, 476, 480, 482], "self": [49, 146, 165, 185, 186, 336, 395, 396, 414, 415, 427, 430, 453, 478, 480, 482], "selfknowledg": [155, 218], "selfknowledgedistillationloss": [155, 218], "selfknowledgedistillationlossconfig": [186, 418, 431], "selfmhasearch": 165, "semant": [395, 424], "send": [390, 396], "senior": 413, "sensit": [161, 281, 297, 427, 470], "sensitivitybalanc": 485, "sentencepiec": 454, "sep": [394, 471], "separ": [301, 389, 426, 429, 459, 461, 469, 472], "seq_length": [200, 242], "seqev": 454, "seqtyp": 91, "sequenc": [49, 91, 166, 169, 170, 185, 186, 200, 215, 216, 242, 256, 257, 266, 270, 295, 319, 323, 395, 415, 424, 470, 476, 481], "sequencediagram": [396, 397, 461], "sequenti": [198, 240, 301, 303, 354, 356, 482], "sequentialsampl": [198, 240], "seri": [212, 254, 394, 428, 431, 481], "serial": [139, 141], "serv": [186, 334, 459, 464, 465, 466], "serve_log": [459, 464, 465, 466], "server": [451, 453, 456, 459, 464, 465, 466], "servic": [394, 451, 458, 471], "sess": [134, 334], "session": [32, 134, 199, 241, 334, 431, 480], "sessionopt": 348, "set": [2, 31, 37, 82, 91, 101, 134, 141, 146, 152, 157, 184, 185, 186, 189, 190, 191, 200, 202, 205, 216, 217, 222, 223, 230, 231, 232, 242, 244, 247, 257, 268, 274, 287, 292, 296, 301, 321, 325, 326, 334, 352, 353, 372, 374, 382, 385, 389, 392, 396, 412, 414, 415, 418, 420, 422, 424, 426, 427, 428, 430, 431, 432, 434, 436, 438, 452, 453, 454, 455, 456, 457, 461, 464, 470, 472, 473, 476, 478, 479, 482, 484], "set_all_env_var": [152, 217], "set_backend": 222, "set_eager_execut": 352, "set_env_var": [152, 217], "set_epoch": 420, "set_modul": 146, "set_nam": 91, "set_opt": 454, "set_random_se": [185, 186, 385], "set_resume_from": [185, 186, 385], "set_tensor": 395, "set_tensorboard": [185, 186, 385], "set_workspac": [185, 186, 385], "setter": 219, "setup": [417, 424, 428, 446, 449, 453, 455, 456, 458, 459, 470], "setuptool": 454, "sever": [125, 182, 216, 257, 299, 301, 392, 417, 418, 419, 427, 431, 432, 444, 448, 459, 470, 472, 474, 479, 481, 482, 484], "sex": 389, "sexual": 389, "sf": 423, "sgd": [157, 185, 186, 223, 418, 431, 472, 484], "sh": [456, 480], "shallow": 418, "shape": [31, 32, 91, 134, 167, 203, 204, 212, 216, 245, 246, 254, 257, 268, 321, 394, 415, 424, 425, 431, 453, 454, 476, 479, 481], "shape_overrid": 128, "shard": 142, "share": [31, 32, 68, 84, 95, 127, 423, 424, 476, 479, 482], "share_qdq_y_pattern": 92, "shareqdqforitexypatternoptim": 95, "shell": 480, "shen": [429, 470], "shift": [129, 151, 212, 254, 452, 481], "short": 482, "shortcut": [200, 242, 415], "shorter": [200, 216, 242, 257, 415, 481], "shot": [161, 179, 182, 226, 297, 299, 392, 427, 431, 470, 471, 476], "should": [41, 101, 102, 141, 154, 163, 165, 176, 185, 186, 189, 190, 198, 200, 202, 216, 221, 230, 231, 240, 242, 244, 257, 262, 266, 319, 325, 326, 353, 372, 374, 385, 391, 392, 395, 396, 397, 415, 418, 420, 430, 431, 437, 446, 449, 451, 453, 454, 468, 470, 473, 476, 481, 482, 484], "shouldn": 457, "show": [172, 385, 389, 418, 420, 431, 437, 452, 453, 454, 456, 459, 464, 465, 466, 479, 482, 483], "show_memory_info": 385, "show_nam": 132, "show_op": 132, "shown": [392, 414, 417, 418, 430, 431, 445, 454, 456, 468, 469, 470, 474, 479, 482], "shrink": 470, "shuffl": [191, 193, 197, 199, 219, 232, 234, 239, 241, 414, 431, 473], "shufflenet": 485, "side": [216, 257, 415, 445, 481], "sidebar": 451, "sigma": 417, "sigmoid": 422, "sign": [316, 371, 390, 394, 397, 413, 453, 471, 473, 476, 478], "signatur": 334, "signed_flag": [316, 371], "signifi": 91, "signific": [470, 471, 474, 479], "significantli": [431, 432, 454, 456, 470, 482], "sigopt": [188, 229, 471], "sigopt_api_token": [431, 478, 482], "sigopt_experiment_id": 478, "sigopt_experiment_nam": [431, 478, 482], "sigopt_project_id": [431, 478, 482], "sigopttunestrategi": [189, 230], "similar": [176, 431, 455, 472, 479, 482, 484], "similarli": 479, "simpl": [216, 257, 428, 431, 470, 478, 479, 482], "simple_infer": 146, "simplest": [392, 413, 437], "simpli": [420, 433, 434, 436, 439, 451, 459], "simplic": 479, "simplifi": [434, 445, 451, 470, 471], "simul": [160, 397], "simultan": [176, 434, 458, 469, 472], "sinc": [185, 186, 263, 265, 287, 292, 300, 318, 418, 422, 428, 430, 445, 451, 456, 469, 476, 477], "since_vers": 90, "singl": [161, 182, 185, 186, 194, 200, 216, 235, 242, 257, 268, 297, 299, 321, 325, 353, 391, 415, 417, 428, 457, 470, 474, 479], "single_output": [272, 325], "singleton": [96, 385], "site": 477, "situat": [185, 186, 420, 470], "sixteen": 432, "size": [84, 169, 170, 193, 194, 199, 202, 208, 212, 216, 234, 235, 241, 244, 250, 254, 257, 295, 334, 336, 385, 389, 396, 414, 415, 420, 423, 431, 451, 452, 468, 470, 473, 474, 476, 479, 481, 484, 485], "skill": 453, "skip": [141, 480, 482], "skip_convers": 89, "skip_first": [313, 368], "skylak": 428, "slave": [371, 482], "slice": 91, "slim": [163, 164, 165, 268, 321, 332, 334, 433, 470], "slim_sess": 334, "small": [4, 53, 54, 55, 56, 360, 392, 456, 457, 470, 476, 482, 485], "smaller": [56, 216, 257, 418, 431, 470, 481], "smbo": 482, "smooth": [4, 126, 127, 134, 150, 185, 186, 313, 470, 482], "smooth_distribut": 4, "smooth_quant": [5, 140, 146, 149, 185, 186, 473, 479], "smooth_quant_arg": [185, 186, 473, 479], "smooth_quant_calibr": 97, "smooth_quant_en": 146, "smooth_quant_scal": 97, "smoothquant": [30, 146, 150, 394, 471, 476, 483], "smoothquant_scale_info": 146, "smoothquantcalibr": 126, "smoothquantcalibrationllm": 126, "smoothquantsampl": [313, 368], "smoothquantscal": 127, "smoothquantscalerllm": 127, "smt": [265, 318], "snapshot": [384, 455], "snip": [161, 185, 186, 297, 427, 470, 485], "snip_momentum": [161, 185, 186, 431, 470], "snip_momentum_progress": [185, 186], "snip_progress": [185, 186], "snipcriterion": 161, "snipmomentumcriterion": 161, "snipmomentumprun": 297, "snippet": 427, "snipprun": 297, "so": [32, 91, 216, 257, 371, 391, 395, 417, 423, 427, 432, 437, 439, 455, 456, 457, 473, 475, 476, 479, 480, 481, 483], "social": [389, 471], "socio": 389, "socket": [152, 217, 385, 459, 461, 485], "soft": 186, "softmax": 418, "softwar": [394, 429, 470, 471, 477], "solut": [129, 151, 394, 395, 396, 423, 436, 440, 445, 471, 476, 477, 479, 482, 483], "solv": [390, 473, 477], "some": [163, 165, 185, 186, 200, 242, 296, 396, 397, 415, 417, 422, 428, 430, 431, 453, 454, 455, 456, 459, 468, 470, 473, 475, 476, 479, 480, 482, 483, 485], "someth": [189, 190, 202, 230, 231, 244, 353, 374], "sometim": [91, 391, 417, 473], "somewhat": 396, "sort": [185, 186, 307, 362, 417, 454, 476, 482], "sort_valu": 454, "sorted_data": 454, "sota": 471, "sound": 428, "sourc": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 394, 429, 431, 444, 446, 448, 449, 451, 471], "space": [152, 173, 174, 179, 185, 186, 189, 190, 230, 231, 263, 270, 275, 278, 279, 280, 300, 304, 307, 314, 323, 326, 353, 357, 362, 369, 389, 390, 392, 395, 396, 397, 470, 473, 484], "spacetobatchnd": 44, "spanbert": 485, "spars": [163, 177, 297, 415, 471], "sparse_dummy_v2": [204, 246, 415], "sparse_gpt": 470, "sparse_ratio": [204, 246, 415], "sparsecategoricalcrossentropi": 484, "sparsecategoricalcrossentropyloss": 155, "sparsedummydataset": [204, 246], "sparsegpt": [180, 470], "sparsegptprun": 180, "sparsiti": [167, 169, 170, 172, 173, 174, 177, 179, 182, 184, 185, 186, 297, 299, 385, 394, 415, 427, 431, 483, 485], "sparsity_decay_typ": [185, 186, 431, 470], "speak": 476, "special": [102, 141, 165, 336, 391, 414, 430, 431, 468, 470, 476, 483], "specif": [30, 90, 102, 152, 157, 184, 185, 186, 200, 201, 202, 203, 207, 209, 223, 242, 243, 244, 245, 249, 251, 281, 282, 284, 285, 286, 325, 353, 382, 389, 392, 395, 396, 413, 414, 417, 418, 424, 426, 430, 431, 432, 433, 434, 438, 439, 441, 445, 451, 453, 459, 468, 470, 472, 476, 482, 484], "specifi": [96, 141, 146, 152, 184, 185, 186, 189, 190, 216, 217, 230, 231, 257, 263, 268, 272, 274, 275, 278, 287, 292, 300, 301, 321, 325, 326, 353, 372, 374, 384, 385, 396, 397, 420, 424, 430, 431, 439, 453, 459, 463, 464, 465, 466, 468, 470, 472, 476, 481, 482, 484], "speed": [413, 431, 442, 470, 471, 473, 482], "speedup": [421, 427, 473], "spellcheck": 390, "spent": 482, "spike": 456, "spiq": [30, 150, 479], "split": [17, 31, 68, 215, 216, 256, 257, 391, 474, 476, 479, 481], "split_shared_bia": 31, "split_shared_input": 62, "splitoper": 27, "splitsharedinputoptim": 68, "spot": 479, "spr": 33, "sprase": 163, "sq": 479, "sq_weight_tensor": 134, "sq_weights_nod": 134, "sqlalchemi": 423, "sqrt": [55, 417], "squad": [200, 216, 242, 257, 269, 270, 272, 322, 323, 325, 415, 430, 470, 481, 485], "squadexampl": [216, 257], "squadf1": [272, 325, 430], "squadv1": [216, 257, 481], "squar": [272, 307, 325, 362, 417, 430, 456, 482], "squeez": [64, 391], "squeezenet": 485, "squeezer": 166, "squential": [198, 240], "src": [91, 452], "ssd": [391, 422, 485], "ssd_mobilenet_v1": 431, "ssh": [420, 451], "sst": [470, 485], "sst2": 440, "st": [200, 242, 415, 430], "stabil": 476, "stabilityai": 479, "stabl": [394, 428, 470, 471], "stablelm": 479, "stage": [303, 308, 354, 356, 363, 418, 470, 480, 482], "stai": [476, 479], "stand": [470, 482], "stand_norm": [203, 204, 245, 246, 415], "standard": [202, 216, 244, 257, 390, 396, 417, 422, 430, 481, 482], "star": 390, "start": [185, 186, 216, 257, 268, 321, 358, 428, 456, 471, 481, 482, 483, 486], "start_epoch": [431, 472, 484], "start_posit": [216, 257], "start_step": [172, 185, 186, 297, 431, 470, 472], "startup": 452, "state": [136, 166, 397, 437, 470], "state_dict": [136, 420, 476, 480], "static": [29, 30, 33, 150, 165, 186, 262, 314, 353, 369, 395, 396, 397, 417, 422, 427, 431, 434, 439, 440, 441, 442, 445, 451, 454, 462, 464, 465, 466, 474, 479, 482, 485], "static_graph": 165, "static_ipex": 439, "static_quant_export": 262, "staticmethod": 125, "statist": [385, 386], "statu": [165, 382, 389, 414, 461, 464, 465, 466, 468, 470], "std": [212, 216, 254, 257, 431, 481], "std_valu": [212, 254], "stderr": 385, "step": [161, 171, 172, 173, 174, 178, 179, 182, 185, 186, 295, 297, 299, 374, 396, 397, 417, 418, 419, 420, 431, 446, 449, 451, 464, 465, 466, 469, 470, 472, 475, 476, 478, 479, 480, 482], "step1": [314, 369], "step2": [314, 369], "step3": [314, 369], "step4": [314, 369], "step5": [314, 369], "still": [413, 431, 457, 471, 473, 475], "stock": [33, 440, 479], "stop": [185, 186, 431, 482, 483, 484], "stopgradi": 66, "storag": [141, 394, 425, 430, 453, 456, 476, 479], "store": [126, 161, 162, 165, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 202, 244, 290, 297, 426], "storywrit": 485, "str": [2, 30, 32, 126, 135, 136, 141, 142, 144, 145, 146, 147, 155, 157, 162, 165, 185, 186, 200, 201, 202, 209, 212, 216, 218, 222, 223, 242, 243, 244, 251, 254, 257, 261, 262, 265, 266, 268, 270, 272, 279, 290, 313, 316, 318, 319, 321, 323, 325, 342, 347, 349, 351, 352, 368, 371, 372, 377, 380, 382, 385, 386, 414, 415, 430, 462, 472, 480, 481], "str2arrai": 385, "str_label": 430, "straightforward": [470, 476, 479], "strategi": [2, 146, 179, 185, 186, 187, 202, 228, 244, 264, 317, 394, 395, 396, 397, 402, 413, 414, 420, 427, 431, 439, 451, 456, 471, 472, 473, 475, 476, 477, 483, 484], "strategy_kwarg": [185, 186, 478, 482], "strategy_registri": [310, 365, 482], "stream": [385, 485], "streamlin": [428, 458, 471], "strftime": [185, 186], "stride": [91, 216, 257, 481], "string": [31, 102, 134, 139, 141, 152, 155, 157, 165, 167, 172, 180, 181, 182, 184, 185, 186, 202, 218, 223, 244, 258, 263, 265, 268, 274, 275, 276, 278, 279, 287, 292, 295, 296, 297, 298, 299, 300, 318, 321, 330, 334, 377, 382, 385, 430, 479, 481], "strip": [53, 54, 56, 69, 70, 134, 480], "strip_equivalent_nod": [62, 134], "strip_unused_lib": 134, "strip_unused_nod": [62, 134], "stripequivalentnodesoptim": 69, "stripunusednodesoptim": 70, "stroke": 482, "structur": [166, 177, 178, 185, 186, 297, 315, 370, 385, 427, 450, 452, 455, 464, 470, 471, 473, 480, 483, 485], "stsb": 485, "student": [154, 158, 185, 186, 200, 225, 242, 258, 415, 418, 419, 485], "student1_layer_name1": 186, "student1_layer_name2": 186, "student2_layer_name1": 186, "student2_layer_name2": 186, "student_layer_nam": 186, "student_layer_output_process": 186, "student_loss": [418, 419], "student_model": [155, 186, 218, 431], "student_output": [418, 419], "studio": [394, 442, 451, 461, 483], "style": [194, 207, 235, 249, 372, 390, 415, 426], "style_fold": [207, 249, 415], "style_transf": 415, "style_transfer_dataset": [206, 248], "styletransferdataset": [207, 249], "sub": [52, 146, 152, 165, 217, 392, 482], "sub_class": [325, 353], "subclass": [4, 22, 147, 157, 167, 172, 180, 182, 195, 199, 202, 209, 216, 223, 237, 241, 244, 251, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 365, 395], "subfold": [202, 244, 454], "subgraph": [41, 52, 91, 145, 474, 482], "subgraphstyl": 482, "subject": 429, "submit": [390, 458, 461, 471], "submodul": 480, "subpixel": [212, 254], "subprocess": 414, "subsect": [479, 484], "subsequ": [176, 396, 434, 451], "subset": [202, 205, 244, 247, 415, 456], "subsidiari": 429, "substanti": 474, "success": [428, 453, 477], "successfulli": [391, 420, 460, 464, 465, 466, 471], "successor": [77, 78, 79, 80], "sudo": [423, 437], "suffici": 478, "suffix": 134, "suggest": [391, 478], "suit": [428, 452, 480], "suitabl": 457, "sum": [185, 186, 272, 325, 417, 418], "sum_over_batch_s": 484, "summar": [132, 418], "summari": [152, 374, 417, 446, 449, 480, 485], "summary_benchmark": 152, "summarywrit": 480, "super": [270, 323, 392], "superbench": 434, "supernet": 392, "suppli": 2, "support": [2, 30, 31, 32, 83, 90, 150, 155, 157, 162, 168, 175, 179, 185, 186, 189, 190, 199, 200, 202, 209, 212, 216, 218, 219, 220, 223, 230, 231, 241, 242, 244, 251, 254, 257, 264, 272, 274, 279, 295, 297, 301, 308, 314, 317, 325, 326, 330, 336, 353, 363, 369, 372, 374, 377, 379, 380, 385, 387, 394, 396, 431, 434, 439, 442, 445, 451, 458, 459, 462, 471, 475, 478, 482, 483], "supported_lay": 146, "supported_op_typ": 49, "suppos": 479, "suppress": [476, 479], "sure": [167, 172, 180, 182, 295, 297, 299, 412, 453], "surg": 141, "surrog": 482, "suyu": 429, "sweep": 438, "sweep_object": 438, "sweet": 479, "switch": [71, 434, 480], "switch_optim": 62, "switchoptim": 71, "sy": [385, 437], "sym": [30, 31, 32, 396, 397, 424, 473, 476, 484], "sym_model": 2, "symbol": [2, 31, 135, 145, 146, 265, 318, 326, 353, 391, 433], "symbol_r": [265, 318], "symbolblock": 2, "symbolic_trac": 137, "symlink": [444, 448], "symmetr": [99, 380, 397, 473, 476, 481, 482], "symnet": 2, "synchron": 482, "syntax": 424, "system": [136, 141, 152, 217, 385, 412, 437, 470, 485], "systemat": 479, "szymon": 413, "t": [53, 54, 56, 129, 141, 151, 167, 185, 186, 216, 219, 257, 270, 323, 391, 395, 417, 418, 420, 431, 432, 452, 457, 470, 473, 476, 482, 484], "t10k": [202, 244, 415], "t5": [470, 485], "t5norm": 479, "tab": [270, 323, 451, 480], "tabl": [165, 176, 385, 397, 417, 422, 454, 456, 485], "table_entri": 385, "taco": [394, 471], "tag": [141, 334, 479, 480], "take": [4, 167, 186, 189, 190, 194, 216, 221, 230, 231, 235, 257, 295, 304, 325, 326, 353, 357, 374, 389, 391, 392, 414, 417, 418, 424, 431, 451, 470, 473, 475, 476, 481, 482, 484], "taken": [189, 190, 230, 231, 326, 353, 374, 473], "tamper": 141, "tar": [202, 244, 415, 417, 446, 449], "target": [2, 30, 31, 88, 146, 165, 182, 184, 186, 296, 299, 304, 357, 380, 415, 420, 431, 470, 480, 481, 482, 484], "target_boxes_num": 430, "target_depth": 146, "target_dtyp": 368, "target_height": [216, 257, 481], "target_lay": 165, "target_linear": 166, "target_op_lut": 165, "target_spars": [167, 185, 186, 431, 470, 472, 484], "target_sparsity_ratio": [172, 297], "target_width": [216, 257, 481], "targetspac": [304, 357], "task": [129, 200, 207, 242, 249, 272, 325, 415, 418, 419, 422, 427, 430, 431, 454, 458, 461, 470, 474, 476, 479, 485], "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 459, "task_collect": 461, "task_db": 461, "task_id": [459, 464, 465, 466], "task_log": 459, "task_monitor_port": [459, 464, 465, 466], "task_nam": [439, 440, 462, 465, 466], "task_request": [460, 464, 465, 466], "task_request_distribut": 464, "task_workspac": 459, "taskdataset": 485, "taskdb": 461, "tasklaunch": 461, "taskmonitor": 461, "td": 482, "teacher": [154, 185, 186, 258, 418, 419, 431, 485], "teacher_layer_nam": 186, "teacher_layer_name1": 186, "teacher_layer_name2": 186, "teacher_layer_output_process": 186, "teacher_logit": 431, "teacher_model": [155, 185, 186, 218, 418, 419, 431], "team": [270, 323, 389, 475], "technic": 394, "techniqu": [264, 317, 387, 394, 427, 431, 434, 453, 469, 470, 471, 472, 473, 483, 484, 485], "technologi": [202, 244, 431], "tee": 437, "tel2p1": 485, "tell": [141, 325, 353, 472], "temp_path": 126, "temperatur": [155, 185, 186, 218, 431, 484], "templat": [180, 298, 431, 470], "template_config": 184, "temporari": [126, 146, 385, 389], "temporarili": 389, "tencent": [394, 471], "tend": 470, "tensor": [2, 3, 4, 31, 32, 56, 91, 126, 134, 136, 141, 142, 146, 161, 162, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 186, 216, 257, 260, 262, 295, 297, 307, 334, 362, 380, 384, 385, 391, 397, 414, 415, 417, 470, 473, 477, 480, 481, 482], "tensor2tensor": [266, 319], "tensor_data": [75, 385, 386], "tensor_dict": 395, "tensor_dtyp": 91, "tensor_nam": [31, 134, 141, 142], "tensor_to_nod": 2, "tensor_v": 134, "tensor_valu": 31, "tensorboard": [185, 186, 377, 385, 395, 431, 454], "tensorcollector": 2, "tensordataset": [200, 242, 415], "tensorflow": [38, 40, 61, 62, 63, 73, 81, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 103, 116, 126, 127, 128, 131, 134, 155, 157, 183, 185, 186, 199, 200, 201, 202, 205, 207, 209, 216, 223, 241, 242, 243, 244, 247, 249, 251, 257, 261, 262, 263, 266, 268, 272, 273, 274, 300, 308, 319, 321, 325, 326, 334, 347, 348, 351, 352, 353, 363, 385, 390, 392, 394, 395, 396, 413, 414, 417, 418, 419, 421, 424, 425, 427, 428, 431, 432, 433, 441, 442, 453, 456, 470, 471, 472, 478, 479, 482, 484], "tensorflow1": [199, 241], "tensorflow_addon": [157, 223], "tensorflow_amp": 441, "tensorflow_dataload": [236, 351], "tensorflow_inc": 441, "tensorflow_itex": [202, 205, 207, 209, 244, 247, 249, 251, 414, 472], "tensorflow_itexadaptor": 33, "tensorflow_model": [328, 351, 456], "tensorflowadam": 157, "tensorflowadamw": [157, 223], "tensorflowadaptor": 33, "tensorflowbasemodel": [334, 351], "tensorflowbertdataload": [199, 241], "tensorflowbertdataset": [200, 242], "tensorflowcheckpointmodel": 334, "tensorflowcifar10": [202, 244], "tensorflowcifar100": [202, 244], "tensorflowcocomap": [272, 325], "tensorflowcriterion": [155, 218], "tensorflowcroptoboundingbox": [216, 257], "tensorflowcrossentropyloss": [155, 218], "tensorflowdataload": [199, 241, 351], "tensorflowdataset": [202, 244], "tensorflowfashionmnist": [202, 244], "tensorflowfilt": [209, 251], "tensorflowimagefold": 244, "tensorflowimagenetdataset": [205, 247], "tensorflowimagenetraw": [205, 247], "tensorflowimagerecord": [202, 244], "tensorflowknowledgedistillationloss": [155, 218], "tensorflowknowledgedistillationlossextern": [155, 218], "tensorflowknowledgedistillationlosswrapp": 155, "tensorflowllmmodel": 334, "tensorflowmap": [272, 325], "tensorflowmetr": [272, 325], "tensorflowmnist": [202, 244], "tensorflowmodel": 334, "tensorflowmodelzoobertdataload": [199, 241], "tensorflowmodelzoobertdataset": [200, 201, 242, 243], "tensorflowoptim": [157, 223], "tensorflowparserfactori": 343, "tensorflowprofilingpars": 344, "tensorflowqatmodel": 334, "tensorflowqdqtoonnxqdqconvert": 128, "tensorflowqueri": [33, 395], "tensorflowrandomhorizontalflip": [216, 257], "tensorflowrandomverticalflip": [216, 257], "tensorflowresizecropimagenettransform": [212, 254], "tensorflowresizewithratio": [216, 257], "tensorflowsavedmodelmodel": 334, "tensorflowsgd": [157, 223], "tensorflowshiftrescal": 212, "tensorflowsparsecategoricalcrossentropi": 155, "tensorflowtfrecorddataset": [202, 244], "tensorflowtopk": [272, 325], "tensorflowtransform": [216, 257], "tensorflowtranspos": [216, 257], "tensorflowtransposelastchannel": 212, "tensorflowvocmap": [272, 325], "tensorflowvocrecord": [202, 244], "tensorflowwrapfunct": [216, 257], "tensorproto": [31, 91], "tensorrt": [31, 413, 432, 473], "tensorrtexecutionprovid": [432, 473], "tensors_kl": 2, "tensors_minmax": 2, "teq": [394, 471, 474, 476], "teqlinearfakequ": [143, 373], "term": [154, 173, 174, 179, 181, 258, 390, 413, 418, 429, 430, 468, 469, 482], "termin": [417, 444, 445, 448, 454], "test": [152, 185, 186, 216, 257, 390, 394, 417, 428, 459, 464, 485], "test_func": 420, "test_task_request": 466, "text": [91, 180, 215, 216, 256, 257, 265, 270, 298, 318, 323, 422, 429, 440, 462, 465, 466, 470, 471, 476, 479, 481, 485], "textdist": 454, "tf": [91, 102, 127, 134, 165, 184, 199, 200, 201, 202, 216, 241, 242, 243, 244, 257, 332, 334, 420, 428, 433, 471, 475, 477, 481], "tf1": [199, 241, 433], "tf2": 433, "tf2onnx": [186, 259], "tf2onnx_convert": 97, "tf2onnx_util": 87, "tf2onnxconfig": [186, 422], "tf_criteria": 162, "tf_diagnosis_help": 134, "tf_enable_onednn_opt": 428, "tf_example1": [463, 464, 465], "tf_modul": 352, "tf_to_fp32_onnx": 261, "tf_to_int8_onnx": 261, "tfdatadataload": [199, 241], "tfmodelzoocollecttransform": [216, 257], "tfpruningcallback": [287, 292], "tfrecord": [200, 201, 202, 242, 243, 244, 415], "tfrecorddataset": 415, "tfslimnetsfactori": 332, "tfsquadv1modelzooposttransform": [216, 257], "tfsquadv1posttransform": [216, 257], "th": [75, 76], "thalaiyasingam": 470, "than": [41, 134, 200, 216, 242, 257, 385, 392, 394, 412, 415, 426, 456, 464, 468, 469, 470, 473, 476, 478, 481, 482], "thei": [141, 217, 372, 389, 418, 424, 431, 439, 454, 457, 468], "them": [141, 165, 200, 242, 391, 397, 414, 417, 422, 424, 426, 454, 457, 469, 470, 476, 482], "themselv": 473, "theoret": [473, 476], "therefor": [391, 431, 454, 456, 470, 473, 474, 477, 479], "thi": [30, 72, 96, 118, 125, 129, 133, 136, 139, 141, 146, 151, 154, 158, 163, 165, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 185, 186, 189, 190, 199, 200, 201, 202, 203, 204, 205, 207, 216, 219, 225, 226, 230, 231, 241, 242, 243, 244, 245, 246, 247, 249, 257, 265, 268, 269, 270, 272, 281, 282, 284, 285, 286, 287, 292, 295, 297, 299, 300, 301, 304, 307, 318, 321, 322, 323, 325, 326, 336, 353, 357, 362, 371, 372, 374, 384, 385, 389, 390, 391, 392, 395, 396, 397, 413, 414, 415, 418, 419, 420, 422, 423, 424, 427, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 442, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 464, 465, 466, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "think": 476, "third": [268, 321, 390, 429], "those": [60, 141, 307, 362, 385, 417, 418, 419, 426, 431, 432, 469, 470, 473, 482], "though": 479, "thread": [152, 185, 186, 217, 348, 352, 414, 461], "threat": 453, "threaten": 389, "three": [60, 184, 200, 242, 303, 354, 356, 391, 395, 396, 413, 428, 432, 445, 459, 469, 473, 475, 478, 479, 480], "threshold": [2, 148, 375, 379, 430], "through": [136, 189, 190, 230, 231, 325, 326, 353, 394, 412, 424, 426, 427, 430, 437, 458, 468, 469, 470, 472, 473, 476, 479], "throw": 414, "thu": [268, 321, 431, 470, 473], "tian": 429, "tiiuae": [479, 485], "tile": 291, "tile_pattern": 289, "tile_pattern_1x1": 472, "tilepattern_1x1": 291, "tilepattern_1x16": 291, "tilepattern_1x2": 291, "tilepattern_2x2": 291, "tilepattern_4x1": 291, "tilepatternbas": 291, "till": [385, 482], "tim": 476, "time": [134, 141, 185, 186, 216, 257, 272, 304, 325, 336, 357, 385, 396, 414, 417, 420, 423, 431, 439, 441, 444, 448, 451, 452, 457, 460, 464, 465, 468, 470, 471, 473, 476, 478, 480, 481, 482], "time_limit": 385, "timeout": [185, 186, 431, 472, 482, 484], "timm": 454, "tini": 485, "tinybert": 485, "tip": 454, "titl": [385, 429, 452, 482], "tl": 453, "tloss": 420, "tmp_file_path": 385, "to_numpi": 31, "toarrai": [216, 257, 481], "todo": [200, 203, 242, 245, 268, 314, 321, 369], "togeth": [185, 186, 216, 257, 418, 428, 438, 471, 480, 481], "togethercomput": 479, "token": [200, 213, 216, 242, 255, 257, 265, 266, 318, 319, 380, 415, 430, 431, 453, 454, 476, 478, 479, 481, 482], "token_is_max_context": [216, 257], "token_to_orig_map": [216, 257], "token_type_id": [200, 242, 431], "tokenzi": [215, 256], "toler": 456, "tolerable_loss": [185, 186, 431, 482], "tolist": 479, "toml": [446, 449], "tondarrai": 481, "tondarraytransform": [216, 257], "tool": [4, 134, 261, 385, 394, 395, 431, 444, 448, 454, 457, 458, 459, 470, 471, 473], "toolbar": 452, "toolchain": [423, 471], "toolkit": [391, 428, 434, 442, 471, 483], "top": [216, 257, 263, 272, 287, 292, 300, 325, 390, 430, 451, 454, 456, 481], "top1": [374, 430, 453, 470, 473, 485], "topic": 394, "topilimag": 481, "topk": [325, 353, 420, 430, 431, 453, 473], "topologi": 480, "torch": [135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 150, 162, 165, 166, 168, 176, 185, 186, 262, 326, 353, 380, 384, 391, 394, 397, 398, 418, 420, 422, 431, 432, 433, 434, 439, 442, 454, 473, 476, 479, 480], "torch2onnx": [186, 259], "torch2onnxconfig": [186, 422], "torch_dtyp": 397, "torch_load": 138, "torch_model": 328, "torch_to_fp32_onnx": 262, "torch_to_int8_onnx": 262, "torch_util": [220, 474, 479], "torchdynamo": 441, "torchscript": [422, 474, 479], "torchsmoothqu": 479, "torchvis": [216, 257, 421, 425, 434, 440, 454], "toronto": [202, 244, 415], "torr": 470, "total": [172, 216, 257, 272, 297, 325, 415, 417, 470, 476, 481, 485], "total_block_arg": 146, "total_block_kwarg": 146, "total_execution_tim": 342, "total_valu": 146, "totensor": [431, 481], "tow": 420, "toward": [389, 418], "tpe": [188, 229], "tpetunestrategi": [190, 231], "tqdm": 431, "trace": [135, 136, 145, 146, 165, 185, 186, 262, 360, 391, 441, 482], "trace_and_fuse_sub_graph": 145, "traceabl": 391, "traced_model": 145, "tracer": 391, "track": [451, 478], "trackabl": 134, "trade": 476, "tradit": [437, 470], "train": [30, 43, 66, 150, 154, 173, 174, 177, 179, 185, 186, 189, 190, 200, 202, 216, 226, 230, 231, 242, 244, 257, 258, 274, 297, 317, 353, 377, 392, 394, 395, 396, 402, 415, 417, 418, 419, 422, 427, 432, 434, 440, 451, 456, 464, 469, 471, 474, 476, 478, 479, 482, 484], "train_cfg": 377, "train_dataload": [431, 470, 473], "train_dataset": [420, 473], "train_fun": 431, "train_func": [301, 374, 420, 431, 473], "train_kwarg": 420, "train_load": 420, "train_loop": [374, 431, 469], "train_sampl": 420, "trainabl": [394, 471, 476], "trainer": [431, 442], "training_arg": 431, "training_func": 431, "training_func_for_nc": [418, 419], "transact": 479, "transfer": [154, 207, 249, 258, 415, 418, 419, 431, 479], "transform": [31, 36, 129, 131, 132, 133, 144, 179, 200, 201, 202, 203, 204, 205, 207, 209, 211, 242, 243, 244, 245, 246, 247, 249, 251, 253, 391, 392, 394, 413, 415, 418, 419, 420, 421, 425, 431, 434, 439, 440, 441, 442, 454, 462, 465, 466, 470, 471, 475, 476, 479, 480, 482, 484, 485], "transform_func": [216, 257], "transform_graph": 97, "transform_list": [216, 257, 481], "transform_registri": [216, 257], "transform_typ": [216, 257], "transformerbasedmodelblockpatterndetector": 144, "transit": 457, "translat": [265, 266, 318, 319, 470, 482], "translation_corpu": [266, 319], "transpos": [31, 59, 171, 212, 216, 257, 261, 295, 476, 481], "travers": [396, 397, 476, 482], "treat": [141, 414], "tree": [180, 298, 314, 369, 459], "tri": [186, 482], "trial": 482, "trigger": [152, 172, 297], "troll": 389, "troubleshoot": 457, "trt_env_setup": 31, "true": [2, 31, 32, 71, 99, 132, 134, 141, 152, 185, 186, 198, 200, 202, 203, 215, 216, 217, 240, 242, 244, 245, 256, 257, 262, 266, 272, 290, 313, 319, 325, 336, 353, 368, 372, 377, 380, 384, 385, 396, 414, 415, 417, 420, 424, 430, 431, 434, 437, 438, 453, 454, 455, 456, 462, 464, 472, 473, 474, 476, 479, 480, 481, 482, 484], "truncat": [200, 216, 242, 257, 415, 481], "trust": [141, 417, 453], "truth": [269, 270, 322, 323], "try": [198, 240, 391, 417, 454, 470, 473, 479, 482], "try_cnt": 134, "tsl": 452, "tune": [2, 152, 185, 186, 189, 190, 200, 202, 230, 231, 242, 244, 263, 300, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 326, 336, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 374, 385, 395, 396, 413, 414, 415, 417, 420, 427, 429, 431, 432, 451, 455, 458, 460, 461, 468, 470, 471, 475, 477, 478, 480, 484], "tune_": 480, "tune_0_acc0": 480, "tune_1": 480, "tune_1_acc0": 480, "tune_1_acc_0": 480, "tune_cfg": [2, 134, 135, 146, 395, 397, 482], "tune_config": 396, "tuner": [189, 190, 230, 231, 263, 300, 326, 353, 374, 473], "tunestrategi": [310, 365, 482], "tunestrategymeta": 365, "tuning_cfg_to_fw": 396, "tuning_criterion": [186, 431, 468, 478, 482], "tuning_history_path": 385, "tuning_info": [460, 464], "tuning_items_prior": [313, 368], "tuning_order_lst": [313, 368], "tuning_sampl": [312, 367], "tuning_spac": [312, 313, 315, 367, 368, 370], "tuning_strategi": [185, 186], "tuning_struct": [312, 313, 314, 367, 368, 369], "tuningcriterion": [186, 431, 468, 478, 482], "tuningitem": [314, 369], "tuningord": [313, 368], "tuningsampl": [313, 368], "tuningsamplerregistri": 313, "tuningspac": [313, 314, 368, 369], "tupl": [2, 91, 134, 146, 186, 189, 190, 212, 216, 230, 231, 254, 257, 262, 313, 326, 353, 368, 374, 384, 396, 415, 430, 431, 473, 481], "turbo": 485, "turn": [430, 445, 474], "tutori": [391, 442, 471, 483], "tweak": 457, "twine": [446, 449], "twitter": 471, "two": [134, 136, 141, 152, 166, 171, 178, 182, 202, 207, 217, 244, 249, 268, 295, 299, 301, 308, 321, 363, 385, 390, 391, 392, 414, 415, 418, 420, 422, 424, 431, 432, 458, 459, 461, 470, 473, 475, 476, 478, 479, 482, 484], "txt": [205, 247, 415, 417, 428, 453, 455, 456, 458, 459], "type": [2, 4, 30, 31, 32, 60, 82, 91, 102, 108, 118, 126, 134, 135, 136, 141, 146, 147, 155, 157, 165, 166, 167, 172, 180, 181, 182, 184, 185, 186, 198, 200, 202, 209, 216, 218, 223, 240, 242, 244, 251, 257, 262, 265, 266, 268, 272, 279, 286, 290, 295, 297, 299, 304, 310, 314, 316, 318, 319, 321, 325, 334, 336, 357, 358, 365, 369, 371, 372, 384, 385, 395, 396, 415, 417, 420, 422, 424, 427, 431, 432, 452, 454, 459, 460, 464, 465, 473, 474, 476, 478, 481, 482, 483, 484], "types_to_splic": 66, "typescript": [444, 448], "typic": [274, 301, 392, 394, 419, 421, 425, 456, 470, 485], "u": [129, 151, 434, 453, 458], "ubuntu": 428, "ubyt": [202, 244, 415], "ui": 453, "uint4": 397, "uint8": [31, 212, 254, 268, 316, 321, 371, 395, 415, 424, 472, 473, 481, 484], "ultim": 473, "ultra": 485, "unaccept": 389, "unari": 28, "unary_op": 17, "unarydirect8bitoper": 28, "unaryoper": 28, "unbalanc": 485, "uncas": [200, 216, 242, 257, 415, 481, 485], "uncertain": 470, "undefin": [141, 184, 296], "under": [96, 185, 186, 202, 244, 380, 384, 390, 392, 394, 415, 429, 430, 431, 434, 439, 440, 451, 459, 469, 470, 471, 474, 476, 480, 482], "underli": [53, 54, 56, 141], "understand": [457, 473, 480, 483], "understudi": [265, 318], "unicod": [215, 256], "unicodedecodeerror": 141, "unicoderegex": [265, 318], "unifi": [263, 300, 395, 396, 397, 414, 426, 427, 430, 431, 433], "uniform": [413, 476], "uniformli": 476, "uninstal": 451, "union": [272, 325, 374, 430, 462], "uniqu": [268, 301, 321, 473], "unique_id": [216, 257], "unit": [167, 295, 390, 459, 470], "unk": [215, 256], "unk_token": [215, 256], "unless": [141, 424], "unnecessari": [217, 431], "unpickl": [139, 141], "unpicklingerror": 139, "unpreced": 470, "unsaf": 141, "unseen": 473, "unset": 32, "unsign": [146, 316, 371, 397, 476], "unstructur": [185, 186, 291, 427, 470, 485], "unsupport": [422, 431, 470], "until": [392, 396, 482], "untrac": 391, "untrust": 141, "unus": [70, 134], "unwelcom": 389, "up": [2, 86, 176, 216, 257, 296, 420, 421, 424, 427, 442, 446, 449, 451, 470, 471, 472, 473, 478, 481, 482, 484], "up1": 424, "up2": 424, "updat": [60, 142, 146, 161, 167, 184, 297, 325, 353, 382, 423, 430, 431, 437, 442, 445, 461, 470, 476, 479, 482, 483], "update_config": [185, 186], "update_frequ": 472, "update_frequency_on_step": [297, 472], "update_modul": 142, "update_neural_insights_workload": 382, "update_neural_insights_workload_accuracy_data": 382, "update_param": 184, "update_sq_scal": 146, "update_statu": 461, "update_task_statu": 461, "upgrad": 431, "upload": [427, 446, 449], "upload_path": [459, 464, 465, 466], "upper": 451, "url": [202, 244, 390, 429, 462, 463, 470], "us": [2, 4, 22, 30, 31, 32, 34, 35, 56, 89, 91, 102, 127, 136, 141, 146, 152, 155, 157, 161, 165, 167, 172, 176, 177, 180, 182, 183, 185, 186, 189, 190, 198, 199, 200, 201, 202, 203, 204, 207, 215, 216, 217, 218, 223, 230, 231, 240, 241, 242, 243, 244, 245, 246, 249, 256, 257, 261, 262, 263, 265, 266, 268, 272, 273, 274, 279, 286, 287, 290, 292, 295, 297, 298, 299, 300, 301, 304, 307, 310, 313, 314, 318, 319, 321, 325, 336, 348, 352, 353, 357, 360, 362, 365, 369, 371, 372, 374, 375, 376, 377, 378, 380, 385, 389, 390, 391, 392, 395, 396, 412, 413, 415, 417, 418, 419, 420, 422, 424, 426, 428, 429, 431, 432, 433, 434, 435, 436, 438, 439, 442, 444, 446, 448, 449, 451, 453, 454, 455, 456, 457, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485], "usag": [146, 199, 241, 268, 274, 301, 321, 372, 396, 415, 420, 421, 434, 442, 453, 459, 464, 465, 466, 468, 472, 476, 481], "use_bf16": [34, 35, 185, 472], "use_bp": [266, 319], "use_distributed_tun": 185, "use_full_length": 476, "use_optimum_format": 380, "user": [141, 152, 157, 165, 177, 184, 185, 186, 189, 190, 202, 205, 209, 216, 217, 223, 230, 231, 244, 247, 251, 257, 263, 287, 292, 298, 300, 301, 325, 326, 336, 353, 358, 371, 374, 385, 391, 392, 394, 395, 396, 397, 402, 412, 414, 418, 419, 422, 424, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 445, 451, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 477, 479, 480, 481, 482, 486], "user_config": 184, "user_metr": [221, 325, 353], "user_obj_cfg": 336, "user_object": 336, "user_postprocess": [214, 224], "usernam": 459, "usr": 423, "usr_cfg": 336, "usual": [200, 242, 396, 417, 418, 456, 469, 470, 473, 474, 479], "utf": [141, 215, 256], "util": [1, 5, 91, 96, 97, 125, 128, 135, 136, 137, 138, 145, 156, 162, 185, 186, 225, 266, 296, 306, 317, 319, 361, 396, 397, 398, 413, 420, 431, 434, 454, 470, 473, 479, 482, 483], "uuid": 382, "v": [442, 451, 470, 482, 484], "v0": [417, 456, 479, 480], "v1": [134, 212, 254, 269, 270, 272, 322, 323, 325, 334, 420, 422, 423, 430, 433, 455, 470, 477, 478, 479, 485], "v14": [265, 318], "v1_6": [394, 425, 453, 456], "v2": [136, 360, 414, 420, 422, 423, 428, 440, 477, 479, 482, 483, 485], "v3": [456, 485], "v4": [440, 462, 465, 466, 485], "v5": 390, "v5s6": 485, "val": [134, 184, 202, 205, 244, 247, 296, 417, 431, 456], "val2017": [201, 243, 415], "val_dataload": [431, 473], "val_dataset": [431, 473], "val_load": 473, "val_map": [205, 247, 415], "valid": [41, 53, 54, 91, 172, 175, 184, 185, 186, 202, 244, 268, 296, 297, 321, 334, 392, 394, 395, 415, 417, 418, 421, 424, 427, 429, 431, 442, 456, 470, 473, 476, 477], "valid_mixed_precis": 424, "valid_reshape_input": [53, 54], "validate_and_inference_input_output": 334, "validate_graph_nod": 334, "valu": [4, 31, 32, 42, 53, 54, 56, 75, 76, 91, 129, 134, 141, 146, 151, 152, 161, 165, 166, 176, 183, 184, 185, 186, 189, 190, 200, 203, 204, 212, 216, 217, 230, 231, 242, 245, 246, 254, 257, 268, 272, 296, 304, 307, 314, 321, 325, 326, 353, 357, 362, 369, 371, 372, 374, 375, 377, 385, 391, 396, 397, 413, 415, 417, 424, 430, 431, 432, 437, 454, 456, 462, 468, 470, 472, 473, 476, 477, 479, 481, 482, 484], "valuabl": [470, 480], "value_layer_nam": 176, "valueerror": [53, 54, 56, 146, 268, 321, 372, 423], "valueinfo": 31, "values_from_const": [53, 54, 56], "vanhouck": 413, "vanilla": [395, 396, 427], "var": 417, "vari": [263, 287, 292, 300, 456, 470, 479, 485], "variabl": [31, 139, 152, 181, 185, 186, 202, 217, 244, 304, 357, 371, 428, 470, 482], "varianc": [129, 151, 417], "variant": [196, 238], "varieti": [421, 472, 482], "variou": [263, 273, 300, 326, 397, 427, 434, 461, 470, 472, 474], "vcvtne2ps2bf16": 432, "vcvtneps2bf16": 432, "vdpbf16p": 432, "vec": 417, "vecchio": 428, "ventura": 428, "verbos": [31, 262, 304, 357], "veri": [431, 452, 456, 473, 476, 482, 483], "verifi": 422, "version": [2, 40, 90, 143, 146, 165, 186, 261, 262, 317, 373, 389, 391, 395, 424, 428, 429, 431, 444, 446, 448, 449, 471, 477, 479, 482, 483], "version1": [134, 385], "version1_eq_version2": [134, 385], "version1_gt_version2": [134, 385], "version1_gte_version2": [134, 385], "version1_lt_version2": [134, 385], "version1_lte_version2": [134, 385], "version2": [134, 385], "vertic": [171, 216, 257, 295, 481], "vgg": 485, "vgg16": [422, 485], "vgg19": 485, "via": [263, 287, 292, 300, 389, 394, 420, 427, 431, 434, 451, 470, 471], "view": [390, 394, 421, 442, 451, 457, 477], "viewlet": 452, "viewpoint": 389, "vincent": 413, "violat": 139, "virtual": [371, 471], "vision": [394, 422, 438, 479], "visit": 485, "visual": [185, 186, 394, 442, 451, 478, 480, 482, 483], "vmware": 471, "vnni": [421, 427, 472, 473], "voc": [202, 244, 272, 325], "vocab": [215, 256], "vocab_fil": [215, 216, 256, 257, 481], "vocabulari": [200, 215, 216, 242, 256, 257, 481], "vocmap": 430, "vscode": [450, 452], "vtune": 429, "w": [32, 216, 257, 470, 479, 481], "w8a8": [474, 476], "w_dq": 479, "w_fp32": [129, 151], "w_int8": [129, 151], "w_q": 479, "w_scale": 479, "wa": [141, 185, 186, 395, 431, 456, 457, 460, 471, 482], "wai": [165, 201, 202, 205, 243, 244, 247, 392, 397, 414, 415, 417, 430, 431, 434, 437, 452, 453, 457, 458, 459, 469, 470, 473, 476, 479, 482, 484], "wait": [444, 448, 451, 461], "wait_new_task": 461, "want": [53, 54, 56, 165, 185, 186, 198, 200, 240, 242, 297, 358, 374, 391, 395, 414, 415, 420, 431, 439, 451, 452, 459, 468, 473, 476, 478, 480, 482], "warmup": [185, 186, 412, 431, 472], "warn": [153, 381], "wasn": 141, "wasserblat": 470, "watch": [444, 448, 457], "we": [30, 31, 53, 54, 56, 60, 72, 129, 141, 150, 151, 152, 165, 169, 176, 185, 186, 199, 217, 219, 241, 265, 268, 318, 321, 360, 389, 391, 395, 396, 397, 414, 417, 420, 422, 424, 430, 431, 438, 439, 442, 446, 449, 451, 452, 454, 457, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483], "web": [394, 453, 459, 464, 465, 466, 480], "webpack": 457, "webpag": 456, "websit": 428, "wechat": [394, 471], "wei": [476, 479], "weight": [30, 31, 32, 46, 47, 108, 126, 127, 129, 134, 136, 146, 151, 161, 162, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 185, 186, 262, 295, 297, 314, 325, 353, 360, 369, 371, 385, 386, 394, 395, 396, 397, 413, 417, 419, 424, 426, 431, 453, 464, 468, 470, 471, 472, 473, 474, 479, 480, 482, 483, 484], "weight_bit": 396, "weight_compress": [472, 484], "weight_config": 32, "weight_correct": [149, 185, 186, 473], "weight_decai": [431, 484], "weight_dict": 136, "weight_empir": 129, "weight_name_map": 126, "weight_onli": [5, 186, 384, 474, 476], "weight_shap": 32, "weight_slim": [164, 176], "weight_tensor": 385, "weight_typ": 262, "weightcorrect": 151, "weightdetail": 385, "weightonli": 32, "weightonlylinear": 476, "weightonlyquantsampl": 368, "weightpruningconfig": [185, 186, 431, 469, 470], "weights_detail": 378, "weights_onli": 141, "weights_tabl": [454, 455], "weightsdetail": 386, "weightsstatist": 386, "welcom": [388, 389, 390, 394, 453, 460, 486], "well": [189, 190, 230, 231, 326, 353, 374, 392, 394, 415, 470, 473, 477, 479, 484], "were": [141, 272, 325, 437, 470], "wget": [394, 417, 423, 425, 453, 456], "what": [146, 172, 198, 240, 325, 353, 374, 389, 471], "when": [31, 40, 50, 56, 134, 139, 141, 166, 172, 177, 184, 185, 186, 200, 201, 209, 216, 242, 243, 251, 257, 266, 296, 297, 319, 353, 374, 389, 392, 396, 414, 415, 431, 442, 444, 445, 448, 452, 453, 456, 457, 458, 460, 464, 470, 473, 476, 479, 481, 482], "where": [31, 141, 185, 186, 268, 272, 321, 325, 371, 385, 397, 413, 417, 418, 444, 448, 452, 479, 480], "whether": [2, 31, 32, 91, 102, 134, 141, 146, 167, 185, 186, 198, 200, 212, 216, 240, 242, 254, 257, 266, 268, 272, 295, 319, 321, 325, 377, 380, 384, 385, 395, 415, 430, 473, 476, 479, 481], "which": [2, 30, 42, 69, 96, 136, 141, 161, 165, 166, 168, 172, 173, 174, 176, 179, 180, 182, 184, 185, 186, 200, 201, 202, 212, 217, 242, 243, 244, 254, 265, 270, 279, 281, 282, 284, 285, 286, 290, 295, 296, 297, 299, 304, 318, 323, 325, 330, 336, 353, 357, 385, 389, 391, 392, 395, 396, 397, 413, 414, 415, 417, 418, 420, 423, 424, 427, 430, 431, 432, 433, 435, 439, 442, 445, 451, 452, 453, 456, 459, 464, 465, 466, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "while": [166, 177, 184, 297, 304, 357, 395, 396, 415, 421, 427, 432, 434, 439, 451, 453, 470, 472, 473, 476, 479], "whisper": 485, "white_nod": 3, "whitelist": 480, "whitespac": [215, 256, 270, 323], "whitespace_token": [215, 256], "whl": [446, 449], "who": [358, 389], "whole": [280, 397, 453, 473, 485], "whose": [150, 167, 296, 334, 426, 479, 482], "why": [479, 480], "wide": [394, 421, 432, 470, 473, 485], "wideresnet40": 485, "width": [171, 212, 216, 254, 257, 295, 413, 420, 470, 473, 481, 484], "wiki": 389, "wikitext": [455, 485], "window": [152, 412, 428, 451, 452], "winogrand": 485, "winter": 479, "wise": [129, 138, 140, 142, 151, 185, 186, 304, 307, 357, 358, 362, 394, 396, 427, 456, 470, 476, 480, 482, 483, 484], "wish": 429, "with_arg": 397, "within": [90, 173, 174, 179, 263, 268, 300, 321, 334, 348, 352, 389, 391, 397, 413, 432, 444, 448, 451, 459, 470, 471, 479, 482], "without": [35, 76, 134, 177, 216, 257, 297, 316, 371, 389, 418, 420, 431, 442, 453, 456, 470, 471, 472, 482, 483], "wmt": 392, "wnli": [200, 242, 415, 430], "won": [186, 473, 476], "word": [265, 318, 430, 470, 476, 485], "word_perplex": 485, "wordpiec": [215, 216, 256, 257, 481], "wordpiecetoken": [215, 256], "work": [186, 263, 300, 393, 396, 414, 418, 446, 449, 457, 475, 476, 477, 479, 480], "worker": [431, 461, 464, 465, 466, 473], "workflow": [394, 396, 397, 417, 418, 422, 428, 432, 446, 449, 453, 480, 483], "workload": [186, 382, 385, 453, 471], "workload_loc": [382, 385], "workload_mod": 382, "workload_nam": 382, "workload_uuid": 382, "workshop": 471, "workspac": [185, 186, 384, 385, 433, 459, 464, 465, 466], "workspace_path": [185, 186], "world": 452, "worth": 470, "would": [390, 431, 455, 470, 473, 479], "wouldn": 457, "wrap": [2, 91, 102, 155, 218, 268, 321, 391, 420, 446, 449], "wrapmxnetmetr": [272, 325], "wraponnxrtmetr": [272, 325], "wrapped_lay": 102, "wrapper": [61, 88, 89, 90, 91, 108, 126, 135, 143, 155, 162, 199, 216, 218, 219, 221, 222, 241, 257, 268, 272, 321, 325, 330, 334, 373, 475], "wrappytorchmetr": [272, 325], "write": [134, 209, 251, 385, 420, 426, 431, 434, 480], "write_graph": 134, "writer": 480, "written": 431, "wt_compare_dict": 136, "www": [202, 244, 415, 485], "x": [2, 41, 60, 166, 185, 186, 199, 216, 241, 257, 304, 357, 372, 413, 417, 420, 432, 433, 459, 460, 464, 465, 467, 473, 474, 479, 480, 481, 483], "x1": [479, 482], "x2": [479, 482], "x86": 432, "x86_64": 412, "x_max": [304, 357], "x_q": 479, "x_scale": 479, "x_tmp": 479, "xdoctest": 141, "xeon": [394, 428, 429, 432, 471, 473, 475, 485], "xgb": 186, "xgboost": 470, "xiao": [476, 479], "xiui": [476, 479], "xlm": [200, 242, 415, 485], "xlnet": [200, 242, 415, 485], "xpu": [186, 442], "xvzf": 417, "xx": 146, "xxx": [202, 244, 415, 431], "xxy": [202, 244, 415], "xxz": [202, 244, 415], "y": [95, 185, 186, 216, 257, 304, 357, 417, 423, 437, 479, 481], "y_dq": 479, "y_max": [304, 357], "y_q": 479, "yaml": [184, 186, 189, 190, 200, 202, 217, 230, 231, 242, 244, 258, 263, 274, 275, 276, 278, 287, 292, 300, 301, 384, 385, 395, 397, 426, 430, 431, 468, 472, 480, 481], "yaml_fil": [385, 415, 420], "yaml_file_path": 420, "yao": 136, "yarn": [444, 448], "year": 429, "yet": [392, 446, 449, 452, 459, 473], "yield": [189, 190, 198, 219, 230, 231, 240, 304, 326, 353, 357, 372, 374, 414, 473, 482], "yolo": 485, "yolov3": 485, "yolov4": 485, "yolov5": 470, "you": [30, 141, 185, 186, 198, 200, 240, 242, 297, 325, 353, 390, 391, 396, 414, 415, 417, 420, 428, 429, 430, 432, 434, 436, 437, 439, 444, 448, 451, 452, 453, 454, 455, 456, 457, 459, 470, 473, 476, 477, 478, 479, 480, 483], "your": [198, 200, 240, 242, 390, 414, 415, 417, 420, 429, 431, 434, 437, 438, 439, 444, 445, 446, 448, 449, 451, 453, 457, 459, 464, 465, 466, 470, 471, 478, 480, 482, 483], "your_node1_nam": 420, "your_node2_nam": 420, "your_patch_path": 438, "your_script": 477, "yourself": 470, "yum": [423, 428], "yvinec": 479, "z": [31, 413, 418, 479], "zafrir": 470, "zero": [4, 31, 32, 172, 184, 216, 257, 297, 385, 394, 456, 470, 473, 476, 479, 481, 482], "zero_grad": [420, 431, 470], "zero_point": [31, 32], "zero_point_nam": 31, "zeropoint": 473, "zfnet": 485, "zhen": 136, "zhewei": 136, "zip": [391, 460, 464, 465], "zo_valu": 31, "zone": 471, "zoo": [199, 216, 241, 257, 394, 421, 425, 485], "zp": [32, 479], "\u03b1": 413, "\u03b2": 413, "\u2776": 396, "\u2777": 396, "\u2778": 396, "\u2779": 396, "\u277a": 396, "\u277b": 396, "\u277c": 396}, "titles": ["block_mask", "neural_compressor.adaptor.mxnet_utils", "neural_compressor.adaptor.mxnet_utils.util", "neural_compressor.adaptor.ox_utils.calibration", "neural_compressor.adaptor.ox_utils.calibrator", "neural_compressor.adaptor.ox_utils", "neural_compressor.adaptor.ox_utils.operators.activation", "neural_compressor.adaptor.ox_utils.operators.argmax", "neural_compressor.adaptor.ox_utils.operators.attention", "neural_compressor.adaptor.ox_utils.operators.binary_op", "neural_compressor.adaptor.ox_utils.operators.concat", "neural_compressor.adaptor.ox_utils.operators.conv", "neural_compressor.adaptor.ox_utils.operators.direct_q8", "neural_compressor.adaptor.ox_utils.operators.embed_layernorm", "neural_compressor.adaptor.ox_utils.operators.gather", "neural_compressor.adaptor.ox_utils.operators.gavgpool", "neural_compressor.adaptor.ox_utils.operators.gemm", "neural_compressor.adaptor.ox_utils.operators", "neural_compressor.adaptor.ox_utils.operators.lstm", "neural_compressor.adaptor.ox_utils.operators.matmul", "neural_compressor.adaptor.ox_utils.operators.maxpool", "neural_compressor.adaptor.ox_utils.operators.norm", "neural_compressor.adaptor.ox_utils.operators.ops", "neural_compressor.adaptor.ox_utils.operators.pad", "neural_compressor.adaptor.ox_utils.operators.pooling", "neural_compressor.adaptor.ox_utils.operators.reduce", "neural_compressor.adaptor.ox_utils.operators.resize", "neural_compressor.adaptor.ox_utils.operators.split", "neural_compressor.adaptor.ox_utils.operators.unary_op", "neural_compressor.adaptor.ox_utils.quantizer", "neural_compressor.adaptor.ox_utils.smooth_quant", "neural_compressor.adaptor.ox_utils.util", "neural_compressor.adaptor.ox_utils.weight_only", "neural_compressor.adaptor.tensorflow", "neural_compressor.adaptor.tf_utils.graph_converter", "neural_compressor.adaptor.tf_utils.graph_converter_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", "neural_compressor.adaptor.tf_utils.graph_rewriter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.adaptor.tf_utils.graph_util", "neural_compressor.adaptor.tf_utils", "neural_compressor.adaptor.tf_utils.quantize_graph", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", "neural_compressor.adaptor.tf_utils.quantize_graph.qat", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph_common", "neural_compressor.adaptor.tf_utils.smooth_quant_calibration", "neural_compressor.adaptor.tf_utils.smooth_quant_scaler", "neural_compressor.adaptor.tf_utils.tf2onnx_converter", "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", "neural_compressor.adaptor.tf_utils.transform_graph", "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", "neural_compressor.adaptor.tf_utils.util", "neural_compressor.adaptor.torch_utils.bf16_convert", "neural_compressor.adaptor.torch_utils.hawq_metric", "neural_compressor.adaptor.torch_utils", "neural_compressor.adaptor.torch_utils.layer_wise_quant", "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", "neural_compressor.adaptor.torch_utils.model_wrapper", "neural_compressor.adaptor.torch_utils.pattern_detector", "neural_compressor.adaptor.torch_utils.symbolic_trace", "neural_compressor.adaptor.torch_utils.util", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.logger", "neural_compressor.compression.callbacks", "neural_compressor.compression.distillation.criterions", "neural_compressor.compression.distillation", "neural_compressor.compression.distillation.optimizers", "neural_compressor.compression.distillation.utility", "neural_compressor.compression.hpo", "neural_compressor.compression.hpo.sa_optimizer", "neural_compressor.compression.pruner.criteria", "neural_compressor.compression.pruner", "neural_compressor.compression.pruner.model_slim.auto_slim", "neural_compressor.compression.pruner.model_slim", "neural_compressor.compression.pruner.model_slim.pattern_analyzer", "neural_compressor.compression.pruner.model_slim.weight_slim", "neural_compressor.compression.pruner.patterns.base", "neural_compressor.compression.pruner.patterns", "neural_compressor.compression.pruner.patterns.mha", "neural_compressor.compression.pruner.patterns.ninm", "neural_compressor.compression.pruner.patterns.nxm", "neural_compressor.compression.pruner.pruners.base", "neural_compressor.compression.pruner.pruners.basic", "neural_compressor.compression.pruner.pruners.block_mask", "neural_compressor.compression.pruner.pruners", "neural_compressor.compression.pruner.pruners.mha", "neural_compressor.compression.pruner.pruners.pattern_lock", "neural_compressor.compression.pruner.pruners.progressive", "neural_compressor.compression.pruner.pruners.retrain_free", "neural_compressor.compression.pruner.pruning", "neural_compressor.compression.pruner.regs", "neural_compressor.compression.pruner.schedulers", "neural_compressor.compression.pruner.tf_criteria", "neural_compressor.compression.pruner.utils", "neural_compressor.conf.pythonic_config", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.dataloaders.base_dataloader", "neural_compressor.data.dataloaders.dataloader", "neural_compressor.data.dataloaders.default_dataloader", "neural_compressor.data.dataloaders.fetcher", "neural_compressor.data.dataloaders.mxnet_dataloader", "neural_compressor.data.dataloaders.onnxrt_dataloader", "neural_compressor.data.dataloaders.pytorch_dataloader", "neural_compressor.data.dataloaders.sampler", "neural_compressor.data.dataloaders.tensorflow_dataloader", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.profiling.parser.factory", "neural_compressor.profiling.parser.onnx_parser.factory", "neural_compressor.profiling.parser.onnx_parser.parser", "neural_compressor.profiling.parser.parser", "neural_compressor.profiling.parser.result", "neural_compressor.profiling.parser.tensorflow_parser.factory", "neural_compressor.profiling.parser.tensorflow_parser.parser", "neural_compressor.profiling.profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.profiler", "neural_compressor.profiling.profiler.onnxrt_profiler.utils", "neural_compressor.profiling.profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.factory", "neural_compressor.profiling.profiler.tensorflow_profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.utils", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.template.api_doc_example", "neural_compressor.torch.quantization.modules", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "titleterms": {"": [428, 452, 458], "0": 485, "1": [392, 420, 423, 426, 431, 451, 458, 459, 485], "13": 485, "15": [471, 485], "2": [392, 420, 423, 426, 431, 451, 458, 459, 485], "2018": 471, "2020": 471, "2021": 471, "2022": 471, "2023": 471, "24": 471, "3": [423, 435, 451], "35": 471, "4": [423, 442, 451, 471], "5": 451, "64": 428, "78": 471, "For": 435, "One": 469, "Or": 445, "With": 473, "abil": 397, "accept": 390, "access": 472, "accord": [396, 397], "accuraci": [432, 454, 456, 473, 482], "activ": [6, 454], "ad": 395, "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 395, 396, 398], "add": [396, 459], "addit": 394, "advanc": [392, 457, 483], "ai": 428, "algorithm": [147, 148, 149, 150, 151, 413, 476, 479, 482], "alpha": 479, "amazon": 435, "an": [396, 464, 465, 466], "analyz": [454, 456, 457], "api": [392, 394, 395, 396, 401, 402, 412, 414, 415, 418, 419, 420, 425, 426, 430, 432, 434, 438, 452, 453, 460, 466, 468, 469, 470, 472, 483], "api_doc_exampl": 372, "app": 457, "appendix": 422, "approach": 473, "architectur": [392, 416, 427, 428], "argmax": 7, "argument": 439, "ask": 423, "attent": 8, "attribut": [202, 244, 372, 389], "auto": [354, 445, 451, 475, 479, 482], "auto_mixed_precis": [302, 355], "auto_slim": 163, "autom": [446, 449], "avail": 457, "aw": 435, "awai": 452, "awar": [391, 431, 470, 473], "backend": [395, 473], "background": [395, 451], "base": [167, 172, 428, 460, 483], "base_dataload": [191, 232], "base_model": 327, "basic": [173, 303, 356, 392, 482], "basic_na": 275, "bayesian": [304, 357, 482], "bench": 438, "benchmark": [152, 217, 403, 412, 417, 431, 472], "benefit": 478, "bert_dataset": [200, 242], "best": [437, 445], "between": 426, "bf16": [36, 37, 38, 432], "bf16_convert": [36, 135], "bias_correct": 129, "bigdl": 436, "binari": 428, "binary_op": 9, "bleu": [265, 318], "bleu_util": [266, 319], "block_mask": [0, 174], "build": [414, 423, 430, 457, 458, 459], "built": [426, 428, 430], "bundl": 457, "calcul": 396, "calibr": [3, 4, 396, 413], "callback": 154, "capabl": [395, 476], "chang": [397, 426, 450, 452, 477], "changelog": [443, 447], "channel": 479, "check": 390, "checklist": 390, "citat": 429, "class": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 140, 143, 144, 147, 148, 150, 151, 153, 154, 155, 157, 161, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 263, 265, 268, 272, 273, 274, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 321, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 383, 385, 386, 395, 461], "client": 467, "cluster": [459, 460], "coco_dataset": [201, 243], "coco_filt": [208, 250], "coco_label_map": [267, 320], "coco_tool": [268, 321], "code": [389, 390, 392, 431, 452, 457, 476, 483], "coder": [434, 438, 440, 451, 483], "collabor": 453, "collect_layer_histogram": 375, "common": [153, 218, 219, 220, 221, 222, 223, 224, 225, 391, 423], "commun": 394, "comparison": 478, "compat": 428, "compon": 226, "compress": [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 227, 404, 476], "compressor": [388, 391, 394, 414, 417, 427, 428, 430, 431, 445, 451, 478, 486], "concat": 10, "conda": [446, 449], "conduct": [389, 390], "conf": 185, "config": [186, 405, 415, 468], "configur": [397, 420, 424, 457, 472, 478, 484], "conserv": [358, 482], "constant": [311, 366, 376], "contact": [434, 458], "content": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 394, 461], "contrib": [187, 188, 189, 190, 228, 229, 230, 231], "contribut": [390, 444, 448], "contributor": [389, 390], "control": 437, "conv": 11, "convert_add_to_biasadd": 39, "convert_layout": 40, "convert_leakyrelu": 41, "convert_nan_to_random": 42, "convert_placeholder_to_const": 43, "coven": [389, 390], "cpu": [428, 437, 485], "creat": [390, 457], "create_obj_from_config": 377, "criteria": [161, 390, 470, 482], "criterion": [155, 218], "custom": [392, 414, 430, 464, 482], "data": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 396, 397, 417, 421, 455], "dataload": [191, 192, 193, 194, 195, 196, 197, 198, 199, 219, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 414, 415], "dataset": [200, 201, 202, 203, 204, 205, 206, 207, 242, 243, 244, 245, 246, 247, 248, 249, 415, 417, 426, 456], "debug": [454, 456], "decai": 470, "default_dataload": [193, 234], "defin": [397, 420], "definit": 461, "deploy": [457, 470], "dequantize_cast_optim": 37, "descript": [417, 460, 462], "design": [396, 416, 461, 482], "detail": 391, "develop": [444, 448], "devic": 473, "diagnosi": [417, 453], "diagram": 461, "differ": 478, "dilated_contract": 44, "direct_q8": 12, "distil": [155, 156, 157, 158, 258, 418, 419, 431, 472, 485], "distribut": [420, 440, 482], "do": [417, 434], "doc": 461, "document": [388, 394, 401, 486], "doe": 458, "download": [460, 464, 465], "driven": 432, "dummy_biasadd": 45, "dummy_dataset": [203, 245], "dummy_dataset_v2": [204, 246], "dump": [453, 455], "dure": [432, 475], "dyna": 276, "dynam": [391, 392, 473], "eject": 457, "embed_layernorm": 13, "enabl": [438, 445, 451], "end": [458, 464, 465, 466], "endpoint": 460, "enforc": 389, "engin": 479, "enhanc": 479, "environ": [428, 437], "evalu": 420, "evaluate_squad": [269, 322], "event": [394, 471], "exampl": [391, 392, 395, 401, 412, 414, 415, 417, 418, 419, 420, 421, 422, 430, 431, 432, 433, 436, 440, 453, 454, 455, 456, 458, 463, 464, 465, 466, 468, 469, 470, 473, 474, 476, 479, 480, 485], "except": 139, "execut": 420, "exhaust": [305, 359, 482], "exit": 482, "expanddims_optim": 46, "experiment": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "explor": 452, "export": [259, 260, 261, 262, 422, 476], "extens": [434, 444, 445, 448, 451, 452, 461, 485], "f1": [270, 323], "face": [426, 465, 466], "factori": [338, 339, 343, 345, 346, 350], "fail": 457, "fake_quant": 99, "fallback": 417, "fast_bias_correct": 148, "featur": [417, 420, 424, 427, 440, 441, 445, 472, 473, 480, 484], "fetch_weight_from_reshap": 47, "fetcher": [194, 235], "few": 397, "file": [415, 424, 484], "filter": [208, 209, 210, 250, 251, 252], "flow": [395, 473], "fold_batch_norm": 48, "fold_const": 49, "folder": 452, "forg": [446, 449], "fp16": 432, "fp32": [396, 422], "framework": [396, 414, 415, 422, 424, 433, 472, 474, 476, 479], "free": 470, "freeze_fake_qu": 74, "freeze_valu": 75, "freeze_value_without_calib": 76, "frequenc": 437, "frequent": 423, "from": [394, 396, 428, 431, 453, 458, 459], "full": 471, "function": [2, 4, 22, 30, 31, 32, 53, 54, 56, 90, 91, 102, 104, 134, 135, 136, 141, 142, 145, 146, 147, 152, 153, 155, 157, 158, 161, 162, 163, 165, 167, 168, 172, 175, 180, 181, 182, 183, 184, 192, 193, 200, 202, 209, 215, 216, 217, 218, 222, 223, 225, 234, 242, 244, 251, 256, 257, 260, 261, 262, 265, 266, 268, 269, 270, 272, 279, 286, 290, 295, 296, 297, 299, 304, 310, 314, 316, 318, 319, 321, 322, 323, 325, 326, 330, 334, 336, 348, 352, 353, 357, 365, 369, 371, 372, 374, 377, 380, 381, 382, 384, 385, 420], "fundament": [473, 479], "further": 452, "fuse_biasadd_add": 50, "fuse_column_wise_mul": 51, "fuse_conv_redundant_dequant": 77, "fuse_conv_requant": 78, "fuse_conv_with_math": 52, "fuse_decomposed_bn": 53, "fuse_decomposed_in": 54, "fuse_gelu": 55, "fuse_layer_norm": 56, "fuse_matmul_redundant_dequant": 79, "fuse_matmul_requant": 80, "fuse_pad_with_conv": 57, "fuse_pad_with_fp32_conv": 58, "fuse_qdq_bn": 109, "fuse_qdq_concatv2": 110, "fuse_qdq_conv": 111, "fuse_qdq_deconv": 112, "fuse_qdq_in": 113, "fuse_qdq_matmul": 114, "fuse_qdq_pool": 115, "fuse_reshape_transpos": 59, "fx": 391, "gather": 14, "gavgpool": 15, "gemm": 16, "gener": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 396], "get": [391, 392, 394, 395, 412, 414, 415, 417, 418, 419, 420, 424, 425, 430, 432, 434, 445, 452, 453, 457, 458, 459, 460, 468, 469, 470, 472, 473, 480, 484], "go": 452, "govern": 437, "gpu": 428, "gradient_sensit": 281, "graph": 396, "graph_bas": 72, "graph_convert": 34, "graph_converter_without_calib": 35, "graph_cse_optim": 60, "graph_optim": 263, "graph_rewrit": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "graph_transform_bas": 130, "graph_util": 96, "grappler_pass": 61, "group_lasso": 282, "grpc": 466, "guid": [435, 483], "guidelin": 390, "hardwar": [428, 432, 485], "hawq_metr": 136, "hawq_v2": [360, 482], "help": 445, "highlight": 442, "histogram": 456, "horovodrun": 420, "how": [396, 397, 417, 454, 455, 456, 458], "hpo": [159, 160], "hug": [465, 466], "hyperparamet": 470, "icon": 451, "imagenet_dataset": [205, 247], "imagenet_transform": [212, 254], "implement": [395, 396], "incompat": [426, 477], "infer": 420, "inform": 429, "infrastructur": 427, "innov": 483, "insert_log": 132, "insert_print_nod": 63, "insert_qdq_pattern": 93, "insight": [453, 454, 455, 456], "inspect": 459, "instal": [394, 417, 428, 435, 437, 444, 445, 448, 453, 458, 459], "instanc": 435, "int4": 397, "int8": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 422, 485], "intel": [388, 394, 414, 417, 427, 428, 430, 431, 437, 445, 451, 485, 486], "intermedi": 418, "introduct": [391, 392, 395, 396, 397, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 427, 430, 432, 433, 451, 454, 455, 456, 468, 469, 470, 472, 473, 474, 476, 478, 479, 480, 481, 482, 484], "invok": 397, "ipex": 473, "issu": [423, 477], "iter": 396, "jemalloc": 437, "jupyt": [434, 435, 446, 449], "jupyterlab": 445, "keras_model": 329, "kernel": 397, "kit": 428, "kl_diverg": 379, "knowledg": [418, 485], "known": 477, "lab": [434, 435], "languag": 470, "larg": 470, "launcher": [434, 439], "layer": [418, 474, 479], "layer_wise_qu": [138, 139, 140, 141, 142], "learn": [457, 458], "legal": 429, "let": 445, "licens": 429, "like": 397, "limit": 479, "line": 397, "list": [396, 421, 463, 481], "load_huggingfac": 380, "log": [450, 459, 460], "logger": [153, 294, 381], "lstm": 18, "lwq": 474, "magnitud": 284, "make": [446, 449, 452, 457], "manag": [459, 464, 465], "manual": [446, 449], "matmul": [19, 479], "matrix": [391, 392, 395, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 427, 430, 432, 433, 436, 468, 469, 470, 472, 473, 474, 476, 479, 480, 484], "maxpool": 20, "merge_duplicated_qdq": 94, "meta_op_optim": 82, "method": [458, 459], "metric": [221, 265, 266, 267, 268, 269, 270, 271, 272, 318, 319, 320, 321, 322, 323, 324, 325, 426, 430], "mha": [169, 176], "migrat": 431, "minifi": 457, "mix": [406, 431, 432, 475], "mix_precis": 326, "mixed_precis": 273, "mkl": 437, "mode": [391, 485], "model": [222, 327, 328, 329, 330, 331, 332, 333, 334, 335, 396, 407, 422, 425, 428, 431, 433, 440, 454, 455, 456, 464, 465, 466, 470, 474, 476, 479, 485], "model_convers": 274, "model_slim": [163, 164, 165, 166], "model_wrapp": 143, "modifi": 417, "modified_pickl": 139, "modul": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386], "more": [457, 458], "move_squeeze_after_relu": 64, "mse": [307, 362, 482], "mse_v2": [308, 363, 482], "multipl": [428, 468, 485], "mxnet": [415, 430, 473, 481], "mxnet_dataload": [195, 237], "mxnet_model": 331, "mxnet_util": [1, 2], "na": [275, 276, 277, 278, 279, 280, 392, 472], "nano": 436, "nas_util": 279, "need": 396, "nets_factori": 332, "network": 470, "neural": [388, 391, 392, 394, 414, 417, 427, 428, 430, 431, 434, 438, 440, 445, 451, 453, 454, 455, 456, 458, 459, 460, 464, 465, 466, 470, 478, 483, 486], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], "neural_compressor_ext_lab": [444, 446], "neural_compressor_ext_lab_alibaba": [448, 449], "neural_insights_util": 382, "new": [395, 397, 446, 449, 482], "ninm": 170, "node": 459, "norm": 21, "note": [391, 477], "notebook": 435, "npm": [446, 449, 457], "numa": 437, "nxm": 171, "oaa": 461, "object": [336, 408, 464, 465, 466, 468], "off": 475, "offer": 434, "onli": [392, 476], "onnx": [87, 88, 89, 90, 91, 399, 428, 473, 474, 485], "onnx_graph": 88, "onnx_model": 333, "onnx_nod": 89, "onnx_pars": [339, 340], "onnx_schema": 90, "onnxrt": [415, 430, 481], "onnxrt_dataload": [196, 238], "onnxrt_profil": [346, 347, 348], "onnxrtadaptor": 395, "op": [22, 422], "open": [451, 456], "openmp": 437, "oper": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 396, 397], "optim": [157, 223, 441, 451, 461, 464, 465, 466, 469, 470, 483], "optimize_lay": 104, "optimize_qdq": 117, "option": [383, 420, 439], "orchestr": [431, 469], "other": 442, "our": [389, 479], "overview": [390, 461, 483], "ox_util": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "packag": [162, 168, 175, 444, 446, 448, 449], "pad": 23, "paramet": [417, 460], "parser": [338, 339, 340, 341, 342, 343, 344], "pattern": [167, 168, 169, 170, 171, 289, 290, 291, 295, 470], "pattern_analyz": 165, "pattern_detector": 144, "pattern_lock": [177, 285], "per": 479, "perform": [437, 478], "ping": 460, "pip": [458, 459], "platform": [437, 478], "pledg": 389, "polici": [393, 482], "pool": 24, "post": [391, 431, 460, 473], "post_hostconst_convert": 83, "post_quantized_op_cs": 84, "postprocess": [214, 224], "pre": 445, "pre_optim": 65, "precis": [406, 431, 432, 475], "prepar": [396, 417, 454, 455, 456, 478], "prerequisit": [428, 458, 459], "problem": 391, "process": 482, "processor": 428, "product": 483, "profil": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 417], "progress": [178, 457], "prune": [180, 287, 298, 431, 470, 472, 485], "prune_util": 296, "pruner": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 286, 297], "pruner_legaci": [281, 282, 283, 284, 285, 286], "pruning_recip": [288, 289, 290, 291], "pruning_v2": 292, "ptq": 485, "public": [394, 471], "publish": [446, 449], "pull": 390, "pure": 420, "pypi": [394, 440, 453], "python": [392, 394, 414, 425, 430, 434, 438, 439, 446, 449, 453, 472, 483], "pythonic_config": 185, "pytorch": [384, 415, 420, 422, 430, 455, 473, 474, 475, 480, 481, 485], "pytorch_dataload": [197, 239], "pytorch_prun": [293, 294, 295, 296, 297, 298, 299], "qat": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 485], "qdq": [92, 93, 94, 95, 109, 110, 111, 112, 113, 114, 115, 116, 117, 485], "qlinear2qdq": 260, "quant": 479, "quantiz": [29, 140, 300, 353, 373, 391, 394, 396, 397, 409, 413, 417, 419, 422, 425, 428, 431, 432, 440, 451, 453, 454, 455, 456, 464, 465, 466, 472, 473, 474, 475, 476, 479, 485], "quantize_config": 101, "quantize_graph": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "quantize_graph_bas": 118, "quantize_graph_bn": 119, "quantize_graph_common": 125, "quantize_graph_concatv2": 120, "quantize_graph_conv": 121, "quantize_graph_for_intel_cpu": 122, "quantize_graph_matmul": 123, "quantize_graph_pool": 124, "quantize_help": 102, "quantize_lay": [103, 104, 105, 106, 107], "quantize_layer_add": 105, "quantize_layer_bas": 106, "quantize_layer_bn": 107, "quantize_wrapp": 108, "queri": [395, 459, 464, 465, 466], "query_fw_cap": 396, "question": 423, "quick": [425, 439], "random": [309, 364, 482], "rang": 396, "react": 457, "recip": 473, "reduc": 25, "refer": [413, 470, 473, 476, 479], "reg": 181, "regular": 470, "releas": [421, 446, 449, 477], "remov": 459, "remove_training_nod": 66, "rename_batch_norm": 67, "report": 393, "request": [390, 432, 462], "requir": [428, 444, 448, 454, 455, 456, 464], "requisit": 445, "rerange_quantized_concat": 133, "research": 453, "resiz": 26, "resourc": [459, 464, 465], "respons": [389, 460], "result": [342, 454, 456, 464, 465, 466], "retrain": 470, "retrain_fre": 179, "rnn_convert": 85, "rule": 473, "run": [396, 417, 452, 454, 455, 456, 457], "runtim": [399, 428, 473, 474, 485], "sa_optim": 160, "sagemak": 435, "sampl": [396, 425], "sampler": [198, 240], "scale_propag": 86, "schedul": [182, 299, 301, 470], "scheme": 473, "scope": [389, 470], "screen": 460, "script": [417, 457], "search": [392, 451], "search_algorithm": 280, "section": [388, 486], "secur": [393, 420], "see": 417, "select": [394, 445], "self": 418, "servic": [459, 461, 464, 465, 466], "set": [417, 437, 451], "setup": 452, "share_qdq_y_pattern": 95, "shot": 469, "sigopt": [189, 230, 478, 482], "singl": 468, "size": 457, "smooth": 479, "smooth_quant": [30, 150], "smooth_quant_calibr": 126, "smooth_quant_scal": 127, "smoothquant": 479, "softwar": [428, 432], "solut": [458, 459, 460, 464, 465, 466], "sourc": [428, 453, 455, 456, 458, 459], "space": 482, "spars": 470, "sparsiti": 470, "specif": [397, 415], "specifi": 473, "split": [27, 457], "split_shared_input": 68, "standard": 389, "start": [391, 392, 394, 395, 412, 414, 415, 417, 418, 419, 420, 424, 425, 430, 432, 434, 435, 439, 445, 453, 457, 458, 459, 464, 465, 466, 468, 469, 470, 472, 473, 480, 484], "state": 459, "static": [391, 473], "statu": [390, 459, 460], "step": [390, 453, 454, 455, 456], "stop": [459, 464, 465, 466], "straight": 452, "strategi": [188, 189, 190, 229, 230, 231, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 410, 478, 482], "strip_equivalent_nod": 69, "strip_unused_nod": 70, "studio": 435, "style": 472, "style_transfer_dataset": [207, 249], "submit": [459, 460, 464, 465, 466], "submodul": [1, 5, 17, 38, 62, 73, 81, 87, 92, 97, 98, 100, 103, 116, 131, 137, 138, 149, 156, 159, 162, 164, 168, 175, 188, 206, 210, 213, 220, 229, 236, 248, 252, 255, 259, 264, 271, 277, 283, 289, 293, 306, 312, 317, 324, 328, 361, 367, 378], "subpackag": [5, 73, 97, 98, 100, 137, 162, 187, 211, 228, 253, 264, 288, 306, 317, 361], "suggest": 417, "summari": [397, 454], "superbench": 438, "support": [390, 391, 392, 395, 397, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 427, 428, 430, 432, 433, 435, 436, 440, 441, 468, 469, 470, 472, 473, 474, 476, 479, 480, 481, 484], "switch_optim": 71, "symbolic_trac": 145, "system": 428, "task": [459, 460, 462, 464, 465, 466], "task_id": 460, "templat": [372, 390], "tensor": [453, 479], "tensorboard": 480, "tensorflow": [33, 415, 420, 422, 430, 473, 475, 480, 481, 485], "tensorflow_dataload": [199, 241], "tensorflow_model": 334, "tensorflow_pars": [343, 344], "tensorflow_profil": [350, 351, 352], "test": [452, 457], "tf2onnx": 261, "tf2onnx_convert": 128, "tf2onnx_util": 91, "tf_criteria": 183, "tf_util": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "through": [428, 485], "tile_pattern": 291, "token": [215, 256], "topic": 483, "torch": [373, 400, 485], "torch2onnx": 262, "torch_load": 141, "torch_model": 335, "torch_util": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 225], "tpe": [190, 231, 482], "trademark": 429, "train": [374, 391, 411, 420, 431, 470, 473], "transform": [212, 213, 214, 215, 216, 254, 255, 256, 257, 426, 481], "transform_graph": [129, 130, 131, 132, 133], "tune": [397, 473, 476, 479, 482], "tune_cfg": 396, "tuning_sampl": [313, 368], "tuning_spac": [314, 369], "tuning_struct": [315, 370], "turn": 475, "type": [397, 470], "u": 445, "unary_op": 28, "uninstal": [444, 448], "unreleas": 450, "up": 452, "url": 460, "us": [397, 414, 430, 458, 459], "usag": [392, 440, 451, 460, 480, 482], "user": [415, 420, 426, 472, 476, 483, 484], "util": [2, 31, 134, 142, 146, 158, 184, 311, 312, 313, 314, 315, 316, 348, 352, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 400], "v": 452, "v0": 442, "v1": 426, "valid": [425, 428, 479, 485], "variabl": 437, "vendor": 428, "version": 387, "vscode": 451, "vulner": 393, "we": 434, "web": 457, "websocket": 460, "weight": [454, 455, 456, 476], "weight_correct": 151, "weight_onli": 32, "weight_slim": 166, "weights_detail": 386, "welcom": 452, "what": [434, 452, 458], "why": 458, "wip": 461, "wise": [474, 479], "without": 473, "woq": [476, 485], "work": [395, 458, 473], "workflow": [416, 461], "x": 431, "xe": 428, "yaml": [392, 396, 415, 420, 424, 484], "you": 445, "your": 452, "zero": 483}})