neural_compressor.torch.utils.auto_accelerator
==============================================

.. py:module:: neural_compressor.torch.utils.auto_accelerator

.. autoapi-nested-parse::

   Auto Accelerator Module.



Classes
-------

.. autoapisummary::

   neural_compressor.torch.utils.auto_accelerator.AcceleratorRegistry
   neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator
   neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator
   neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator
   neural_compressor.torch.utils.auto_accelerator.XPU_Accelerator
   neural_compressor.torch.utils.auto_accelerator.HPU_Accelerator


Functions
---------

.. autoapisummary::

   neural_compressor.torch.utils.auto_accelerator.register_accelerator
   neural_compressor.torch.utils.auto_accelerator.auto_detect_accelerator


Module Contents
---------------

.. py:class:: AcceleratorRegistry

   Accelerator Registry.


.. py:function:: register_accelerator(name: str, priority: float = 0) -> Callable[Ellipsis, Any]

   Register new accelerator.

   Usage example:
       @register_accelerator(name="cuda", priority=100)
       class CUDA_Accelerator:
           ...

   :param name: the accelerator name.
   :param priority: the priority of the accelerator. A larger number indicates a higher priority,


.. py:class:: Auto_Accelerator



   Auto Accelerator Base class.


.. py:class:: CPU_Accelerator



   CPU Accelerator.


.. py:class:: CUDA_Accelerator



   CUDA Accelerator.


.. py:class:: XPU_Accelerator



   XPU Accelerator.


.. py:class:: HPU_Accelerator



   HPU Accelerator.


.. py:function:: auto_detect_accelerator(device_name='auto') -> Auto_Accelerator

   Automatically detects and selects the appropriate accelerator.

   Force use the cpu on node has both cpu and gpu: `INC_TARGET_DEVICE=cpu` python main.py ...
   The `INC_TARGET_DEVICE` is case insensitive.
   The environment variable `INC_TARGET_DEVICE` has higher priority than the `device_name`.
   TODO: refine the docs and logic later


